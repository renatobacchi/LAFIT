#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: cfba2739-092a-48d5-9ae9-9fc3160d1664
# Source File: C:\GIT\PST\Powershell Toolkit.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ggQAAB+LCAAAAAAABACllNtOg0AQhu+b9B0I9xRoa5WEbqI9qIm2TUu9MjFbGCp22SW7oPbtXY5B
jA1NL/+Z+b+Z3R2w1+CyT+DHKY4x6nYUxV5x9gFunAkpX4CLgFFk9kxbL0WRmwcEHqfI9Xe4fz2w
NMPqY214411pFgZLs3x3YI4MzxyNhrZeFBfWootzjAAZtl6XJZwRT7YrZBVAHmjTmcTlqpkFqs0W
/2ald/JwyrvdNLKlFPUz14eSUlmDDxyoCwscwlhVlbskIN5YNVS0iTGPk6gXCZFfwWnrBBOiPeOA
zhkP3yLh11llXML81rB7wnaYSJRZQykTFoaYerPvGGj6omPV4QmoKK8WsoPZusPtjiVxc9YseNag
yyiWg4gmqAifhXKwOMjj4T3wJq6Waous7KaaL9/rE6b7RCIkwWt1T3VEtqGXIbI1vniK7eYEIhf5
olefZ66WPNgHFJO0IAWjFfuSH8g7EKI4jJFDkD58JC22/qe227H1X/+cH9t7gDOCBAAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.97
     Generated on:       21.11.2015 21:27
     Generated by:        
     Organization:        
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2015
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
SwQAAB+LCAAAAAAABAC9lEtLAzEQgO+C/yH0vOzD7boWsgtS6UXQ4kr1mk1nS2geZZK07L93W0sV
PYiFhlwyEzIfH8MMfQFutoD9A3OMDBcrjK5GN6P6+ooQ+oxiJTSTMyHhiSmoG8fQ+U28sZYmv14P
f+6tBdVKAfYQf2X6WlluUIo2IosjaRyn+xORqZfOI1QavEMmIzL3Qw3+CP2rWYOu2rJkBS9us0k+
hvRuQpNT1Z+UprcOVAhG/Cb00uxsPDOobBDivk9hQMh2Qq/OYaV5V3Rll2XLImU5+5v1rmQYJ4HA
ncG+AdwKDme17N92U4MQRO9oNUczqF3A7RR+zjZNvi+P+gNBqg7+SwQAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
P68bbNKOHwQA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms.DataVisualization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$richtextbox_output = New-Object 'System.Windows.Forms.RichTextBox'
	$tabcontrol_Home = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox15 = New-Object 'System.Windows.Forms.GroupBox'
	$button_deleteGPO = New-Object 'System.Windows.Forms.Button'
	$button_gpresult = New-Object 'System.Windows.Forms.Button'
	$Button_gpupdate = New-Object 'System.Windows.Forms.Button'
	$groupbox14 = New-Object 'System.Windows.Forms.GroupBox'
	$button_export = New-Object 'System.Windows.Forms.Button'
	$button_clear = New-Object 'System.Windows.Forms.Button'
	$groupbox13 = New-Object 'System.Windows.Forms.GroupBox'
	$button_nbbattery = New-Object 'System.Windows.Forms.Button'
	$buttonFixWMI = New-Object 'System.Windows.Forms.Button'
	$button_shutdown = New-Object 'System.Windows.Forms.Button'
	$button_C = New-Object 'System.Windows.Forms.Button'
	$button_WOL = New-Object 'System.Windows.Forms.Button'
	$groupbox12 = New-Object 'System.Windows.Forms.GroupBox'
	$button_logoff_user = New-Object 'System.Windows.Forms.Button'
	$button_get_session = New-Object 'System.Windows.Forms.Button'
	$button_Userunlock = New-Object 'System.Windows.Forms.Button'
	$button_ResetPWD = New-Object 'System.Windows.Forms.Button'
	$groupbox11 = New-Object 'System.Windows.Forms.GroupBox'
	$button_DNScheck = New-Object 'System.Windows.Forms.Button'
	$button_ping4 = New-Object 'System.Windows.Forms.Button'
	$button_ipconfig = New-Object 'System.Windows.Forms.Button'
	$groupbox9 = New-Object 'System.Windows.Forms.GroupBox'
	$button_regedit = New-Object 'System.Windows.Forms.Button'
	$button_cmd = New-Object 'System.Windows.Forms.Button'
	$button_psremote = New-Object 'System.Windows.Forms.Button'
	$button_MSRA = New-Object 'System.Windows.Forms.Button'
	$button_Remotecontrol = New-Object 'System.Windows.Forms.Button'
	$button_rdp = New-Object 'System.Windows.Forms.Button'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox16 = New-Object 'System.Windows.Forms.GroupBox'
	$button_hotfix = New-Object 'System.Windows.Forms.Button'
	$groupbox7 = New-Object 'System.Windows.Forms.GroupBox'
	$button_MMCServices = New-Object 'System.Windows.Forms.Button'
	$button_compmgmt = New-Object 'System.Windows.Forms.Button'
	$groupbox6 = New-Object 'System.Windows.Forms.GroupBox'
	$button_localadmins = New-Object 'System.Windows.Forms.Button'
	$button_folderrights = New-Object 'System.Windows.Forms.Button'
	$button_profilerights = New-Object 'System.Windows.Forms.Button'
	$button_homerights = New-Object 'System.Windows.Forms.Button'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$button_PCGroups = New-Object 'System.Windows.Forms.Button'
	$button_ComputerGroups = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$button_autostart = New-Object 'System.Windows.Forms.Button'
	$button_installedSoftware = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$button_printer = New-Object 'System.Windows.Forms.Button'
	$button_USBDevice = New-Object 'System.Windows.Forms.Button'
	$button_systemtype = New-Object 'System.Windows.Forms.Button'
	$button_memory = New-Object 'System.Windows.Forms.Button'
	$button_processor = New-Object 'System.Windows.Forms.Button'
	$button_mainboard = New-Object 'System.Windows.Forms.Button'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox19 = New-Object 'System.Windows.Forms.GroupBox'
	$button_ipconfig2 = New-Object 'System.Windows.Forms.Button'
	$button_testport = New-Object 'System.Windows.Forms.Button'
	$button_hosts = New-Object 'System.Windows.Forms.Button'
	$button_routetable = New-Object 'System.Windows.Forms.Button'
	$button_checkWLAN = New-Object 'System.Windows.Forms.Button'
	$tabpage4 = New-Object 'System.Windows.Forms.TabPage'
	$chart1 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Chart'
	$groupbox21 = New-Object 'System.Windows.Forms.GroupBox'
	$labelPleaseEnterFileExten = New-Object 'System.Windows.Forms.Label'
	$button_process_stop = New-Object 'System.Windows.Forms.Button'
	$button_process_start = New-Object 'System.Windows.Forms.Button'
	$textbox_Process = New-Object 'System.Windows.Forms.TextBox'
	$groupbox20 = New-Object 'System.Windows.Forms.GroupBox'
	$button_cpuram = New-Object 'System.Windows.Forms.Button'
	$button_taskmanager = New-Object 'System.Windows.Forms.Button'
	$button_process_cmd = New-Object 'System.Windows.Forms.Button'
	$button_process_grid = New-Object 'System.Windows.Forms.Button'
	$button_process_owner = New-Object 'System.Windows.Forms.Button'
	$button_process_100 = New-Object 'System.Windows.Forms.Button'
	$button_proclasthour = New-Object 'System.Windows.Forms.Button'
	$button_process = New-Object 'System.Windows.Forms.Button'
	$tabpage5 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox8 = New-Object 'System.Windows.Forms.GroupBox'
	$button_servicesrunning = New-Object 'System.Windows.Forms.Button'
	$button_services = New-Object 'System.Windows.Forms.Button'
	$button_servicesauto = New-Object 'System.Windows.Forms.Button'
	$button_servicesautostop = New-Object 'System.Windows.Forms.Button'
	$button_servicesnonstandard = New-Object 'System.Windows.Forms.Button'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$button_servicesstop = New-Object 'System.Windows.Forms.Button'
	$button_servicesstart = New-Object 'System.Windows.Forms.Button'
	$button_servicesrestart = New-Object 'System.Windows.Forms.Button'
	$button_servicescheck = New-Object 'System.Windows.Forms.Button'
	$textbox_services = New-Object 'System.Windows.Forms.TextBox'
	$tabpage6 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox22 = New-Object 'System.Windows.Forms.GroupBox'
	$button_diskusage = New-Object 'System.Windows.Forms.Button'
	$button_deleteoffline = New-Object 'System.Windows.Forms.Button'
	$button_volumes = New-Object 'System.Windows.Forms.Button'
	$tabpage8 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox23 = New-Object 'System.Windows.Forms.GroupBox'
	$button_eventlogmmc = New-Object 'System.Windows.Forms.Button'
	$button_eventlog20 = New-Object 'System.Windows.Forms.Button'
	$button_eventlognames = New-Object 'System.Windows.Forms.Button'
	$tabpage10 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox18 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonTSHanging = New-Object 'System.Windows.Forms.Button'
	$button_getsccmcache = New-Object 'System.Windows.Forms.Button'
	$button_getadvertisedsoftware = New-Object 'System.Windows.Forms.Button'
	$groupbox17 = New-Object 'System.Windows.Forms.GroupBox'
	$button_sccm_start = New-Object 'System.Windows.Forms.Button'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$tabpage11 = New-Object 'System.Windows.Forms.TabPage'
	$button_search = New-Object 'System.Windows.Forms.Button'
	$textbox_search = New-Object 'System.Windows.Forms.TextBox'
	$tabpage_debug = New-Object 'System.Windows.Forms.TabPage'
	$button_getvariablesfilter = New-Object 'System.Windows.Forms.Button'
	$button_listvariables = New-Object 'System.Windows.Forms.Button'
	$textbox_debug = New-Object 'System.Windows.Forms.TextBox'
	$button_debug = New-Object 'System.Windows.Forms.Button'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$toolstrip1 = New-Object 'System.Windows.Forms.ToolStrip'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$toolstriplabel2 = New-Object 'System.Windows.Forms.ToolStripLabel'
	$FileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$button_Check = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripmenuitem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$textbox_username = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$button_GetPC = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripseparator10 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$quitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator4 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aDExplorerToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$procexpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$procmonToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$nirLauncherToolStripMenuItem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$optionsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$textbox_computername = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$Toolstrip_os = New-Object 'System.Windows.Forms.ToolStripLabel'
	$Toolstrip_OSStatus = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_home = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_home_status = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_user = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_user_status = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstripseparator2 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator11 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator12 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!P O W E R S H E L L  -    T O O L K I T !!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!O P E N I N G    A C T I O N S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$OnLoadFormEvent = {
		# Add 1 New Line in Richtextbox an the Date/Time	
		$Date = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
		Add-RichTextBoxTitle -text "$Date"
		
		# Get List of all PoSH-Functions for debugging
		$debugger = (Get-Command -CommandType 'Cmdlet', 'Function', 'Workflow').name
		$textbox_debug.AutoCompleteCustomSource.AddRange($debugger)
		
		#region Load Config
		# # # Load Config # # #	
		
		# # # # Checking if Configfolder exisits # # # #
		$Folderexisting = Test-Path $global:Confpath
		if ($Folderexisting -eq $true)
		{
			Add-RichTextBoxOK -text "$folder $global:Confpath $existing"
		}
		if ($Folderexisting -eq $false)
		{
			New-Item -ItemType directory -Path $global:Confpath
			$Folderexisting = Test-Path $global:Confpath
			if ($Folderexisting -eq $true)
			{
				$created = $lang.created
				Add-RichTextBoxOK -text "$folder $global:Confpath $created"
				if ($Folderexisting -eq $false)
				{
					Add-RichTextBoxWarn -text "$configerror $global:Confpath"
				}
			}
		}
		
		# # # # Checking if Configfile exists # # # #
		$loadconfig = $Confpath + "/Config.csv"
		if (Test-Path $loadconfig -PathType Leaf)
		{
			$load = Import-Csv -Path $loadconfig
			foreach ($Line in $Load)
			{
				$global:Profilefolder = $($Line."global:Profilefolder")
				$global:Homefolder = $($Line."global:Homefolder")
				$global:Outfile = $($Line."global:Outfile")
				$global:SiteName = $($Line."global:SiteName")
				$global:SCCMServer = $($Line."global:SCCMServer")
				$global:SCCMNameSpace = $($Line."global:SCCMNameSpace")
				$global:SCCMEnabled = $($Line."global:SCCMEnabled")
				$global:Nirlauncher = $($Line."global:Nirlauncher")
				$global:Sysinternals = $($Line."global:Sysinternals")
				$global:CmRCViewer = $($Line."global:CmRCViewer")
				Add-RichTextBoxOK -text "$configfrom $global:Confpath $loaded"
			}
		}
		else
		{
			Add-RichTextBox -text $lang.noConfigFound
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure the shown options"
			Call-Options_psf
		}
		
		# Loading Combobox	
		Load-ComboBox $combobox1 $Cycle1, $Cycle2, $Cycle3, $Cycle4, $Cycle7, $Cycle8, $Cycle9
		
		
		# # # # Deactivating SCCM based functions if SCCM is unchecked # # # #
		if ($global:SCCMEnabled -eq $false)
		{
			$button_GetPC.Enabled = $false
			$tabpage10.Enabled = $false
			$textbox_username.Enabled = $false
		}
		#endregion
		
		# # # Some Settings # # #
		
		# Set the status bar name
		$statusbar1.Text = $StatusBarStartUp
		
		# Set the Form Title
		$MainForm.Text = $MainFormTitle
		
		# Set Variable for Computername		
		$textbox_computername.Text = $env:COMPUTERNAME
		
		# Language / Sprache		
		$Culture = Get-Culture
		$CultureOK = Test-Path -Path $PWD/$culture
		# Set English as Culture if Culture is not found
		if ($CultureOK -eq $false)
		{
			Set-Culture -CultureInfo en-EN
		}
		
		Import-LocalizedData -BindingVariable lang -FileName Language.psd1 -BaseDirectory ($PWD)
		
		# Change the text of some buttons / menus / groupboxes to the used language	
		$button_folderrights.Text = $lang.button_folderrights
		$button_homerights.Text = $lang.button_homerights
		$button_PCGroups.Text = $lang.button_PCGroups
		$button_profilerights.Text = $lang.button_profilerights
		$FileToolStripMenuItem.Text = $lang.FileToolStripMenuItem
		$groupbox11.Text = $lang.groupbox11
		$groupbox12.Text = $lang.groupbox12
		$groupbox5.Text = $lang.groupbox5
		$groupbox6.Text = $lang.groupbox6
		$optionsToolStripMenuItem.Text = $lang.OptionsToolStripMenuItem
		$quitToolStripMenuItem.Text = $lang.QuitToolStripMenuItem
		$tabpage3.Text = $lang.tabpage3
		$tabpage4.Text = $lang.tabpage4
		
		## Verify External Tools are presents
		
		# SystemInfo.exe
		if (Test-Path "$env:systemroot/system32/systeminfo.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Systeminfo.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Systeminfo.exe not found"
		}
		
		# MSInfo32.exe
		if (Test-Path "$env:programfiles\Common Files\Microsoft Shared\MSInfo\msinfo32.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - msinfo32.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - msinfo32.exe not found"
		}
		
		# DriverQuery.exe
		if (Test-Path "$env:systemroot/system32/driverquery.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Driverquery.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Driverquery.exe not found"
		}
		
		# Sysinternals
		if (Test-Path "$global:Sysinternals" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Sysinternals found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Sysinternals not found - Buttons ADExplorer, procexp, Procmon, PSExec, Disabled"
			$button_cmd.Enabled = $false
			$aDExplorerToolStripMenuItem.Enabled = $false
			$procexpToolStripMenuItem.Enabled = $false
			$procmonToolStripMenuItem.Enabled = $false
		}
		
		## Verify Quest.ActiveRoles.ADManagement Snapin is present			
		$QuestSnapin = Get-PSSnapin -Name Quest.ActiveRoles.ADManagement
		if (!$QuestSnapin)
		{
			Add-RichTextBoxWarn -text "External Tools check - Quest.ActiveRoles.ADManagement not found.`nPlease download it on https://software.dell.com/register/71110/"
		}
		else
		{
			# Get List of all AD-Computers for AutoComplete in $ComputerTxtBox
			$PCList = (Get-QADComputer -SizeLimit 5000).name
			$textbox_computername.AutoCompleteCustomSource.AddRange($PCList)
		}
		Add-RichTextBox -text ""
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion load
	#------------------------------------------------------------------------------------------#
	#region Code
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!C O D E!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#region Buttons
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!!B U T T O N S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	############################################################################################
	$button_autostart_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Startup Commands"
		$result = Get-WmiObject Win32_StartupCommand –ComputerName $ComputerName | Sort-Object Caption | Format-Table Caption, User, Command -auto | out-string -Width $richtextbox_output.Width
		Add-richtextbox $result
		Add-RichTextBox -text "$ComputerName - Startup Commands - Done."
	}
	############################################################################################
	$button_C_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Open C$ Drive"
		$PathToCDrive = "\\$ComputerName\c$"
		Explorer.exe $PathToCDrive
	}
	############################################################################################
	$button_check_Click = {
		$MainForm.Cursor = 'WaitCursor'
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $Checkconn"
		if (Test-Connection $ComputerName -Count 1 -Quiet -TimeToLive 4)
		{
			$button_Check.Text = "Online"; $button_Check.ForeColor = "green"
			# Base64 Code of the "green" cable icon
			$button_Check.Image = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAg9JREFUeNqkU99LU2EYfr6zQ13sJvwLmpgIYQitMJo/aUNTDAlWN
0oXXgTexBS60UbSRTdeFF0EBUYoCqITdFuj7WKOM1s67KKurK1QCBW3icyp53hevy/cwXRTqBfOOXB4nud9n+d7P0ZE+K/6F4H374YoOhebEVz5LHD9Ux/pOkG00WBC76UVWCoqMTIy3HKj+vrpE9
S6vRRZI/rwi2jqB9H4EtG1JwHq7+kWpKuCKxUjNwz4qavjNlyDHqxvqYgt56D8zKLzTi3CF9oFJC5eRQU0HdhPZ3DP2Y5Xw9MoObeDPU1DaisLE6kGTirU2eb20etbDG+mo9CzG8nG5lZMzYRhlra
Rzu5BYigsIDx33m9Ct7Mu0RXQEB1osXpDMYtZzyQv1zTis7KAdE7lAuzkMYq0lXUe0uMJej5P9HIulajjgiIsG/++UFbJ6dkg+zP/n395rnRUaG0TcD1og2diEquq2WK7WZXkUy28dciYDC4i9W0e
H/uarfkARRl7QGDc3y6SXKTjrh2jHi+q6h2W8sqKxMPQUmnY3WQ9hMaP2jYmEEuyuaNB1XV8zwAOew2+RkLYPV9SKksGMX48dEOgt2wZY14FKjNhn7tcycm4Um3F7y+fEOwzup8oOb/bF/l6OhaHM
DsrQSYNjHFTTEKw/2/PBS+Tzx+I9Lge5dM9/px+EQ+PsewscDGBAwEGAIugAWGn5gy5AAAAAElFTkSuQmCC')
			Add-RichTextBoxOK -text "$Computername is online"
			
			# Get OS
			$OSWin32_OS = Get-WmiObject -Query "SELECT * FROM Win32_OperatingSystem" -ComputerName $ComputerName
			$OSCaption = ($OSWin32_OS | Select-Object caption).Caption
			$OSVersion = $OSWin32_OS.Version
			#2003/xp+
			$OSOther = $OSWin32_OS.OtherTypeDescription
			$OSSP = $OSWin32_OS.CSDVersion
			#2008/win7+
			$OSArchi = $OSWin32_OS.OSArchitecture
			$OSFullCaption = "$OSCaption $OSOther $OSArchi $OSSP"
			if ($OSFullCaption -contains "64")
			{
				$OSFullCaption = "$OSCaption $OSOther x86 $OSSP"
			}
			$Toolstrip_Os.Text = "OS:"
			$toolstrip_OSStatus.Text = $OSFullCaption.Replace('  ', ' ')
			$toolstrip_OSStatus.ForeColor = "blue"
			
			# Get the uptime
			# Uptime incorrect in Windows 8.1 / 10 if fast reboot is enabled (default)
			$LBTime = $OSWin32_OS.ConvertToDateTime($OSWin32_OS.Lastbootuptime)
			[TimeSpan]$uptime = New-TimeSpan $LBTime $(get-date)
			$OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
			
			# Get the User
			$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
			$textbox_username.Text = $Username
			if ($OS -lt "6.3.9600")
			{
				$Profilepath = "$Profilefolder\$username.v2"
				# Deactivate functions that do not work with OS < Windows 8.1"
				$Button_gpupdate.Enabled = $false
			}
			else
			{
				$Profilepath = "$Profilefolder\$username.v4"
				# Activate functions that only work with Windows 8.1 and 10"
				$Button_gpupdate.Enabled = $true
			}
			
			$toolstrip_User.Text = "User:"
			$toolstrip_user_status.Text = "$Profilepath"
			$toolstrip_user_status.ForeColor = "blue"
			$toolstrip_user_status.islink = $true
			
			# Get Home Drive
			$Homepath = "$Homefolder\$Username"
			$toolstrip_home.Text = "Home:"
			$toolstrip_home_status.Text = "$Homepath"
			$toolstrip_home_status.ForeColor = "blue"
			$toolstrip_home_status.IsLink = $true
			$toolstripseparator1.Visible = $true
			$toolstripseparator2.Visible = $true
			
			# Activate Buttons Rights Home and Rights Profile
			$button_homerights.Enabled = $true
			$button_profilerights.Enabled = $true
			# Output
			Add-RichTextBox -text "Username: `t$Username`nWindows: `t$OS`nProfile: `t$Profilepath `nHome: `t`t$Homepath`nUptime: `t$($uptime.days) Days $($uptime.hours) Hours $($uptime.minutes) Minutes $($uptime.seconds) Seconds"
		}
		else
		{
			# Base64 Code of the "red" cable icon
			$button_Check.Image = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZ
Wdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxID
Y0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjp
EZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIg
eG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNS4xIFdpbmRvd3MiIHhtc
E1NOkluc3RhbmNlSUQ9InhtcC5paWQ6Q0M1NzBEQTQ3RjBEMTFFNUE5QjdGMkUwMzJFNTYyQTAiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6Q0M1NzBEQTU3RjBEMTFFNUE5QjdGMkUwMzJFNT
YyQTAiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpDQzU3MERBMjdGMEQxMUU1QTlCN0YyRTAzMkU1NjJBMCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDp
DQzU3MERBMzdGMEQxMUU1QTlCN0YyRTAzMkU1NjJBMCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PogXkCcAAACuUExURczM
zL8zM7QxMcU1NcQ1Ncc2Nr0zM7IwMNx+fuenp+KTk9lwcOCMjMI0NOqystdqasE0NOy3t+7AwN2Bge29vbwzM+28vOahoeemproyMuOWluGOjuekpNt4eLkyMu/ExOWenvLQ0OWbm9zc3Nt5edx8f
Npzc7YxMa8vL9+GhvPS0vTX1+aiouu0tNhubtdra8uurtx7e7cxMeKRkemtrfX19fDHx+irq96EhP///4XRHlAAAAA6dFJOU/////////////////////////////////////////////////////
///////////////////////wA3wP8KAAAAoElEQVR42kTPRRLDMAwFUMkUbpjLzEy+/8XqtImrlfXGkuaD7MpDFMeRhK7HyTNKSqKBhUav3vSZBrQKUpnuHyDd34bmhbbgZxLEdIE+/4HTW6s/ojp
xaMDDgjQOTPUSdnjISvXwEwlf9rZGbgVqymi3B1FIbButFXRwt/NrbDJ9H8f12xVL3kUAJ3Xj+YDqTPAilFJ+1qFhBk09NHwEGABOxiQDxhPG6wAAAABJRU5ErkJggg==')
			$textbox_username.Text = ""
			$button_Check.Text = "Offline"; $button_Check.ForeColor = "red"
			Add-RichTextBoxWarn -text "$Computername is offline!"
			$Toolstrip_Os.Text = ""
			$toolstrip_OSStatus.Text = ""
			$toolstrip_User.Text = ""
			$toolstrip_user_status.Text = ""
			$toolstrip_home.Text = ""
			$toolstrip_home_status.Text = ""
			$toolstripseparator1.Visible = $false
			$toolstripseparator2.Visible = $false
		}
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_checkWLAN_Click = {
		# This only works with Centrino NICs ATM, it must be filled with more nic types
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Checking Wireless-Adapter"
		$NicInfo = Get-NICInfo -ComputerName $ComputerName | Where { $_.Name -like "*Centrino*" } | Out-String
		if ($NicInfo -eq "")
		{
			Add-RichTextBoxWarn -text "No WLAN-Hardware found"
		}
		else
		{
			Add-RichTextBox -text "$NicInfo"
		}
	}
	############################################################################################
	$button_clear_Click = {
		$richtextbox_output.Text = ""
		$Date = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
		Add-RichTextBox -text ""
		Add-RichTextBoxTitle -text "$Date"
	}
	############################################################################################
	$button_cmd_Click = {
	Get-ComputerTxtBox
	Add-RichTextBoxTitle -text "$ComputerName - $RunRemoteCMD"
	if (Test-Connection $ComputerName -Count 1 -Quiet)
	{
		$RemoteCommand = Show-Inputbox -message "$EnterCommand" -title "$Computername - Run-RemoteCMD" -default "ipconfig /all"
		if ($RemoteCommand -ne "")
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command $RemoteCommand
			Add-RichTextBox -text "$ComputerName - $RemoteCommandSent"
		}
	}
	else
	{
		Add-RichTextBoxWarn -text "$ComputerOfflineOrWrong"
		Show-MsgBox -Prompt "$ComputerOfflineOrWrong" -BoxType "OKOnly" -Title "Computer offline!" -Icon "Exclamation"
	}
	}
	############################################################################################
	$button_compmgmt_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Compmgmt $Computername"
		$command = "compmgmt.msc"
		$arguments = "/computer:$ComputerName"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_ComputerGroups_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$CheckComputerGroups $Computername"
		$ComputerGroups = Get-QADComputer $ComputerName -Properties Memberof | Select-Object -Expand memberof | Out-String
		$ComputerGroups = $ComputerGroups -split ',*CN=*,'
		$ComputerGroups = $ComputerGroups -replace ('CN=', '') -replace (',OU.*', '')
		Add-RichTextBox -text "$ComputerGroups"
	}
	############################################################################################
	$button_cpuram_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Performance of $Computername"
		$Perf = Get-ComputerStats -ComputerName $ComputerName | fl | Out-String
		Add-RichTextBox -text $Perf
		$cpu = Get-WmiObject win32_processor -computername $computername |
		Measure-Object -property LoadPercentage -Average |
		Foreach { $_.Average }
		$ram = Get-WmiObject win32_operatingsystem -ComputerName $computername |
		Foreach { "{0:N2}" -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) * 100)/ $_.TotalVisibleMemorySize) }
		Load-Chart $chart1 -XPoints ("RAM $ram%" -f $ram), ("CPU $cpu%" -f $cpu) -YPoints $ram, $cpu -ChartType 'Bar'
	}
	############################################################################################
	$button_debug_Click = {
		$Command_debug = $textbox_debug.Text
		Get-ComputerTxtBox
		Add-RichTextBox -text "$command_debug"
		try
		{
			$result = Invoke-Expression $Command_debug | Out-String -Width $richtextbox_output.Width
			Add-RichTextBox -text "$result"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_deleteGPO_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Deleting local gpo of the computer $Computername"
		Remove-Item "\\$ComputerName\c$\windows\system32\Grouppolicy" -Force -Recurse
		Remove-Item "\\$ComputerName\c$\windows\system32\grouppolicyusers" -Force -Recurse
		Add-RichTextBox -text "Deleted folder grouppolicy and grouppolicyusers."
	}
	############################################################################################
	$button_deleteoffline_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$Computername - Reset Offline Files"
		New-RegistryValue HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\CSC\Parameters -Name FormatDatabase -Value 1 -Type Dword -ComputerName $ComputerName
		Add-RichTextBox -text "$RegKeySet"
	}
	############################################################################################
	$button_diskusage_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Hard Drive - DiskSpace"
		$result = Get-DiskSpace -ComputerName $ComputerName | Out-String
		Add-RichTextBox -text $result
	}
	############################################################################################
	$button_DNScheck_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $DnsConf"
		#		
		$DNS = Resolve-DnsName $ComputerName
		Add-RichTextBox -text "$DNS"
	}
	############################################################################################
	$button_eventlog20_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - EventLog - Last 20"
		if ($ComputerName -like "localhost")
		{
			$Events_Last20Sytem = Get-EventLog -Newest 20 | Select-Object Index, EventID, Source, Message, MachineName, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20Sytem
		}
		else
		{
			$Events_Last20Sytem = Get-EventLog -Newest 20 -ComputerName $ComputerName | Select-Object Index, EventID, Source, Message, MachineName, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20Sytem
		}
	}
	############################################################################################
	$button_eventlogmmc_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Event Viewer MMC (eventvwr $Computername)"
		$command = "eventvwr"
		$arguments = "$ComputerName"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_eventlognames_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - EventLog - LogNames list"
		if ($ComputerName -eq "localhost")
		{
			$EventsLog = Get-EventLog -list | Format-List | Out-String
			Add-RichTextBox $EventsLog
		}
		else
		{
			$EventsLog = Get-EventLog -list -ComputerName $ComputerName | Format-List | Out-String
			Add-RichTextBox $EventsLog
		}
	}
	############################################################################################
	$button_export_Click = {
		$timestamp = Get-Date -Format "dd-MM-yyyy HH-mm"
		$Filepath = "$Outfile" + "\log-$timestamp"
		($richtextbox_output.Text | Out-String) -replace "`n", "`r`n" | Out-File -FilePath "$Filepath.log"
		Add-RichTextBoxOK -text "Saved in $Filepath.log."
	}
	############################################################################################
	$buttonFixWMI_Click = {
		#not sure if this is working when WMI actually needs a fix! 
		Get-ComputerTxtBox
		Invoke-Command -ComputerName $ComputerName -ScriptBlock {
			WinMgmt /standalonehost
			WinMgmt /resetrepository
		}
		Add-RichTextBox -text "WMI on Computer $ComputerName reset. Please reboot."
	}
	############################################################################################
	$button_folderrights_Click = {
		$Folderpath = Show-InputBox -title "$FolderPathInputBoxTitle" -message "$FolderPathInputBoxMsg"
		Add-RichTextBoxTitle -text "$ShowFolderRights $Folderpath"
		Try
		{
			$Folderrights = Get-Acl "$Folderpath" | Format-List | Out-String
			Add-RichTextBox -text "$Folderrights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_getadvertisedsoftware_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Software of $Computername"
		$MainForm.Cursor = 'WaitCursor'
		$Applications = Get-WmiObject -Query "Select * From CCM_Application" -Namespace "Root\ccm\ClientSDK" -ComputerName $ComputerName | Sort-Object -Property Fullname | Select-Object -Property Fullname, @{ label = "Installed"; Expression = { $_.convertToDateTime($_.LastInstallTime) } }, InstallState | format-table | Out-String
		Add-RichTextBoxWarn $_.Exception.Message
		Add-RichTextBox $Applications
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_GetPC_Click = {
		# This only Works with SCCM!
		$MainForm.Cursor = 'WaitCursor'
		Get-UserTxtBox
		$SamAccountName = $textbox_username.Text
		Add-RichTextBoxTitle -text "$ShowingLastPC"
		Get-QADUser -Identity $SamAccountName
		try
		{
			$User_Computer = Get-WmiObject -namespace $SCCMNameSpace -computer $SCCMServer -query "select SMS_R_System.Name, SMS_R_System.SystemOUName from  SMS_R_System where SMS_R_System.LastLogonUserName = ""$SamAccountName""" | Select-Object -ExpandProperty Name
			Add-RichTextBox -text "User: $SamAccountName Computer: $User_Computer"
			$textbox_computername.Text = "$User_Computer"
			$button_Check.PerformClick()
		}
		catch [Exception]{
			Add-RichTextBoxWarn -text "Error checking Computer of $SamAccountname. User maybe not existing."
		}
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_getsccmcache_Click = {
		Get-ComputerTxtBox
		$CacheSize = (Get-WmiObject -Namespace 'Root\ccm\SoftMgmtAgent' -Class CacheConfig -ComputerName $ComputerName).size
		Add-RichTextBoxTitle -text "Cache Size of $Computername"
		Add-RichTextBox -text "Cache $CacheSize MB"
	}
	############################################################################################
	$button_get_session_Click = {
		Get-ComputerTxtBox
		$Result = Invoke-Command -ComputerName $ComputerName -ScriptBlock { qwinsta } | Out-String
		Add-RichTextBoxTitle -text "Getting Sessions on $Computername"
		Add-RichTextBox -text "$Result"
	}
	############################################################################################
	$button_getvariablesfilter_Click = {
		$Variables = Get-Variable -Exclude button*, textbox*, label*, toolstrip*, *menu*, tab* | Out-String
		Add-RichTextBox -text "$Variables"
	}
	############################################################################################
	$Button_gpupdate_Click = {
		#Not sure if this stuff is working....
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - GPUpdate (Remotely via WMI)"
		$Force = Show-MsgBox -Title "Force?" -BoxType 'YesNo' -Icon 'Question' -Prompt "Force?"
		if ($Force -eq "YES")
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command "gpupdate /force"
		}
		else
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command "gpupdate"
		}
	}
	############################################################################################
	$button_gpresult_Click = {
		# maybe polish this so that you can select only possible users? maybe like in the default 
		# gpresult.
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Get GPResult of $Computername"
		$GPUser = Show-InputBox -title "Enter Username" -message "Enter Username"
		$folderbrowserdialog1.ShowDialog()
		$folder = $folderbrowserdialog1.SelectedPath
		$timestamp = Get-Date -Format "dd-MM-yyyy HH-mm"
		$Filepath = "$Folder" + "\report-$timestamp.htm"
		Get-GPResultantSetOfPolicy -Computer $ComputerName -User $GPUser -ReportType html -path $Filepath
		Add-RichTextBox -text "GPResult of User $GPUser on Computer $Computername saved in $Filepath"
	}
	############################################################################################
	$button_homerights_Click = {
		$Username = $textbox_username.Text
		Add-RichTextBoxTitle -text "$checkHomeRights $Username"
		$Homepath = $toolstrip_home_status.Text
		try
		{
			$Homerights = Get-Acl -Path "$Homepath" | format-list | Out-String
			Add-RichTextBox -text "$Homerights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_hosts_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Showing hostsfile of $Computername"
		$Hostsfile = Get-Content "\\$computername\c$\windows\system32\drivers\etc\hosts" | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $Hostsfile
	}
	############################################################################################
	$button_hotfix_Click = {
		$MainForm.Cursor = 'WaitCursor'
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Get the Windows Updates Installed"
		$result = Get-HotFix -ComputerName $ComputerName | Sort-Object InstalledOn | Format-Table __SERVER, Description, HotFixID, InstalledBy, InstalledOn, Caption -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox $result
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_installedSoftware_Click = {
		Get-ComputerTxtBox
		$result = Get-InstalledSoftware -ComputerName $ComputerName | Sort-Object -Property Name | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBoxTitle -text "$ComputerName - Installed Softwares List"
		Add-RichTextBox $result
	}
	############################################################################################
	$button_ipconfig_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $NetConf"
		$result = Get-IP -ComputerName $ComputerName | Format-List Name, IP4, IP4Subnet, DefaultGWY, MacAddress, DNSServer | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "$result`n"
	}
	############################################################################################
	$button_ipconfig2_Click = {
		$button_ipconfig.PerformClick()
	}
	############################################################################################
	$button_localadmins_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ShowLocalAdminsOf $Computername"
		$LocalAdmins = Get-LocalAdmins $ComputerName | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $LocalAdmins
	}
	############################################################################################
	$button_logoff_user_Click = {
		#this could be polished, get session ids and just let you select them maybe?
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Logoff User Session"
		$Session_Logoff = Show-InputBox -title "Enter Session to logoff" -message "Please enter the Session-ID that will be logged of"
		Add-RichTextBox -text "$ComputerName - Session to Logoff $Session_Logoff"
		Run-RemoteCMD -ComputerName $ComputerName -Command "rwinsta $Session_Logoff /server:$Computername"
		Add-RichTextBox -text "Session logged off!"
	}
	############################################################################################
	$button_listvariables_click = {
		$Variables = Get-Variable | Out-String
		Add-RichTextBox -text "$Variables"
	}
	############################################################################################
	$button_mainboard_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - MotherBoard"
		$result = Get-MotherBoard -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "$result"
	}
	############################################################################################
	$button_memory_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Memory Configuration"
		$result = Get-MemoryConfiguration -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_MMCServices_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services MMC (services.msc /computer:$ComputerName)"
		$command = "services.msc"
		$arguments = "/computer:$computername"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_MSRA_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Remote Assistance"
		MSRA.exe /OfferRA $ComputerName
	}
	############################################################################################
	$button_nbbattery_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Getting batterystate of $Computername ..."
		$OnBattery = Get-WmiObject Win32_Battery -ComputerName $ComputerName | Select-Object -ExpandProperty BatteryStatus
		if ($OnBattery -eq 1)
		{
			$CableConnected = "false"
			$BatteryConnected = "true"
		}
		if ($OnBattery -eq 2)
		{
			$CableConnected = "true"
			$BatteryConnected = "false"
		}
		$BatteryState = Get-WmiObject Win32_Battery -ComputerName $ComputerName | Select-Object @{ N = 'Remaining Charge %'; E = { $_.EstimatedChargeRemaining } }, Status | fl | Out-String
		Add-RichTextBox -text "On cable: $Cableconnected`nOn battery: $BatteryConnected `n$BatteryState"
	}
	############################################################################################
	$button_openc_Click = {
		explorer.exe \\$ComputerName\c$
	}
	############################################################################################
	$button_PCGroups_Click = {
		Add-RichTextBoxTitle -text "$TransferComputerGroups"
		$ComputerOLD = Show-InputBox -title "$EnterSourceComputer" -message "$Please $EnterSourceComputer"
		$TestComputerOLD = Get-ADComputer $ComputerOLD
		if ($TestComputerOLD -eq $null)
		{
			Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "ComputerNotFound" -Icon "Exclamation"
			Add-RichTextBoxWarn -text "$ComputerNotFound"
		}
		else
		{
			Add-RichTextBox -text "$SourceComputer $ComputerOLD"
			$ComputerNEW = Show-InputBox -title "$EnterDestinationComputer" -message "$EnterDestinationComputer"
			$TestComputerNEW = Get-QADObject $ComputerNEW
			if ($TestComputerNEW -eq $NULL)
			{
				Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "$ComputerNotFound" -Icon "Exclamation"
				Add-RichTextBoxWarn -text "$ComputerNotFound"
			}
			else
			{
				if ($ComputerNEW -eq $ComputerOLD)
				{
					Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "$YouHaveEnteredTwoIdenticalComputers" -Icon "Exclamation"
					Add-RichTextBoxWarn -text "$TwoIdenticalComputers"
				}
				else
				{
					Add-RichTextBox -text "$DestinationComputer $ComputerNew"
					$CheckOK = Show-MsgBox -Title "$Transferring" -Prompt "$DoYouWantToTransfer `n$SourceComputer : $ComputerOLD `n$DestinationComputer : $ComputerNEW" -BoxType "YESNO" -Icon "Exclamation"
					if ($CheckOK -eq "YES")
					{
						#Move AD Groups von OLD to New
						Add-RichTextBox -text "Transferring computergroups..."
						#Auslesen der Computergruppen
						#$ComputerGroups = Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | Out-String
						Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | ForEach-Object { Add-QADGroupMember -Identity $ComputerNEW -Members $_.Memberof }
						Add-RichTextBox -text "$ShowingComputergroupsOf $ComputerOLD`n$Computergroups"
						#Add-QADGroupMember "Group" -Member "Computer"
						$ComputerOLD = $ComputerOLD + "$"
						$ComputerNEW2 = $ComputerNEW + "$"
						$Groups = get-QADMemberOf $ComputerOLD
						$Groups | foreach{
							if ($_.name -ne "Domain Computers")
							{
								Add-RichTextBox -text "$ComputerNew adding to group $_ ..."
								try { Add-QADGroupMember $_ -Member $ComputerNEW2 }
								catch [Exception]{
									Add-RichTextBoxWarn $_.Exception.Message
								}
							}
						}
					}
					if ($CheckOK -eq "NO")
					{
						Add-RichTextBoxWarn -text "Aborted."
					}
				}
			}
		}
	}
	############################################################################################
	$button_ping_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Ping Test"
		$result = Test-Connection $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "Ping`n$result"
	}
	############################################################################################
	$button_printer_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - Printers"
		$result = Get-WmiObject Win32_Printer -ComputerName $ComputerName | Format-table SystemName, Name, Comment, PortName, Location, DriverName -AutoSize | Out-String -Width $richtextbox_output.Width
		if ($result -ne $null)
		{
			Add-RichTextBox $result
		}
		else { Add-RichTextBox "$ComputerName - No Printer detected" }
	}
	############################################################################################
	$button_process_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - All Processes"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$ProcessALL = get-process -ComputerName $ComputerName | out-string
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_process_100_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processes >100MB"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$Processes_Over100MB = Get-Process -ComputerName $ComputerName | Where-Object { $_.WorkingSet -gt 100mb } | Select-Object Handles, NPM, PM, WS, VM, CPU, ID, ProcessName, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } } | sort ws | ft -AutoSize | Out-String
		Add-RichTextBox $Processes_Over100MB
	}
	############################################################################################
	$button_process_cmd_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Get the CommandLine Argument for each process"
		#Get-WmiObject Win32_Process -Filter "Name like '%powershell%'" | select-Object CommandLine
		$result = Get-WmiObject Win32_Process -ComputerName $ComputerName | select-Object Name, ProcessID, CommandLine | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox $result
	}
	############################################################################################
	$button_process_grid_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - All Processes - GridView"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Select @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, * | Out-GridView
	}
	############################################################################################
	$button_process_owner_Click = {
		Add-RichTextBoxTitle -text "$ComputerName - Processes with owners"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Select ProcessName, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, CPU, WorkingSet, Handles, Id | ft -AutoSize | out-string
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_process_start_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Start Process"
		$Process_query = $textbox_Process.text
		Add-RichTextBox -text "$ComputerName - Process to Start: $Process_query"
		Run-RemoteCMD -ComputerName $ComputerName -Command $Process_query
		Add-RichTextBox -text "Process $Process_query started"
	}
	############################################################################################
	$button_process_stop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Terminate Process"
		$Process_query = $textbox_Process.text
		Add-RichTextBox -text "$ComputerName - Process to Terminate: $Process_query"
		Run-RemoteCMD -ComputerName $ComputerName -Command "taskkill /IM $Process_query /F"
		Add-RichTextBox -text "Process $Process_query stopped"
	}
	############################################################################################
	$button_processor_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processor Information"
		$result = Get-Processor -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_proclasthour_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processes - Processes started in last hour"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Where-Object { trap { continue }  (New-Timespan $_.StartTime).TotalMinutes -le 10 } | Select ProcessName, @{ l = "StartTime"; e = { $_.StartTime } }, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, CPU, WorkingSet, Handles, Id | fl | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_profilerights_Click = {
		$Username = $textbox_username.Text
		Add-RichTextBoxTitle -text "$checkProfileRights $Username"
		$Profilepath = $toolstrip_user_status.Text
		Try
		{
			$Profilerights = Get-Acl "$Profilepath" | format-list | Out-String
			Add-RichTextBox -text "$Profilerights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_psremote_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $openPSRS"
		if (Test-PSRemoting -ComputerName $ComputerName)
		{
			Add-RichTextBox -text "$ComputerName - $starting $openPSRS"
			Start-Process powershell.exe -ArgumentList "-noexit -command Enter-PSSession -ComputerName $ComputerName"
		}
		else
		{
			Add-RichTextBoxWarn -text "$ComputerName - $PSRnotEnabled"
		}
	}
	############################################################################################
	$button_rdp_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - RDP"
		$command = "mstsc"
		$argument = "/v:$computername /admin"
		Start-Process $command $argument
	}
	############################################################################################
	$button_regedit_Click = {
		Start-Process regedit.exe
	}
	############################################################################################
	$button_Remotecontrol_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Starting Remotecontrol $Computername"
		& $global:CmRCviewer $ComputerName
	}
	############################################################################################
	$button_ResetPWD_Click = {
		Add-RichTextBoxTitle -text "User Passwort Reset"
		$PWUser = Show-InputBox -message "$EnterUsername" -title "$EnterUsername"
		if ($PWUser -ne $null)
		{
			$PWUserExists = Get-ADUser -identity $PWUser
			if ($PWUserExists -ne $null)
			{
				$PWPW = Show-InputBox -message "$EnterPassword" -title "$EnterPassword"
				$PWSecure = $PWPW | ConvertTo-SecureString -AsPlainText -Force
				Set-ADAccountPassword $PWUser -NewPassword $PWSecure -Reset -PassThru | Set-AdUser -ChangePasswordAtLogon $True
				Add-RichTextBox -text "Password: $PWPW User: $PWUser. `n$ChangePasswordAtLogon."
				Show-MsgBox -Prompt "Password: $PWPW User: $PWUser. `n$ChangePasswordAtLogon." -Title "$PasswordResetOK" -Icon Information -BoxType OKOnly
			}
			else
			{
				Add-RichTextBoxWarn -text "User $PWUser $NotExistinginAD."
				Show-MsgBox -Prompt "User $PWUser $NotExistinginAD." -Title "$NotExistinginAD" -Icon Information -BoxType OKOnly
			}
		}
		else
		{
			Add-RichTextBoxWarn -text "$NoInputDetected"
			Show-MsgBox -Prompt "$NoInputDetected" -Title "$NoInputDetected" -Icon Information -BoxType OKOnly
		}
	}
	############################################################################################
	$button_routetable_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Route table"
		$result = Get-Routetable -ComputerName $ComputerName | ft -auto | Out-String
		Add-RichTextBox $result
	}
	############################################################################################
	$button_sccm_start_Click = {
		Get-ComputerTxtBox
		$action = $combobox1.SelectedItem
		switch ($action)
		{
			"Auswertungszyklus für Softwareupdatebereitstellung" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000108}"
				}
			}
			"Benutzerrichtlinienabruf und Auswertungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000027}"
				}
			}
			"Computerrichtlininenabruf und Auswertungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000021}"
				}
			}
			"Dateisammlungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000010}"
				}
			}
			"Hardwareinventurzyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000001}"
				}
			}
			"Softwareinventurzyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000002}"
				}
			}
			"Überprüfungszyklus für Softwareupdates"{
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-0000000000113}"
				}
			}
			"Software Metering Usage Report Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000108}"
				}
			}
			"User Policy Retrieval & Evaluation Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000027}"
				}
			}
			"Machine Policy Retrieval & Evaluation Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000021}"
				}
			}
			"File Collection Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000010}"
				}
			}
			"Hardware Inventory Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000001}"
				}
			}
			"Software Inventory Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000002}"
				}
			}
			"Software Updates Deployment Evaluation Cycle"{
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-0000000000113}"
				}
			}
		}
		
		Add-RichTextBoxTitle -text "Action $action started on Computer $Computername"
	}
	############################################################################################
	$button_search_Click = {
		#on first search set global:run to 1 for "search next". Always adding +1 to the result
		#so the search starts one char later
		if ($global:run -ne 1)
		{
			$global:run = 1
			$Search = $textbox_search.Text
			$Result = $richtextbox_output.Find($Search)
			$global:Start = $Result + 1
		}
		else
		{
			$Search = $textbox_search.Text
			$Result = $richtextbox_output.Find($Search, $global:Start, 'None')
			$global:Start = $Result + 1
		}
	}
	############################################################################################
	$button_services_Click = {
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - All Services + Owners"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName | select Name, ProcessID, StartMode, State, @{ Name = "Owner"; Expression = { $_.StartName } } | ft -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicesauto_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - StartMode:Automatic"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='auto'" | Select-Object DisplayName, Name, ProcessID, StartMode, State | Format-Table -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicesautostop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Services with StartMode: Automatic and Status: NOT Running"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='auto' AND state!='running'" | Select-Object DisplayName, Name, StartMode, State | ft -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicescheck_Click = {
		Get-ComputerTxtBox
		$a = new-object -comobject wscript.shell
		Add-RichTextBoxTitle "$COMPUTERNAME - Query Service"
		#$Service_query = Read-Host "Enter the Service Name to Query `n"
		$Service_query = $textbox_services.text
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Query Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			Add-RichTextBox "$COMPUTERNAME - Checking Service $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox "$COMPUTERNAME - Command Sent! Service $Service_query"
			Add-RichTextBox $Service_query_return
			Add-RichTextBox -Text "$ComputerName - Query Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				Add-RichTextBox "$COMPUTERNAME - Checking the Service $Service_query ..."
				$Service_query_return = Get-WmiObject -computername $ComputerName Win32_Service -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox "$COMPUTERNAME - Command Sent! Service $Service_query"
				Add-RichTextBox $Service_query_return
				Add-RichTextBox -Text "$ComputerName - Query Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesnonstandard_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Non-Standard Windows Service Accounts"
		$NormalAccount1 = "LocalSystem"
		$NormalAccount2 = "NT Authority\\LocalService"
		$NormalAccount3 = "NT Authority\\NetworkService"
		$wql = 'Select Name, DisplayName, StartName, __Server From Win32_Service WHERE ((StartName != "LocalSystem") and (StartName != "NT Authority\\LocalService") and (StartName != "NT Authority\\NetworkService"))'
		$query = Get-WmiObject -Query $wql -ComputerName $ComputerName -ErrorAction Stop | Select-Object __SERVER, StartName, Name, DisplayName | Format-Table -AutoSize | Out-String
		if ($query -eq $null) { Add-RichTextBox "$Computername - All the services use Standard Windows Service Accounts" }
		else { Add-RichTextBox $query }
		
	}
	############################################################################################
	$button_servicesrestart_Click = {
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Restart Service"
		#Add-RichTextBox "# SERVICES - RESTART SERVICE - COMPUTERNAME: $ComputerName `n`n"
		#$Service_query = Read-Host "Enter the Service Name to Start `n"
		$Service_query = $textbox_services.text
		add-richtextbox -text "$ComputerName - Service to Restart: $Service_query"
		#Add-RichTextBox "SERVICE: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Start Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
			add-richtextbox -Text "$ComputerName - Restarting the Service $Service_query ..."
			#Add-RichTextBox "Starting Service: $Service_query...`r"
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
				add-richtextbox -Text "$ComputerName - Restarting the Service $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesrunning_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Status: Running"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_running = Get-Service -ComputerName $ComputerName | Where-Object { $_.Status -eq "Running" } | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $Services_running
	}
	############################################################################################
	$button_servicesstart_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Start Service"
		$Service_query = $textbox_services.text
		add-richtextbox -text "$ComputerName - Service to start: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Start Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Starting Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Starting Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesstop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Stop Service"
		$Service_query = $textbox_services.text
		Add-richtextbox -text "$ComputerName - Service to Stop: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Stop Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_shutdown_Click = {
		Start-Process shutdown.exe -ArgumentList /i
	}
	############################################################################################
	$button_systemtype_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - System Type"
		$result = get-systemtype -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_taskmanager_Click = { Call-Taskmanager_psf }
	############################################################################################
	$button_testport_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Network - Test-Port"
		$port = Show-Inputbox -message "Enter a port to test" -title "$ComputerName - Test-Port" -default "80"
		if ($port -ne "")
		{
			$result = Test-TcpPort $ComputerName $port
			Add-RichTextBox $result
		}
	}
	############################################################################################
	$buttonTSHanging_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -Text "Remove hanging tasksequence"
		$Out = Get-WmiObject -computername "$ComputerName" -Namespace root\ccm\SoftMgmtAgent -Class CCM_TSExecutionRequest -Filter "State = 'Completed' And CompletionState = 'Failure'"
		$Out.delete()
		Add-RichTextBox -text "Done."
	}
	############################################################################################
	$button_USBDevice_Click = {
		$button_USBDevice.Enabled = $false
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - USB Devices"
		$MainForm.Cursor = 'WaitCursor'
		$result = Get-USB -computerName $ComputerName | Select-Object SystemName, Manufacturer, Name | Sort-Object Manufacturer | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $result
		$button_USBDevice.Enabled = $true
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_Userunlock_Click = {
		$Locked_User = Get-QADUser -Locked | Select-Object -expand samaccountname
		if ($Locked_User -ne $null)
		{
			Show-MsgBox -Prompt "$FollowingLocked `n $Locked_user" -Title "$LockedUser" -Icon Information -BoxType OKOnly
			$Confirmation_User = Show-MsgBox -Prompt "$UnlockUser" -Title "$UnlockUser" -Icon Information -BoxType YesNo
			if ($Confirmation_User -eq "YES")
			{
				$Unlock_User = $Locked_User
				Unlock-QADUser $Unlock_User
				$Locked_User_2 = Get-QADUser -Locked | Select-Object -expand samaccountname
				if ($Locked_User_2 -eq $Locked_User)
				{
					$Locked_Error = Show-MsgBox -Prompt "$ErrorUnlocking $Unlock_User" -Title "$ErrorUnlocking" -Icon Critical -BoxType OKOnly
					Add-RichTextBoxWarn -text "$ErrorUnlocking $Unlock_User"
				}
				else
				{
					Show-MsgBox -Prompt "$Unlock_User $UnlockedOK" -Title "$UnlockedOK" -Icon Information -BoxType OKOnly
				}
			}
			else
			{
				Show-MsgBox -BoxType "OKOnly" -Title "$UnlockUser" -Prompt "$NoUserUnlocked" -Icon "Information"
			}
		}
		else
		{
			Show-MsgBox -Prompt "$NoUsersLocked" -Icon Information -BoxType OKOnly
		}
	}
	############################################################################################
	$button_volumes_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Hard Drive - Physical Disk"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Disks_Physical = Get-WmiObject Win32_DiskDrive -ComputerName $ComputerName | Select DeviceID, `
																							 Model,`
																							 Manufacturer,`
																							 @{ Name = "SizeGB"; Expression = { $_.Size/1GB } }, `
																							 Caption, `
																							 Partitions, `
																							 SystemName,`
																							 Status,`
																							 InterfaceType,`
																							 MediaType,`
																							 SerialNumber,`
																							 SCSIBus, SCSILogicalUnit, SCSIPort, SCSITargetId | fl | Out-String
		Add-RichTextBox $Disks_Physical
	}
	############################################################################################
	$button_WOL_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "WOL PC $Computername"
		$ComputerMAC = Get-IP -ComputerName $ComputerName | Select-Object -ExpandProperty MACAddress
		Add-RichTextBox -text "Mac-Address - $ComputerMAC"
		$ComputerIP = Get-IP -Computername $ComputerName | Select-Object -ExpandProperty IP4
		Add-RichTextBox "Computer IP - $ComputerIP"
		Send-WOL -mac $ComputerMAC -ip $ComputerIP -port 7
		Add-RichTextBox "WOL sent to $Computername with MAC $ComputerMAC"
	}
	#endregion buttons
	#region Textboxes
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!T E X T B O X E S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$textbox_computername_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_Check.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_computername.CharacterCasing = 'Upper'
	############################################################################################
	$textbox_computername_TextChanged = {
		$toolstrip_OSStatus.Text = ""
		if ($textbox_computername.Text -eq "")
		{
			$textbox_computername.BackColor = [System.Drawing.Color]::FromArgb(255, 128, 128);
			Add-RichTextBoxTitle -text "Please Enter a ComputerName"
		}
		if ($textbox_computername.Text -ne "")
		{
			$textbox_computername.BackColor = [System.Drawing.Color]::FromArgb(255, 203, 26)
		}
	}
	############################################################################################
	$textbox_services_MouseClick = [System.Windows.Forms.MouseEventHandler]{
		$textbox_services.Text = ""
	}
	############################################################################################
	$textbox_username_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		Get-ComputerTxtBox
		If ($_.KeyChar -eq 13)
		{
			$button_GetPC.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_username_Click = {
		$textbox_username.Text = ""
	}
	############################################################################################
	$textbox_computername_Click = {
		$textbox_computername.Text = ""
	}
	############################################################################################
	$textbox_debug_Click = {
		$textbox_debug.Text = ""
	}
	############################################################################################
	$textbox_debug_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_debug.performClick()
		}
	}
	############################################################################################
	$textbox_Process_Click = {
		$textbox_Process.Text = ""
	}
	############################################################################################
	$textbox_Process_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_process_start.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_search_Click = {
		$textbox_search.Text = ""
		$global:run = 0
	}
	############################################################################################
	$textbox_search_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_search.PerformClick()
		}
	}
	############################################################################################
	#endregion textboxes
	#region Richtextbox
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!R I C H T E X T B O X !!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$richtextbox_output_TextChanged = {
		#Scroll to Bottom when text is changed
		$richtextbox_output.SelectionStart = $richtextbox_output.Text.Length
		$richtextbox_output.ScrollToCaret()
	}
	#endregion richtextbox
	#region Toolstrips
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!T O O L S T R I P S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$toolstrip_user_status_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Profile folder"
		# Getting OS Version
		$OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
		$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
		Add-RichTextBox -text $Splitversion
		# this needs some polishing!! maybe do some switch-stuff!	
		if ($OS -gt "10")
		{
			$Profilepath = "$Profilefolder$username.v5"
		}
		else
		{
			if ($OS -gt "6.3")
			{
				$Profilepath = "$Profilefolder$username.v4"
			}
			else
			{
				if ($OS -gt "6.2")
				{
					$Profilepath = "$Profilefolder$username.v3"
				}
				else
				{
					if ($OS -gt "6.1")
					{
						$Profilepath = "$Profilefolder$username.v2"
					}
					else
					{
						$Profile = "$Profilefolder$username"
					}
				}
			}
		}
		Add-RichTextBox -text $Profilepath
		Explorer $Profilepath
	}
	############################################################################################
	$toolstrip_home_status_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Home folder"
		$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
		Add-RichTextBox -text $Splitversion
		$Homepath = "$Homefolder$Username"
		Add-RichTextBox -text $Homepath
		Explorer $Homepath
	}
	############################################################################################
	#endregion toolstrips
	#region MenuItems
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!M E N U I T E M S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	
	$aboutToolStripMenuItem_Click = { Call-About_psf }
	############################################################################################
	$quitToolStripMenuItem_Click = { $MainForm.Close() }
	############################################################################################
	$optionsToolStripMenuItem_Click = { Call-Options_psf }
	############################################################################################
	$aDExplorerToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\AdExplorer.exe"
	}
	############################################################################################
	$procexpToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\procexp.exe"
	}
	############################################################################################
	$procmonToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\Procmon.exe"
	}
	############################################################################################
	$nirLauncherToolStripMenuItem1_Click = {
		Start-Process "$global:Nirlauncher\NirLauncher.exe"
	}
	#endregion MenuItems
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion code
	#------------------------------------------------------------------------------------------#
	#region Mainform
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! F O R M   C L O S I N G !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$MainForm_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		#Writing the config back but only if there already is a config. If there is no config you
		#need to save or klick atleast ok in the options.
		$Exportpath = $Confpath + "/Config.csv"
		if (Test-Path $Exportpath -PathType Leaf)
		{
			New-Object -TypeName PSCustomObject -Property @{
				"global:Language" = $Language
				"global:Profilefolder" = $Profilefolder
				"global:Homefolder" = $Homefolder
				"global:Outfile" = $Outfile
				"global:SiteName" = $SiteName
				"global:SCCMServer" = $SCCMServer
				"global:SCCMNameSpace" = $SCCMNameSpace
				"global:SCCMEnabled" = $SCCMEnabled
				"global:Nirlauncher" = $Nirlauncher
				"global:Sysinternals" = $Sysinternals
				"global:CmRCViewer" = $CmRCViewer
			} | Export-Csv -Path $Exportpath -NoTypeInformation
		}
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!! F O R M   S I Z E   C H A N G E D !!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$MainForm_SizeChanged = {
		# Change the Richtextbox_output width according to the window size.
		$Newsize = $richtextbox_output.width / 7.1
		$Newsize = [System.Math]::Truncate($Newsize)
		$Newsize = $Newsize - 2
		$global:Fillchar = $Newsize
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion Mainform
	#------------------------------------------------------------------------------------------#
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_richtextbox_output = $richtextbox_output.Text
		$script:MainForm_textbox_Process = $textbox_Process.Text
		$script:MainForm_textbox_services = $textbox_services.Text
		$script:MainForm_combobox1 = $combobox1.Text
		$script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItem
		$script:MainForm_textbox_search = $textbox_search.Text
		$script:MainForm_textbox_debug = $textbox_debug.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$richtextbox_output.remove_TextChanged($richtextbox_output_TextChanged)
			$button_deleteGPO.remove_Click($button_deleteGPO_Click)
			$button_gpresult.remove_Click($button_gpresult_Click)
			$Button_gpupdate.remove_Click($Button_gpupdate_Click)
			$button_export.remove_Click($button_export_Click)
			$button_clear.remove_Click($button_clear_Click)
			$buttonFixWMI.remove_Click($buttonFixWMI_Click)
			$button_shutdown.remove_Click($button_shutdown_Click)
			$button_C.remove_Click($button_C_Click)
			$button_WOL.remove_Click($button_WOL_Click)
			$button_logoff_user.remove_Click($button_logoff_user_Click)
			$button_get_session.remove_Click($button_get_session_Click)
			$button_Userunlock.remove_Click($button_Userunlock_Click)
			$button_ResetPWD.remove_Click($button_ResetPWD_Click)
			$button_DNScheck.remove_Click($button_DNScheck_Click)
			$button_ping4.remove_Click($button_ping_Click)
			$button_ipconfig.remove_Click($button_ipconfig_Click)
			$button_regedit.remove_Click($button_regedit_Click)
			$button_cmd.remove_Click($button_cmd_Click)
			$button_psremote.remove_Click($button_psremote_Click)
			$button_MSRA.remove_Click($button_MSRA_Click)
			$button_Remotecontrol.remove_Click($button_Remotecontrol_Click)
			$button_rdp.remove_Click($button_rdp_Click)
			$button_hotfix.remove_Click($button_hotfix_Click)
			$button_MMCServices.remove_Click($button_MMCServices_Click)
			$button_compmgmt.remove_Click($button_compmgmt_Click)
			$button_localadmins.remove_Click($button_localadmins_Click)
			$button_folderrights.remove_Click($button_folderrights_Click)
			$button_profilerights.remove_Click($button_profilerights_Click)
			$button_homerights.remove_Click($button_homerights_Click)
			$button_PCGroups.remove_Click($button_PCGroups_Click)
			$button_ComputerGroups.remove_Click($button_ComputerGroups_Click)
			$button_autostart.remove_Click($button_autostart_Click)
			$button_installedSoftware.remove_Click($button_installedSoftware_Click)
			$button_printer.remove_Click($button_printer_Click)
			$button_USBDevice.remove_Click($button_USBDevice_Click)
			$button_systemtype.remove_Click($button_systemtype_Click)
			$button_memory.remove_Click($button_memory_Click)
			$button_processor.remove_Click($button_processor_Click)
			$button_mainboard.remove_Click($button_mainboard_Click)
			$button_ipconfig2.remove_Click($button_ipconfig2_Click)
			$button_testport.remove_Click($button_testport_Click)
			$button_hosts.remove_Click($button_hosts_Click)
			$button_routetable.remove_Click($button_routetable_Click)
			$button_checkWLAN.remove_Click($button_checkWLAN_Click)
			$button_process_stop.remove_Click($button_process_stop_Click)
			$button_process_start.remove_Click($button_process_start_Click)
			$textbox_Process.remove_Click($textbox_Process_Click)
			$textbox_Process.remove_KeyPress($textbox_Process_KeyPress)
			$button_cpuram.remove_Click($button_cpuram_Click)
			$button_taskmanager.remove_Click($button_taskmanager_Click)
			$button_process_cmd.remove_Click($button_process_cmd_Click)
			$button_process_grid.remove_Click($button_process_grid_Click)
			$button_process_owner.remove_Click($button_process_owner_Click)
			$button_process_100.remove_Click($button_process_100_Click)
			$button_proclasthour.remove_Click($button_proclasthour_Click)
			$button_process.remove_Click($button_process_Click)
			$button_servicesrunning.remove_Click($button_servicesrunning_Click)
			$button_services.remove_Click($button_services_Click)
			$button_servicesauto.remove_Click($button_servicesauto_Click)
			$button_servicesautostop.remove_Click($button_servicesautostop_Click)
			$button_servicesnonstandard.remove_Click($button_servicesnonstandard_Click)
			$button_servicesstop.remove_Click($button_servicesstop_Click)
			$button_servicesstart.remove_Click($button_servicesstart_Click)
			$button_servicesrestart.remove_Click($button_servicesrestart_Click)
			$button_servicescheck.remove_Click($button_servicescheck_Click)
			$textbox_services.remove_MouseClick($textbox_services_MouseClick)
			$button_diskusage.remove_Click($button_diskusage_Click)
			$button_deleteoffline.remove_Click($button_deleteoffline_Click)
			$button_volumes.remove_Click($button_volumes_Click)
			$button_eventlogmmc.remove_Click($button_eventlogmmc_Click)
			$button_eventlog20.remove_Click($button_eventlog20_Click)
			$button_eventlognames.remove_Click($button_eventlognames_Click)
			$buttonTSHanging.remove_Click($buttonTSHanging_Click)
			$button_getsccmcache.remove_Click($button_getsccmcache_Click)
			$button_getadvertisedsoftware.remove_Click($button_getadvertisedsoftware_Click)
			$button_sccm_start.remove_Click($button_sccm_start_Click)
			$button_search.remove_Click($button_search_Click)
			$textbox_search.remove_Click($textbox_search_Click)
			$textbox_search.remove_KeyPress($textbox_search_KeyPress)
			$button_getvariablesfilter.remove_Click($button_getvariablesfilter_Click)
			$button_listvariables.remove_Click($button_listvariables_Click)
			$textbox_debug.remove_Click($textbox_debug_Click)
			$textbox_debug.remove_KeyPress($textbox_debug_KeyPress)
			$button_debug.remove_Click($button_debug_Click)
			$MainForm.remove_AutoSizeChanged($MainForm_SizeChanged)
			$MainForm.remove_FormClosed($MainForm_FormClosed)
			$MainForm.remove_Load($OnLoadFormEvent)
			$MainForm.remove_SizeChanged($MainForm_SizeChanged)
			$MainForm.remove_Resize($MainForm_SizeChanged)
			$button_Check.remove_Click($button_check_click)
			$aboutToolStripMenuItem.remove_Click($aboutToolStripMenuItem_Click)
			$textbox_username.remove_KeyPress($textbox_username_KeyPress)
			$textbox_username.remove_Click($textbox_username_Click)
			$button_GetPC.remove_Click($button_GetPC_Click)
			$quitToolStripMenuItem.remove_Click($quitToolStripMenuItem_Click)
			$aDExplorerToolStripMenuItem.remove_Click($aDExplorerToolStripMenuItem_Click)
			$procexpToolStripMenuItem.remove_Click($procexpToolStripMenuItem_Click)
			$procmonToolStripMenuItem.remove_Click($procmonToolStripMenuItem_Click)
			$nirLauncherToolStripMenuItem1.remove_Click($nirLauncherToolStripMenuItem1_Click)
			$optionsToolStripMenuItem.remove_Click($optionsToolStripMenuItem_Click)
			$textbox_computername.remove_KeyPress($textbox_computername_KeyPress)
			$textbox_computername.remove_Click($textbox_computername_Click)
			$textbox_computername.remove_TextChanged($textbox_computername_TextChanged)
			$toolstrip_home_status.remove_Click($toolstrip_home_status_Click)
			$toolstrip_user_status.remove_Click($toolstrip_user_status_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$tabcontrol_Home.SuspendLayout()
	$tabpage1.SuspendLayout()
	$groupbox15.SuspendLayout()
	$groupbox14.SuspendLayout()
	$groupbox13.SuspendLayout()
	$groupbox12.SuspendLayout()
	$groupbox11.SuspendLayout()
	$groupbox9.SuspendLayout()
	$tabpage2.SuspendLayout()
	$groupbox16.SuspendLayout()
	$groupbox7.SuspendLayout()
	$groupbox6.SuspendLayout()
	$groupbox5.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	$tabpage3.SuspendLayout()
	$groupbox19.SuspendLayout()
	$tabpage4.SuspendLayout()
	$chart1.BeginInit()
	$groupbox21.SuspendLayout()
	$groupbox20.SuspendLayout()
	$tabpage5.SuspendLayout()
	$groupbox8.SuspendLayout()
	$groupbox4.SuspendLayout()
	$tabpage6.SuspendLayout()
	$groupbox22.SuspendLayout()
	$tabpage8.SuspendLayout()
	$groupbox23.SuspendLayout()
	$tabpage10.SuspendLayout()
	$groupbox18.SuspendLayout()
	$groupbox17.SuspendLayout()
	$tabpage11.SuspendLayout()
	$tabpage_debug.SuspendLayout()
	$toolstrip1.SuspendLayout()
	$menustrip1.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($richtextbox_output)
	$MainForm.Controls.Add($tabcontrol_Home)
	$MainForm.Controls.Add($statusbar1)
	$MainForm.Controls.Add($toolstrip1)
	$MainForm.Controls.Add($menustrip1)
	$MainForm.AutoSize = $True
	$MainForm.BackColor = 'Control'
	$MainForm.ClientSize = '1272, 873'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
AAABAAIAICAAAAAAIACoEAAAJgAAACgoAAAAACAAaBoAAM4QAAAoAAAAIAAAAEAAAAABACAAAAAA
AAAgAAAAAAAAAAAAAAAAAAAAAAAAA9T+/wTV//8D1f7/A9T+/wPU/v8E1P7/A9T+/wPU/v8E1P3/
BNT9/wTU/f8E0/z/BdP7/wXT+v8G0vj/B9D2/wfO9v8G0vj/BNT7/wTU/f8D1P7/A9X+/wPV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wPV//8D1v//A9b//wPW
//8D1v//A9f//wPX//8D1///A9j//wPY//8D2f7/BM3r/wqnv/8OkKj/D4yk/wuguP8GxuL/A9r9
/wPX//8D1v//A9b//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9X//wXI6f8WX23/HSsx/xs9RP8a
Qkn/Hisw/xhPWv8Hv9z/A9f//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8C3f//EXyO
/x4lKf8PjZ7/EniG/xRwfP8Mobf/HDY9/xdVYf8D2f7/BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV+v8cNDv/FGh3/wTO8/8bMzz/HC4y/wTP7P8QhJP/Hiov/wXN8v8E1v//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNb6/xs/SP8VZHL/C6K6/xtES/8cOT//DJ+0/xF8i/8dMTf/
BND1/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//EIqe/xwzOf8bQEf/Gz1D/xw0
Of8aQEf/HDU7/xRpd/8D2v3/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPd//8TcH//
Gzk+/xdXYP8dLjP/HiQp/xdYYP8bP0P/F1Re/wPV/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//At7//xVicP8dMTf/FHF+/x4nLP8eISX/FWh0/xpAR/8aPUb/A9f+/wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8D2f//C6jE/x4mK/8bOkD/IB4i/x8eIv8eKS7/Hx8i/w+Kn/8C
3P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8FyOf/HDc+/xs8Qf8eJSn/Hx8i
/x0wNv8cMDb/Br/j/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNb//we83f8d
KS7/HDI4/x4qL/8fISb/HDg+/x4qL/8HvN3/BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8D3P//DZau/yAbHv8eKCz/Higs/x0rL/8cNjz/IRga/xF+kP8C3f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//A9j//wbF4/8bOT//IBod/x4nLf8eJyz/HTE3/x00O/8gGh3/HS4z/wfB
3/8D2P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wPX//8GxuL/Fllk/yAYHP8gHCD/Higt/x4nLP8cMzn/
HDY7/yAbH/8gGRz/GFNd/wfA3P8D1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1f//BNH0/xRqeP8fGh3/Hx8i/x4i
J/8eJyz/Higt/x0tMv8cNz3/Hx8j/x8fI/8gGx3/FWFu/wXO7/8D1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8D1f//A9X+/wPX+/8Jscf/
HS81/x4oLf8Olab/FHB8/xlMVP8eKC3/Hx8k/xpGTf8UbXr/EIua/x4mK/8eJyz/C6W+/wPW/P8D
1f//A9X//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//A9X//wTM
7v8LpMH/DJ61/xRre/8fIyf/F1xm/xNxf/8cO0D/GE9W/x8eI/8fHSH/Gz9F/xw2O/8VYWz/FWdw
/x4mKv8TbX7/DJ63/wqpxf8EzvD/A9X//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//
BNX//wPV//8E0PX/D4ue/xpDSv8ZRUv/Gzo//x4nK/8bQkj/HTI2/x0wNP8dKi7/Hx4i/x8eIv8e
Jir/HSwx/x0vNf8aRkz/HSou/xs7Qf8aP0b/G0RL/w+Po/8E0PP/A9X//wTV//8E1f//BNX//wTV
//8D1P7/BNX//wTV//8E1f//A9X//wTQ9P8PkKP/G0NJ/xpBSP8bPkX/Hx0h/x8eIv8fHiL/Hx4i
/x8dIf8gHiL/IB4i/x8dIf8fHiL/Hx4i/x8eIv8fHSH/HDM4/xw3PP8dNDn/FHOB/wXL7P8D1f//
BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wPa//8EzvH/CLjS/xtAR/8f
HCD/HyIm/x8fI/8eJCr/Hiov/x4nLP8eJyv/Hiku/x4kKP8fHyP/IB4h/yAbHv8cNz7/CLTR/wbF
5/8D1fv/A9b//wTU//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX/
/wPa+v8UbX3/IBYY/xlGT/8MobT/DJmt/wiyy/8Iudb/CLTP/wizzf8IttH/Ca3G/w2Wqv8NlKT/
GkNM/yEYGv8Tb3//At39/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E
1f//BNX//wTV//8D2P//B8Di/x8jJ/8eKCz/DJuw/wLZ/P8D2P//A9j//wPX//8D1///A9f//wPX
//8D2P//A9j//wLZ/P8NmK7/Hics/x8mKv8GweL/A9f//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wPU/v8E1f//BNX//wTV//8E1f//BNX//wPa//8KqsP/IBYY/xZYZv8EzO3/A9X//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A9b//wXJ6f8XUV3/IBMU/w2Uq/8C2///BNX//wTV//8E
1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//A9r//wqnwP8hFRf/EneL/wTW
/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNP7/xNsfv8hEhT/D42j
/wLb//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8D2P//
B77f/x8hJP8TcIL/A9X7/wPV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPV//8D
1Pr/FGt8/x8fIf8JuNb/Atj//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV
//8E1f//BNX//wTV//8D1/r/FGt6/xs7Q/8It9P/A9b+/wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//A9b+/wi51f8bO0P/FGV0/wPY+/8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wPV//8Fy+n/F1Zg/xdSXf8E0PD/BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E0PD/GFRf/xlHUf8GyeX/A9b//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPW//8GxOD/GUxU
/w2Wrf8C2///BNX//wTV//8E1f//BNX//wTV//8E1f//Atv//wyZs/8aQ0v/B73Z/wPX//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wPZ//8MoLX/D5Cl/wLc//8E1f//BNX//wTV//8E1f//BNX//wTV//8C3P//DZKp/w2X
qv8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX/
/wTV//8D1v//A9f//wPX//8D1///A9j//wXM7v8Fy+3/A9f//wPW//8D1///A9f//wPX//8D1///
A9f//wPZ//8Gxuj/Bcfp/wLY//8D1///A9f//wPY//8D2P//A9j//wPV//8E1f//BNX//wTV//8D
1P7/A9T+/wPU/v8D1P7/A9X+/wPV/v8E1f7/BNT9/wTV/f8E1f3/BNX+/wPV/v8D1f7/A9X+/wTV
/v8E1f7/BNX+/wTV/f8E1P3/BNX9/wTV/f8E1f3/BNX9/wTV/v8D1f7/BNX9/wTW/f8D1v7/A9X+
/wPU/v8D1P7/A9T+/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACgAAABQAAAAAQAgAAAAAAAAMgAAAAAAAAAA
AAAAAAAAAAAAAATV//8E1f//BNX//wTV/v8F1P7/BNT+/wXU/v8F1P7/BNT+/wXU/v8F1P7/BdT9
/wXU/f8F1P3/BdP8/wbT/P8G0vv/B9H5/wjR+P8I0Pf/Cc/3/wjR+P8G0vr/BdP8/wXU/v8F1P7/
BNX+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8D2P//A9j//wPY//8D2P//A9j//wPZ//8D2f//A9n//wPZ//8D2v//A9r//wPa
//8D2///A97//wLk//8D3P//BdH2/wbO8v8E2P//AuL//wPf//8D2///A9r//wPZ//8D2P//BNf/
/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9n//wXT9f8U
doX/HTQ6/yAhJP8hHSD/Hi4z/xhYZP8IxeL/A93//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9j//wXQ8/8bR0//IwoK/yAiJv8YVV//
F11o/x4wNf8jCQr/HjI3/wfD4P8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wLh//8Rg5X/JAcH/xhVXv8HyuT/FHSC/xZncv8G0u//EYSV
/yMND/8ZUVz/A9v+/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8E1vv/HDg//x8nK/8F0PL/Bc71/yAcIP8hGBn/B8Hi/wLn//8bRE3/Hycr/wbN
8v8E2P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1///
BdL4/x4sMv8cPkb/A93//wbK7P8fKzD/HyUo/wfD4f8B5///FG5//yAiJP8GzPD/BNj//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPf//8WZXL/Hi0z
/xZmc/8aSlH/Gk5V/x05P/8aS1T/GFZe/xtCSv8cO0T/BNb8/wTW//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//CrfT/x8oK/8eMDX/HTc9/x40
Of8eMDX/HTQ5/xxBRv8hHR//D5ao/wPe//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A+D//xRxgP8dNDj/GkhQ/xZqdP8fJir/IRgc/xVvef8b
QUf/G0NI/xlQWv8E1f7/BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wLh//8WZnT/Iw0P/xR1gv8TfYv/IB0h/yEZHP8WZXD/EYiW/yAgI/8cOkP/
BNf+/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8D3f//DKzH/yIXGf8eLjP/Gz9F/yEYHP8gHSD/Hisw/x8nK/8iDxH/EnyN/wLg//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNf//wTW+v8b
QEj/ICAk/xlRWP8hGx7/IB0g/x4vNP8gIib/HTI4/wXO8v8E2P//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3v//GVBc/yIUFv8YU1v/
HyIm/yEbHv8cQ0r/ICAj/xtASf8E1v//BNf//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E2P//Bc70/x0yOP8hFhr/G0JJ/x8oLf8gHSH/GkxT
/yEbH/8eMjf/BdD0/wTY//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//A97//wq00f8gHB//IRsf/x0xNv8fKCz/HyYq/xpJUP8hGh7/IhcZ/w6Y
rv8C4P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNb//wPd//8YWGL/IRYZ/yAcIP8eLzX/HyYr/x4uM/8bRk//IRod/yEXGv8bQUn/BNv//wTX//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wLj//8Pl63/IhUX
/yAeIv8gHCD/HjE2/x8mK/8eMTb/G0VK/yEaHf8gHyP/IRcZ/xCOof8C5P//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPf//8Norf/IB8h/yEbH/8gHSH/IBwg/x4w
Nf8fJiv/HTI3/xpKUf8hGRz/IB0h/yEbH/8hGx3/D5Oo/wPg//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wPb//8Iwd//ICUo/yEWGf8gHyL/Hiwx/yEXGv8dMzn/Hygt/x8oLf8Z
TFT/IRYZ/x8nLP8gICT/IRkb/yAeIP8KtdD/A9z//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNb/
/wTY//8C4///FW16/yIQEv8fJSn/D5an/w+Uo/8aSFD/GktT/x8lKv8gGx//GktS/xxARv8Plaf/
EYyb/yAhJf8iEhT/GVFc/wPe//8E2P//BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9z//wTU/P8Gy+z/B8Xl/x4x
N/8iERP/F2Ft/wymvf8fKi7/Fmhz/xhZYP8hGBz/IRkd/xxBR/8YWmT/Hiov/xCMnP8Vb3r/IhAS
/x00Ov8Gyuz/Bc/y/wTY//8D3P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A9z//w2iuf8aS1T/GFpg/xtESv8hGh7/HDtB/xZtdv8d
Njv/ICIl/xpMUf8eKS7/IB0h/yAeIv8fJSn/G0BG/yAiJv8dMjj/FHZ//xtITv8hGh7/G0BH/xhU
XP8ZUlz/DKrE/wPc//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//A9v//wm31v8bSEv/HTc7/xw5P/8ZUFb/ICIn/x8jJ/8eLzT/HjI3/x4xNv8eLjP/
IB0h/yAfI/8gHyP/IB0h/x8pLf8eLzT/HTA1/x4uNP8fJCn/HyIn/xlWXP8dMjj/HjM3/xpPVP8K
tM//A9r//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPY
//8Hx+f/E3eF/xw+RP8bQEf/GVRc/yAdIf8gHiL/IBwg/yAcIP8gHCD/IB0g/yAeIv8gHyP/IB8j
/yAeIv8gHiH/IBwg/yAcIP8gHCD/IB4i/yAdIP8cP0X/HTc8/x4xNv8aTVX/CrPO/wPa//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNj//wPe//8G
yu7/Bszp/xdjbf8hGBv/IBwg/yIVF/8iFBb/IRYZ/yIUFv8hHSD/IRYY/yIWGP8hHB//IhMV/yEW
GP8iFBf/IhMW/yEcH/8hGBv/GVJb/wbJ6f8Iv+L/BdP6/wPb//8E1P//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//AuL//w2ivP8iFRf/
IRgb/x02PP8RiJf/FWp2/w2cs/8PkaX/CrHO/w6ZsP8Ol63/C67J/xCFl/8Ol63/FmRx/xRxff8e
MDT/IRod/yEZHP8Nobr/AuP//wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNf//wXQ9P8dOD7/IRcZ/yAeIP8MqsT/Aeb/
/wLh//8C3///AuD//wPc//8C3///At///wPc//8C4f//At///wPg//8B6P//DKfC/yEaHP8hFhn/
HD9G/wTX/P8E1v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wPc//8Ks9L/IRwf/yITFf8WZXL/AuL//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPg//8WYm7/IhQW/yEcH/8KsM3/A9z/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8D3///DaG4/yIUFv8fJSn/CMDf/wPb//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8D3f//CbXT/yAeIf8iERL/EIWZ/wLh//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9//
/w2etf8iEBH/Gz5G/wTW/v8E1v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNj//wbN9P8dMTf/Ig4P/xJ+kf8C4f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPc//8KsM7/IhQV/xtC
S/8E2f//BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTW//8E1f3/HDtC/yMREv8No7z/At7//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E2P//Bc/y/x4xNv8gJCj/B8fn/wPb//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//B8Pk/yAe
If8dMjf/BdL2/wTX//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wPe//8No7r/Iw8P/xlOWP8D2/7/BNf//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1///BNz+/xhXYf8jDQ7/Dpiv/wPe//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//A97//xCOof8jDAz/FWp5/wPe//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1v//A93+/xRxgP8kBQX/E3iI/wPh//8E1v//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8C4f//EI+j/yIVFf8Lrsn/A9z//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//A9z//wqxz/8iExP/E3uM/wPf//8E1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNb//wLk//8XYGz/En+R/wLh//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wLf//8P
jKH/GFNd/wLk//8E1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3f//DKW7
/wq31v8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D2///C6zJ/w+Spf8C3///
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNf//wPZ//8D2f//A9n//wPZ//8D2f//A9n//wTX//8D2f//A9j//wPY
//8D2f//A9n//wPZ//8D2f//A9n//wPZ//8D2f//A9r//wPZ//8E1v7/A9r//wPZ//8D2f//A9n/
/wPa//8D2v//A9v//wPb//8D1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1P7/BdT+/wXT/f8F0/3/BdT9/wXU/v8F1P7/BNT+/wTU/v8E1P7/BNT+/wXU/v8F
1P7/BdT+/wXU/f8F0/3/BdP9/wXU/f8F1P3/BdT9/wXU/f8F1P3/BdT+/wTU/v8E1P7/BdT9/wXU
/f8E1P7/BNX//wTV//8E1f//BNX//wTV//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AA==')
	#endregion
	$MainForm.MainMenuStrip = $menustrip1
	$MainForm.MinimumSize = '1288, 858'
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'Main Form'
	$MainForm.add_AutoSizeChanged($MainForm_SizeChanged)
	$MainForm.add_FormClosed($MainForm_FormClosed)
	$MainForm.add_Load($OnLoadFormEvent)
	$MainForm.add_SizeChanged($MainForm_SizeChanged)
	$MainForm.add_Resize($MainForm_SizeChanged)
	#
	# richtextbox_output
	#
	$richtextbox_output.BackColor = 'Control'
	$richtextbox_output.BorderStyle = 'FixedSingle'
	$richtextbox_output.DetectUrls = $False
	$richtextbox_output.Dock = 'Fill'
	$richtextbox_output.Font = 'Lucida Console, 9pt'
	$richtextbox_output.HideSelection = $False
	$richtextbox_output.Location = '0, 167'
	$richtextbox_output.Name = 'richtextbox_output'
	$richtextbox_output.ReadOnly = $True
	$richtextbox_output.ScrollBars = 'ForcedVertical'
	$richtextbox_output.Size = '1272, 686'
	$richtextbox_output.TabIndex = 1
	$richtextbox_output.Text = ''
	$richtextbox_output.add_TextChanged($richtextbox_output_TextChanged)
	#
	# tabcontrol_Home
	#
	$tabcontrol_Home.Controls.Add($tabpage1)
	$tabcontrol_Home.Controls.Add($tabpage2)
	$tabcontrol_Home.Controls.Add($tabpage3)
	$tabcontrol_Home.Controls.Add($tabpage4)
	$tabcontrol_Home.Controls.Add($tabpage5)
	$tabcontrol_Home.Controls.Add($tabpage6)
	$tabcontrol_Home.Controls.Add($tabpage8)
	$tabcontrol_Home.Controls.Add($tabpage10)
	$tabcontrol_Home.Controls.Add($tabpage11)
	$tabcontrol_Home.Controls.Add($tabpage_debug)
	$tabcontrol_Home.Dock = 'Top'
	$tabcontrol_Home.HotTrack = $True
	$tabcontrol_Home.ImageList = $imagelist1
	$tabcontrol_Home.ImeMode = 'Off'
	$tabcontrol_Home.Location = '0, 50'
	$tabcontrol_Home.Name = 'tabcontrol_Home'
	$tabcontrol_Home.SelectedIndex = 0
	$tabcontrol_Home.Size = '1272, 117'
	$tabcontrol_Home.TabIndex = 5
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($groupbox15)
	$tabpage1.Controls.Add($groupbox14)
	$tabpage1.Controls.Add($groupbox13)
	$tabpage1.Controls.Add($groupbox12)
	$tabpage1.Controls.Add($groupbox11)
	$tabpage1.Controls.Add($groupbox9)
	$tabpage1.BackColor = 'ControlLightLight'
	$tabpage1.BackgroundImageLayout = 'Stretch'
	$tabpage1.ImageIndex = 0
	$tabpage1.Location = '4, 23'
	$tabpage1.Margin = '0, 0, 0, 0'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '1264, 90'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'Home'
	#
	# groupbox15
	#
	$groupbox15.Controls.Add($button_deleteGPO)
	$groupbox15.Controls.Add($button_gpresult)
	$groupbox15.Controls.Add($Button_gpupdate)
	$groupbox15.ForeColor = '59, 59, 59'
	$groupbox15.Location = '918, 6'
	$groupbox15.Name = 'groupbox15'
	$groupbox15.Size = '227, 78'
	$groupbox15.TabIndex = 22
	$groupbox15.TabStop = $False
	$groupbox15.Text = 'GPO'
	#
	# button_deleteGPO
	#
	$button_deleteGPO.ForeColor = 'Black'
	#region Binary Data
	$button_deleteGPO.Image = [System.Convert]::FromBase64String('
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
ou7ubJTub2nfg3L6encDAAAAAElFTkSuQmCC')
	#endregion
	$button_deleteGPO.Location = '97, 19'
	$button_deleteGPO.Name = 'button_deleteGPO'
	$button_deleteGPO.Size = '124, 24'
	$button_deleteGPO.TabIndex = 8
	$button_deleteGPO.Text = 'Delete Local GPO'
	$button_deleteGPO.TextImageRelation = 'ImageBeforeText'
	$button_deleteGPO.UseVisualStyleBackColor = $True
	$button_deleteGPO.add_Click($button_deleteGPO_Click)
	#
	# button_gpresult
	#
	$button_gpresult.ForeColor = 'Black'
	#region Binary Data
	$button_gpresult.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH1SURBVDhPlVPPTxNBGN3ERPTilTTxQvwH
MJw4cCA9edD/Bm1ROLQleijG1cSjIP3BzG53A7SUQCKliXA2UUsDCf0BhouxCVIidHef3zfbVtDW
hJe8ffPNvHn5ZrKjBWLrjTvTedx+muvyFnPS18vz7GO/dhk8eR2wv73VByczvpwCkeWvKDVp/BP4
TGTlmud5ncH+9lYfnYDoSgkv8mU8z5Uxk91FLFtSyjXP8zpjoF9A9QKIr9dQp3HF9VklHlI9u1FD
taVsuDG52jsgTqYlfRTWmyAMPQhTH4etj2Hp9ShW9BG8/MDRgPZk7WoA3zTjO9GK3wd2HgLbj4CP
D/Ap/wrCzEFKC2JxETKdhC3TsAyBjGnCtu1Gt4O3m3VYkUEYsSGI6BBk9C7SRlat9YNJId0O6Lh4
VzxSysd1iKmUoC+wf1BBpVZH7fBIKdcMKeWfgPnNMhLFfbzf2sNcYQ/zxQOkkgm4nodvx8eYmHiM
UCislGsXnh/QOQIjWdhtj3wkEwtwHAc/Gg00z87w6/xcKdeu6/oB//sTBXdAxtNmE6FwGM+mppRy
7VFnKiAQWTvpvIXOG7hJ1EJ5LNONMy5aLTgU5NGYlWuGCiAME0d6cdWSytgPhmFc/Sf+RmphrmCS
SQjxD3lzJpM5aVv74h6xZ3c+teHfVSynIPQd5DgAAAAASUVORK5CYII=')
	#endregion
	$button_gpresult.Location = '6, 19'
	$button_gpresult.Name = 'button_gpresult'
	$button_gpresult.Size = '85, 24'
	$button_gpresult.TabIndex = 0
	$button_gpresult.Text = 'GPResult'
	$button_gpresult.TextImageRelation = 'ImageBeforeText'
	$button_gpresult.UseVisualStyleBackColor = $True
	$button_gpresult.add_Click($button_gpresult_Click)
	#
	# Button_gpupdate
	#
	$Button_gpupdate.Enabled = $False
	$Button_gpupdate.Font = 'Microsoft Sans Serif, 8.25pt'
	$Button_gpupdate.ForeColor = 'Black'
	#region Binary Data
	$Button_gpupdate.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKwSURBVDhPhZPvS1NhFMdvRUYJ9ao3hRmV
/QHWG0EZ266/VjAqKQJpSGUmiWSGiWRt80flrzDENHVlKLKNINfcnVdrlk4G6iq1UinLcqEkaWRo
vvh2nnvv1HxRXzhcnuec83nOOc9zOQDc/8QXtiPxhgi1SRD5QvcBZVsWA8QViUt8gZsFQGUUpG8s
JSkhnMbsRtvwNKo6x5B02wNaWxWXDCBFplt8c3Z/AK2DU3hCwWqzsAxg8KS6flxzjsJJvjO1XmgK
3FWSM9iCvqwTac2vEFXSjevOEakKyUGKK2pHbNlz8Hd8ON7wEtaBr9CXdILaCZcARDMWOd4gpXkI
2kof6nu/QEunKvlcePQxfUz2g6a44g7o7vYjw/4O5W46xOiyygCTa6Gy6xN0tX4klHZBa3aOrp4B
aRNZWHSWpelQZS/0DYOoevFZrlICUL9mcQJHLcNIKHmGrTsjIqnsBTl3RaHbw3YnlnpwomkExZ5J
0MEyQEuAS45xnGoZg5Ztctz6kNBtB+U0WfHF4gb6rNOY2nDaPo4cgdoMAngCGGzjyHZNwFDjZcPZ
yIKlTEVU0TxVutlQ7UWuGEC6YxK8OQgoEJBie49zjyeQYxui3lzlSt6y2FCTq3t+m1rfIrU1gLOP
PrIKFiWAKrfFffL+a6Q5Aqjtm8GRCnosJqGCBrlXTuc4gsI+Mg+LfxYXhGkkNw4hKvNejQTYxxti
2F1nCFO46plB3cB3XLQP022svAW1sQ353T9g6p5FJgHib3Yw3w4JQAqJufzQepiuMKvjG4w9c6gf
XJCnrEhL/eb7FpHn/YXSvnmcb/TPSQ4FwLRLdaVF1N16ilT7B+T1/PyrgthCN61d0FAlDMyeN1W9
tBrAtGe/LjVZlWfzscGyJGWfif2Fay1yLYBpC1kEWTDoH+K4PxJHyEw1ZC2AAAAAAElFTkSuQmCC')
	#endregion
	$Button_gpupdate.Location = '6, 49'
	$Button_gpupdate.Name = 'Button_gpupdate'
	$Button_gpupdate.Size = '85, 24'
	$Button_gpupdate.TabIndex = 7
	$Button_gpupdate.Text = 'GPUpdate'
	$Button_gpupdate.TextImageRelation = 'ImageBeforeText'
	$Button_gpupdate.UseVisualStyleBackColor = $True
	$Button_gpupdate.add_Click($Button_gpupdate_Click)
	#
	# groupbox14
	#
	$groupbox14.Controls.Add($button_export)
	$groupbox14.Controls.Add($button_clear)
	$groupbox14.ForeColor = '59, 59, 59'
	$groupbox14.Location = '1170, 6'
	$groupbox14.Name = 'groupbox14'
	$groupbox14.Size = '88, 78'
	$groupbox14.TabIndex = 21
	$groupbox14.TabStop = $False
	$groupbox14.Text = 'Log'
	#
	# button_export
	#
	$button_export.ForeColor = 'Black'
	#region Binary Data
	$button_export.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIGSURBVDhPfZPLTxNhFMUb/xA27lwRVF4G
VBYWWkATVsalS3ThwoAmBJKpZQeEhsSFJsTQloROZ2o1RhqImQSJstAEXBgTRXm0Ux59OTC0lMN3
L0Of1pOcfGfuzP19j5mxAWCHwuGErKoIBIOYK1jmUVYUBFU1bqsQ9RUA9ND/pOs6wX1WL0uUiwCa
mfTz17rwb8vrXHvl9fIYi0YRUBS/1V8OoKWS/mxsYmNzi02ZNOPzIZvLcaaViO0EqgGyTPexLWaJ
xmLsreg21z6vrDDkfCW03ZoAXY8jHt8p2DAOuF4qVX1dG7Czu4/dvX0kEikYmUMcGcfIGvmCSZG3
i7UBiWQSyVQK5kEWI/4hNA40oGnwivBVdsuTJtwcboPTbZ+lvipAOp3B34wBiDOj5oVvE3i/Oob5
1QlE1ibFOA7t+xQcLjs9Xg2gPZuHR5xpxvAXifO09hB3py5wfvNVQqd0i2I1wDRN5LJnr6x5sBH+
T4/gXx7g65daP48zyw8EoHIF1ndwnM/j5ISj2G8zXizdR7+3TjQ9PisKPdfuoUvqpFgE0H9QqWtP
W+HR+qyrojzaHXEGDopFgBIKpekDOf953oXnxWlfx+RSL0YXO+CKtEOKtMG9cAOej7fR43aWA4Tq
hS+XumO4/Uf3MwecLifPSKbc4+5G15D9QyXgX7okXAYt8UUAtlMVDs/zLJvPSgAAAABJRU5ErkJg
gg==')
	#endregion
	$button_export.Location = '6, 49'
	$button_export.Name = 'button_export'
	$button_export.Size = '75, 24'
	$button_export.TabIndex = 1
	$button_export.Text = 'Export'
	$button_export.TextImageRelation = 'ImageBeforeText'
	$button_export.UseVisualStyleBackColor = $True
	$button_export.add_Click($button_export_Click)
	#
	# button_clear
	#
	$button_clear.ForeColor = 'Black'
	#region Binary Data
	$button_clear.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALPSURBVDhPpZJJTBNAFIbfiRgPHjQmyCI3
E02ACEQ0xsQqi+xLWMq+iCJYpYstUErBtiIFCRjCVqAspSwVEFoqSWMJi0QWsSKLGKJ4McrJswf9
nZZEMQgXX/Jn3hy+781MhgzVXHpal0kTvWXUr46jIdb3V8SSqY5LosJSFjkNqiOpRxlO7fJgsj2M
I1tVgltTohfmVZGmgwUSGQlZDBXh6CoPRXtpcNSyOr64Kd4TE9IgSDne2FdgrOWSQFxCfGERPs+K
sWouQEfZNTRn+eGVKsoB5109lfRPQd+DGBqp4RJPIMXUzBry7oixZS2AbTgXbbIrqIjzQ3Wsj46I
Dv8tqGSC2gzSK6MPPVEnflp/xnPA45Yl5N2VYHMsF0v6TGgKL6EozTO7QXSBmCCRhhlk1cuptyLG
3VCd+tiiFeKtWYwV021smvMd8PDoS+TzC/HekI4FbTIa+OfQZBewY28NPkpZsnRLMWlQY9FYjpVx
IWZ1OXgzIsTKUC5WB9IdcO/ANHiCYmzouGjk+6FZdJ7ouU7688vHOWzMNGLdIoa1lQtrxy2smQsx
r8/CjDYLy305WO3hgieUokM3Ab6kDOz+vg5BjSCozdyQAnN9NAzqRLwelTGYj0lNMqbabsLWl4vJ
Bi6Wu1MxXR0AUZHcAbeKfKnFLmDlUi/gfJ/QSfBhsoxNzUC/IgLzvQVY7E6DUR0NW3c2TIoAlIYc
+2qHxfJKapf4k0Zykb0B+1kcH/cQzT0OukrDMKUvwjujEAudadBJA2HruQ7j/UDIwlzssKcqyplU
kc6kjHQhRZTbjoCVU07oaV59nj9M6nC8aEmAVsKBjT2kUbELjjlJqlgW++roPXYEnbIQu+TIxTPH
w6vSPbfLk85iTnsDY8pAlISe2P4De+zJb4FGdNkucWLxyuG4lihiPH7II1y/2WHlrol7BPvUURYf
Fm/H7qAC8B8B/QJreuGdId4vfwAAAABJRU5ErkJggg==')
	#endregion
	$button_clear.Location = '6, 19'
	$button_clear.Name = 'button_clear'
	$button_clear.Size = '75, 24'
	$button_clear.TabIndex = 0
	$button_clear.Text = 'Clear'
	$button_clear.TextImageRelation = 'ImageBeforeText'
	$button_clear.UseVisualStyleBackColor = $True
	$button_clear.add_Click($button_clear_Click)
	#
	# groupbox13
	#
	$groupbox13.Controls.Add($button_nbbattery)
	$groupbox13.Controls.Add($buttonFixWMI)
	$groupbox13.Controls.Add($button_shutdown)
	$groupbox13.Controls.Add($button_C)
	$groupbox13.Controls.Add($button_WOL)
	$groupbox13.ForeColor = '59, 59, 59'
	$groupbox13.Location = '641, 6'
	$groupbox13.Name = 'groupbox13'
	$groupbox13.Size = '271, 78'
	$groupbox13.TabIndex = 20
	$groupbox13.TabStop = $False
	$groupbox13.Text = 'PC'
	#
	# button_nbbattery
	#
	$button_nbbattery.ForeColor = 'Black'
	#region Binary Data
	$button_nbbattery.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJMSURBVDhPfZJdS1RRFIb3bYTeddNV/YAo
kCC8iTAQSyEpFUlGJZsKsZFIzGo+zjmTpTN+DDrmMW9MhtLxM0tNo0zNRGQklMkcCxNFC/HCfsDT
GopwgpkFi80++13PXnu9RwH/cn8Ee/tpaW3jsfmE/sEhymy3Dvw9iq2J2UhoWrVuv6evhhbC7O7u
sbW9QzD4gqo7zoihP9QTAnTtEcMTHuYjHkZHZ5n9sEqg8zUPjGamFryMTnoxRLO/JgbgctQws5lN
79IhzBlFm2T7rKySnR8PMjKfieaqEWkcgNNew/dfJqEfpXzb8xPZNVn+abK0YTKxaCO83obLmRBQ
y+JOJYGwIvhV8fSTdCBd+N8qavsUM58r0Zy1Io0DcNk9cruV7lVFbpZG17K0vqBISy2lcVjxfvGa
PMEj0jgAzeFlbusSfeuKgty7DMja/UVx7qwV/xvFWCgH3eUVaVxAHdObpymxuLlSXEFBfhk52Vc5
n3GZ1JMXGZo7Iy7UizQuoIHxteMMbCisJVUUFd8gL89CRno+re8UXZMnBNAg0jgA3eHj5coR+tYU
JYV2igpLyc0pJD2tAP+4omPsKG7NJ9I4AEMAPeFkemSIrsYs8nNucyHzOtbyUzSNKFqGknHriQAu
H8+WxMKIYjA6wBVFIGrltML3StHQq+SvTABwG17qTAuB+SQGZQ7PxcaOkMKcUjT2JFFdb6HancAF
iRTbzYp25/26bcPRhOFoxnA2y7ubEIe2y20V7VFNTE3M5k8cljwmmfJfRr9Fz/bVoH4Doa6IqPMH
NU4AAAAASUVORK5CYII=')
	#endregion
	$button_nbbattery.ImageAlign = 'MiddleRight'
	$button_nbbattery.Location = '177, 19'
	$button_nbbattery.Name = 'button_nbbattery'
	$button_nbbattery.Size = '88, 24'
	$button_nbbattery.TabIndex = 16
	$button_nbbattery.Text = 'NB Battery'
	$button_nbbattery.TextImageRelation = 'ImageBeforeText'
	$button_nbbattery.UseVisualStyleBackColor = $True
	#
	# buttonFixWMI
	#
	$buttonFixWMI.Font = 'Microsoft Sans Serif, 8.25pt'
	$buttonFixWMI.ForeColor = 'Black'
	#region Binary Data
	$buttonFixWMI.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH4SURBVDhPhZLPS9NxHMbXrUOCW9HBAimp
S4cIE4qCoFOX/oRO1n1hP1Zmm7NWk5Figykux9qvpsMIrDa3oV1cm9PmNjLdLDdwkItNipjs8uoz
xYVO/T7wnN7P84L3+/ORAbL9ZLU7my02x4rbM8r7Dz4c7hFeO1xxm/NN00Z3P4DZYr02LIoLi4sU
C2us5n+xvJwlEJhgyGoTVQmA0TRQTiSSpFJLvH03ht3ppn/wFf3mIUyDZmmAobePTDaL1+dnfDxA
T5+xEm7esiRApzewnMkQ+hwhHImiN7zYFpYEdGi6/nxbSBGNzhKeniESnuaJTo/26TN0z7tFVQJw
r72rEIslmAqFmYsnyYsjFotF0uk0jx5r1vYE5LV1wxPqi/z4+ZdQJIbd5UbZdpdusUJ7hxrl7bao
iJ3dFZDrlLvWvedh7gYFbyujvimUdx6siFH1eMKnhWtvkNPIXaWPV+DLTXCKf2I5yqS6hXq5olKq
0TZArlPhKgUvw2wr+FsE4BTl3iN8f3jQL8YHNkI7VAXktIc9v0fESjOi/OkSeM6wbmwgrqr3idzJ
zXitqoD8y0aI3YLwVRg7R9l0jHlVXaV8YjO6u/4DjALw9ToEL1AaaGT+/iHJckVVQFKlmMz3HGfV
0EBCJQ+KmWS5oipAqEl464n23HmnANk/QeJ+bQT7sMEAAAAASUVORK5CYII=')
	#endregion
	$buttonFixWMI.Location = '91, 49'
	$buttonFixWMI.Name = 'buttonFixWMI'
	$buttonFixWMI.Size = '80, 24'
	$buttonFixWMI.TabIndex = 15
	$buttonFixWMI.Text = 'Fix WMI'
	$buttonFixWMI.TextImageRelation = 'ImageBeforeText'
	$buttonFixWMI.UseVisualStyleBackColor = $True
	$buttonFixWMI.add_Click($buttonFixWMI_Click)
	#
	# button_shutdown
	#
	$button_shutdown.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_shutdown.ForeColor = 'Black'
	#region Binary Data
	$button_shutdown.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFKSURBVDhPnZHPSgJxFEZ9lFa9QI9URAUV
SFRQDQljuHFRhEFJLbRWIeJrjDqZf1MzU7MyK0sHS8SvuUKX39VF5MBZXL4zZ0AdXq/XtMEEmAAc
FMBgMPg39B4H+v0+gucXKN9X/oQ88kXgu9dD6a7M7B8cYnZunqFb3ckXgW73C8XbErOwuIS4mWDo
VnfyRcCyLOQLRWZ5ZRXpTJahW93JF4HPdhu5mzzjdK7BMAyGbnUnXwRarQ9ksjlmfWMT18kUQ7e6
ky8Cr2/vSKWzzNb2DqrVGkO3upMvAi/Npv2lNLPrcqHTsRi61Z18EXhuNHCVSDJu9x4uQ2GGbnUn
XwTqj0/ib/P5jnDsP2MCgaDYyReB2kMdJ/5TRGPmkFA4MsbvRh75IlCxfyiVWNwcY9ThgKZpETpU
PB7PGKOOruvRYcB+pmxmJmAagOMHFX4HMETwr9UAAAAASUVORK5CYII=')
	#endregion
	$button_shutdown.Location = '6, 19'
	$button_shutdown.Name = 'button_shutdown'
	$button_shutdown.Size = '80, 24'
	$button_shutdown.TabIndex = 8
	$button_shutdown.Text = 'Boot?'
	$button_shutdown.TextImageRelation = 'ImageBeforeText'
	$button_shutdown.UseVisualStyleBackColor = $True
	$button_shutdown.add_Click($button_shutdown_Click)
	#
	# button_C
	#
	$button_C.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_C.ForeColor = 'Black'
	#region Binary Data
	$button_C.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUND
IHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoi
SFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQ
yhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnp
fIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZ
Yu4V8bZMIUfEiK+ICzO5nCwR3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJ
X3HcVyzgZAvEl3JJS8/hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi
2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti
0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4b
Ky0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNFhImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5
FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH554SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S
8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJVgMWSASpgA+yQB7YBApBMdgJ9oBq
UAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG+UBAU
CcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyCqbASrAUbwwzYCfaBQ+BV
cAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqR
PuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegE
dBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9rB3WH8vE
CrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf+
On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFp
B+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5k
heQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TG
KQhFneJCYVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04b
pr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLC
zFLqUtulrKVFS48vvacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/C
VSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08j
T6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0b
erCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLu
M/5oYmGSYtJoct9UxtTbNN+02/R3Mz0zllmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfi
g6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWN
y8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c+c7tzvMuNi7rXM65
Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU
+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI
8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaI
LoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp
40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp
2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7
zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8V5vDN3cX
KBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33zaEb9j
oNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2v
Tqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sU
moqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/j
PScYJ1p/0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dz
z86dSz83cz7h/HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3
/2TxU/uA5UDHdavrXTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriX
eW/h/sYH6AdFD6UeVjxSfNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2d
mnafvvF05dOJZ+nPFmYKf5X+tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/M
F72Rf3P4LeNt37vwd5MLWe+x7ys/6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAALDAAA
CwwBP0AiyAAAAexJREFUOE+dk11vElEQhs+P6D/xN/UGEtAagSvChdekWsVgtcVATQtZYLdIG9Iq
NTaRxlaza2wNJJaCTYDtfjTVdjHk9cxsuhfGhOokb87sfDyz2TMr1PVXsxV1HUpFk1JvIA1lWV/V
arMAhKBgr9+H67pwHHuqqK7X70EOlv0SUFIqaO68pYe/mm27SKfTLPLJ3jSb2H7dJFeItZKC1l6L
E590HclkEtFoFOFwmBvuxWKBriHvdnfR2Nr2AS9XS9g/+MgAal4rFrnINM/4jEQiAeA69r61h83G
lg/Ir6xCNz4zgCaPTJM1HI24OLe8zM1qVcNgOOTYh/0DbGw2fMCL/AqOjr4GAMuyYdk2ziyLi93z
8+ANEvE4x3TdQK2+4QOWcnl0Oh0GpFIp1GXC+zXGz8tLLjZNKwDQAIodHn6BVqv7gMXnOXS7XQZ0
T04QTyS4MBQKcfGduTlujkkVCgWOtdtt2gMfkF1cwunpdwZ4nofJZIIfFxd8eldX3PDnNX47Pka5
qpIrRCb7DEP5ccjG4/FUkfXl4inlKrlCPMpkJdnmBE2dJrLBYIBiqUyuEA8WMrAdhxM3Ncu25L4o
5Aox//CxvCp5NYbB+zBdBhz5P2SePPUB0dt376fnF/Cvoj4GSJuRuvUfmgEgfgNS/yUQE351eQAA
AABJRU5ErkJggg==')
	#endregion
	$button_C.Location = '91, 19'
	$button_C.Name = 'button_C'
	$button_C.Size = '80, 24'
	$button_C.TabIndex = 6
	$button_C.Text = "C$"
	$button_C.TextImageRelation = 'ImageBeforeText'
	$button_C.UseVisualStyleBackColor = $True
	$button_C.add_Click($button_C_Click)
	#
	# button_WOL
	#
	$button_WOL.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_WOL.ForeColor = 'Black'
	#region Binary Data
	$button_WOL.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAL4SURBVDhPjZJrTJNnGIa/X/7XzBij2Yw4
yaI7KGyIViillkOsHFWomVJRDi2ieOiqhdAWD9E0slltQaOT4IE5SYiJifLDGFTURBI0UWEYEDmJ
gIdoWTm0194X+WHYknkn15t8z3PfT773zaPsr6ytc3prcXyC3VNL6X9g91zGMYnMyKxiP/Enr0b9
DAYDvAGGBC/HofPvIO2+wAQdwwG6/AH6RsfpHxvj5Yifbp8P+4lLKCXuP+j1jzJNUZj9xUxC5oWQ
rgmjuzKWZ+6YCTq9Gp66taSlrMeQYSAjLZ1nb95TcqwGpdhdQ8eHEWZNn8H3337HTz+qKMuJY/Ca
kfFBNyPPy+k8pcNWaGTLVjOmPDNbNmXxeOAdtmMXUWy/XeDp0DDz585leUQkUTHxXLAl8v5+Km8f
pNLi0XLWYWBjnoXCHRZ27dxNfk4uTd1D2H49j7JPHE09b/lmwQKio2LQxqdwx6UTD1HAQMMGHh2N
ps2jpv/3KCz7nBQXl1JUuJ3G9gH2ygHW8mpui48fFi9Cp4tDn2yg77SKrpoEhlu3weti/A+zOW+N
ISJSTfjScL7+ah432/qxHq0WA8RR/6SXiCVL0CfqSUs3kGtYzaF8HX1X1+Jvzqf6FzVqbRKa2DhW
LlexODSU6497Pg6wuM5S19TJsrBwYjVa1OpY1KuSqNqjwnc/m3PWaOL1mSQkJrNKG4cqcgWLFoZO
ZCyuKpTdR85Q3dDCmoQEklbrWZeewboMI80HvuSKU4sxpwjj5jw2/ZxF5vpMUpNTiNdoOHerBZlV
dh0+TcW1ZrFEQV4LhoJBXgWgdwx6RhGLE2BgPCAW7WNPeqRXZmRWMZWU39xx8BTb9ldSUFZBgbMC
syDf7iWv1IPJ7sHs8E7UZE96pFdmZFYRChGEfUqmyeayHL/sq6q/R6rFg9VT6zOYba6pPoHM/lvb
D57kRnMrja0vuPtXFw2P2pC1yfb/a2ORs8rs9GJyiCsIzGVeZG2y/VmaI5j6u7I2RYryD8V+McUJ
9WYhAAAAAElFTkSuQmCC')
	#endregion
	$button_WOL.Location = '6, 49'
	$button_WOL.Name = 'button_WOL'
	$button_WOL.Size = '80, 24'
	$button_WOL.TabIndex = 14
	$button_WOL.Text = 'WOL'
	$button_WOL.TextImageRelation = 'ImageBeforeText'
	$button_WOL.UseVisualStyleBackColor = $True
	$button_WOL.add_Click($button_WOL_Click)
	#
	# groupbox12
	#
	$groupbox12.Controls.Add($button_logoff_user)
	$groupbox12.Controls.Add($button_get_session)
	$groupbox12.Controls.Add($button_Userunlock)
	$groupbox12.Controls.Add($button_ResetPWD)
	$groupbox12.ForeColor = '59, 59, 59'
	$groupbox12.Location = '430, 6'
	$groupbox12.Name = 'groupbox12'
	$groupbox12.Size = '205, 78'
	$groupbox12.TabIndex = 19
	$groupbox12.TabStop = $False
	$groupbox12.Text = 'User'
	#
	# button_logoff_user
	#
	$button_logoff_user.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_logoff_user.ForeColor = 'Black'
	#region Binary Data
	$button_logoff_user.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJkSURBVDhPjZFfSFNxGIZHVJSVMS8qC41N
LCM1mREaLiWjoigwLbTSOcsU0zRyKaIMujAREiFLU2EUtTnbnH8qSrOSlCSJirTypskoEstKCzVH
ezqba5oL8oGX3znn/b6HczgiQPSHM1Fiv9wd4sHS+NWci/EmJ9JrULVd7Oes3XDszhSckot79Xn+
tJZEoC+IQLVHStoWca+zdsNNoNrphakohPtl+zGoY8jbG4RSJp4emIWbIDvSk3KllOaSOPpaCnlQ
k0ZSsOfcBambF8K4iYn+y3zsLmagQ82RgAVzFyQFirRYqhl8UszbO3m8aMhCETyv0lm74SbYECAJ
6DQW8q41n+c3M6grT7GX3lOtO38Jdl0c0B2r/0bb43buXkmmqiCa0ooK0prGia4d1jqGZuESRJa8
HNJ0fuL1Z/ja30LX1USuq+U0atT0WUGTnsNt/yWYNq7EuMmHRpnE8VkuQcKlVzwz/6Do4RjmEbDZ
4PvYOF0fJqjKLKAnaj2cz4QyFZSepntfmEPiEuwufkp9zzAnjUNkm4awTY4xMvqF9FYrTT7zIT8e
8uKx5cY5TgoVGIN9hFWnIPTsIy7cGyRRYyah1szBajNxtRZitCPckgi/tq3OPjxNuwFD0Br71ZRg
haKJw5VvyNJZyNQKuWEhQ/eelIZR2tZ5wPFIrEo5P5O2Os5fJ6IxhvhOC5bKc7OXxeqsHgd02LNY
yKJYPaJDzaRGHaU7QopVEYZNGc5kcjgd2wKoCfY1uAQCy4XIhIT+K9cCV+kbZBKMMinGUKmwvNYg
PLe/gkvwP3yFzJTa74VdRL8BYsK9r5BPFgMAAAAASUVORK5CYII=')
	#endregion
	$button_logoff_user.Location = '108, 49'
	$button_logoff_user.Name = 'button_logoff_user'
	$button_logoff_user.Size = '90, 24'
	$button_logoff_user.TabIndex = 13
	$button_logoff_user.Text = 'Logoff User'
	$button_logoff_user.TextImageRelation = 'ImageBeforeText'
	$button_logoff_user.UseVisualStyleBackColor = $True
	$button_logoff_user.add_Click($button_logoff_user_Click)
	#
	# button_get_session
	#
	$button_get_session.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_get_session.ForeColor = 'Black'
	#region Binary Data
	$button_get_session.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH9SURBVDhPlYxbSJNxGIdHUFCU8nlR2FUp
wYSSUOlqsk50hMAOkMk0i1DKtSjXYjgGXdgwKilrZcIKyqm1LRPCtIOVkhhiBysNassuGtvCWWpS
sKfvw0/Z/2JlLzzw/vgdNMA0U3dstZRevl4KVu1ezMm8VI7oU4LmtVK6aosdQah3OFfqb7Qso82h
o9Gqw7wljZJVUr9qix1BqGfekILPtpIHZ7dx256HZesKirOk6YDQEYR6Jn0S1cVp3HXs5G1LBY+u
llCYmTTzgQM5c+Cnj4kPl/jafYrAEzsF2tkzHyhcrqlnqJbg80oG7ll46TVSlDnLqdpiRxDqZWiX
ajs9FXxqO0HfrYM0VO9TzNRJ9x8DGy8E3PuborQ/e0jrlb1ctq7jdM15Sr3f2VwTaPjrgN7xKuTq
DPMuAsODLXRdN3DDrqO5zspgFK51hVlT9ToU3xEG8i++odc/iu3xOP4RiMXgx+gY3R8j2J9O0Pd5
jBxbjxxNMLCpsoemF9845Alh8oWI/RpnJBrBdCdEmTeMp3eYjKMdcjTBQPbxDs7cD2Jw+cmv87Or
dhLlN7gCnGsLsqS0VY4mGFhY1Mwe53uM7iHK6mVuqsi/0f2FAucAi+RMfEcYmJ9bblqww/173nY3
CnNVprTiKZn4jjAgX7JMlkx2AhQvWejEi/8HzR9B2Vmp/hZrHwAAAABJRU5ErkJggg==')
	#endregion
	$button_get_session.Location = '108, 19'
	$button_get_session.Name = 'button_get_session'
	$button_get_session.Size = '90, 24'
	$button_get_session.TabIndex = 11
	$button_get_session.Text = 'Get Session'
	$button_get_session.TextImageRelation = 'ImageBeforeText'
	$button_get_session.UseVisualStyleBackColor = $True
	$button_get_session.add_Click($button_get_session_Click)
	#
	# button_Userunlock
	#
	$button_Userunlock.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_Userunlock.ForeColor = 'Black'
	#region Binary Data
	$button_Userunlock.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMQSURBVDhPhZF5SNNhGMcfiAQlj82s1DzW
DteymVseMUWbZqJdloIWpYaRZHnklVJIBRVFEZQdYyRdDkuzkii1k/xDOojADsv22+HspykpGhkd
395tESlCL3x4X3je5/M8z/tSuVbooDReIC5LFPCHM/2wL80XxXFCvlwrEFcksDijWCugPK0nDSYo
yJYgJ0t8CJljpEQ7l3o7KIwVdDVUStF2KAYN1RqUJ4uwNVLQlR8tpDxGVpQXjSwLpY8J88n6r6A6
1YeqUnyoPEmI5j2LcPfYKjTWpKEidSFywgXIiZhJGRHeNJoUSnyignpZ8gRBZRJrkVEU54HjufNw
82A6XrXsxn3dVmQp3ZGxWEijyxTEM3oTndUnCEo106goxo22LHYBvjZjvPsU+joPwPioBmvkLhhj
M/ezth3JUwlSLoxT9RKiTaFUD4sOPEt+c3sXnl4vwUa1e+2gVl7KHg0s2YnjLN//V7DyjJVS9MM0
Xy6SdzTthrGtCs+uFeLc2RJYYiVmW5wM7PJU8E7Byfe0/ITJkHdlGO2P7+GOLhcn965A/eoI9EWJ
YNWIYdSI+4lIbadNFVRrjpXBQYx0P8UfejlQ1zGA14PA5+4WdFzMRt3hFHBKX1hVc2FeqYFN7Q9L
pOg8pxYxB/m2hgXWmpZIYIqWgDJru/CcG8OeB1/AjQA/ATAXrBIv2BTeuGv+Bd3qzfio8ocpIriB
C3NKTJFi2KHkA89w5ekQCpp4FDUP4OePb+CZpTfIFX1SD1x6Mgz3vRxehAiumsODwIWLLjOIU4lg
h9QVD3G0lcfGOg5Zeg7r9GakXh6GRTYTvNgLLVVHQFXvwKoGdir8bxmVwTAqg/qcezBoVvYNrD/9
BjsMFmyvt2CbwYq8xiHU59fgk9gDA2yUghWVsMl87K0HdysCBj8sCISdVomvnmbElhW5Zxi+u601
wI4rY3p6I2hDO+6HhqFXMhsW6RxwMn/0hAT85a107hAT+tmtngwVw/FNk3kQ4K0ziv3QI2GCP7QG
zNazmJJ1wbb/L3uVyWJHZSKi3/SRxkDQBynyAAAAAElFTkSuQmCC')
	#endregion
	$button_Userunlock.Location = '6, 19'
	$button_Userunlock.Name = 'button_Userunlock'
	$button_Userunlock.Size = '96, 24'
	$button_Userunlock.TabIndex = 9
	$button_Userunlock.Text = 'User Unlock'
	$button_Userunlock.TextImageRelation = 'ImageBeforeText'
	$button_Userunlock.UseVisualStyleBackColor = $True
	$button_Userunlock.add_Click($button_Userunlock_Click)
	#
	# button_ResetPWD
	#
	$button_ResetPWD.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ResetPWD.ForeColor = 'Black'
	#region Binary Data
	$button_ResetPWD.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJySURBVDhPfZPLT1NBFIfnDzC6NpGF7Fwo
AoVIQZ4RE6Tgghg2xoQoxmBosNBCQOhLfMRogtFaIIIbook7BGkpIPKwUSivNKUoBAlCd7qRgJR8
zr2Uxgf1JL/MnXvP7ztn5s6I/0W/LdPqNmfiNmfhtmTRb81iwJ5tjXwWQORpn3A3Zaz5nAVs+K7C
p0pY1LM1d42ZZ0V4bNnrSk5MgDRbfc5z0ljFzrye795yJuV8qlXHD58CKcYjO4kJ6Ks/xeacnnDQ
wM6CgQlHgZKZrGiqTcd2wKAuJybAY9bK6tWE502wUMekoxD3TW2cqyE9ztdaBMsm3E2nYwPcTeng
18vqDfC5ifBUHYH2C/jbSticNkKwir7GjNiAN7Wp8PEyLNlltbsctwpudAnsL4/B1wdsv70o/8x/
AIO1abKDGnhXJjuwkyIBs1+MKsTWfoTAwzN0Vmic+wKG6tOWK24dILlZkCyNKRZBqlngX7UwHCyl
+pWg3HZwR6Ye/gfQV6tZWWwrJOWOYOnbE2ZDOmbXi5lZ0xEIPcIxIhhdvkR9tyD7vnjxB6DXlLQy
/TgPfFfQ2AWToUqcXhGV473gqRxbPwgm1srIv6ecowigx5i4MtGSyc/xEhgrRSPbHwzl0BkQqjr8
gvbpXXXMCSwuQV6jGFABvcbEkK8lnY1hecqGCuXGnee65RC5skK+XEr+bUGuTfA8KGHzArNHkNMg
XLJuvAroqUkg7C1mc0TH1mgR3mYtYzVapTf15Ck6K0Fdq9I8GDUfldq9C73GBF4bTtBtUMaTuExJ
e+ZoFMhu7OOqeUBOVbMSe3sQrfSb/o699/HqLBKA+AVNXLmpaNymFAAAAABJRU5ErkJggg==')
	#endregion
	$button_ResetPWD.Location = '6, 49'
	$button_ResetPWD.Name = 'button_ResetPWD'
	$button_ResetPWD.Size = '96, 24'
	$button_ResetPWD.TabIndex = 10
	$button_ResetPWD.Text = 'Reset PWD'
	$button_ResetPWD.TextImageRelation = 'ImageBeforeText'
	$button_ResetPWD.UseVisualStyleBackColor = $True
	$button_ResetPWD.add_Click($button_ResetPWD_Click)
	#
	# groupbox11
	#
	$groupbox11.Controls.Add($button_DNScheck)
	$groupbox11.Controls.Add($button_ping4)
	$groupbox11.Controls.Add($button_ipconfig)
	$groupbox11.ForeColor = '59, 59, 59'
	$groupbox11.Location = '257, 6'
	$groupbox11.Name = 'groupbox11'
	$groupbox11.Size = '167, 78'
	$groupbox11.TabIndex = 18
	$groupbox11.TabStop = $False
	$groupbox11.Text = 'Network'
	#
	# button_DNScheck
	#
	$button_DNScheck.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_DNScheck.ForeColor = 'Black'
	#region Binary Data
	$button_DNScheck.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHgSURBVDhPpZPfS1NhGMef/6NuxJuuAvUy
dpXocMqqQf9AXoT4a+w9P3aGR9Oi0uZG0/mLTY9uzhWVF91EXXQTBMEsjC4KzQ5C2TIXZuFFfHuf
I8Zmmwq+8Dnvw/P5PrzwvhwCcCJoYOLB4rX4ffSN3kPfSPYf3JPOYir7h4tkxjL4+nsb+Z0CNn9t
yX0LGz8LsH8U0HM341DJm7EFkBFNYe1bHqf1NzgXW4HPsnElbWPZXocRSSEoqeijaZAetrC0soaz
kY+oz27ClfmOmvg6Xrz9AHbaIT44PAtSh6bx5NU7nBnfQFV2F1WP/uBUPI/HL5fBThlMVvSa9CTk
x3qWw9KqjdfyJIbr5NMc2B3lqc2MPvffnELXjYkiJuG/lUCrPphuDQ6l/bcTTs9x1/cyPMOzJFe1
pK4cmqqi2d0oH7u8l1STEp4jUUKK/OF56g7oJPQeNHm8aHR7KBBZcFxxlmdJUdQShNCoM2BQYe48
XQ30w9Xgw/Z8A3WJEAlF+y9PimaUILQQtQuTPk+7rU+JZtjJFnyZcVvtotdxB/Okh0wG+2hGLzrU
fqyOuYCdAQeuuceuOCshunjhEoN9vF4f6j2X8T5Wi9ydOgeuuceuOCuR97i3yt3wcaCyv+jxAf0F
JH9G0480278AAAAASUVORK5CYII=')
	#endregion
	$button_DNScheck.Location = '6, 19'
	$button_DNScheck.Name = 'button_DNScheck'
	$button_DNScheck.Size = '73, 24'
	$button_DNScheck.TabIndex = 13
	$button_DNScheck.Text = 'DNS'
	$button_DNScheck.TextImageRelation = 'ImageBeforeText'
	$button_DNScheck.UseVisualStyleBackColor = $True
	$button_DNScheck.add_Click($button_DNScheck_Click)
	#
	# button_ping4
	#
	$button_ping4.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ping4.ForeColor = 'Black'
	#region Binary Data
	$button_ping4.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKnSURBVDhPpZDZS1RhGMbnD+giRCpFpQUz
dVJspf2iRUMyLWdcRnNGW8gxW8YiaSqERp0ZNVdKCCWCLsKiCKOcxmaOOkbZvlmUVmqlo11EUFDw
6/uOodfWgeech/O9z+99v1dTUVHhstvtlJeXT0kyI7Maab4MjzDiH1XlH/uKf3Rs3P/9Do/4J86l
l/VSMquRtE+fhwkLCcNkzCNyQRQxC2MxmwtZuWIVa9eso6joKBs3bCJ+YwLFxVbVDw59USdRJxj8
9JmI8AgK8vexNG4Rq5ct57DlCIkJiSRtTaakxMb2VB36VD02WzlbErfycWBwfAL5ev9hgOjIaMx7
8mka8HNhcIzObz/R6zPQiVBZmQNDpoEsQ7YIVZCSvI2+/g+TgLfv+omJ0lJz8RInPT6mJSSwuvUm
pVeuY0jPxOE8jdGYizHHJBZXhU6Xxpu3fZOAV71viI3W0vUb5omOQYYsIkRX++g3cjOzqHRWUXDQ
wvHaMziqa9UdvBSZCcCTZy/YrEunpX+IAHHX0LydRIvCFa23aO68z/nLVyn5/ov9ni66fsGS2Die
Pn85Cei5/xBLYzNF11qZmZWtArRV1QQbTay/0UbK815m5OYxPTmFUx3d7Cop5UHP43GAw2HH5+vG
6ekmqfEcQWLkkFwTMbUNzDYXELbXjFZMEyoA8iy+8jSVHffo9t1FZgXAgeJRaPkB2mNWgsWm5QQx
dQ3MOXCIuRYLsfVnCd21m+DsHURYT9DUN4Ti7RAAxzjA7fZQ9+gVQcXHCNCnEbgjh3DRdVZBIUGF
B5hfU0eguE5ARgbBViv1j1+rGRXgdDpxue7ganPjue1BuaOgtHvxigLF7VWlevFPaVfUGtctt8i0
I7Mam83WK42kTUUyI7Ma8UQKLf5HRWqA/xCaPwjpfGnrltfSAAAAAElFTkSuQmCC')
	#endregion
	$button_ping4.Location = '6, 49'
	$button_ping4.Name = 'button_ping4'
	$button_ping4.Size = '73, 24'
	$button_ping4.TabIndex = 2
	$button_ping4.Text = 'Ping v4'
	$button_ping4.TextImageRelation = 'ImageBeforeText'
	$button_ping4.UseVisualStyleBackColor = $True
	$button_ping4.add_Click($button_ping_Click)
	#
	# button_ipconfig
	#
	$button_ipconfig.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ipconfig.ForeColor = 'Black'
	#region Binary Data
	$button_ipconfig.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJOSURBVDhPpZPtS1NxFMd/f0t/gKWbejeb
NYU0t3oRkS56ICRF1N3RNjY377zb0J5sz1ttFulk5cOooCiqTSwRIsI5C12RWm98Y9CboqAX385v
OjDYC6sffDgPv8v3nMPvXAbgvyib/BuYWx7AkFuCYI4xjSXM6nfJAeKgNcL4UXhdTlQaQ6g2+gnf
NtzfGf+ZE0Q/NObQAzaSSDDJYUc2/xkzi6uYya0im1tHdvHTFtzfkctwcmt4ubQOwRQAi8fjcNpt
mJz/gLZLabRdTmM6lcRFr6fIFPnHKc8tj4eIifFRpOcLqKEuSOAG+vtsuD37HlpBgXORZwj7fWjQ
NhYJ+67hTPh50fJYq21AYPgqki8KqC0JSCQQzRTQkZhF5805SNTREZ2+CPfP35pHP1ldix4tRJ/V
ikS2QCOQQIJGcDlsGH5SQKNQhZ6xV2g/ZcCxo/oi7acN6E6+xtmTBjQf1uNQkx6tJ1rhe7yyJcBf
YcBph+dhAaY7CxBTb2BMLcA0+RbiNsa7eXSN54BfGeAn8eMp3PffQcUFXC6JeSQHpEcf0VSnhGV6
Gb0TK6irEdA9tQaNaj/qVWoSXEFPagmdY0voGMvDeW8Zav4KsjzABmUJ1ReiUJsjUNA+4HsMG6PN
wLcRbCR1VHUEVb0h1NIOVHb76T4IRW8AtV2DGdpEmQ26XXwWBUdlCn5RilFUitexT4yhiqzSFKNq
wU1+T1U3BVOYx18p3kMdyMxL63zFI7E6S4xyrIJ/WIaK7dUt3e8trTI/PPFvp9wftnvAfgPh9Dv/
DN/PlAAAAABJRU5ErkJggg==')
	#endregion
	$button_ipconfig.Location = '85, 19'
	$button_ipconfig.Name = 'button_ipconfig'
	$button_ipconfig.Size = '73, 24'
	$button_ipconfig.TabIndex = 5
	$button_ipconfig.Text = 'IPConfig'
	$button_ipconfig.TextImageRelation = 'ImageBeforeText'
	$button_ipconfig.UseVisualStyleBackColor = $True
	$button_ipconfig.add_Click($button_ipconfig_Click)
	#
	# groupbox9
	#
	$groupbox9.Controls.Add($button_regedit)
	$groupbox9.Controls.Add($button_cmd)
	$groupbox9.Controls.Add($button_psremote)
	$groupbox9.Controls.Add($button_MSRA)
	$groupbox9.Controls.Add($button_Remotecontrol)
	$groupbox9.Controls.Add($button_rdp)
	$groupbox9.ForeColor = '59, 59, 59'
	$groupbox9.Location = '8, 6'
	$groupbox9.Name = 'groupbox9'
	$groupbox9.Size = '243, 78'
	$groupbox9.TabIndex = 16
	$groupbox9.TabStop = $False
	$groupbox9.Text = 'Remote Tools'
	#
	# button_regedit
	#
	$button_regedit.BackgroundImageLayout = 'None'
	$button_regedit.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_regedit.ForeColor = 'Black'
	#region Binary Data
	$button_regedit.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_regedit.Location = '163, 48'
	$button_regedit.Name = 'button_regedit'
	$button_regedit.Size = '74, 24'
	$button_regedit.TabIndex = 16
	$button_regedit.Text = 'Regedit'
	$button_regedit.TextImageRelation = 'ImageBeforeText'
	$button_regedit.UseVisualStyleBackColor = $True
	$button_regedit.add_Click($button_regedit_Click)
	#
	# button_cmd
	#
	$button_cmd.BackgroundImageLayout = 'None'
	$button_cmd.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_cmd.ForeColor = 'Black'
	#region Binary Data
	$button_cmd.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAGpJREFUOE9jGHjQP2n6f0ow2IDLNx8QxBmVEzFouAGnzpwlC8MNAPqE
LEx9A2AAWRFMHF0MhFEMQFYEY6PT6BinAegYBtDFiXYBOhuGUQwAYRhAVoQsB6NBAMTGMIBUTD0D
KMFAgygBDAwAnWumm5ZCmokAAAAASUVORK5CYII=')
	#endregion
	$button_cmd.Location = '163, 18'
	$button_cmd.Name = 'button_cmd'
	$button_cmd.Size = '74, 24'
	$button_cmd.TabIndex = 4
	$button_cmd.Text = 'CMD'
	$button_cmd.TextImageRelation = 'ImageBeforeText'
	$button_cmd.UseVisualStyleBackColor = $True
	$button_cmd.add_Click($button_cmd_Click)
	#
	# button_psremote
	#
	$button_psremote.BackColor = 'Transparent'
	$button_psremote.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_psremote.ForeColor = 'Black'
	#region Binary Data
	$button_psremote.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAjVJREFUOE+tk+tLU2Ecx88fY2CGFaRGRr2qfFMU64Uw6ILgq6hZYjnD
yoldFq2EXFo2qGNqEy8rUae7u+bWLmyruXCXnLWcgStHvtAu33x+Z+x0QHpTP/jwcOB8v8/v9nD/
Na4Y/NhyWY+SJr3k3IxjHVPIy4RgYo05isl4FiPx5QKGueymDIWXcVxrEk12qIZJoPF8pDOYWUF7
YAk3PIsF2maE79uvl8BHMjjQYRQNWEqd3gU0m+fIYP3nL7xfWcO1mUU0ONJEvUVAZfuEO9YYFD0e
0eBcv5/EtS9mUW+Kwzj/hUwCn1dxxp5GzXiKODWchHIshfODflGsHPJC+TKI0wMBHOb9kA28Rc1E
AuYPOTLRJ75iPx9D+f0wStUByHURHNFapOkzg6ruV9j9wIWy7gAqe95AbppHZvU7cms/UN45iyKV
D0WNbtR2hVHRZhAN2FhYCSU3jSjWOMjgrDWF9Ld16sOJkQTdzMSldfaN2kNSg33qUZx8bCODSp2b
OsxSZ808+Owdpb691YetjS5UXHTiQn+Y/s/LOU7+0AJZlwl7N+pi42Mpt0wnUT0YlcydcajFRdne
Gg8JBtfHgqjjnai6N0pz7QumIOPdKLtrxVGdD7ZkFp6FHCaiWUKm9qL60bR4O0tF2WfHnqu9KL70
lGArzNjWPIldrXZip9JJ9bMGspLzco5j66g1BdH03AHFEysUvIMyYksiECrQ0BtB+1SM3kJeLgQz
+fOh/A3J/v97cNxvbRwpGSKGCe4AAAAASUVORK5CYII=')
	#endregion
	$button_psremote.Location = '83, 48'
	$button_psremote.Name = 'button_psremote'
	$button_psremote.Size = '74, 24'
	$button_psremote.TabIndex = 3
	$button_psremote.Text = 'PS'
	$button_psremote.TextImageRelation = 'ImageBeforeText'
	$button_psremote.UseVisualStyleBackColor = $False
	$button_psremote.add_Click($button_psremote_Click)
	#
	# button_MSRA
	#
	$button_MSRA.BackColor = 'Transparent'
	$button_MSRA.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_MSRA.ForeColor = 'Black'
	#region Binary Data
	$button_MSRA.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAjVJREFUOE+FU/9rUnEU9b8qCAoGMYoiWj+MokWMIQXZGKEhK6F9obHa
Cq0RUjJczQ0rwZUzY6spOmVNtkJrlm5Wk2n5hUqTxjzt3PFcry/0gcPj8Xnn3HPvPU/Ds5otIZEu
IrKQhNe/IHB65jDyMAjr2HNY7JPot3rQZX6AzqsOGC6PQIjKIblWqwkq1XUUvq4jk/+BZOY74isV
RBPfEI59ge9FSaDvtakFFuNpIVungeuTQI8LMIwCumHghHkDzVfKOHQpg0ZDHO5gHjrTLbWAP/JW
BCxP1GStFTg6WMXh7hz2GRNoOBsRgVOdZrUAe6ZA/wRw0bkl0DqkJrP6rjYfXIG/CDi9cyKgkFlZ
sX7Q9AF7zy1i9+kZ7DzpFgda4021wD13SIb3r75pnUXsrkB9K9wInYvAbcdTESD5d+sk0zrJW1va
kG+J+ja4Y17I2lJZRF8XEH6Zw/R8Cd7QR0zMvBcBkvg09tlkzfVZKAHp6LojK2KPvPwVdEmSko/k
ahWt+gFomD7FEvGpCGTz5T9wY7NvkjgDFogtF3HsTC8087GM9DZbeYZaeTORn8eEwHgvpdbq8Wab
JDGVSjKb2kyoh8icMwJpHzClkf+Cs/CH47j/OCj2eyzjQro2PCUOGOn9Lee3BV69W8abpRUw1nRF
sDrvg9EULgyMylAJT7ggaGjugKRw/FEINkdAbHYP+eRjrogD5QA5LL6b785i0L6NPUd06kD977S0
90nfjcf1Qt5xQIufQS28ytGYvtsAAAAASUVORK5CYII=')
	#endregion
	$button_MSRA.Location = '6, 18'
	$button_MSRA.Name = 'button_MSRA'
	$button_MSRA.Size = '71, 24'
	$button_MSRA.TabIndex = 0
	$button_MSRA.Text = 'MSRA'
	$button_MSRA.TextImageRelation = 'ImageBeforeText'
	$button_MSRA.UseVisualStyleBackColor = $False
	$button_MSRA.add_Click($button_MSRA_Click)
	#
	# button_Remotecontrol
	#
	$button_Remotecontrol.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_Remotecontrol.ForeColor = 'Black'
	#region Binary Data
	$button_Remotecontrol.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAaNJREFUOE/NkMlLQlEUxv0/2revIKJWEaEQQYKUQQNEgxAPJQOHtAGR
LCwtylJBelqYmg2+CpxQMjKQyly0aLAoaOvG1l/dW1mQ0NsEffBxD9+958e5R/BnusxeQGLYQSad
QmuHGi6XBx9Xv6tX58b93S00K1EYzT4oZgLYCexCNmbjB1HMH4Bl/TBZnaho0GFkVA/lhA2Ti0F+
AMYSRqdyBU/5G+wnM9jnQqhvkcPoOOQH6DKE0K50UsBj/haJeBzNYj00lm1+AInGjykzS/dQKBQo
oF8+j0G9mx9gcNxFl/byUgRR7jJHdyKUGn8CHAHubctLJZPMZveWmonIFOnjEyjUlp8A0rT3WKQm
NdtdA29fLfwD9eDGpDhdn8NNNk0BBoOpPMCVuYaZS1LARk81njeH8eCWIb+hxNG0lGYE/P30MaJ3
WDnAmbUbudUhXHm0yDqGS7a3VSLENCKlE1OzQ00ofWE5cU4Bax1VdPywSoiIWkSBn/b21SGkkiA2
zXx9ZdbOYmE7CkswAlKTLDbL0IdbciGCCiE4bTtIRhv+mQSCV19YWTxAQ5InAAAAAElFTkSuQmCC')
	#endregion
	$button_Remotecontrol.Location = '6, 48'
	$button_Remotecontrol.Name = 'button_Remotecontrol'
	$button_Remotecontrol.Size = '71, 24'
	$button_Remotecontrol.TabIndex = 15
	$button_Remotecontrol.Text = 'RC'
	$button_Remotecontrol.TextImageRelation = 'ImageBeforeText'
	$button_Remotecontrol.UseVisualStyleBackColor = $True
	$button_Remotecontrol.add_Click($button_Remotecontrol_Click)
	#
	# button_rdp
	#
	$button_rdp.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_rdp.ForeColor = 'Black'
	#region Binary Data
	$button_rdp.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_rdp.Location = '83, 18'
	$button_rdp.Name = 'button_rdp'
	$button_rdp.Size = '74, 24'
	$button_rdp.TabIndex = 1
	$button_rdp.Text = 'RDP'
	$button_rdp.TextImageRelation = 'ImageBeforeText'
	$button_rdp.UseVisualStyleBackColor = $True
	$button_rdp.add_Click($button_rdp_Click)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($groupbox16)
	$tabpage2.Controls.Add($groupbox7)
	$tabpage2.Controls.Add($groupbox6)
	$tabpage2.Controls.Add($groupbox5)
	$tabpage2.Controls.Add($groupbox2)
	$tabpage2.Controls.Add($groupbox1)
	$tabpage2.ImageIndex = 1
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '1264, 91'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Computer & OS'
	$tabpage2.UseVisualStyleBackColor = $True
	#
	# groupbox16
	#
	$groupbox16.Controls.Add($button_hotfix)
	$groupbox16.ForeColor = '59, 59, 59'
	$groupbox16.Location = '1151, 6'
	$groupbox16.Name = 'groupbox16'
	$groupbox16.Size = '105, 78'
	$groupbox16.TabIndex = 10
	$groupbox16.TabStop = $False
	$groupbox16.Text = 'Updates'
	#
	# button_hotfix
	#
	$button_hotfix.ForeColor = 'Black'
	#region Binary Data
	$button_hotfix.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIfSURBVDhPhZHfS5NhFMfPZX9BWC7bJAhF
Mt0mSiO7sa1gQkJ1EUFFd+FWLNGLMtKKiOqqFrRRtC3QtYKKwIykSaRJlFH005xadBdY0IVXn87z
vr5r4qIHvu/3Oc853+857/PI7R7PMuS63ZLtqpKBWCWGTVyuzmDZQa7bY4kzkQpYmCStPGiZLK1z
sCTIKbJdayUdrYSpfri3Ej73kYqsZvBoeZPixulsxD+HOuBhNQwrhjzw5SSpzvImRbFJmk4UeuFR
DTypZUVFwGKG18P08bImGrhtsSYpHIPHdTBSD8/qcdVus5iRDfa55v+a2Bdrj925CmZ6IN+oHX0w
6ocJHzX+XRZbsTk3ea3LaP0tvas7Ook+lQt+J2C8CZ62KDZpV8WLFja2HrTYis25yY81w69r3I26
eRBbJ2Z5rQnmolq8GZ632nipeGN4i06hPK6Y0P1UjIY+IXBW2J1RtfkX26SS+Xw7vG5TkeJtEJe/
gU95L0yG4FWQj6MhQnHh8oyQ/CbsvS4UX8Ex4fsheBeGDx00nRZ8/QLvd8LsERp7VVwQrqrBnqSK
VVN8DsfkZsTFwtgO6nTMS1+F+KzQfMJGXIUJjdtO2eJ9N/TrGJSaDETXwI9OfGpiRFembSTmhK1n
bPH+lMgyAwuLJtlIFcxHCWg3I0zqNMFFcfi8yIH0vwwUziT3D1dbgtA5YbvC7NsvioQvlBj8Z3lL
2NmXLJE/2hzRpERwB9gAAAAASUVORK5CYII=')
	#endregion
	$button_hotfix.Location = '6, 20'
	$button_hotfix.Name = 'button_hotfix'
	$button_hotfix.Size = '93, 23'
	$button_hotfix.TabIndex = 0
	$button_hotfix.Text = 'Hotfix Check'
	$button_hotfix.TextImageRelation = 'ImageBeforeText'
	$button_hotfix.UseVisualStyleBackColor = $True
	$button_hotfix.add_Click($button_hotfix_Click)
	#
	# groupbox7
	#
	$groupbox7.Controls.Add($button_MMCServices)
	$groupbox7.Controls.Add($button_compmgmt)
	$groupbox7.ForeColor = '59, 59, 59'
	$groupbox7.Location = '1003, 9'
	$groupbox7.Name = 'groupbox7'
	$groupbox7.Size = '143, 78'
	$groupbox7.TabIndex = 9
	$groupbox7.TabStop = $False
	$groupbox7.Text = 'MMC'
	#
	# button_MMCServices
	#
	$button_MMCServices.ForeColor = 'Black'
	#region Binary Data
	$button_MMCServices.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAG6SURBVDhPpVHbSgJRFD1fE4ERRR8Vps6Y
mo7aeNccZ8x7l8cMI+itIiKiixVEPUQX0ZfMSCTqVQXpYbf3KYtIJWjDYp21z+x1NmsYAPwLLBqL
s3R2kaUyC00EqPEknYE09em+izlF637LmTS/iERV5guEjhVVA2w2iFEXqf8Xg1Z4LlZdyRc699Ua
PNUbQLyyWnjD/hbeNwca+IORB18gDHelCmzv7EIineNMmvqhiALBcJRlckssnkjz4R8GWDrrjOPi
+qYEqpbAVNgEMWmnW34hnV1Y5gPafOq3gVv2ViTXLBTPzmFtfQMiUYXzCWrqowng64841DNgZpfc
7WmrvR7Tkp29/UM4ODoFYly9aRItJUG0VLz+4KaixnsGTDWOGDEKYl2ctsKk3nBJrDeYyhhiGTO6
zecLzX4BM8klM8FsIbSnjEINzYaQqwaT+IzDV4MCRhNgTreH4YvdTXQzDieddYhRxLDV3jfgV9Jf
BmaLjcNml/hGHl+AzXp85UEB4w/43oCGiUlLLoLcN2BcvYP9J7xv9TGQObB6BmwUzHXqI8YGGhB6
BFwjTf3PR/5UPOCPI2fSWIy9A9wD+f2hDKCYAAAAAElFTkSuQmCC')
	#endregion
	$button_MMCServices.ImageAlign = 'MiddleRight'
	$button_MMCServices.Location = '6, 48'
	$button_MMCServices.Name = 'button_MMCServices'
	$button_MMCServices.Size = '132, 24'
	$button_MMCServices.TabIndex = 1
	$button_MMCServices.Text = 'Dienste'
	$button_MMCServices.TextImageRelation = 'ImageBeforeText'
	$button_MMCServices.UseVisualStyleBackColor = $True
	$button_MMCServices.add_Click($button_MMCServices_Click)
	#
	# button_compmgmt
	#
	$button_compmgmt.ForeColor = 'Black'
	#region Binary Data
	$button_compmgmt.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALsSURBVDhPdZLrS9RZGMfPv9CLthdBmEWw
KfgilgiWCCJoX2xFUBBFkGzRiG52c2ckZ0ZnnC4uOt51ZtXJmalGGWeq3dQoi9qLaZJmhk41FZPT
5Fx0Lo6J0Kfzs160u/bA55zDOc/z/Z6bMFk9X8XQ7Pbq6jsoqXVJrnyBC2VeWV+ysNzSJYzNbqGt
czG78IFEeuF/KPPK+pICCqUNHaLYfIlo6j3dgz56PqOMuwd8RJLvKTY7Pwkojv9F2YG6ykk4McfD
5zGGFF7E5DjKwLMoofgsakVAJnpLGzrRyzPp612fkFtTKKm5jEaKqCsdsndQ3nKN8/abGO29BBIp
iswOhE4mTs0liaRniKWnF4nOxoikYoQl75Ix3koCM9NopOPjt2kmDLfxGW5RWGtHnKl2EpiO8M3p
Yb41TfBdjZ/NlgDbbZPstk9ywPmGQ5Kx4DuKKi+hLdPx2vuK/voBnhR3IYqr7IxPTrLWOM6mxlds
cwTZ2TnFPm+E3GthVNfDHPVE+cc/RYnOSDA0haHiHD3qXoaPNCI0le0M+vxkVb5ky8UgO7pi/Hg1
zp4bCfbfiLP/9ySHe2Hkl1UknrnRnaum+1Yfx4tO8LO5HaH+1Ubfo6fk1AXYeDFEjnOabHeaLM88
61zzrGiFMc0a6N8CHRmMufXkF55m0B+i8EIrokg27vsjrDa/IaMpTKYjRab3A6v/gBVuGNdkyuKt
0JkFlmW05q6l68Fz7o36OVZuQZyUAtaeIeLzSeJzM8SVl0jFCcnf9vjUKvh7syxeD78tp+VwNh0P
XuP+c5SbQxMUGJoQKq35buFZKwXGZvLLGsnTN/CT1sq853sInocnOrAuw6bKQd9+B0//Uzx/Dcvf
OEa+rBEy1kg2KJypcWJs78XWN4rdsJfuy3p5AVW0Hc0h13QFlbGFvNJGVPp62UsjTcVdcaqibZFj
Jos4eMLQViDPlWeyoc3bTfmRH/BV71JcFg2WQDH/V6yULJX4lRDiI1mPiYTV4rA5AAAAAElFTkSu
QmCC')
	#endregion
	$button_compmgmt.Location = '6, 19'
	$button_compmgmt.Name = 'button_compmgmt'
	$button_compmgmt.Size = '132, 24'
	$button_compmgmt.TabIndex = 0
	$button_compmgmt.Text = 'CompMGMT'
	$button_compmgmt.TextImageRelation = 'ImageBeforeText'
	$button_compmgmt.UseVisualStyleBackColor = $True
	$button_compmgmt.add_Click($button_compmgmt_Click)
	#
	# groupbox6
	#
	$groupbox6.Controls.Add($button_localadmins)
	$groupbox6.Controls.Add($button_folderrights)
	$groupbox6.Controls.Add($button_profilerights)
	$groupbox6.Controls.Add($button_homerights)
	$groupbox6.ForeColor = '59, 59, 59'
	$groupbox6.Location = '701, 9'
	$groupbox6.Name = 'groupbox6'
	$groupbox6.Size = '296, 78'
	$groupbox6.TabIndex = 8
	$groupbox6.TabStop = $False
	$groupbox6.Text = 'Permission'
	#
	# button_localadmins
	#
	$button_localadmins.ForeColor = 'Black'
	#region Binary Data
	$button_localadmins.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAN6SURBVDhPbY5tTJNnFIaPycyMQnzbpmQ/
hhkdixJ1Rb66ORwvLcFppqISBYPDsoytc3y2hRY6mcwoIEiRLd1iGgSHLUNnRjUMpoKgQdEBbVog
czhK1QGbUF3mgBbuva3LwpY9yZVz8iTnvm5SS/l+VPF8OrQtyD/VHEpZ0LMZxwvRbOZ7a9KDcXTv
i8hl+V61lCcqkPHJx78CdG8LKT+O4Y4YJl8m5AJ4lP0mb/ab4jVoL2fRrGNRuDUUmVGM9wOJgHz8
E6BkeSLtWwJPbcYqHNsbzJkEf6pYZpkqgYcmzXq0lm9HY9FOFCdF4sAGBu/FCClTIiTKlwkoTyrg
TIzXb6qI/9v0Ct6NWOk6+MZy9DUrMHhJi1/vVGK08zD2rV0BeQSfMqK4BkVbhaTdIiSVjDMVLjLt
iETaukCkv/rcIKbNmLZWY+RqCeyWQqSGLZ2QhweQPDyQSJXAcC0Y+nAjZ/qaM1m0+M1n6vgEe15+
HkQU5ttHOz7FnfMqdBnTEBwUED1hSaRfWjYTKV9bQlmSpSRft2QS0ya4rSdwr+MQHJYCpLxEwxqD
mH++LmPc3rgbDmM0nOcSMHI2DiOm+M9GzFIi6Rdu+rZYTJLVvLixKxq4Oktgu5CHDsM+6I6sHau/
rEBvUxp+bk6Ad/Ag5hxZmLN9hAcXt+PHr1gDJervkqz2AbF655ozDVWT18+8j6byJOQq30F9byOu
j9egv3o1FobVwL0itOo24ruPY/37UH0sKLHKEchWDg8cbZ9CX88FdNftx2ldLMqOFKC03QO29ip6
K0TAaCngLIVFKcZFVTjw8BjsxtdBsrIB3Lj7GH0PPZicARYWgN//eArb/Se4NQG037Th5vFQzDty
4LFlczMPGMrHvD0X9lNcwI6qflwefIyCVjeK29yYn30K9/QUlG0eVFzqh1UfgrkBBeaHsvHkWjJm
elIxcyMFPzVsgqk6BiTRdsHQOQl5gxNpdU6kGMeQbByHpqELjloRPNYsf/1H19JxpSwMXVXrcatm
AxorIz3SPaE59EJ6C/Z/OYy8JhdyzS5km+4j8+wUXKdCMNu5DQtWBR51H8APBs5GFLmICI6VFLhJ
nROQbPas2G3C8l0mLNtlBiW1oKQwFbf1YeipCUdbmfh731H3CTH1nIygvs+j6Jw+mhSHY7hvX8qz
tMXp/0XE8T+P6C/QrhFL9yUQbwAAAABJRU5ErkJggg==')
	#endregion
	$button_localadmins.Location = '6, 19'
	$button_localadmins.Name = 'button_localadmins'
	$button_localadmins.Size = '134, 24'
	$button_localadmins.TabIndex = 3
	$button_localadmins.Text = 'Local Admins'
	$button_localadmins.TextImageRelation = 'ImageBeforeText'
	$button_localadmins.UseVisualStyleBackColor = $True
	$button_localadmins.add_Click($button_localadmins_Click)
	#
	# button_folderrights
	#
	$button_folderrights.ForeColor = 'Black'
	#region Binary Data
	$button_folderrights.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALhSURBVDhPfZPrS9NRGMfPy6g/oHe+UBBE
dF42U5uXdFqQIEVKYlFGL/JCas4stTdTNMyWTtM5EbJXlRZ4wS6aOJ2Y97k5L9MtDbUyTUy03b89
v20uIejA5/c7HM7zfZ7vc85hGnn8jro+CtOySCfcfKbxzBqt+2vkohAi1EOTKFTbJDqlVSQwrSLR
CeMCYFsGfi+4sCxhUirAVG2ER/Qo3H6NPG7TIzAtO02BOphnrsOkzoD9RzdwsAiY9C7MHEuuv4Vw
fHaKaJsSBH8FDsZg1mUSOTDPZhHcPBOWuSxYF7JhW8yGXc+RCfpAXSfEq5IwnltACOwNwLqYB6u+
gBC7WBLDbryL5ZfJGHsUhvFqAcHHxGM+2Qt3W4l/QwLUg713VFkRHCslcKyWAhxfHsDQdhHfPqS6
LZAtzgKHjQBZeRoLNl0XTRY6YWy/gLEqwRHCsPkxnfbmUdW5WO08S6fDg1YRgrmWEGz050JZJRxm
nIrJUIOFZyJSNrgycBktRjoczsZ9rHQkQ/8iDlbqD0jMPp+Dta7zGG2MfM1mGuKwqcrHRl8O8KuX
AgphMxYR92BfISvrZRiq8oNtvhAwFKOnJBJvS6lvxmLMtwrBZhrjYWhPxb5eCmw/h2NdQpQ7wdcK
YKsaAxW+wEoZ9UaCrgIeusVBwEYltC0RYHS7qKMxgLWNmtkM7MqIOjf1wL4cfRJvmKayYdXchl2X
D8f8HbKTB7UiHEwtT9il4yCRWLpp0ZhyEuOiNgafagKxpbxKvnOxp0yBaSQNB6rL0LVGobsiqJ3R
4BWn+V0rTPG9IiYKLvmm30rySUkMPZkw0cDHjuomlV6On6ob6K/0w2B1AIZrgtEhCeCCvVz3mbET
xPEjHFM3h+N7TxIcmmxsD2VgsjEMtB56BK9pRQTzvKpDZpvPsUFpIOuS+CtVT3gYqQ3G+4e8Xi5o
SMpjI7IQNlrPZ+MNAuYU+M/wIQ6zeXML/w7G/gD66oaB/Zvo/AAAAABJRU5ErkJggg==')
	#endregion
	$button_folderrights.Location = '6, 49'
	$button_folderrights.Name = 'button_folderrights'
	$button_folderrights.Size = '134, 24'
	$button_folderrights.TabIndex = 2
	$button_folderrights.Text = 'Folder Permissions'
	$button_folderrights.TextImageRelation = 'ImageBeforeText'
	$button_folderrights.UseVisualStyleBackColor = $True
	$button_folderrights.add_Click($button_folderrights_Click)
	#
	# button_profilerights
	#
	$button_profilerights.Enabled = $False
	$button_profilerights.ForeColor = 'Black'
	#region Binary Data
	$button_profilerights.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAOCAYAAAAmL5yKAAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUND
IHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoi
SFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQ
yhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnp
fIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZ
Yu4V8bZMIUfEiK+ICzO5nCwR3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJ
X3HcVyzgZAvEl3JJS8/hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi
2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti
0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4b
Ky0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNFhImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5
FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH554SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S
8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJVgMWSASpgA+yQB7YBApBMdgJ9oBq
UAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG+UBAU
CcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyCqbASrAUbwwzYCfaBQ+BV
cAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqR
PuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegE
dBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9rB3WH8vE
CrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf+
On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFp
B+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5k
heQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TG
KQhFneJCYVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04b
pr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLC
zFLqUtulrKVFS48vvacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/C
VSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08j
T6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0b
erCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLu
M/5oYmGSYtJoct9UxtTbNN+02/R3Mz0zllmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfi
g6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWN
y8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c+c7tzvMuNi7rXM65
Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU
+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI
8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaI
LoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp
40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp
2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7
zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8V5vDN3cX
KBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33zaEb9j
oNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2v
Tqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sU
moqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/j
PScYJ1p/0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dz
z86dSz83cz7h/HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3
/2TxU/uA5UDHdavrXTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriX
eW/h/sYH6AdFD6UeVjxSfNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2d
mnafvvF05dOJZ+nPFmYKf5X+tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/M
F72Rf3P4LeNt37vwd5MLWe+x7ys/6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAALDAAA
CwwBP0AiyAAAAe5JREFUOE+dkUFLG1EURvMPughklSzSheAkMpmJiC2K0I2LFlxV24WIIlmomNrW
FNRVWioVoZZABSUw4kZwkUSNk4WIUyNCk4rV2oDQ4oBIAjYhNAkTJs7XeS8hIbYU2wtn8e68e+a7
PINet3RYnY5/hMyQWQOL/6yKxNBBDpqmYVk8uBHkbkVAkpQFpVIJb/wbN4Lc/U2gqupfkdc68Xme
xfECj69+Hhfb7npBsVikCIKAQCCAfD5f7Z2FunC6cg/qlyHg1I2rxAjO1+/XCxRFQSQSAc/z4DgO
sViM9gi7M40oJcaBbxPYnLwLcaoN+D6BxFIbkZQFhUIBoVCIDjscDoiiSHuEndcNwNlLQPZi/RmL
jecO4GIax/47NUEmk4HH44HNZqP4fD6k02m6ypb3NpSDYahHo7g6GYOWeKqv8wSHC601QTAYhN1u
h9PppBAJSfRpvgWXUq++txs/pYdQ9h+jEH2Ek6V2CC9sUlUQDofhcrnqiL9vRiY6qEd/hXR0ANvT
jfgw24S9OQ4fV8fI37upIJfLIZlMUrLZLFKpFA4XW5HafADtaBg/dvtpEkmSqsiyXH4Fi8UyShJc
rz2hD9G3LPbfcYiv6Gni8cqXWpFZA8MwPVar1Ws2m2f/hNFoXDaZTIvX+2SGYZieXwc3QMuKbd8G
AAAAAElFTkSuQmCC')
	#endregion
	$button_profilerights.Location = '146, 18'
	$button_profilerights.Name = 'button_profilerights'
	$button_profilerights.Size = '144, 24'
	$button_profilerights.TabIndex = 1
	$button_profilerights.Text = 'Profile Permissions'
	$button_profilerights.TextImageRelation = 'ImageBeforeText'
	$button_profilerights.UseVisualStyleBackColor = $True
	$button_profilerights.add_Click($button_profilerights_Click)
	#
	# button_homerights
	#
	$button_homerights.Enabled = $False
	$button_homerights.ForeColor = 'Black'
	#region Binary Data
	$button_homerights.Image = [System.Convert]::FromBase64String('
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
rkJggg==')
	#endregion
	$button_homerights.Location = '146, 49'
	$button_homerights.Name = 'button_homerights'
	$button_homerights.Size = '144, 24'
	$button_homerights.TabIndex = 0
	$button_homerights.Text = 'Home Permissions'
	$button_homerights.TextImageRelation = 'ImageBeforeText'
	$button_homerights.UseVisualStyleBackColor = $True
	$button_homerights.add_Click($button_homerights_Click)
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($button_PCGroups)
	$groupbox5.Controls.Add($button_ComputerGroups)
	$groupbox5.ForeColor = '59, 59, 59'
	$groupbox5.Location = '524, 9'
	$groupbox5.Name = 'groupbox5'
	$groupbox5.Size = '171, 78'
	$groupbox5.TabIndex = 7
	$groupbox5.TabStop = $False
	$groupbox5.Text = 'Computergroups'
	#
	# button_PCGroups
	#
	$button_PCGroups.ForeColor = 'Black'
	#region Binary Data
	$button_PCGroups.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAANtSURBVDhPdZJtTJNXFMcP25xGqDx9So0m
ugTcJm5OIyUUIVsLj0MBsSobxGEtQsaETcW2vNSW1zC0QAfKooVoihiHxU3jKxFFqsFoNoNlZKWL
yVytUtMsWuIHcaD/3YJZ2Ifd5Jdz7of/+Z3cXCpJ5qfQJ/FUmTF/qpYwdML86aoQR5av5ScPaBaj
PnsRipX8ZEmyOKpU4CnIfwaY1ktJq+BYiOO0gpQNENOuT8QvThuj0WtW4pRJibK0d1EQy03ukEso
yL8DdEpxlGGdZKI17x3sy17MTJLneiU3R79GDHv5R+gxb8CJvZtg3ChD7ioOX8ZJqUAuJdIKEtqT
LGEmbnLK1JD02vQe8mPCvV8nzsXgqUKMXDTgrzsWeBw1yPkwFHkynvJjI4j2pknJkColvcBMZTNM
Khm2LhdBs+ItFwLdeDZ0AJ7+WoxcKMe2D972fyULoyLZPCL9Go5twVFRAjN1F8J1Pmhqwp/91cha
MhtEtGzUUYe+C3m4ZM9G7yE14qMXKH6sSKXq9tVEuvgQ2imfRduXh/jxtAuBoe9wv78KI+fLkBP5
pruiLZa/cqzocVw9wdorQso+8heZ3482tMqo6qCcKNkaoLPGlSRfKlY86CuH11GF4TN69FnVKK5f
8qDSlohzZwuRUEf41VMK65VwbLSEwNQc56xpWT2PUlrukdD6iJQtnujjnRb/wPEd+Mm8BWnfEgo6
FyLfJkXeUSly2yMw7K3CdXc2rP08NjW9AaNF/pJSLL+JlE1uZ33vEwzeOoOBDg1OVKQjnq18/8n3
GPKlwzmagbuP0uHyHcShG4SBP9Q4cjMCqoZZIGG/EzfvjWFwdAL+cUydv1mV1xAGfd+g7TZNc4tw
mGFlffvPhF9Gc/GpmUAqy11cdY2htCcA4+UAXrH082dAYi3B4UtAxwjhGMPmIhxxTmMbJlReJny+
nwPJDTdw2OHH9k4Ptto8+OKoFzm2p1jfLGAtM6xjpDYQBPaInb8TOtyE6qsEVZ1oPCNr2S5aoDkH
dZsbe+xeFJ9kdAWrD1r7GHTd49C0jYHfMjye3kj44SELXyMoTNTD/scqRjiJPi7ZHfbZyYnQzC7M
3TyDTDtCM7sRlnn6xZwYnVrVTGi8Q0gyUR8LRmY1hpG2NoG1wSlEMQzZ/xA0hc64RzFeH6J/AFRR
7NCExeMEAAAAAElFTkSuQmCC')
	#endregion
	$button_PCGroups.Location = '6, 48'
	$button_PCGroups.Name = 'button_PCGroups'
	$button_PCGroups.Size = '160, 23'
	$button_PCGroups.TabIndex = 1
	$button_PCGroups.Text = 'Transfer Computergroups'
	$button_PCGroups.TextImageRelation = 'ImageBeforeText'
	$button_PCGroups.UseVisualStyleBackColor = $True
	$button_PCGroups.add_Click($button_PCGroups_Click)
	#
	# button_ComputerGroups
	#
	$button_ComputerGroups.ForeColor = 'Black'
	#region Binary Data
	$button_ComputerGroups.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMKSURBVDhPdZFpSNRRFMVvQeHSMguKHypI
0iyy0AqjqMaZaJHKbAQpx9RWNZcZZ3EWpzEtdysRK4PcBtMpSlpIihLbCIqsLJcICrOCDEwTLNM6
vfeysg89+HHP/7z37rnzhoxKmcAQKqMDm7xFNTL0Ku9fdbV0tnmdbLQ0diZyo2ZAq5CNGpVSX5NK
Rpx/GmRu9CIAgnSVF2sgpdRV0uELtgBcL1DgXKYCGWFzsHeJZDQhRE6cPw30CqmvZb18pGznLORF
zWRJ8i8GhcTNsEYKlzkQTQWbUWeNgG3LYsQFSbB7qZz2MFiSnHRKOUuSjIqkwtCxJD/sCprWs3+F
Bx6fS8CLqxb0PSpCd0sWts9zQ9xCd4oPdCOyhnmRZYMXGVQsKeNvknVzMDTzPRAbSG0YOIPOW0fw
4HI2uq6kQ+NP74rKq6i47BSRYY2ETSGhpOUeaD2biI7LFnx8WITXN22IW8F+b0z47vctJqQbfnG7
Qg0iCjRbM8lisxPpl02glJBJFL9gQi8+1aP/6RG8arbjeWMyTGYrcg7noaOzC3X1LgHX3Muw2GDm
DZQn++mibRGFzJWufnPTjJ4WB9oatWguV+PgoVy0PWtHQVGJqOO1ze5A5tGASbT22EtSlb0jxbHu
AGdtSe9d5z64CiNgMWtEWn5hsbhwiKVyuOYe37MWKEdobUn7VEVx15Pc631ovd+IO9UxqDmwCqna
dFRVO8WFLDYJX4NDg0Jzr7KqBuwdQKr8J7j3cgCt70fQ+xX4wQ4ODX9DSppOHOKHHVk5SHH6IZXB
NfdOV1aLd6Dwkse40TEAU1M/bNf68f3bEAY/94lEPubvse2OgwKuucf3UrL9QSGW2zjR0ov42m5o
qrqx7TSjsgfRtR/EQ/ELOWNjj9dGk5n/nYvJJ/YSYiq6oHP1QNvAqOf1LVJdH5Cm00NvzBBpx09U
CKI1O0q5x/d0eiPR1JXGtCmRDSOe6np4bB2DaXe1C26R5zFZ3Tg8MTghNjEpGRyW6iOSGaIBW9MZ
wdz4D0EMz3Hf4xbRT+U7HtWFp1FPAAAAAElFTkSuQmCC')
	#endregion
	$button_ComputerGroups.Location = '6, 19'
	$button_ComputerGroups.Name = 'button_ComputerGroups'
	$button_ComputerGroups.Size = '160, 23'
	$button_ComputerGroups.TabIndex = 0
	$button_ComputerGroups.Text = 'Get Computer Groups'
	$button_ComputerGroups.TextImageRelation = 'ImageBeforeText'
	$button_ComputerGroups.UseVisualStyleBackColor = $True
	$button_ComputerGroups.add_Click($button_ComputerGroups_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($button_autostart)
	$groupbox2.Controls.Add($button_installedSoftware)
	$groupbox2.ForeColor = '59, 59, 59'
	$groupbox2.Location = '410, 9'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '108, 78'
	$groupbox2.TabIndex = 6
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'OS / Software'
	#
	# button_autostart
	#
	$button_autostart.ForeColor = 'Black'
	#region Binary Data
	$button_autostart.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKYSURBVDhPpVJNT1NREJ0fQGLiyrBT15Io
ceFOE5EPUeOiCSmauDcaXUjUAGmpfPWLQAzQ0r7SUkoKtOWjBZoWJAaktkUkUQttI6ghVowbK4UC
epz3oAobN05yMm/m3XPm3nMvAfgv0LWWw7iip7zLOnKWagmX1ISLzYTzjYS7xnPw+sc2/YFplXds
gnI4RC7X0U3OeOQg6IYI1skziL23YGbRhw+pBL6kvuHFXBijvvE1kewb9x+YrKM8kdwZINy3E3qC
bZjwhmAwONDQ2IL2DgEejxcrK6sIR+fhGR5d6x9075GvMko15Kz3EZTDhAfdZbBZRhAJLyL9IwOz
WeC8gVAogk6jgLfvluAPTIIFVHsCeqISPq/zDaGik6DqeIjFV3Gk0xvYyGRQVVWFzGYG39NphCPz
6B9wS7vo7XNu5c5O5Wxab4wFDAS9QQv8Ana22GfONyor+QPYzu5gd/cnjCYLQi8jsNkdEKejjKcr
pgi2JKFmkl2vJ5xVEBZWg5BXVMLhcEAul0OpVMLtckGrb0UwOA2TxQYqqaNnokBfil3/RLB/Jlxg
gVvGY8hub0uTZTKZlHNhZuLU9HN0GEz8EIhOFtWSv5jvuu8rk58QrmuPIJH8uL/8cMRiS3D2uxAI
TqHtaXtW8oDjeJGCgsW8E5n+KGZnorBZB7C8nNyn7cXScgJCdw9mZudgsfbgcXVNlySwL3KCUahv
ElJD7jFEo6/h8ozAJNjQJVilPMh1JLqAQZcHDU2adV6f/0egjNGmtotCp5R1jesmczc7HUUinkQ8
npCyWIt9RV29SC5oUvP1iWTpITFaNAKpNa2iSMHtO/dMNQpVtrpWiRzEWuyL/5s1ehLxr8hnnGYU
HoBYi/2/wd78B0C/ATooV+x+3KOsAAAAAElFTkSuQmCC')
	#endregion
	$button_autostart.Location = '6, 48'
	$button_autostart.Name = 'button_autostart'
	$button_autostart.Size = '97, 23'
	$button_autostart.TabIndex = 1
	$button_autostart.Text = 'Autostart'
	$button_autostart.TextImageRelation = 'ImageBeforeText'
	$button_autostart.UseVisualStyleBackColor = $True
	$button_autostart.add_Click($button_autostart_Click)
	#
	# button_installedSoftware
	#
	$button_installedSoftware.ForeColor = 'Black'
	#region Binary Data
	$button_installedSoftware.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGlSURBVDhPjZLLSkJRFIY3CaWlmSRdBhWE
1AP0FEG9S/fCzEqh5lF0c9CkCwSmXVQquoyiQffQaJKQQlB5KqIGBX9r7aNpp1O48GPBXvv85zvb
LUrdodVKTwQVnvC/VHkj4L11o1siF8EP+05TmDlJYZa6Hr4zBXMXT6imkJqRzZ8B9uEQgtevsHn3
YHat6WIhrO4N2IdCv0yEbTCEg+QHjM5VTB0/SqbJho20sKnWRFgomcvQG8T8uYKy4R1diwzWgXWU
kwl/OpuIEpcaIHqCmDi8g8m5hsmjB+IeU3/yIM+GQ7IBnQHZC8hkOfqM+rFLNIxfolEDr/HMf/Ui
TbIBHStq7wpg++YNzQtxtCzG0br0E17j2W78XR6sMA9oAtr9sudTxfRy+S9wiW71E0SbGhCLRhGN
xXThGZexfx3C0rW0bxsMo5AOjytjkEgkcJtI6sIzLhlA5SCarBmT9GE+KSmkFEUXnnEZnRTAl6GW
yJgY+lQTfH7Qj+CeC63xjMvEBt9XMm1icasm+RRdpGxArgkPOL2IFPXgGe/hvfxmbUmT/BCOL1mQ
puqR+h0MAAAAAElFTkSuQmCC')
	#endregion
	$button_installedSoftware.Location = '6, 19'
	$button_installedSoftware.Name = 'button_installedSoftware'
	$button_installedSoftware.Size = '97, 23'
	$button_installedSoftware.TabIndex = 0
	$button_installedSoftware.Text = 'Inst. Software'
	$button_installedSoftware.TextImageRelation = 'ImageBeforeText'
	$button_installedSoftware.UseVisualStyleBackColor = $True
	$button_installedSoftware.add_Click($button_installedSoftware_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($button_printer)
	$groupbox1.Controls.Add($button_USBDevice)
	$groupbox1.Controls.Add($button_systemtype)
	$groupbox1.Controls.Add($button_memory)
	$groupbox1.Controls.Add($button_processor)
	$groupbox1.Controls.Add($button_mainboard)
	$groupbox1.ForeColor = '59, 59, 59'
	$groupbox1.Location = '8, 9'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '396, 78'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Hardware'
	#
	# button_printer
	#
	$button_printer.ForeColor = 'Black'
	#region Binary Data
	$button_printer.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHfSURBVDhPlVPLShthGM2ztG9gthY3JloH
6qWlr2A2TToYUeMFTDIpgrGlJsx4i5uEGq8LcZFgRNRuu2jpphUFUfC2bOmF0tPv/PPPmBRdeOBk
vpxzvjO3JAAgUI9nE9WNJ+ktGMlNGOOaMlOjp2MKavf/AsOq4I+I34Xf/rrkTI2ejimoXfWhMRDv
Q1uqohbenwEHpy45U6PHjI7fFDiOs+E4NhbnHIStGn6K+Fv4S5MzNXrMMMsdkdyCfD4vByD20kR/
PA7TNBGNxfAi6pIzNXrMEHrHLcjlpvkFVmYC2ewbTL1+eyvpMUPoHa8gh8urayStV3JGU87Sdyvp
McMsd/wCXs7Xw2Ps7u2jvLyGcnkV75ZWGkiNHjPMNtyCbdv4+OkzhhIjiPRGJLyEUqmEYrGoyJka
PWaY5Y5fkM1O7s7OOPKEbbRndiCvXj31H5qcqdFjhlnuiOQWCB4Kg2Tb6HrFsKoIpbYRStcQTu/I
XJMfURX0vBx36gvq8UCoQpHoEJpbHjPgLdHzcVeBwnkhVDiZ78DJgoGLxXBByw3wCwaHx6CYGMVA
YgzR/nEc2Y/kj5AUptRMjR4zXt4v6O7qgcfOzqdoNZ7jy3QTPkwGFTlTo1ef9QsE3j3eiwAC/wCI
DTa5sUvmUwAAAABJRU5ErkJggg==')
	#endregion
	$button_printer.ImageAlign = 'MiddleRight'
	$button_printer.Location = '194, 49'
	$button_printer.Name = 'button_printer'
	$button_printer.Size = '94, 24'
	$button_printer.TabIndex = 5
	$button_printer.Text = 'Printer'
	$button_printer.TextImageRelation = 'ImageBeforeText'
	$button_printer.UseVisualStyleBackColor = $True
	$button_printer.add_Click($button_printer_Click)
	#
	# button_USBDevice
	#
	$button_USBDevice.ForeColor = 'Black'
	#region Binary Data
	$button_USBDevice.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHWSURBVDhPlZBNSxtRFIYHwY27ao36IyrC
uPGDiqYtXRQVwY9FcaFSBb9W/gS1pIlSTUad+EUEq4JMJi6rsSq4VKOiNqU1ZNJkorv+gddz7owo
wSb4wHDuzD3Pe88dCYD0HGZnfFAURUiqqhY8KyAw+xXJRBIJIwmv18tiXs4Ax1AIRQM6Cvp0/DNj
WF5ahH9hEbG4YU2SLaBoIAj1IA1lL4XpXRNSt4bvWxp0LYi4kSPgJcnKvomGiVO8dkdQ7YrAs5Oi
kCCODvfgnxFXkJ8M4JOH13+ijmVPBFWuE2oDat2n8ITTyO/dsmQmM6CwX4ObTqqmZkb+fCxqJdW6
yTMxxYv+0INEe/aKTibZtZ1CzcS5kF6NWXLFuDXBO+8FJn+kwT/WVh4C+M7uHRPO6QvR3LP6W9Ry
W35DcsvCLxQPBlmwxmdoTyqhxC/hGzSqUdTbAY9567uCc+oEjkyZoX3JMahjdNtE03wUTt+lkEZC
cbH+4I+iY+X6aZnhgJIhHePhW7QsWWO/n4uimcZtC/xB57f4/2WGAwi5mP5B55qB1sA12kn8uBpD
14aRXWbsAEbm5k/aX/RsJtCrJXPLzKMARi4bDqGUrsSV363PWcgIYFi6f3IgSXebHodcCgf8BwAA
AABJRU5ErkJggg==')
	#endregion
	$button_USBDevice.ImageAlign = 'MiddleRight'
	$button_USBDevice.Location = '194, 19'
	$button_USBDevice.Name = 'button_USBDevice'
	$button_USBDevice.Size = '94, 24'
	$button_USBDevice.TabIndex = 4
	$button_USBDevice.Text = 'USB Device'
	$button_USBDevice.TextImageRelation = 'ImageBeforeText'
	$button_USBDevice.UseVisualStyleBackColor = $True
	$button_USBDevice.add_Click($button_USBDevice_Click)
	#
	# button_systemtype
	#
	$button_systemtype.ForeColor = 'Black'
	#region Binary Data
	$button_systemtype.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALPSURBVDhPdZLbS1RRFIf3X9FDPZTZSxj0
EBG9RARBLxUUEUEFRi+VWpmJTuUlxzEbncy8jqKOzslLjU4JkwWVXcUxS8nKzEs5jWkeZzyjjkXU
195TQRdb8LEWa/32+u1zEZaKlv+SVe5ypxc3ceZSo6ThNxpRfTVf8GC2vVmYy10iraiRuS/fCIW/
/IPqq/mCCxSZJU3CVHCZqdlP3OgaoO0nqr7hHUCf+YSpQPuxQDn+jbpBygWNydA8TwYDdCuGArKe
wjugMz49i5oroTuz5AoZ8pkyiht/IK+mOFNYT6oUpdicMjuxVF4j13GT7CoPPj1Ecn4dIl0KP87P
oIenCYSDEabmAuizASYlEzMBPkh800FSbRp9o3P0DBuMjAdJtjoQpy9q+II6i072sNLymrWFw2yw
+9hS42dHnZ+92ntinT5ejn3AlF9PodaJzfGYQb9BklpgulBHv9/PCnM/60vfstk5xvYrH9nj1jlw
fZLDrRMcaR6X72CUU3kudncKdj4SvH43x4ncGkSqrZaugWFibCNsdIyxrTnA1msGuzwGez1BYlt1
Ej06D/oGMVmvsskm2GAVPB8KkZhThUjJq+HOs5esLvKxzjHOai3IKleYVc3zxNQbrKycYKltlDbv
C06eq+WW14en4y2dr/wczalEJJ+vwvWgl6iC9ywrm2S5c5Zo91eiW2F5Q5ioyikW2/w03X3GcUsF
rY/7aJH6e71vSMi2I07IBRVt3RifZzDmpzHCAQz5FSKoWvZCcmb3eIk3l+N+1IPr/lNudb8iPqsM
cSitoP1YTkVkGHe2lCMZJRxKL4qgatVLkLOjFju51W6ud/Tiftgj/8YXxMm+kBEtWaM4Xahhrm1D
u90V4ZzzJqoXJ53izWUyl3I4UxpkFEfywVRru0iyVkeQDmJ/YlZ1QnZ5RKxQzvuOZdp/GSyAMv8j
lkj+Fi2W/CeE+A7y3I1Qt5F/hwAAAABJRU5ErkJggg==')
	#endregion
	$button_systemtype.ImageAlign = 'MiddleRight'
	$button_systemtype.Location = '94, 19'
	$button_systemtype.Name = 'button_systemtype'
	$button_systemtype.Size = '94, 24'
	$button_systemtype.TabIndex = 3
	$button_systemtype.Text = 'System Type'
	$button_systemtype.TextImageRelation = 'ImageBeforeText'
	$button_systemtype.UseVisualStyleBackColor = $True
	$button_systemtype.add_Click($button_systemtype_Click)
	#
	# button_memory
	#
	$button_memory.ForeColor = 'Black'
	#region Binary Data
	$button_memory.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFESURBVDhPpZK9SsNgFIa/S/EGhLSm8UOI
DiUBjaKhWtFJRKSppWl113twEB10kLYiRVJ7AQ4WHFw13oA6C8X99Zz8iIZvMBh4cs55fyBDBIB/
oRTzoBTzoBTzIMwD+SFbOgy/GNNMZrpn72TnDneFbJXwEA4xCgOMXgYYPRM8wwHun2J4/+0FUYe7
YtrXETyewTTKmJUWtk9MzEk7YuvYjEhv9jjDWe5wN/qC07sjzJcrcKw11C8XsGhXsWSvo37hwCMc
qwqHNPY4w1nuJF9g4PB2B7XuMrECr+uiceVi/7qCdm8Vex0XXo90otYhKMNZ7nBXGPTC5w3ezjeA
cZ/mZnQXGnpE7JFG3ut3hibp3BUzbTnWaSk0S9AInnxL33jXd4vDn15KmuGuoEcjphRMEhMZLYum
/DnyoBTzoBTzoBT/DsQXJCWD+6cSFXMAAAAASUVORK5CYII=')
	#endregion
	$button_memory.ImageAlign = 'MiddleRight'
	$button_memory.Location = '6, 49'
	$button_memory.Name = 'button_memory'
	$button_memory.Size = '82, 24'
	$button_memory.TabIndex = 2
	$button_memory.Text = 'Memory'
	$button_memory.TextImageRelation = 'ImageBeforeText'
	$button_memory.UseVisualStyleBackColor = $True
	$button_memory.add_Click($button_memory_Click)
	#
	# button_processor
	#
	$button_processor.ForeColor = 'Black'
	#region Binary Data
	$button_processor.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIRSURBVDhPhZNLaxNhGIWz83d00V/QdZv7
5DK5TG6Tps3MxJlkEhBB8NZFFRfWC8W0ddO0FkukblLcKbq2oIJpKlWoi7T9JeH4vh8zSZMofnA4
fO887/kOgXgAeNxz9jotLmf7/3GHE8cNKGr222XdhGaQKhZ00t+cvzPHvFjkgO+tDIplC+8/fML6
ehMvmptoNremxHP+zhzzvOc2mCuWTXQO32F+3otAIDSlYDAsfGHBJzjmeW+sQbt9MIRduQGhkIRI
JCa8/eZgusGiZmF75xX8/iD65xc47p2g0zkU3jv5gdOfv0SAJEWxvbsH5kcNdrI0qKK5sSVe8PkC
oqrX6xeBPItG40gkUojFZGxsvhQ87w0blPQaHj95hnA4gvN+H93uMXr0equ1CzmeQCqlIE2S5STW
nj4H82MNlowaVh8+QpReCAQleKkFK0SVE8k0lExOKEkhD4hjftigLM1mlgwbt+/eh0w1Ly8u8fno
CIPBAF++fkO1ZiObKyCXV0XInXsrFGCPGnQpabli48bNW0grWXqRqlJQnOryi5lsXiznC0URxBzz
vDf8DcqVOsxqQ0CTKqiLUIslIb4zx/xYAx6UyjryBOdVAh0VJsTfmWN+rIGi6h8Ns47rVh2G1YBm
NoSbVZqRrjpzzA8bOGfm974iap3uZaCFZxV2vrvzCZ8hjf6Nzpm74tcc5/MP93j+AM2X7D2jJo54
AAAAAElFTkSuQmCC')
	#endregion
	$button_processor.ImageAlign = 'MiddleRight'
	$button_processor.Location = '6, 19'
	$button_processor.Name = 'button_processor'
	$button_processor.Size = '82, 24'
	$button_processor.TabIndex = 1
	$button_processor.Text = 'CPU'
	$button_processor.TextImageRelation = 'ImageBeforeText'
	$button_processor.UseVisualStyleBackColor = $True
	$button_processor.add_Click($button_processor_Click)
	#
	# button_mainboard
	#
	$button_mainboard.ForeColor = 'Black'
	#region Binary Data
	$button_mainboard.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKvSURBVDhPlZHLTxNRFIf5M1yrCyUtYotQ
ykMIr5pShBZI0RhdGDfGKIpSLCZGUSERrIDybAAhqBHoA2gB5U0LFGjLU0Kk0EJ1YQoIkUQ3P8/M
FIi60Um+/Oac3PnuuXcCAAQY1cJNvSoI+lw+wfsHaB2tZ75jBXoVH55pM9yODpZVewdW7O1YmSIo
mdrt6ITbaSIomffpLlbCCgy3DmPVUofugkh0PoiEPl8EnfrUPvp7IpgeRqHnSSwRQ+ui4LI2kYDP
CcYcC3hUXIGgcAneP46m1hbhIzb9uYXewhjwQiUYL5MgMCQeHmsdDHsT9A6MoLrhLWyaOPQXxVLr
C1rzQtidmWTq4adxEEZKMVMtg0AsgddSBUOeX9DVNwadeRD8sCQMFcdRy43BkiSMlMrYZOpRTQJC
T6fgo/YsQqOlWB8qh3FPYLxxCJ6eAjgqpLBoJMCPRTir5ZjRZrKJn4uwlZ2BKDYVSw1yiGJSsN7/
jAQnOIF1cg6FmhrwwiSwvUgGdmeAHScxzSXV9koZxAkKLDelQxwvh7eviI7gF5gHJtDY1ovZ2jRM
VsphfS7FMI0+XJLI5mipFHNaBSISM+FuViIiIR3eDwUkCOYE+pyjcLXnwVmbgckqBbBtox9gBTYs
XO7YMF+XAXFSFlZen6NUYr3n/oFAlxuET8ZcOGoyMVWpwMTLVDpKCmzlMjanaKr5+iy4mi9gmWDS
Y1ZDvy9QBWNZlw18o503aEcf7ewb4WCm2B7HUuN5HAtLxtq7S2x6TXd+F7h012lMJWa1GXQX6QdQ
vVCvhOvNRXxuu3yAKYcEJ/13QC9rxmvAdzt3/j/ZtcOru4Lj4anwma4iUJyGr903Ybgr4ASvsoMH
mClab/PQkhP4F0yfubDOfME+7WohWlQCNyug5wgh/H8CeL8A7J+jNx2aU/gAAAAASUVORK5CYII=')
	#endregion
	$button_mainboard.ImageAlign = 'MiddleRight'
	$button_mainboard.Location = '94, 49'
	$button_mainboard.Name = 'button_mainboard'
	$button_mainboard.Size = '94, 24'
	$button_mainboard.TabIndex = 0
	$button_mainboard.Text = 'Mainboard'
	$button_mainboard.TextImageRelation = 'ImageBeforeText'
	$button_mainboard.UseVisualStyleBackColor = $True
	$button_mainboard.add_Click($button_mainboard_Click)
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($groupbox19)
	$tabpage3.ImageIndex = 2
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '1264, 91'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'Network'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# groupbox19
	#
	$groupbox19.Controls.Add($button_ipconfig2)
	$groupbox19.Controls.Add($button_testport)
	$groupbox19.Controls.Add($button_hosts)
	$groupbox19.Controls.Add($button_routetable)
	$groupbox19.Controls.Add($button_checkWLAN)
	$groupbox19.ForeColor = '59, 59, 59'
	$groupbox19.Location = '6, 6'
	$groupbox19.Name = 'groupbox19'
	$groupbox19.Size = '277, 78'
	$groupbox19.TabIndex = 7
	$groupbox19.TabStop = $False
	$groupbox19.Text = 'Network Settings'
	#
	# button_ipconfig2
	#
	$button_ipconfig2.ForeColor = 'Black'
	#region Binary Data
	$button_ipconfig2.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFtSURBVDhPpVBNSwJRFO2n+EG0zz6hWoSV
YaAV9AfCTFJoERUFFbVt16JNH0gISY3OOOi6XxC0dREUViudNkGO2end65tJywzrwJl35p5zD7zX
AeBf5I+m66qiqrhMpaCk0y3JGZEVO3m7gIx2IXdqBdRKKBQeML8QQTgSg2E88xkKL6FYLAkdZY8y
BLlTK7hQFPpByTBQeatgbHwSZsXks/pexWu5LLSPPcoQ5E5jQdk04enpZ22ht29AKrBHGUJjgbwC
wel0w+FwsabT5eqU2s2eBbkjH1G8aruQO7WCs0TiKqWpSIkhU9OQzmSgZ7PQczmoGZ1nn76K82Ty
xi4QcAt6vnIxuoKhES8FvnmCXfUFTRFa3sHgaPDHQMuCx5OJ+N2RH/fHU3g69cXluAF2wfrmFiyu
bWwjtrqL28Nh4GWPSZpm5NVn7YLp4AwsBgKz8PrnkD/oxvW+h0maZuTVZ+0CgWaP9Cvtgr8THR8X
4ntqivo2yQAAAABJRU5ErkJggg==')
	#endregion
	$button_ipconfig2.Location = '6, 19'
	$button_ipconfig2.Name = 'button_ipconfig2'
	$button_ipconfig2.Size = '75, 24'
	$button_ipconfig2.TabIndex = 0
	$button_ipconfig2.Text = 'IP Config'
	$button_ipconfig2.TextImageRelation = 'ImageBeforeText'
	$button_ipconfig2.UseVisualStyleBackColor = $True
	$button_ipconfig2.add_Click($button_ipconfig2_Click)
	#
	# button_testport
	#
	$button_testport.ForeColor = 'Black'
	#region Binary Data
	$button_testport.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAADtSURBVDhP7VKxDgFRENxfoXcKhUIoREII
NR+gukT8g0aEOKcQjV6jlaAgCh2hkagUlDqFRDHeHCeSO1cQnUnmTXZ2d+5d8gTAV5R0TUBm6oKU
IX1ROPSy/V03h20nCypr+uxzzt6xAoyVoKVobgTJpkDXK9h3E8DFBM6Gpazps885znPPcYNkQ07q
Q6FFNTxcNyO4HougsqYfr8jIcQM2XqjRUPBNqsHxsh0ClfXdFr/ic94OeAd7mOoKz4B5LDiYRTUo
5W+5wjOAyygXQH1YDngGTKMBoJQH9WE58A/4dYDC88VZlQusAB6fE3IDzRkoaGqrtEwAAAAASUVO
RK5CYII=')
	#endregion
	$button_testport.Location = '196, 19'
	$button_testport.Name = 'button_testport'
	$button_testport.Size = '75, 24'
	$button_testport.TabIndex = 6
	$button_testport.Text = 'Test Port'
	$button_testport.TextImageRelation = 'ImageBeforeText'
	$button_testport.UseVisualStyleBackColor = $True
	$button_testport.add_Click($button_testport_Click)
	#
	# button_hosts
	#
	$button_hosts.ForeColor = 'Black'
	#region Binary Data
	$button_hosts.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKBSURBVDhPjZFfSFNxFMdvLz0ICvXSy2QG
IYpQlpD2j4JKyjKKJCsfCgmit4hyuXKZ1pyZV53L0MwlKHNsLbfS6eaWZmpt1ZrbXO7OOdKVKOQ/
Civi2/1db86FQV/4wLnnnO/5Hc6l/iVhiTmORckyzQIeEpNcHN+2stiG5CT6+fTNbjOYeQsmfwzg
47cBOL8YIbEa/wxK5tsjRaYnlVtnWn3T+PzdBfesH09GF9AcMEIx9AymCQkMTDeEUtPMipsIb3c2
ijoZ2KZ+wj3fD8fXIrRPyqCf2oG6YCKOdzagwi3G9S52E7aXt4UVLzXO3mvWobxCzlGnKoaWSYci
cBgixymkqsewRdUDTeAy2WKWt4WVU9oIs8WKsfEQPENedJi6QNfnoTa0CvRIDHbr+rChwY8Cey53
WN4WllRWBq93GPqnbaArq0G+CbUhCtldD7GpKQjhAx82N2lWHiArvQvH+0FYrD0oulWCUuYg6j7F
gA7EIrNdjXilH+vuexFFO8kN5nhbWI91rXC5PXhts+NGYfES+c50SD8IcMmeitwXe7FeroUgv0XP
27jfpzyt8Sidg645m/0t7G/egfGPwOPx4mLhHWzTGFAdpFDOUMgxZXCvrzlwbueS+aTWB0PwF2SW
AFrUmpDo6jUQzhTKkVDVj7UKDy7078F+lWjRfOh8NmtdHWE+2zaBTO04BGJ1a3TakUxBvspAmsmx
ONiY5KK3H8tgzVHc61trXkWYU2pdiC3QabjpFBXXW5auH64/CgKJSY6vLWpj1csI8y7JI1wRiZdw
1+zDwmgeB4mX1wgUWSmR7kVCRR97VZUhK+sEluOoTIvg7zpZgqyUwrM8/g+olN/LfeaCXY3IuQAA
AABJRU5ErkJggg==')
	#endregion
	$button_hosts.Location = '6, 49'
	$button_hosts.Name = 'button_hosts'
	$button_hosts.Size = '75, 24'
	$button_hosts.TabIndex = 5
	$button_hosts.Text = 'Hostsfile'
	$button_hosts.TextImageRelation = 'ImageBeforeText'
	$button_hosts.UseVisualStyleBackColor = $True
	$button_hosts.add_Click($button_hosts_Click)
	#
	# button_routetable
	#
	$button_routetable.ForeColor = 'Black'
	#region Binary Data
	$button_routetable.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJgSURBVDhPnVNdSJNRGH7v3AZtUBellTfd
hyAaQqUX0TCL6qLbbrqOrrrQfX2b+zUUlSgoSsswK7DSct82ly6IzZ+QcM5m/jBFE0dENrQiraf3
nP20QAl64OE933fO+7zPec85VOgMfDaqGvSKhgKLBp2kNxPzxjyvV3wwME2qDyKv2BMkEsn/A5PV
j33ufiK94k3/eX0MCFcDETNUbREYMjOrYdOWgeGTwOg5HK4nlCoklxutIex1DbIAWxRQeueg9s3D
oc3D419AQyCJxuAXtAyso3lwA60hoMJOiCau4yhHo20Ce1xviXSWPikQXwemvwKJH0BrYAmjySVZ
sdJBqHJyZF55RrgbIYRnVZg9hLPN9Ecg8Q1Y+A6s/AQ8z4My2R0idE0RHjA744R7McKdcRaZIPhn
zqOmiZATaHoRQ4s3jpvBZZlsGyTU+kmOs7QEOHmaMLBSjuPsgOuX5gQ+bgCfNgE2IRdf6CJc6jyC
7vCanBeosBKeLhpQxT0wWJM4k7+FFFsXS1c3f6FMTXda4BAnCUGBrBOBA47LcpwTuBWI4Xb/O3SE
EuiOrKJ3BFLoQ/IGKnihcJJl3eNKXGxPi5GuLi3ABiQFeobWUM6V4ysK2sIEhbufrS5o4e8GLSOg
zzjIx8FawpPoabSJrkcJHZN8Eu8JD7mBj2YIja/SyQLbXmXRqPaxMtyfJdS//NuB4H5XT/oUCu2+
lHxM7KSAt6Pnh7NDDcFkm8SJq4Rrw7tQw3GnfQ67neN8+8aYIyhyhFNF7jesQVQilbbhKb4souIW
cyXFngEO/0Y2YQsQ/QaNGWXFRtHxxgAAAABJRU5ErkJggg==')
	#endregion
	$button_routetable.Location = '87, 49'
	$button_routetable.Name = 'button_routetable'
	$button_routetable.Size = '103, 24'
	$button_routetable.TabIndex = 1
	$button_routetable.Text = 'Route Table'
	$button_routetable.TextImageRelation = 'ImageBeforeText'
	$button_routetable.UseVisualStyleBackColor = $True
	$button_routetable.add_Click($button_routetable_Click)
	#
	# button_checkWLAN
	#
	$button_checkWLAN.ForeColor = 'Black'
	#region Binary Data
	$button_checkWLAN.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGoSURBVDhPlVK/SwJxHL3wV17Q5hBB/QNJ
0jmFOQVCZlpBEBRBBUF5VkMWBRW2KEgNDS1SQtCQXJbolro2Sa1BYQQ1BiVBLp8+n69fj7vAgx48
7t177/uOO04AAEELMVJeQN4h4Q+fkPO8xsDOagd4CeyLSsbqXZlFSyKanWOj9rmLVHOIlRG6AQw+
Rbn4hZIO9ZLF/U68WJHdSIk61KVMHUCjyg+7KLBHytF2uQw2TtLobVCGcIlyqYZnXrUDYJGmA5Ri
8dwSLn0LHll9BWFwecYSZiMF6ph63F4xfPuhDvCijQQ9UehyelB20D2HKPSFApThw8x4b0L2awe0
oDFTMa+sZZVLIKJeRY++A2VtSIZWAwy5qwxGDZDmtg4YtR5QMhmo3D8wkua2DsYDigI/9TojaW7r
YDiQSB7Gszd5uM4VIJE8inNbB8MBhGNpfR/cHj8VHA1LD8OBt1NfupoagZeUH97PfGlu66AObO3s
QpOb23sgR2PwfDIEUIshD5gmjzJtVx0YD01Ak8HgJAz7p+DxeAAqSYmRNHmUabvqAKLxy/6TACD8
AqxBR+NLAYUlAAAAAElFTkSuQmCC')
	#endregion
	$button_checkWLAN.Location = '87, 19'
	$button_checkWLAN.Name = 'button_checkWLAN'
	$button_checkWLAN.Size = '103, 24'
	$button_checkWLAN.TabIndex = 4
	$button_checkWLAN.Text = 'Check WLAN'
	$button_checkWLAN.TextImageRelation = 'ImageBeforeText'
	$button_checkWLAN.UseVisualStyleBackColor = $True
	$button_checkWLAN.add_Click($button_checkWLAN_Click)
	#
	# tabpage4
	#
	$tabpage4.Controls.Add($chart1)
	$tabpage4.Controls.Add($groupbox21)
	$tabpage4.Controls.Add($groupbox20)
	$tabpage4.ImageIndex = 3
	$tabpage4.Location = '4, 22'
	$tabpage4.Name = 'tabpage4'
	$tabpage4.Padding = '3, 3, 3, 3'
	$tabpage4.Size = '1264, 91'
	$tabpage4.TabIndex = 3
	$tabpage4.Text = 'Processes'
	$tabpage4.UseVisualStyleBackColor = $True
	#
	# chart1
	#
	$chart1.BorderlineDashStyle = 'Dot'
	$System_Windows_Forms_DataVisualization_Charting_ChartArea_1 = New-Object 'System.Windows.Forms.DataVisualization.Charting.ChartArea'
	$System_Windows_Forms_DataVisualization_Charting_ChartArea_1.Name = 'ChartArea1'
	[void]$chart1.ChartAreas.Add($System_Windows_Forms_DataVisualization_Charting_ChartArea_1)
	$chart1.Dock = 'Right'
	$System_Windows_Forms_DataVisualization_Charting_Legend_2 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Legend'
	$System_Windows_Forms_DataVisualization_Charting_Legend_2.Enabled = $False
	$System_Windows_Forms_DataVisualization_Charting_Legend_2.Name = 'Legend1'
	[void]$chart1.Legends.Add($System_Windows_Forms_DataVisualization_Charting_Legend_2)
	$chart1.Location = '682, 3'
	$chart1.Margin = '0, 0, 0, 0'
	$chart1.Name = 'chart1'
	$chart1.Palette = 'Bright'
	$System_Windows_Forms_DataVisualization_Charting_Series_3 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Series'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.ChartArea = 'ChartArea1'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.ChartType = 'Bar'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.IsVisibleInLegend = $False
	$System_Windows_Forms_DataVisualization_Charting_Series_3.Legend = 'Legend1'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.Name = 'Series1'
	[void]$chart1.Series.Add($System_Windows_Forms_DataVisualization_Charting_Series_3)
	$chart1.Size = '579, 85'
	$chart1.TabIndex = 10
	$chart1.Text = 'CPU + RAM'
	#
	# groupbox21
	#
	$groupbox21.Controls.Add($labelPleaseEnterFileExten)
	$groupbox21.Controls.Add($button_process_stop)
	$groupbox21.Controls.Add($button_process_start)
	$groupbox21.Controls.Add($textbox_Process)
	$groupbox21.ForeColor = '59, 59, 59'
	$groupbox21.Location = '507, 6'
	$groupbox21.Margin = '1, 1, 1, 1'
	$groupbox21.Name = 'groupbox21'
	$groupbox21.Size = '174, 78'
	$groupbox21.TabIndex = 8
	$groupbox21.TabStop = $False
	$groupbox21.Text = 'QueryStartStop'
	#
	# labelPleaseEnterFileExten
	#
	$labelPleaseEnterFileExten.Font = 'Microsoft Sans Serif, 6.75pt'
	$labelPleaseEnterFileExten.Location = '10, 48'
	$labelPleaseEnterFileExten.Name = 'labelPleaseEnterFileExten'
	$labelPleaseEnterFileExten.Size = '161, 27'
	$labelPleaseEnterFileExten.TabIndex = 5
	$labelPleaseEnterFileExten.Text = 'Please enter file extension e.g. .exe'
	#
	# button_process_stop
	#
	$button_process_stop.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_process_stop.ForeColor = 'Black'
	#region Binary Data
	$button_process_stop.Image = [System.Convert]::FromBase64String('
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
AInBlkgn/ujMAAAAAElFTkSuQmCC')
	#endregion
	$button_process_stop.Location = '129, 20'
	$button_process_stop.Margin = '1, 1, 1, 1'
	$button_process_stop.Name = 'button_process_stop'
	$button_process_stop.Size = '20, 20'
	$button_process_stop.TabIndex = 4
	$button_process_stop.UseVisualStyleBackColor = $True
	$button_process_stop.add_Click($button_process_stop_Click)
	#
	# button_process_start
	#
	$button_process_start.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_process_start.ForeColor = 'Black'
	#region Binary Data
	$button_process_start.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_process_start.Location = '151, 20'
	$button_process_start.Margin = '1, 1, 1, 1'
	$button_process_start.Name = 'button_process_start'
	$button_process_start.Size = '20, 20'
	$button_process_start.TabIndex = 3
	$button_process_start.UseVisualStyleBackColor = $True
	$button_process_start.add_Click($button_process_start_Click)
	#
	# textbox_Process
	#
	$textbox_Process.Location = '7, 20'
	$textbox_Process.Name = 'textbox_Process'
	$textbox_Process.Size = '118, 20'
	$textbox_Process.TabIndex = 0
	$textbox_Process.Text = '<Processname>'
	$textbox_Process.add_Click($textbox_Process_Click)
	$textbox_Process.add_KeyPress($textbox_Process_KeyPress)
	#
	# groupbox20
	#
	$groupbox20.Controls.Add($button_cpuram)
	$groupbox20.Controls.Add($button_taskmanager)
	$groupbox20.Controls.Add($button_process_cmd)
	$groupbox20.Controls.Add($button_process_grid)
	$groupbox20.Controls.Add($button_process_owner)
	$groupbox20.Controls.Add($button_process_100)
	$groupbox20.Controls.Add($button_proclasthour)
	$groupbox20.Controls.Add($button_process)
	$groupbox20.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox20.ForeColor = '59, 59, 59'
	$groupbox20.Location = '6, 6'
	$groupbox20.Name = 'groupbox20'
	$groupbox20.Size = '497, 78'
	$groupbox20.TabIndex = 2
	$groupbox20.TabStop = $False
	$groupbox20.Text = 'Processes'
	#
	# button_cpuram
	#
	$button_cpuram.ForeColor = 'Black'
	#region Binary Data
	$button_cpuram.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAM1SURBVDhPldJ/TNRlHMDx68dqVm5troXl
mCzzuON+fg84OC6sEzx2gNwXOfU8OOLM1hBFi2xLQmttqYHgbLUluuk/TTet/sm54QFGxIWHCIrS
gRJRs2T89I5f03fPDq7+7tk+e/Z5/nh9fuxRAIqWlOXen+zP01sWh89TRN/ZBHzbN3EhmI/X52Z3
62dknWwk/uAPFLpLWWltZY3+PPrkL7xRoEn9OFMdTTA2TCDYI55+p7OzS9xjXA0ECfOQv0Q29BCu
dwW4NwrtHffR6I6wCCgVREJ9THxzAI/LyXz/BxSXyAzzNe6SLXw73c3RXwd4PxhBLvJw7FSY0OAU
iUmH/wMmrwUYPf427iKZR71VeIpl7vAVWzwuzj0IcPhGH3t/nsFZ6Gb/oQm6r98XQKyDRAXjbU2M
1b6Jy5kP1yrY6s4jRAOFm2XORK7wSW8f5c2z5G8sourjKdraR1BpYoD6MUYvfsfYp1txOuxwdQfy
phwGOESunMuJSAv7b9xie9Ms9pwCKj6c5uKlu6i1MSDpCf4+d5rxaie5620QLBGVbAxyAHteNscj
rbwnAM/lOWw2B2+9O83Z8yGSdJ8vApc1T3KvsYHxqhw2ZFrFCC5yHFaxg32st79B7cwVygVQ6J/D
as2mpPwBjaduo9XHAO1T/FF3kIndNl63mAWQR1aWWQCVZNoyqBOATwAO/zxm8zpcvjB19TfRGWOA
/mlGqiuZqLCQkSpBdxaZ64zcZSfpr5k5Ovsjnpu3sTXPYzRZ2Fgc5qOaHvRS7RJgWMbwLi+TuyTM
Bq34LRmkW9QMCSA5TYoC2wSQLgCNPpXs4gg793RhMP0LPMNQaS6TlWokjRJ6TCSnvspvVKCTtNQv
AVLzAmtVBjZ4I5Tu6ERKjgHGZxncnMbUXhUaZUIUMBhWRwGVVkn9XJsA+jG2LJCwJglH2QyubR1I
KUuA3/gc/fmJhPcZMKrXwq0MTCmv8CdV6Ew6vnz0C76BO1jaQakyIr+zgL2gVXRZtwg0qJfXdBS8
TGiPmvhVcYxcMpOw+kX8oTJWxa+kOnAM+cxp9Ef8vBD3EipHAG3a92KcypooIM4KEab/H4oV/wBx
dW8RUu1+OwAAAABJRU5ErkJggg==')
	#endregion
	$button_cpuram.Location = '350, 46'
	$button_cpuram.Name = 'button_cpuram'
	$button_cpuram.Size = '139, 23'
	$button_cpuram.TabIndex = 6
	$button_cpuram.Text = 'CPU+RAM Graph'
	$button_cpuram.TextImageRelation = 'ImageBeforeText'
	$button_cpuram.UseVisualStyleBackColor = $True
	$button_cpuram.add_Click($button_cpuram_Click)
	#
	# button_taskmanager
	#
	$button_taskmanager.ForeColor = 'Black'
	#region Binary Data
	$button_taskmanager.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAeFJREFU
OE9tk00rhFEUx5/PQd5lvExhMUmSSaax8DZRiCZ5bdKMRtLUEAqZWZgsWKCwsJAipBSSZCVZ2OEz
mPWsjvmdcZ8Z5db/nvPcc87/nnvOeSxJr1QqJS+vb3L/8Cjnl9dyenYhR8cnip29fYX5xoYfMSwL
BUN8MyFD/mHx9XdJR69HWjyNUueqUVQ6yxQNTS5pa/dIdGlJSZUANg4I2kgsSygyLt5OtxIgvV1Z
HWmI1+IJ+fj8EouUufXm7kpi2wsSWQ0qGYFI1dPBuWeQzM7Py+PTs1i8CQduzw3GyQRrBiaTXxkI
zWi9lMAYcm9BRi93xRf2/5vBHwLe5Gqut9mR4YO4TB1vKjgbXQ5lbGky/P8QUGEIuv2ZDoDw7aG0
TA/KSGxOsf5+o3aCK6pLswRsztoqaY9MSMdKUG8k7Z7FgJ0ZwXXdbhnYWlBATBHpoBLQ35LyAmV2
/AYgTf8JLnMU2cCX1msXYGE4CkvzbQcyyf02OoEQojN4TK/FxgQWFOepI9LohSXZM4L5RgImUQeJ
jYIYIwHGycDYeKIpIuP/nUxm/gXGkjrg+F8mRgemhfa/wEYxIMGgP1SfT+vS6nEr0DkbmxzXt3M7
xbcJWKRDPQCEFBfgaMDMIPHJLJEfUMo7g1CmSGAAAAAASUVORK5CYII=')
	#endregion
	$button_taskmanager.Location = '350, 17'
	$button_taskmanager.Name = 'button_taskmanager'
	$button_taskmanager.Size = '139, 23'
	$button_taskmanager.TabIndex = 10
	$button_taskmanager.Text = 'Taskmanager'
	$button_taskmanager.TextImageRelation = 'ImageBeforeText'
	$button_taskmanager.UseVisualStyleBackColor = $True
	$button_taskmanager.add_Click($button_taskmanager_Click)
	#
	# button_process_cmd
	#
	$button_process_cmd.ForeColor = 'Black'
	#region Binary Data
	$button_process_cmd.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHYSURBVDhPnZFPSJNhHMcfvdQ8JEiWHgQP
u3Ty0FEkzTkT2WaxMTHX/DMczDkQVwNdypx16VSUForgyZmHsObr69DIgxdBNw8S6hAtcWN7DUkh
L/n1+e0db3SYNb/w4fd74Pl+eOBhJc9CrHhITNwcnMMNwidT6BPS0P6H6zQHRRQNzSdKnocYK/aL
087gJsYihxgLSxjlvFuT8HY1iREFCcOcN5xXaz/wcv0n7MEoivzz7xkZZ7aOwdzLyPGtoPDFOm69
3kD5+DYMU7voCMaR65lBYOMIzPMRE19PIJWVYnL7Fwp8Ilh+/yy+7J3iwdQOWj7swf7pO5zCPnpC
B+hdjMO/lMSThTgep+leTMD1+RBh6QzX+gWwPO8sLhvqsqt9wdShqqoaFRV3UFl5FxqNFjU1tRdC
oa4i0GrvpSYJ6urqodMZoNc3ZITyl0Cna+Cv0Ci70WiGydSYEYos6JUFRpM5NfWG+zA3NuGh5RGa
LdaMUKjLrqQFra02WCwtsFrb0N7WAZvNfiEU6ioCh7MLjk4On51O1z+hpASqPvkb3W5PVlCoy/Ke
Ckh+iyISiWQFdajL8gfmuOs3DmKxrKAOdZmqJ7BEC9lU3v+D7lKHuoxHzbl9OZj6HPzNiwsq/Fta
AAAAAElFTkSuQmCC')
	#endregion
	$button_process_cmd.Location = '101, 17'
	$button_process_cmd.Name = 'button_process_cmd'
	$button_process_cmd.Size = '98, 23'
	$button_process_cmd.TabIndex = 5
	$button_process_cmd.Text = 'Commands'
	$button_process_cmd.TextImageRelation = 'ImageBeforeText'
	$button_process_cmd.UseVisualStyleBackColor = $True
	$button_process_cmd.add_Click($button_process_cmd_Click)
	#
	# button_process_grid
	#
	$button_process_grid.ForeColor = 'Black'
	#region Binary Data
	$button_process_grid.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJBSURBVDhPhZJNTxNxEMb35sGPwcm3ROMH
8GIUW0o08irRk0JpQATRixpPLmvpbkv9Dp48gAd7aRUMEW0TY3wrrwUDLFtpwXa3tF26fZzZbYiV
JjzJL/Pf2ezszPwfIRwO7yqKAlkOQA4QHP85h0MKfI9DaBtScP2ufEDHcBA3H76YFPhjlq4XGsK6
0ifZ8X9xESFAf2Itr6xiObWGlRr2mXKsS7efwaKo6SZOuXxIG/t2vm1IhiDLMjRNw+TkFKaYqdcO
tedMWkXzHRFa3sTFW09xxu3D8dMebO9Z6BxWnA4sq4qNDbUhqFpw941hLrWD2eUM5lZ38CGVReLX
H3TfDzkFKvsWVFXD5uYWwdE5cw5WBe0DElr7JXi8Y2glrvoktA2Oo2c0pB90sJ3JHiKTzVIHFXuE
Cs28rZexuJVDIpXBzOJv3BilDngHyeQC3kQih4gQSwtJu0CJ9qbuFvBjfQdzS2m8m9fQPVIbgZXT
DeTyeh15yrFcvWP4urSO2S8pRD4m8WrmO15Of6MRJpwC1SpgGAbdu15HgXLFYhFur4QW2oGrV6SF
imihPVwboB08qBVgmWYZ5VKpDtM07Xc8QiN1spF4B/F4HLFYDNFotI63lPuc+ITLZCTWhZ4nONHc
j2Mn3fZz+72aD44SF1BzZfzc0nHOM4D5tIE0ubKDC3AHR6nF+9w2El8dm+k9xfjarmMkURSnuYjf
7z9EYNyPiaAM76Og3kVX1jUSpKtzYA90DErTAqmJOH8EZxvkCKHpL5+bBuf9xfXTAAAAAElFTkSu
QmCC')
	#endregion
	$button_process_grid.Location = '101, 46'
	$button_process_grid.Name = 'button_process_grid'
	$button_process_grid.Size = '98, 23'
	$button_process_grid.TabIndex = 4
	$button_process_grid.Text = 'Gridview'
	$button_process_grid.TextImageRelation = 'ImageBeforeText'
	$button_process_grid.UseVisualStyleBackColor = $True
	$button_process_grid.add_Click($button_process_grid_Click)
	#
	# button_process_owner
	#
	$button_process_owner.ForeColor = 'Black'
	#region Binary Data
	$button_process_owner.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJRSURBVDhPnZLNSxRhHMfn6oLsJSvI3jTR
Vt3Vtd0dX2Zn9m1m3zd3HXfXfMtMrE51icBVsDp0qEMYHTwnEXToza1D0KVLf4EXoWv0YgQKQfJp
nlkLpIjwB995GJ7v58t35nmkxpuvNg7eqLJ/cZWG/5TwCkawUsNildmHG5x98LmmlS/2OvkPiX3B
CFaqn19lr1M//wLJUakF7HM6OXKokaZjx2lracXd0UmX9xQXfX5uyQHkoIoWDKGpKkpvn80IVnLM
V+2Xoxbc7elGDvShDWjEVJ2onuFuPAHRIGGzRNYsMlgw0aOGzewKONHUTMCCFTVCNJRGu58ksljg
SSoL8TD3zGFuF4cZGx0jnsrYzO4GLW14elX6tTRrskFi26q8bPIpGmepOMK2EeFb0mDLCBPOD9lM
nQio2wmw+mP1Zm0uxLvrGvFNleDzIvRHGJy+Alazx+kcL2M6eDttpK5inYLDeohpPdxF20cVzwcd
z2aEC3eKJN9bZrdK99McV99qVOQcff4EJ1u8NiNYyTFXC2jCjfJMJ7aSwfc9zERkBmNL5UdBxf1V
x7cRsxwqnSi2V4xgfzeQ2/3kQ3mylTyZ5SFmMrN0WOb8epTRS9OMZ6coGSNklRy9Ltlmag1+BfT4
SeppCtlhzhTGOW/O0o5MaWmSy6UZRssTmPkiqXiGgNdnMzsBtYvkdrWj9A9gWD8plzpNOVNGeR1m
yjxHeWiEwVyehJFAVaxPcrlsxj5G58Ler7JgpQPXHr1xLlTttD80t6O/7AlGsJI1zZZ69iap+Sdv
vWLTEaDnfwAAAABJRU5ErkJggg==')
	#endregion
	$button_process_owner.Location = '205, 46'
	$button_process_owner.Name = 'button_process_owner'
	$button_process_owner.Size = '139, 23'
	$button_process_owner.TabIndex = 3
	$button_process_owner.Text = 'Processes + Owner'
	$button_process_owner.TextImageRelation = 'ImageBeforeText'
	$button_process_owner.UseVisualStyleBackColor = $True
	$button_process_owner.add_Click($button_process_owner_Click)
	#
	# button_process_100
	#
	$button_process_100.ForeColor = 'Black'
	#region Binary Data
	$button_process_100.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHSSURBVDhPpZNfb9JgFMZfRoNXc/FuIW7D
luLSQmlZBigy1Llosnmj2eKVpi18g+1LbFxzwXR309t9Li6bEkD+PJ5zJmQXJDpt+mue9/T0ec85
easA/BdLg/dBOY5zk8/nYdv2H7EsawGvC4XCjeKPW60WwjBAEARoNpuyboYhAt+HT4SkOc56Duey
kRi82n+DWn0P1doLNF7vU10K9cZLlKvPsEvU9hoSu+x2UXleE7qkc7kclG1b8MMWjk8+UUvA5y++
JH/9diVrvq6//5DYeDLBh48nxDF+jsfIGgYb2Dg8eo/pdILBYICDt+8kud8foE47M3Hcl9hFuw3M
ZnRPcd6+uK2AhohKpYrtbQvD4RCOU5TkGSXaNg83L5pjnFcq7cDzSiiXK+D2led58pKJomih4zhe
qu/iuu6twdraI2haCqPRCMmkJi97vd4ikXUikcDq6kOsrGjU7hSp1AMUi1Qtu3CZum7IwAwjSyZJ
nJ6eSSLDWtOSMM2c5PBGW1sZateBYhfTfEoGWWxuPiEDGgztmsnoSKcfC6w5pusm1tfT6HQ62Nj4
bUCPiE3mcEXcFmvHKQis5zEeHB8gOoVsEJGxcomdf8Rd+oPch6XBvwfqF+YNEga2AC2XAAAAAElF
TkSuQmCC')
	#endregion
	$button_process_100.Location = '6, 46'
	$button_process_100.Name = 'button_process_100'
	$button_process_100.Size = '89, 23'
	$button_process_100.TabIndex = 2
	$button_process_100.Text = '>100 MB'
	$button_process_100.TextImageRelation = 'ImageBeforeText'
	$button_process_100.UseVisualStyleBackColor = $True
	$button_process_100.add_Click($button_process_100_Click)
	#
	# button_proclasthour
	#
	$button_proclasthour.ForeColor = 'Black'
	#region Binary Data
	$button_proclasthour.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMsSURBVDhPlZNfTJNXGMbfSy+93dUyL7za
zdhmYmwigpVSBKkrA1rAuYRtxo1lziwrBfknGmFhUXTV6TYoJMPZDrAg0tJN4yhFSkGrI0MXZMzO
uemk/BFF+e2czni/k/zyfu97nufJl/OdT+bP58rCgKVI8Xj5Qg4MG0/bbf1SWDggdrv/v6p6Pdf7
Wqf12jffbxEdUPQwZINZB1DOt031FLzZTa7lHJbtvcmqez3X+1qn9dqXDEh0Zz9+OvEuyxPvUbqz
E8feGD+Hl3j0B8/RvZ7rfa3Teu1L+LapN+g0waCFUvsZmj+7yeToCm0tC+w/kFDMU6eq+5sFJiNP
aW68mdRpvfbNfp8lMnPK4Hc79vHR7igjPyzScGiWyGAUFrtoqC/lScJL6McRDqqgkeCS0o3jdlSh
fXOnM0SvNXnmHrytt3Edvcfo8FWs+TbGwu0q5CKPHgRZmQsSHhzmZPMKXa0J8s0BtI/uTSIWU1C2
G3vxddymru6eOqifGI98h8VaosK8rDyMsPjgEnbXKhwdwvuuLPJSI7yRNi6W1JiIfWuv5Gd003b8
BjW1dzl1slqFXOPalV5ycu2MhnuI/drCa9XC9F+HcXqErLLNZB4VyVJIsdknhcYumg/FqK5RR851
xSQZmVbGo33q+RYT0x28XiX8Et/PlZlPqewUtjRKe/bnKsCe4ZOC9K6l8g9DVFXeIDo6pUya3xQz
ijiT8U7WqYBY3InrknB5ehc1Z4XMRvHINkNA0lNOHCsy+ynbFaLCOcXYmDb/icf7paqz+Id6WF8r
RON7cA0JJ4aF8O9WTA2CMJAmsa9T3i7b2kq+qZ+dxRf4eE+MyopbimmqnHfY/UkHGw8KkbvvcHxM
6JsyUK1ud/o+CcrcGZMsejYvc+cAH5hbKNh0jpK88+yw9Sv8vFVwEduOI6Q1qt/h7yK+mhAqAsJG
p/TpTyn33VvkH7eRufbUJ2cr1u5Nf9n1hW2Dd6nY4KF4g5eS9T4Ks+sxNglDCSvlQeHI4Rf1PXgp
Rx/i/bbkbXpVkaJYrXhB8cqz2XPS6iRQGxIMTgno3twkkgz4H2uNQofp+myJ/AtwYVJKIFClzwAA
AABJRU5ErkJggg==')
	#endregion
	$button_proclasthour.Location = '205, 17'
	$button_proclasthour.Name = 'button_proclasthour'
	$button_proclasthour.Size = '139, 23'
	$button_proclasthour.TabIndex = 1
	$button_proclasthour.Text = 'Started in Last Hour'
	$button_proclasthour.TextImageRelation = 'ImageBeforeText'
	$button_proclasthour.UseVisualStyleBackColor = $True
	$button_proclasthour.add_Click($button_proclasthour_Click)
	#
	# button_process
	#
	$button_process.ForeColor = 'Black'
	#region Binary Data
	$button_process.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJRSURBVDhPnZLNSxRhHMfn6oLsJSvI3jTR
Vt3Vtd0dX2Zn9m1m3zd3HXfXfMtMrE51icBVsDp0qEMYHTwnEXToza1D0KVLf4EXoWv0YgQKQfJp
nlkLpIjwB995GJ7v58t35nmkxpuvNg7eqLJ/cZWG/5TwCkawUsNildmHG5x98LmmlS/2OvkPiX3B
CFaqn19lr1M//wLJUakF7HM6OXKokaZjx2lracXd0UmX9xQXfX5uyQHkoIoWDKGpKkpvn80IVnLM
V+2Xoxbc7elGDvShDWjEVJ2onuFuPAHRIGGzRNYsMlgw0aOGzewKONHUTMCCFTVCNJRGu58ksljg
SSoL8TD3zGFuF4cZGx0jnsrYzO4GLW14elX6tTRrskFi26q8bPIpGmepOMK2EeFb0mDLCBPOD9lM
nQio2wmw+mP1Zm0uxLvrGvFNleDzIvRHGJy+Alazx+kcL2M6eDttpK5inYLDeohpPdxF20cVzwcd
z2aEC3eKJN9bZrdK99McV99qVOQcff4EJ1u8NiNYyTFXC2jCjfJMJ7aSwfc9zERkBmNL5UdBxf1V
x7cRsxwqnSi2V4xgfzeQ2/3kQ3mylTyZ5SFmMrN0WOb8epTRS9OMZ6coGSNklRy9Ltlmag1+BfT4
SeppCtlhzhTGOW/O0o5MaWmSy6UZRssTmPkiqXiGgNdnMzsBtYvkdrWj9A9gWD8plzpNOVNGeR1m
yjxHeWiEwVyehJFAVaxPcrlsxj5G58Ler7JgpQPXHr1xLlTttD80t6O/7AlGsJI1zZZ69iap+Sdv
vWLTEaDnfwAAAABJRU5ErkJggg==')
	#endregion
	$button_process.Location = '6, 17'
	$button_process.Name = 'button_process'
	$button_process.Size = '89, 23'
	$button_process.TabIndex = 0
	$button_process.Text = 'Processes'
	$button_process.TextImageRelation = 'ImageBeforeText'
	$button_process.UseVisualStyleBackColor = $True
	$button_process.add_Click($button_process_Click)
	#
	# tabpage5
	#
	$tabpage5.Controls.Add($groupbox8)
	$tabpage5.Controls.Add($groupbox4)
	$tabpage5.ImageIndex = 4
	$tabpage5.Location = '4, 22'
	$tabpage5.Name = 'tabpage5'
	$tabpage5.Padding = '3, 3, 3, 3'
	$tabpage5.Size = '1264, 91'
	$tabpage5.TabIndex = 4
	$tabpage5.Text = 'Services'
	$tabpage5.UseVisualStyleBackColor = $True
	#
	# groupbox8
	#
	$groupbox8.Controls.Add($button_servicesrunning)
	$groupbox8.Controls.Add($button_services)
	$groupbox8.Controls.Add($button_servicesauto)
	$groupbox8.Controls.Add($button_servicesautostop)
	$groupbox8.Controls.Add($button_servicesnonstandard)
	$groupbox8.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox8.ForeColor = '59, 59, 59'
	$groupbox8.Location = '3, 6'
	$groupbox8.Name = 'groupbox8'
	$groupbox8.Size = '419, 78'
	$groupbox8.TabIndex = 8
	$groupbox8.TabStop = $False
	$groupbox8.Text = 'Dienste'
	#
	# button_servicesrunning
	#
	$button_servicesrunning.ForeColor = 'Black'
	#region Binary Data
	$button_servicesrunning.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIsSURBVDhPdVJfT9JRGOau75Hdd+FNtXVb
XfU9TJE/KmMMEUkzQpCQrVLRal20ZmHQRJHAEMgaEzQSxIox21wzY30Bnt7nBL/Q6t3eved53ud5
f+f8ztH9LyZ9fni8U2BtUX8F0NFye7wRyXAL6ibcHhwefgNri9LdvjN5LJqlFvwzQESR8MsIFl+E
MXpz/Mg1dgv37s8gFk+oSix8k33qqKdPG+BwuuIPHz9BuVJFOpND/eArynv7SKbSKH0sK5zOZFWf
Ourp6zxC1/CIq/H02SI2sm8RW1nDciyuajvJsz88MtqgnqYT/8DucKKyV8XqWhKx1QR8d4PwTgUw
JXUpElV8RXZFXcvye4DTNabIQDCI/FYRqfUNMU3DYDI/v3Dx0nVWf2Ba8exTRz19aoBsCbX6ASrV
T0hnc8jkNtX1Xbl67bJ85AwrMXn2qaOePm2A1WbHg9kQNt/lVXIHFqttzmZ3nGUlbveoo14bINHN
HLRYsVXcwfv8FuKJJHz+AOTOVSUmzz51bU97gArzkKUZjcZQEFGhsI3i9gcticmzbxoY4i2o0AbI
No9nQwvY/1zDq+UV9QZKuxXslHZVJSbPPnWiVy9WG9CrN6RCC48wMzePvn5jQ28wYXzCjS+1uqrE
/UZzk2bqBL+mr/MIXT29+jc9N/pSsj4v2U3T0fcfykzMNJoHf4pmXdbnJE8+JAmS6oUx5KzyFgZ4
5k4Vh2ua0wNOh/pqK/8ZAHS/AKdS+Ww60QpOAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesrunning.Location = '5, 17'
	$button_servicesrunning.Margin = '2, 2, 2, 2'
	$button_servicesrunning.Name = 'button_servicesrunning'
	$button_servicesrunning.Size = '132, 23'
	$button_servicesrunning.TabIndex = 3
	$button_servicesrunning.Text = 'Running'
	$button_servicesrunning.TextImageRelation = 'ImageBeforeText'
	$button_servicesrunning.UseVisualStyleBackColor = $True
	$button_servicesrunning.add_Click($button_servicesrunning_Click)
	#
	# button_services
	#
	$button_services.ForeColor = 'Black'
	#region Binary Data
	$button_services.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAG6SURBVDhPpVHbSgJRFD1fE4ERRR8Vps6Y
mo7aeNccZ8x7l8cMI+itIiKiixVEPUQX0ZfMSCTqVQXpYbf3KYtIJWjDYp21z+x1NmsYAPwLLBqL
s3R2kaUyC00EqPEknYE09em+izlF637LmTS/iERV5guEjhVVA2w2iFEXqf8Xg1Z4LlZdyRc699Ua
PNUbQLyyWnjD/hbeNwca+IORB18gDHelCmzv7EIineNMmvqhiALBcJRlckssnkjz4R8GWDrrjOPi
+qYEqpbAVNgEMWmnW34hnV1Y5gPafOq3gVv2ViTXLBTPzmFtfQMiUYXzCWrqowng64841DNgZpfc
7WmrvR7Tkp29/UM4ODoFYly9aRItJUG0VLz+4KaixnsGTDWOGDEKYl2ctsKk3nBJrDeYyhhiGTO6
zecLzX4BM8klM8FsIbSnjEINzYaQqwaT+IzDV4MCRhNgTreH4YvdTXQzDieddYhRxLDV3jfgV9Jf
BmaLjcNml/hGHl+AzXp85UEB4w/43oCGiUlLLoLcN2BcvYP9J7xv9TGQObB6BmwUzHXqI8YGGhB6
BFwjTf3PR/5UPOCPI2fSWIy9A9wD+f2hDKCYAAAAAElFTkSuQmCC')
	#endregion
	$button_services.Location = '5, 44'
	$button_services.Margin = '2, 2, 2, 2'
	$button_services.Name = 'button_services'
	$button_services.Padding = '0, 0, 2, 0'
	$button_services.Size = '132, 23'
	$button_services.TabIndex = 1
	$button_services.Text = 'Services'
	$button_services.TextImageRelation = 'ImageBeforeText'
	$button_services.UseVisualStyleBackColor = $True
	$button_services.add_Click($button_services_Click)
	#
	# button_servicesauto
	#
	$button_servicesauto.ForeColor = 'Black'
	#region Binary Data
	$button_servicesauto.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALdSURBVDhPfVHLTlNRFN0jv8APUNCxMUYS
iULAGAgJISFq4sSJI+Rhy6MtpZS2tzxLoZQS3hYMMYDUKo2WQml5VqpAQCBtQQIIQglBJo5ZnnNo
ceZO1t173bPXuvvsS/Ums4DJ3CxQ19BITRYrNTZZwDh45jx+zhHXcIgHF7E8yuCsrTdRDDg6OgbP
nMf6Tln+EOv/Z8AaRp0fRzHy3gm9VH1iMNagvaML7nGvyJyz9+f8nPfx/ksD7qbVGcb73gwgFN7E
zFwAe/sHCEW24PPPYH0jJPjM3Lw45328n+s4iDkTi8TKKsPZ4PAIZue/wD02gc/ucZE5xsa8mJsP
Yvidk4mlM97PdULLxhOFRqtDOLIJz4QPbo8XzRYbzM2tsLS0weXyYMq3iJ2tE+h1JugNdULHQTqD
EVxstdmwuLwC/9QsE9kgk5U5kpKSs2UypaOjbQDJtQT1IOGJ8SYkXQskqQGSsY6oskqPnb19hDd/
YGY+gLnAAsxmG9JTM5PYqFfSUrLudrY4kMIMNvZLUD5EqHLkQtLaUK23Xhio1Bp0dvdiIbiIYHAJ
VksPcquv/kprIKTWEVJqCPcMzOBAj9nIU6gdhGfSbWQ08/UR3eEoVaiwvPId35ZWMD25hORqws8z
G9aPs7EWzcHqYTbC0Va0zxICu89R5SJkmmiI1BotsQmouExx7nK5sbq6gfDavvjicrQAnQt0ifYv
hA6Wu74Slg5fIINNSOUVlaRQqU+7e+3Y2t7BJ/cEdrdPcZ+N7Y8+gD1E6GOwbxB6Vi5gXyPoPYSH
WpokZXkF5Re+8vfa+9HV8xqFRfKzYrkGjw3XkFpPSGc7eMSQJhH6I8wsTNB5GdeQh109QRiwSMzL
L5zOe1ngZ/UtvpMSZvLnN6AsMoHzDGby9oCJfZfi6zl8idwgZnKDIZHXJWUqKi5VQi5XQSE3IstC
lMXuawwI8WRcLAz+E+LvxMAjXicIJoLoLwYrGRa+kko1AAAAAElFTkSuQmCC')
	#endregion
	$button_servicesauto.Location = '141, 17'
	$button_servicesauto.Margin = '2, 2, 2, 2'
	$button_servicesauto.Name = 'button_servicesauto'
	$button_servicesauto.Padding = '0, 0, 2, 0'
	$button_servicesauto.Size = '132, 23'
	$button_servicesauto.TabIndex = 4
	$button_servicesauto.Text = 'Auto'
	$button_servicesauto.TextImageRelation = 'ImageBeforeText'
	$button_servicesauto.UseVisualStyleBackColor = $True
	$button_servicesauto.add_Click($button_servicesauto_Click)
	#
	# button_servicesautostop
	#
	$button_servicesautostop.ForeColor = 'Black'
	#region Binary Data
	$button_servicesautostop.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIvSURBVDhPjVHdS5NxFH7/gUDoD2j/QHTh
nULsyroJyhC6iBKqjdmHBRF96drmR3MfTXM1bW5FXpTKsuV0frYvyrS5NZ2OgtzNoJtIdhNE8HTO
eV/XogwPPJzfOed5nvf8fq+yU7g9fdiG1vp/OFz3ggytVJxuD9byG+DMNc1qCJlqTiXsDlfw+egY
GHTe7HG64R8KIjI1LZlr6n+r4vxp0n7HOhp88hTv0xksxBLIbxSwks1hbj4mPa4XYnE5M4/5mrQS
OmtHV2lkLIRYIoWp6Cwik9MVcM19njOP+apMC1tnd01H112kV7KIzsxjgkT3vT54+rySQ+Nh6fOc
eZpMDXJkVzwcGMSbxSVZu/+BD1evXQ83Hm8ycB53nkVx+AhWX3QLb1sjBhZbJ9KZDwJe83U8SV/u
x6nTzSdovMd1vsHwOXAY+GoF52xqUrisEwOzxQaGP/AYydRbAW9w83b7MD2WPmevS34vXMI5gwmc
F3ubhM8QA4rafTqdvs1skSswojNzYvLMbsSXV41A6YoYcOZ6pPWAi3WqnMJoatlLXyy/DEewtJwW
LCdnUfAews+PZ4CiQTWgzHXBc3Br3Vn/+0/cuNWWHXg0JHcLT6h3XPM3o5w4Bnw6+Re4v9pTF9fk
inKx9XLIN+gHg1695DUbUQzogXUy0CAbVNU8py2OahaKztRyIcyg835yL/941wDk6PV3AM/zjvot
Va4G30nuRc7svisw/1/BL7wLKLW/AIvoBAk4ngJhAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesautostop.ImageAlign = 'MiddleRight'
	$button_servicesautostop.Location = '277, 17'
	$button_servicesautostop.Margin = '2, 2, 2, 2'
	$button_servicesautostop.Name = 'button_servicesautostop'
	$button_servicesautostop.Padding = '0, 0, 1, 0'
	$button_servicesautostop.Size = '132, 23'
	$button_servicesautostop.TabIndex = 5
	$button_servicesautostop.Text = 'Auto and stopped'
	$button_servicesautostop.TextImageRelation = 'ImageBeforeText'
	$button_servicesautostop.UseVisualStyleBackColor = $True
	$button_servicesautostop.add_Click($button_servicesautostop_Click)
	#
	# button_servicesnonstandard
	#
	$button_servicesnonstandard.ForeColor = 'Black'
	#region Binary Data
	$button_servicesnonstandard.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIVSURBVDhPjVPfa1JhGPYvyF11qzUoWNDN
dhvJoqt2U39AN+0iCHKR5kFNmHr0rInH4/FsTYY5deWsqRBLIx2CuxjuIgbdNCgIMvrBIoKx9Obp
fc/OhbYT7IOHh/d9nveB857vswCwDB5PWJm4Pxvv3gvEMENgds3KXU84OWFY9MNz+uxgAA2PeyMq
2p1dHPb6OPjT07nR7sAXTcEjJscNq3mAKyj33+19xKcv37G5/Rb1rR2duz/20dzqwB1M9A2reYA7
pODr/i+Uai0UNzbx7GWDuIlSvYWfvw/AumE1D/DNLWLq6hXcmLqGxytrKFEIM9fcZ92wmgc8jKUx
edmBC+fP4eLYGNZrbZ25nnQ4ECDdsJoHeCOpb9O3nbDZ7Bg5ZUWx2sCI1Qqb3Y6b03fAumE1D7h1
V4hIahaZQgXLuTKWss915pr7pEcNq3kAndMeUUVMyUBOZRFXn+g8n8hAoD7rR7b/BLhDieteUXkv
0LYjcwuQaGkisTsog/p7pF8yrMMBgpg845e0XrHSwM7uB6y8qPGlgSuY0Jlr7rPulxY+k//sUADf
stqbbazRf8+tbyBffoXVah1Pq6915pr7rNfJ9yCs0NhAQEheRrnchLqUJxSQSjNWB1DQ+4xKpXk8
IEDfqWk5PJpfRCyehkJL/BfcZ13T8rTQ5HCA0xdtCfSITgqnX2oNBdAZJfBLOylGjwJg+Qt+uCHV
V2k6OQAAAABJRU5ErkJggg==')
	#endregion
	$button_servicesnonstandard.Location = '141, 44'
	$button_servicesnonstandard.Margin = '2, 2, 2, 2'
	$button_servicesnonstandard.Name = 'button_servicesnonstandard'
	$button_servicesnonstandard.Padding = '0, 0, 1, 0'
	$button_servicesnonstandard.Size = '132, 23'
	$button_servicesnonstandard.TabIndex = 6
	$button_servicesnonstandard.Text = 'Non Standard User'
	$button_servicesnonstandard.TextImageRelation = 'ImageBeforeText'
	$button_servicesnonstandard.UseVisualStyleBackColor = $True
	$button_servicesnonstandard.add_Click($button_servicesnonstandard_Click)
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($button_servicesstop)
	$groupbox4.Controls.Add($button_servicesstart)
	$groupbox4.Controls.Add($button_servicesrestart)
	$groupbox4.Controls.Add($button_servicescheck)
	$groupbox4.Controls.Add($textbox_services)
	$groupbox4.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox4.ForeColor = '59, 59, 59'
	$groupbox4.Location = '428, 6'
	$groupbox4.Name = 'groupbox4'
	$groupbox4.Size = '219, 52'
	$groupbox4.TabIndex = 7
	$groupbox4.TabStop = $False
	$groupbox4.Text = 'QueryStartStop'
	#
	# button_servicesstop
	#
	$button_servicesstop.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesstop.ForeColor = 'Black'
	#region Binary Data
	$button_servicesstop.Image = [System.Convert]::FromBase64String('
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
AInBlkgn/ujMAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesstop.Location = '139, 20'
	$button_servicesstop.Name = 'button_servicesstop'
	$button_servicesstop.Size = '20, 20'
	$button_servicesstop.TabIndex = 4
	$button_servicesstop.UseVisualStyleBackColor = $True
	$button_servicesstop.add_Click($button_servicesstop_Click)
	#
	# button_servicesstart
	#
	$button_servicesstart.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesstart.ForeColor = 'Black'
	#region Binary Data
	$button_servicesstart.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_servicesstart.Location = '165, 20'
	$button_servicesstart.Name = 'button_servicesstart'
	$button_servicesstart.Size = '20, 20'
	$button_servicesstart.TabIndex = 3
	$button_servicesstart.UseVisualStyleBackColor = $True
	$button_servicesstart.add_Click($button_servicesstart_Click)
	#
	# button_servicesrestart
	#
	$button_servicesrestart.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesrestart.ForeColor = 'Black'
	#region Binary Data
	$button_servicesrestart.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_servicesrestart.Location = '191, 20'
	$button_servicesrestart.Name = 'button_servicesrestart'
	$button_servicesrestart.Size = '20, 20'
	$button_servicesrestart.TabIndex = 2
	$button_servicesrestart.UseVisualStyleBackColor = $True
	$button_servicesrestart.add_Click($button_servicesrestart_Click)
	#
	# button_servicescheck
	#
	$button_servicescheck.ForeColor = 'Black'
	#region Binary Data
	$button_servicescheck.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_servicescheck.Location = '113, 20'
	$button_servicescheck.Name = 'button_servicescheck'
	$button_servicescheck.Size = '20, 20'
	$button_servicescheck.TabIndex = 1
	$button_servicescheck.UseVisualStyleBackColor = $True
	$button_servicescheck.add_Click($button_servicescheck_Click)
	#
	# textbox_services
	#
	$textbox_services.Location = '7, 20'
	$textbox_services.Name = 'textbox_services'
	$textbox_services.Size = '100, 20'
	$textbox_services.TabIndex = 0
	$textbox_services.Text = '<Service>'
	$textbox_services.add_MouseClick($textbox_services_MouseClick)
	#
	# tabpage6
	#
	$tabpage6.Controls.Add($groupbox22)
	$tabpage6.ImageIndex = 5
	$tabpage6.Location = '4, 22'
	$tabpage6.Name = 'tabpage6'
	$tabpage6.Padding = '3, 3, 3, 3'
	$tabpage6.Size = '1264, 91'
	$tabpage6.TabIndex = 5
	$tabpage6.Text = 'Harddisk'
	$tabpage6.UseVisualStyleBackColor = $True
	#
	# groupbox22
	#
	$groupbox22.Controls.Add($button_diskusage)
	$groupbox22.Controls.Add($button_deleteoffline)
	$groupbox22.Controls.Add($button_volumes)
	$groupbox22.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox22.ForeColor = '59, 59, 59'
	$groupbox22.Location = '3, 6'
	$groupbox22.Name = 'groupbox22'
	$groupbox22.Size = '259, 81'
	$groupbox22.TabIndex = 6
	$groupbox22.TabStop = $False
	$groupbox22.Text = 'Harddisk'
	#
	# button_diskusage
	#
	$button_diskusage.ForeColor = 'Black'
	#region Binary Data
	$button_diskusage.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJaSURBVDhPfZJLT1NRFIWZ+wPUoUChBQai
caAxRgWJylN5JBArlQKV8n4LQVGQRBR0gMiAP2AEEmKclDQFUUlDooni4xcUBiZM1Dq593zufZGK
RDzJuo+911p333VOEpCkazkr49jLTM/TRY/7h4DILmhNe8pRrmocrV6WMz3t0cOZxPJP8r0yF/wX
oGYXpKY95ShXNQmDRXcatFRAUxkmWIq9B7SnHOU6mm2DiCsF3oZhbhozdRf7fg/2aPffkJr2mJ2G
d2EcTcIgzQXV5zATg5jQM/i4Ah9ew/tXW9DntRXMwgxmcgjqCnE0CQMJCG8O1rXzWIFL2O1VmH4/
jPfBvQ7MzevYXVexGsux6oucTCLu9D8GmrBOYNcVYDdXYPf4MIMNMNolJjcwwy3Y/bWOsR28LBPk
O7uSMJhJTX6xkXOczaJTxH0FWJ1euBOEsR54JFOMtGL1+oj7i9ksOcNG7glUkzB4nnJojtUQ3x6P
8rWjgXVvGetXyoj9xrq31HnXnnJYXcDRbBtE0mVLfHkweRvCs/AlCp8kyLU3W9BQP0stLJonw1C/
O0T3HiE+7JcQOzG3NMRqrKb/hpiHVVsopO0Qr2+FONaLGWrG7qvFaqvC+leISxkemUCOcKAY01qJ
6auBoUZ4oCHKFCNtmIF6jIbbLCfRf5GljB0G0ynJ49HsLGKFp4kH5AuDAfl6G0wMwJTkMtYNw43E
g+XESs4SPZKFahIGsva3HDzgnU93heTffmqoEZdLkOocWecuoWlvPi01pFzV7DTQtU+QLMgWHN0D
2lOOckVL0i9eOH6N5N3ztgAAAABJRU5ErkJggg==')
	#endregion
	$button_diskusage.Location = '6, 19'
	$button_diskusage.Name = 'button_diskusage'
	$button_diskusage.Size = '109, 23'
	$button_diskusage.TabIndex = 0
	$button_diskusage.Text = 'Disk Usage'
	$button_diskusage.TextImageRelation = 'ImageBeforeText'
	$button_diskusage.UseVisualStyleBackColor = $True
	$button_diskusage.add_Click($button_diskusage_Click)
	#
	# button_deleteoffline
	#
	$button_deleteoffline.ForeColor = 'Black'
	#region Binary Data
	$button_deleteoffline.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALWSURBVDhPjVNtT5JRGD6f+w0t11qtlw+l
5tByzlxvs/RDc9MPUs2t9cWtVcutP+BmH6zNtbIULZ0GKCICAr6CgAKPIPEiiiC+m6Si5gsiXp3z
uCmu2jrbtXPu+1z3/VznOuchX1o7SJ20PVUkkXfXiGWo+fYX0DzbZzzGTwQrrm6Uq2F0eOEJziOw
sIqJ+ZVDsJjl2T7jMf6xBrXiNth9U7CPToHzTsLm+RMsz/YZj/HrWxRHDZjE1c0YggsrlBAC5wnA
5j4Ci+2jIQTnl7G6FeOPdKxBraQNnfoh+GcWsRjZxPpOHGs7e4hsx7C2vcevlyJb8E//gM5gPVDA
imUqUt+mIkQklUPdP4guIwe9xYXBkXE4qNzxqTCcY7OwOCdg4DzoMduh1VshkrajTt5JalU9pEbd
z5sIrcGCvkEHjJRodU3Qwhn4JpfgmpgD5w7C5PBBb3NBR5vUyjvxWTtAvNlnifvmRUIqq0XKt58a
0KzQQUO/wHmCcPnnqIKf1P1F3rwusxOSLjPeNStR3tAqdeecJ87cFDKSl0ZIlaixdXkjSqX6INcY
IFP3QaEzQdU7hI5uM9p0RihMTuieP8VI1hnYcy5g+M5lDN9P+2DPF1APJHJoB6wIzC0hvLGNXzFg
YzeO9WicznQNIFBVgWBBBlBeCrx5AVQ8Q+Dhbb5JgonDMFhdGHIyE6f5Izj9C7AEwrAKTmL/VRFF
IeIvC7BfVgi8FsKWmwreRDW9RmaiifPyJn6n7o+FwnBTD6yhFdgykgBNE9WSMHRiWO8mg1R+FLV+
lSnR0WuiCtz8FXppYWB2Fb7pZdhnIrBnnsZeSRZ2H1/HjvAanTMRe3ID3L2rIHQkFT0qKX5f32Rh
frCHcvgT0bi6XQtNWSnG8lMQLRZgVyhAVJiO0QfpUN680nLwHAk5QXGOIvVfUGdfEnN5Atjy0sFR
KG8lt9D8KYr/Hoyc2JTGhPwGGBuwwDgyF9QAAAAASUVORK5CYII=')
	#endregion
	$button_deleteoffline.Location = '121, 48'
	$button_deleteoffline.Name = 'button_deleteoffline'
	$button_deleteoffline.Size = '131, 23'
	$button_deleteoffline.TabIndex = 3
	$button_deleteoffline.Text = 'Delete Offlinecache'
	$button_deleteoffline.TextImageRelation = 'ImageBeforeText'
	$button_deleteoffline.UseVisualStyleBackColor = $True
	$button_deleteoffline.add_Click($button_deleteoffline_Click)
	#
	# button_volumes
	#
	$button_volumes.ForeColor = 'Black'
	#region Binary Data
	$button_volumes.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJUSURBVDhPdVPbbhJRFOXdD/DdPzDGrzG+
mPgB/oHPJtaoT00AYyWmBcsloVOoCAhth+F+GxhgpnQogVIFaoHSFnG59yQdwMtJFmHOXmvN3uuc
sQCw8Hrn8j20O72bti3PxLrpxr/ANeYwlzWGln9o45nDKyCSLCJfa0HrDqF2BivgPa4xh7msMQ3I
GVlFN5CuNJFiyH+A9rh2y2ONacDtDSczHHUHKKknSMsaiQjlJdAz15gzvJwZI5kGNqcXgaiIYkNH
pz/CxfUcP65+4nw6M8D/L67m6AzGKDVaCMaTsDmXOrC7fNiNJLAXTyGSKOIgqyBDbStHPVS0HnKV
Y4i5OmKpEr4cZhGISbC7vAsDCgTBr0mExSziaRmJQh25qo6KegqleYaC0kKyqJJxBVGpgL39FIe4
MFhbt/tfrX+Awy1AoE7EnIJC7YQ6OENd/45SvQ2JTAP0ko+eAN5YHWCNafDW7tgejK+RyFchhA/h
2gnDE4zBHxKxE07AF4zjkxChMUUyUtCfXIM1pgFdDgRprrLWQm84wXgGjG5+GWEyRjdzY+/0/BKy
1jZGYM3CgAK5DTEqUYg0ghFicxFiIr8IcZdDXDbgQAJRCaGDDJHKZoiy2l0JcT8jU9A54xhXQuQH
ge4BF/kUpGIDeRJV6e21428oUqCpkmaeAo+7YvD8xdrLjW0/vJ9jZJI32i+rHTT0PrT2kMbo0hg6
IiT2heLYcPvBGtOA1t1HT54+fm19H6Q7PuV7bt3660tkTJnDXNYsG/C6Q7hHuE948B9wjTnMJS0s
vwEsTAjkI+DtQgAAAABJRU5ErkJggg==')
	#endregion
	$button_volumes.Location = '6, 48'
	$button_volumes.Name = 'button_volumes'
	$button_volumes.Size = '109, 23'
	$button_volumes.TabIndex = 2
	$button_volumes.Text = 'Drives'
	$button_volumes.TextImageRelation = 'ImageBeforeText'
	$button_volumes.UseVisualStyleBackColor = $True
	$button_volumes.add_Click($button_volumes_Click)
	#
	# tabpage8
	#
	$tabpage8.Controls.Add($groupbox23)
	$tabpage8.ImageIndex = 6
	$tabpage8.Location = '4, 22'
	$tabpage8.Name = 'tabpage8'
	$tabpage8.Padding = '3, 3, 3, 3'
	$tabpage8.Size = '1264, 91'
	$tabpage8.TabIndex = 7
	$tabpage8.Text = 'Eventlog'
	$tabpage8.UseVisualStyleBackColor = $True
	#
	# groupbox23
	#
	$groupbox23.Controls.Add($button_eventlogmmc)
	$groupbox23.Controls.Add($button_eventlog20)
	$groupbox23.Controls.Add($button_eventlognames)
	$groupbox23.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox23.ForeColor = '59, 59, 59'
	$groupbox23.Location = '3, 6'
	$groupbox23.Name = 'groupbox23'
	$groupbox23.Size = '228, 81'
	$groupbox23.TabIndex = 3
	$groupbox23.TabStop = $False
	$groupbox23.Text = 'Eventlog'
	#
	# button_eventlogmmc
	#
	$button_eventlogmmc.ForeColor = 'Black'
	#region Binary Data
	$button_eventlogmmc.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGTSURBVDhPpZPJTsJQGIX7IC6MqC/gCwhB
E9yAogtBlEGMCoIKgvoiuqOSkDg9hNM7aNwYdKe0LCxDGXq850pImjgQPcmX3Paec+7fplVKpVK1
WCxCVVUUCoWBoJcZZhUu/ipmFbZRT+VnlJ9fBoJeitl+wWvlDXpVF1Sh6bqkomkSTSefe/TQS9kK
Jp1ueH1+LAZCCEfjWE9sYSeTQ2Yvj0RyG7HVNQSCy5j1L8DpmpIZW4HZasGSK8CyLHS6XbQ7HQnX
XXGP+4ReylbgdLnhm/WLU0KIxOLYSKawm80J8thMpBEV9xYDS/DOzctpKVvBd+IETdOU8GSzZaLe
aMg9W4HLPY3AUgip9DZ2M1mshCPweGbQbrVRr9dQMwS1GgzDwLuA4jfx6wRAR2D2aIqX0ITV7k3A
ghO1IC/2zh8wsn+H8UM7Ywe3fUb3bzGcu0H29F5mVJHtFwxlrxE8e8HKxc/QQy/FrCj4fIT85SOG
8ze2E7+CHnopZv//LxwfHV1xwbbiyWBIr8gwqwg5BBN/Q3F8AIYjCyDDQLmEAAAAAElFTkSuQmCC')
	#endregion
	$button_eventlogmmc.Location = '6, 19'
	$button_eventlogmmc.Name = 'button_eventlogmmc'
	$button_eventlogmmc.Size = '109, 23'
	$button_eventlogmmc.TabIndex = 0
	$button_eventlogmmc.Text = 'Eventlog (MMC)'
	$button_eventlogmmc.TextImageRelation = 'ImageBeforeText'
	$button_eventlogmmc.UseVisualStyleBackColor = $True
	$button_eventlogmmc.add_Click($button_eventlogmmc_Click)
	#
	# button_eventlog20
	#
	$button_eventlog20.ForeColor = 'Black'
	#region Binary Data
	$button_eventlog20.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_eventlog20.Location = '6, 48'
	$button_eventlog20.Name = 'button_eventlog20'
	$button_eventlog20.Size = '109, 23'
	$button_eventlog20.TabIndex = 1
	$button_eventlog20.Text = 'Last20'
	$button_eventlog20.TextImageRelation = 'ImageBeforeText'
	$button_eventlog20.UseVisualStyleBackColor = $True
	$button_eventlog20.add_Click($button_eventlog20_Click)
	#
	# button_eventlognames
	#
	$button_eventlognames.ForeColor = 'Black'
	#region Binary Data
	$button_eventlognames.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJySURBVDhPnZPbTxNBFMb7ZqJ/golFMRof
fPKvMH2TXggVett2e1tqjU8GKbQSEl/URIWQaGJMNDHc2y1UWtsGCOCDyoMFCaUUsDcstUIQDeRz
ZnYbQsSY+CVfzs7ZOb85szujuNwdqZzvDEPpE3GmPXTESl8I5zpEXAyMlRR/Ey3+lyaXN1HnE1/K
JUdFV6YaWcxjlDj4WYrDxFQnvP0sxpdKFPJKLjsUbZUqslxCNF1CLL3JYmS5yPInbw5gd/+APdNO
LgTG+uVSSTVAcvUrJrNlTBHTmFwts7x3cB6nbg2RTgbYuM4fgVwqqQaYXd/C3EYF72rOfUdhj706
otNdyeMB73NVfMhX8ZF4vriN1Ldf4Cwc9PpmqFQqpH8Cdp4Hb7XCZDQeQmqAVGkbC7KXtn5ggxS4
XG6MBkO41qDBFpnjcgsIhcNoNpj+BKTLO8yZyi6+7B6g59kLcFYeBoMZj54+h5l0EwyK4B0uWDg7
DCaL9EdqgPzOHgrEm3v72CZjp8ON6ZlZPH7SC7VaB1EMQxC8mJqZQ09vH5pb5C5qgIFPOQwvFCCu
VGC38Wz1FqMZTfoWtD/oQzAkku0EwdnsMJmtMJo4CaKUAUOpHDlERUSyVTjsDqytrSO9kkEsGkVD
gxZieBzu1hvIkvxKJoO38Tj01w1QkNPFAIMEMLJYwLgMeEMKQ+Ex3PH5oNE0wkq6EjxeTERjLN/e
0SkBjrsLrS4nEskkg/gDATSqtSzv9XiQZPkY/He7pC1canudoBDaCb0XysAEdLfvo1UQYOMd4EwW
XBX8OHtvGrq2hyzP805YLDy0jU0J+h3ria/8nxX1vwFsOngCQXU3WAAAAABJRU5ErkJggg==')
	#endregion
	$button_eventlognames.Location = '121, 19'
	$button_eventlognames.Name = 'button_eventlognames'
	$button_eventlognames.Size = '98, 23'
	$button_eventlognames.TabIndex = 2
	$button_eventlognames.Text = 'LogNames'
	$button_eventlognames.TextImageRelation = 'ImageBeforeText'
	$button_eventlognames.UseVisualStyleBackColor = $True
	$button_eventlognames.add_Click($button_eventlognames_Click)
	#
	# tabpage10
	#
	$tabpage10.Controls.Add($groupbox18)
	$tabpage10.Controls.Add($groupbox17)
	$tabpage10.Font = 'Microsoft Sans Serif, 8.25pt'
	$tabpage10.ForeColor = 'ControlText'
	$tabpage10.ImageIndex = 7
	$tabpage10.Location = '4, 22'
	$tabpage10.Margin = '0, 0, 0, 0'
	$tabpage10.Name = 'tabpage10'
	$tabpage10.Padding = '3, 3, 3, 3'
	$tabpage10.Size = '1264, 91'
	$tabpage10.TabIndex = 9
	$tabpage10.Text = 'SCCM'
	$tabpage10.UseVisualStyleBackColor = $True
	#
	# groupbox18
	#
	$groupbox18.Controls.Add($buttonTSHanging)
	$groupbox18.Controls.Add($button_getsccmcache)
	$groupbox18.Controls.Add($button_getadvertisedsoftware)
	$groupbox18.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox18.ForeColor = '59, 59, 59'
	$groupbox18.Location = '410, 6'
	$groupbox18.Name = 'groupbox18'
	$groupbox18.Size = '237, 78'
	$groupbox18.TabIndex = 7
	$groupbox18.TabStop = $False
	$groupbox18.Text = 'SCCM Client'
	#
	# buttonTSHanging
	#
	$buttonTSHanging.ForeColor = 'Black'
	#region Binary Data
	$buttonTSHanging.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAItSURBVDhPnVNdaJJhFP4uutBuuozu/KuL
3YVSeRExkDXaLvIu6O9ixYp+KOomso1K/dRdFwW1BltzFGUE5YpRa7V0MdHUtelyNTdZbk0F80Y2
n8553dRIiHbg4XkP33mec97z8UrbrK+yWzpeYrPlxX+BNayV+LDRYK3Ebhwnu31QW33Q/ANcw7Uc
rK0YqK1+uGOrcE+toH+yPvgb13Atx18GA/ESXIE8XOM14Dzwi1AQ4Jo/DJRrBufcIWjtn7BDLmP7
GnSOAHSuMHRdE4LVcgBn3Z+FhrWS8mrZIJ9OYiUzD2RTKBGKmRQKyz+Qz+awOOhArseAtJc4k8XP
hZTQsLYywcXHEWjsY9R1DFrqfMkzhXAwiCHPQ8zdMlCFA0ni10/64PePC42CDeotcSAOaJ0hDL8Z
wWzPcSB1Ho0tpwR/6z6G5963QqPgK6wbaGw+sen2wSX0x0rQ0J2DfZ1YfrYfKFyGqfW04MWnTXh3
zyI0Sou3xoD+Lxtc+5BDbwzY5RrFjFMPJNuApXbsaz4jGLNtiFh3Co2ic6hqoLrpo/FXcTtaxINp
wHPDjOJoC/D9KImO0PiHy0x5YeQAsu4T2HT9Y9XA4k1ARXtQySEccvRi4Q51mTEDMcLXg9jTdEGw
yBNmpO8aYLLdR923MN9Fo0cbgelmIE5gTtAuavMJE0LOvZC2Xnk0vP4aFbyUjveYkxvwRd6NsM1Y
QcRePTOishGTLiMkCi1BvzFI+t98rs60RYT23gAAAABJRU5ErkJggg==')
	#endregion
	$buttonTSHanging.Location = '99, 48'
	$buttonTSHanging.Name = 'buttonTSHanging'
	$buttonTSHanging.Size = '132, 23'
	$buttonTSHanging.TabIndex = 4
	$buttonTSHanging.Text = 'TS Hanging'
	$buttonTSHanging.TextImageRelation = 'ImageBeforeText'
	$buttonTSHanging.UseVisualStyleBackColor = $True
	$buttonTSHanging.add_Click($buttonTSHanging_Click)
	#
	# button_getsccmcache
	#
	$button_getsccmcache.ForeColor = 'Black'
	#region Binary Data
	$button_getsccmcache.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGJSURBVDhPjZK7TgJBGIWtfRALC29rJSDg
pdJgT2zUQhZ8B1nAxCcwMXZAY2fslNn1hvGCiVYWNkaNJBKNrstCosLxnwGXmwt8ySQ7u/Odk5nZ
nm7RouPgozoVAA1Te1TFQWuLNL7AVscsq6sApjhp3QcSgX4Yx1P0XLBCOgaoXC5noTMnjJNZxAOD
MM/95H2K7bQNYIoL+L5DQh4g2Qfj1I/8xQLMy2Xy3toHqBH6WLyGrrpgpH2IyxLJizAzMvCTRaqy
BenfAKa4QXVIBIeEXGnmcpDO8N6S+dqWADXiAd73qdlN8lxdM8nFW5IdlsxpCBByboeah4VcaV4i
OQSYNyQ7G2SOCDhcn5bUqJcOOwld81SbR2uyfoZUuFXmiICDtUmUnzaRDDU1X63Qdo5sZY4VUHrY
QD5N9yyP1OTXPbCwy1bm/J2BxCJelB63UMjQPXM5t0uy+O9tZU79IUpM8aD8HAdetsGUzjKnPoAj
abEJaDEvgjN989V3bWkO4PBWPnrFrAMAen4B5nJpBq01bqoAAAAASUVORK5CYII=')
	#endregion
	$button_getsccmcache.Location = '6, 19'
	$button_getsccmcache.Name = 'button_getsccmcache'
	$button_getsccmcache.Size = '86, 23'
	$button_getsccmcache.TabIndex = 3
	$button_getsccmcache.Text = 'Cache Size'
	$button_getsccmcache.TextImageRelation = 'ImageBeforeText'
	$button_getsccmcache.UseVisualStyleBackColor = $True
	$button_getsccmcache.add_Click($button_getsccmcache_Click)
	#
	# button_getadvertisedsoftware
	#
	$button_getadvertisedsoftware.ForeColor = 'Black'
	#region Binary Data
	$button_getadvertisedsoftware.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGeSURBVDhPnZBNLwNBGMfnSCQ4eLm4+QgO
4tM4Cj6BEELiLA60M7s7m9ZLaEIr6FLqLdLQROKOm3CRCFttUf6eZ1qbFCH6JL/MbDK//8z+Rcdk
6r59Ygut4x5axpO0/k75jAd22BVttNHn95Bndwb1B5/n2GFXNI8l4V09odu5QI9mLv/gwpxlh13R
MLKJWoddUV8J2Eisw5YRaLVALAY4MgoVtiDDoYD1RNw47AYBWkVw+TCF05s+YgDZm0Fa+5G57kU+
D/i5JyKH11KJAkPGqQ6w5hHLNmEmJTBbgffTngDeQeK7kXmqA4bLATvbabj2EiI6TiQQ1WtmdZ0Y
bOVCSQUppWF7yzMOu6KuEuD7Pj31GcViiXgLKNB3ofiCfOGZKCJH/+P7D8ZhN3jBXnqfbpqDple4
9nIVmnCsBVhK0wsU0rs7xjEvqCrxsVxilku8HQz4LLNAZXIXP5dIt38t8VuZlZGhHwJOjjNwrUVE
nBVEnfgXVk3BttR0exiZo0PjmIDG0aT5qGXYFe1DsQPecNp/YIddQdNJdNWG6PwAnGzfM2eNDhIA
AAAASUVORK5CYII=')
	#endregion
	$button_getadvertisedsoftware.Location = '98, 19'
	$button_getadvertisedsoftware.Name = 'button_getadvertisedsoftware'
	$button_getadvertisedsoftware.Size = '132, 23'
	$button_getadvertisedsoftware.TabIndex = 2
	$button_getadvertisedsoftware.Text = 'Advertised Software'
	$button_getadvertisedsoftware.TextImageRelation = 'ImageBeforeText'
	$button_getadvertisedsoftware.UseVisualStyleBackColor = $True
	$button_getadvertisedsoftware.add_Click($button_getadvertisedsoftware_Click)
	#
	# groupbox17
	#
	$groupbox17.Controls.Add($button_sccm_start)
	$groupbox17.Controls.Add($combobox1)
	$groupbox17.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox17.ForeColor = '59, 59, 59'
	$groupbox17.Location = '3, 6'
	$groupbox17.Name = 'groupbox17'
	$groupbox17.Size = '401, 78'
	$groupbox17.TabIndex = 6
	$groupbox17.TabStop = $False
	$groupbox17.Text = 'SCCM Cycles'
	#
	# button_sccm_start
	#
	$button_sccm_start.ForeColor = 'Black'
	$button_sccm_start.Location = '319, 28'
	$button_sccm_start.Name = 'button_sccm_start'
	$button_sccm_start.Size = '75, 23'
	$button_sccm_start.TabIndex = 6
	$button_sccm_start.Text = 'Start'
	$button_sccm_start.UseVisualStyleBackColor = $True
	$button_sccm_start.add_Click($button_sccm_start_Click)
	#
	# combobox1
	#
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '6, 29'
	$combobox1.Name = 'combobox1'
	$combobox1.Size = '307, 21'
	$combobox1.TabIndex = 5
	#
	# tabpage11
	#
	$tabpage11.Controls.Add($button_search)
	$tabpage11.Controls.Add($textbox_search)
	$tabpage11.ImageIndex = 10
	$tabpage11.Location = '4, 22'
	$tabpage11.Name = 'tabpage11'
	$tabpage11.Padding = '3, 3, 3, 3'
	$tabpage11.Size = '1264, 91'
	$tabpage11.TabIndex = 12
	$tabpage11.Text = 'Search'
	$tabpage11.UseVisualStyleBackColor = $True
	#
	# button_search
	#
	$button_search.ForeColor = 'Black'
	#region Binary Data
	$button_search.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMBSURBVDhPjZFbTFRXFIaXSZsYIzbxrSZt
Y/ps04SYphVnmAYZvNvnGiUB24fGtl4evEVmAGHu58yVYQQxqVdKkehQtaaC1Ypo7G2sF6RTOgMS
FI1DJKKoX/emwWB9cSV/zt5rr/Xt868tkVh8iuolFt+dF47GDwdDUaZK5/RZJJZ4oef5Ihytk1Ck
7u14fYLff/uF/8cfKhcwQ+iaSKzuZUAoEsvzBUwejY5wZfAxnx3KsL41w6ZjWTYk++kZHmdsNIeu
0bXPAcFwTMxQVLx+s/lSdzepgXE2tuXIjkD6PpzNjHEgleOrk4MKMkZ31wV0re7RvWIEIxIww+L2
+OHJU75szbEyOJMFTuHrgyUk/4bG1AiOrrvUXrjHs0cPcbl9yk54olcCRkT8AQVwmRNey1vAViP0
D22iQEGaMxC58Rjjz1Gcl3PqkjF21bj1X4jfCImY/gYxfLvFcDdQvmcOVtVs3SVc7S/DUinsG4L9
d6DpFviuj/Pk4QOqqmtwewPiURCxGyJl3nwp88zH5hayQ1tZl5hNV98nLFQAq5ZDKD+8jL0DcP/O
MBWVNVS6TKl0KwvLAiJffDNL7F7BViuksutYE5/FqV4Lp9NWOvss/NT3IR8pO9fuQnvyBFWuIKno
B3IlbhFZ6pMjnze9QVljHmvqZ3Dur1VsPvgmn9ZNZ21ixoSdAqWKlsX0XPuHHTur+PVqmkvGfC5H
bSJL1M3ns4s40/cxP/YWcuLGQn64aaEjbVNPaKPQJdwbhO+THWzb7iR5/BQDww+4ne7gYsiKLPXK
yGKPUKwKC6uFoz3zWJ14nSJlp1jlV9fOw7HDx5ZtDoKxRhr2tXH97F4YbuO8qQAq3lfK17KrIX57
8y1KG15jiU8ocsrJyTOtdmcBnXs2wnfvkDle2vqzWYSsVK+gtUINU9vZ3zuT0qZpmqyb5q71vCdV
TkO2VrjVVvJbHHaaK0podpT8VzMJ0LI75YwaKsVO6dTA5eqZpwLaq4smIJO6GC3R+xfiXSV9qL+v
ECL/Ak6IIfRrg51ZAAAAAElFTkSuQmCC')
	#endregion
	$button_search.Location = '300, 30'
	$button_search.Name = 'button_search'
	$button_search.Size = '75, 24'
	$button_search.TabIndex = 10
	$button_search.Text = 'Search'
	$button_search.TextImageRelation = 'ImageBeforeText'
	$button_search.UseVisualStyleBackColor = $True
	$button_search.add_Click($button_search_Click)
	#
	# textbox_search
	#
	$textbox_search.Location = '8, 33'
	$textbox_search.Name = 'textbox_search'
	$textbox_search.Size = '286, 20'
	$textbox_search.TabIndex = 9
	$textbox_search.Text = 'Search'
	$textbox_search.add_Click($textbox_search_Click)
	$textbox_search.add_KeyPress($textbox_search_KeyPress)
	#
	# tabpage_debug
	#
	$tabpage_debug.Controls.Add($button_getvariablesfilter)
	$tabpage_debug.Controls.Add($button_listvariables)
	$tabpage_debug.Controls.Add($textbox_debug)
	$tabpage_debug.Controls.Add($button_debug)
	$tabpage_debug.ImageIndex = 8
	$tabpage_debug.Location = '4, 22'
	$tabpage_debug.Name = 'tabpage_debug'
	$tabpage_debug.Padding = '3, 3, 3, 3'
	$tabpage_debug.Size = '1264, 91'
	$tabpage_debug.TabIndex = 11
	$tabpage_debug.Text = 'Debug'
	$tabpage_debug.UseVisualStyleBackColor = $True
	#
	# button_getvariablesfilter
	#
	$button_getvariablesfilter.ForeColor = 'Black'
	#region Binary Data
	$button_getvariablesfilter.Image = [System.Convert]::FromBase64String('
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
kJA/exyhBPX6kMwAAAAASUVORK5CYII=')
	#endregion
	$button_getvariablesfilter.Location = '145, 35'
	$button_getvariablesfilter.Name = 'button_getvariablesfilter'
	$button_getvariablesfilter.Size = '150, 24'
	$button_getvariablesfilter.TabIndex = 4
	$button_getvariablesfilter.Text = 'Get Variables (Filtered)'
	$button_getvariablesfilter.TextImageRelation = 'ImageBeforeText'
	$button_getvariablesfilter.UseVisualStyleBackColor = $True
	$button_getvariablesfilter.add_Click($button_getvariablesfilter_Click)
	#
	# button_listvariables
	#
	$button_listvariables.ForeColor = 'Black'
	#region Binary Data
	$button_listvariables.Image = [System.Convert]::FromBase64String('
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
UgjHdwaX8gf2UIwhS7FQngAAAABJRU5ErkJggg==')
	#endregion
	$button_listvariables.Location = '9, 35'
	$button_listvariables.Name = 'button_listvariables'
	$button_listvariables.Size = '130, 24'
	$button_listvariables.TabIndex = 3
	$button_listvariables.Text = 'Get Variables'
	$button_listvariables.TextImageRelation = 'ImageBeforeText'
	$button_listvariables.UseVisualStyleBackColor = $True
	$button_listvariables.add_Click($button_listvariables_Click)
	#
	# textbox_debug
	#
	$textbox_debug.AcceptsReturn = $True
	$textbox_debug.AutoCompleteMode = 'SuggestAppend'
	$textbox_debug.AutoCompleteSource = 'CustomSource'
	$textbox_debug.BackColor = 'WindowText'
	$textbox_debug.Font = 'Lucida Console, 8.25pt'
	$textbox_debug.ForeColor = 'Info'
	$textbox_debug.Location = '9, 11'
	$textbox_debug.Name = 'textbox_debug'
	$textbox_debug.Size = '512, 18'
	$textbox_debug.TabIndex = 2
	$textbox_debug.Text = '<Enter PS Command>'
	$textbox_debug.add_Click($textbox_debug_Click)
	$textbox_debug.add_KeyPress($textbox_debug_KeyPress)
	#
	# button_debug
	#
	$button_debug.ForeColor = 'Black'
	#region Binary Data
	$button_debug.Image = [System.Convert]::FromBase64String('
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
sUhhiLcHpfwD8w947NiC0pEAAAAASUVORK5CYII=')
	#endregion
	$button_debug.Location = '527, 6'
	$button_debug.Name = 'button_debug'
	$button_debug.Size = '75, 24'
	$button_debug.TabIndex = 1
	$button_debug.Text = 'Run'
	$button_debug.TextImageRelation = 'ImageBeforeText'
	$button_debug.UseVisualStyleBackColor = $True
	$button_debug.add_Click($button_debug_Click)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 853'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Padding = '3, 0, 0, 0'
	$statusbar1.Size = '1272, 20'
	$statusbar1.TabIndex = 7
	$statusbar1.Text = 'statusbar1'
	#
	# toolstrip1
	#
	$toolstrip1.BackgroundImageLayout = 'None'
	$toolstrip1.GripMargin = '0, 0, 0, 0'
	$toolstrip1.GripStyle = 'Hidden'
	[void]$toolstrip1.Items.Add($textbox_computername)
	[void]$toolstrip1.Items.Add($toolstripseparator11)
	[void]$toolstrip1.Items.Add($button_Check)
	[void]$toolstrip1.Items.Add($toolstriplabel2)
	[void]$toolstrip1.Items.Add($toolstripseparator12)
	[void]$toolstrip1.Items.Add($textbox_username)
	[void]$toolstrip1.Items.Add($toolstripseparator10)
	[void]$toolstrip1.Items.Add($button_GetPC)
	[void]$toolstrip1.Items.Add($toolstripseparator4)
	[void]$toolstrip1.Items.Add($Toolstrip_os)
	[void]$toolstrip1.Items.Add($Toolstrip_OSStatus)
	[void]$toolstrip1.Items.Add($toolstripseparator2)
	[void]$toolstrip1.Items.Add($toolstrip_home)
	[void]$toolstrip1.Items.Add($toolstrip_home_status)
	[void]$toolstrip1.Items.Add($toolstripseparator1)
	[void]$toolstrip1.Items.Add($toolstrip_user)
	[void]$toolstrip1.Items.Add($toolstrip_user_status)
	$toolstrip1.Location = '0, 24'
	$toolstrip1.Name = 'toolstrip1'
	$toolstrip1.Padding = '5, 0, 5, 0'
	$toolstrip1.RenderMode = 'Professional'
	$toolstrip1.Size = '1272, 26'
	$toolstrip1.TabIndex = 6
	$toolstrip1.Text = 'toolstrip1'
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($FileToolStripMenuItem)
	[void]$menustrip1.Items.Add($toolstripmenuitem1)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Padding = '5, 2, 0, 2'
	$menustrip1.RenderMode = 'Professional'
	$menustrip1.Size = '1272, 24'
	$menustrip1.TabIndex = 0
	$menustrip1.Text = 'menustrip1'
	#
	# toolstriplabel2
	#
	$toolstriplabel2.Name = 'toolstriplabel2'
	$toolstriplabel2.Size = '0, 23'
	#
	# FileToolStripMenuItem
	#
	[void]$FileToolStripMenuItem.DropDownItems.Add($toolsToolStripMenuItem)
	[void]$FileToolStripMenuItem.DropDownItems.Add($optionsToolStripMenuItem)
	[void]$FileToolStripMenuItem.DropDownItems.Add($quitToolStripMenuItem)
	$FileToolStripMenuItem.Name = 'FileToolStripMenuItem'
	$FileToolStripMenuItem.Size = '37, 20'
	$FileToolStripMenuItem.Text = 'File'
	#
	# button_Check
	#
	$button_Check.BackColor = 'Transparent'
	$button_Check.BackgroundImageLayout = 'None'
	$button_Check.ForeColor = 'Desktop'
	#region Binary Data
	$button_Check.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAG0SURBVDhPxVJtK0NhGN6P8Q8kYdsh8xd8ky/4
QGos2WjvK4pIfJRpFMU2Lzsv28hstlrblCLCVpLVDGOW1w+X5znbULPxzVV3p3Oe+7rvc13PJfkX
2OatCIXCrsJrZTQaOcj1LGSk6vQC7Iuz2I9GoepTotBSHpQYuAaEC2AtDqycATU6N7SqHkquzneV
QZOJh+2cEAYdWDh8g8b3BKU3h+nYM+Tmrd+3yww8rJEMxmNArdqOsdAduvl7GH03oMMLbaWgh1I9
h6M9AfU6FiP+dEKz+4qGIScG3Eko2SSazWUGUM3WU2Dp6DFep3WJOhnyzbKdSnTxD2B0G2hfvUCL
RSgdQN0OpqlmO0YjwEQwnaBkclQtJc+pYAqtzltCFreXGsgYWDiJaUvH76LmYf8rBj2XCfpXJ0E3
GKMARX7zz+7LDRzmDl6g9b9gJpIlmh3o8eTQsRyPN5o+ieWvrt7gxmQ4B7V4XVkYd9JgtOto28wU
N1eGgySsloRERRzv9WTRyWXQy15BkXe8cmhotmk8acIYsxfN5CoVZq7odmUyhYsXAqp+MdtFnd/r
T6gi9efmL0gkHz/KK4p1BUlkAAAAAElFTkSuQmCC')
	#endregion
	$button_Check.ImageAlign = 'MiddleRight'
	$button_Check.ImageTransparentColor = 'White'
	$button_Check.Name = 'button_Check'
	$button_Check.Size = '60, 23'
	$button_Check.Text = 'Check'
	$button_Check.TextImageRelation = 'TextBeforeImage'
	$button_Check.add_Click($button_check_click)
	#
	# toolstripmenuitem1
	#
	[void]$toolstripmenuitem1.DropDownItems.Add($aboutToolStripMenuItem)
	$toolstripmenuitem1.Name = 'toolstripmenuitem1'
	$toolstripmenuitem1.Size = '24, 20'
	$toolstripmenuitem1.Text = '?'
	#
	# aboutToolStripMenuItem
	#
	$aboutToolStripMenuItem.Name = 'aboutToolStripMenuItem'
	$aboutToolStripMenuItem.Size = '152, 22'
	$aboutToolStripMenuItem.Text = 'About'
	$aboutToolStripMenuItem.add_Click($aboutToolStripMenuItem_Click)
	#
	# textbox_username
	#
	$textbox_username.Name = 'textbox_username'
	$textbox_username.Size = '100, 26'
	$textbox_username.Text = 'Username'
	$textbox_username.TextBoxTextAlign = 'Center'
	$textbox_username.add_KeyPress($textbox_username_KeyPress)
	$textbox_username.add_Click($textbox_username_Click)
	#
	# button_GetPC
	#
	$button_GetPC.DisplayStyle = 'Text'
	#region Binary Data
	$button_GetPC.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button_GetPC.ImageTransparentColor = 'Magenta'
	$button_GetPC.Name = 'button_GetPC'
	$button_GetPC.Size = '47, 23'
	$button_GetPC.Text = 'Get PC'
	$button_GetPC.add_Click($button_GetPC_Click)
	#
	# toolstripseparator10
	#
	$toolstripseparator10.Name = 'toolstripseparator10'
	$toolstripseparator10.Size = '6, 26'
	#
	# quitToolStripMenuItem
	#
	$quitToolStripMenuItem.Name = 'quitToolStripMenuItem'
	$quitToolStripMenuItem.Size = '152, 22'
	$quitToolStripMenuItem.Text = 'Beenden'
	$quitToolStripMenuItem.add_Click($quitToolStripMenuItem_Click)
	#
	# toolstripseparator4
	#
	$toolstripseparator4.Name = 'toolstripseparator4'
	$toolstripseparator4.Size = '6, 26'
	#
	# toolsToolStripMenuItem
	#
	[void]$toolsToolStripMenuItem.DropDownItems.Add($aDExplorerToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($nirLauncherToolStripMenuItem1)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($procexpToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($procmonToolStripMenuItem)
	#region Binary Data
	$toolsToolStripMenuItem.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKmSURBVDhPpZJZSJRRFIBvWmmmhr2YplAT
CCW0UikkURG+JVFptEAkJpGYiDMu45qmaWZoLhDVQ76UFEN7zjhaYpYNmgsY2Kg1Lo1jpWkiFvR1
f39UDB+CDnw/h3PP/bj33F8A/4X6kVF889bTlPwC9IVF6K9cXRi5pvTI3ifTm5SYEVy+Z1CSbf9C
odqrhiJ44SKq6mRa6yQwL5YsmU+trNU5C+plT4OkUfJKiI5ZgdlFMFheQrcuVhJHd2IcPUnx9CSr
9OrO050Qy82yCvTF5aSVVFASc049xYxgqLyYppXONHkI3q4QWLxdsfi6Y/Fxo9nLiRuHwqh5Y2F8
6id9Qw5evm4iu+DKb1XgJjBK1/NpHxha2zHJ3LhIrXedjiA+9zK2QTuGh4/JuVRIanYeWbn56lPU
uAr6z57AnniOPkXQ0oYjJRZ7ppah9Hi+aaPR5RXQ2WXlRX0jurQMHAf3qUNXBKalgpHrxXRpPDH7
ulLr54Y1YCU9AV7YNMsZ8BbcefyMLmsPLe/aiNMmo03NRJ+ZrZ5gWpCbRO/GVXza4odtqx8Dm30Y
DfTk8JmLZCcXYetsp7WtnY7O93z5Pob96wiJqenqDIxyiCPaSPp2+NMftAb7Tn8mtnhxPPoCLqVW
Xk1AzDMbNbdvEK1L4UxyBlkR4XNXMMoZjEaFMbRLw3DIOiaCVnMiJo9lpR9o+QHbK/vZ/2iMk1EZ
/Nq0gqlje7BGHpt7xhr5CpNHQxgP3cBE6HrYvRqna520TUJwpY0DD4YJvv+ZUwlF/N67lqkjwZjk
zzUrMHmIMUVilJjlaSyy7FHWwe4qB4ceONh79yPhR87TLOt18rpKr8ldjM0KZGyWzPvfl+cYq9cV
NRBY0ohXmqH673WJsmdWsFBoJDPNSr5ACPEHYgQRrGo3yQQAAAAASUVORK5CYII=')
	#endregion
	$toolsToolStripMenuItem.Name = 'toolsToolStripMenuItem'
	$toolsToolStripMenuItem.Size = '124, 22'
	$toolsToolStripMenuItem.Text = 'Tools'
	#
	# aDExplorerToolStripMenuItem
	#
	$aDExplorerToolStripMenuItem.Name = 'aDExplorerToolStripMenuItem'
	$aDExplorerToolStripMenuItem.Size = '139, 22'
	$aDExplorerToolStripMenuItem.Text = 'ADExplorer'
	$aDExplorerToolStripMenuItem.add_Click($aDExplorerToolStripMenuItem_Click)
	#
	# procexpToolStripMenuItem
	#
	$procexpToolStripMenuItem.Name = 'procexpToolStripMenuItem'
	$procexpToolStripMenuItem.Size = '139, 22'
	$procexpToolStripMenuItem.Text = 'Procexp'
	$procexpToolStripMenuItem.add_Click($procexpToolStripMenuItem_Click)
	#
	# procmonToolStripMenuItem
	#
	$procmonToolStripMenuItem.Name = 'procmonToolStripMenuItem'
	$procmonToolStripMenuItem.Size = '152, 22'
	$procmonToolStripMenuItem.Text = 'Procmon'
	$procmonToolStripMenuItem.add_Click($procmonToolStripMenuItem_Click)
	#
	# nirLauncherToolStripMenuItem1
	#
	$nirLauncherToolStripMenuItem1.Name = 'nirLauncherToolStripMenuItem1'
	$nirLauncherToolStripMenuItem1.Size = '139, 22'
	$nirLauncherToolStripMenuItem1.Text = 'NirLauncher'
	$nirLauncherToolStripMenuItem1.add_Click($nirLauncherToolStripMenuItem1_Click)
	#
	# optionsToolStripMenuItem
	#
	$optionsToolStripMenuItem.Name = 'optionsToolStripMenuItem'
	$optionsToolStripMenuItem.Size = '124, 22'
	$optionsToolStripMenuItem.Text = 'Optionen'
	$optionsToolStripMenuItem.add_Click($optionsToolStripMenuItem_Click)
	#
	# textbox_computername
	#
	$textbox_computername.AcceptsReturn = $True
	$textbox_computername.AcceptsTab = $True
	$textbox_computername.AutoCompleteMode = 'SuggestAppend'
	$textbox_computername.AutoCompleteSource = 'CustomSource'
	$textbox_computername.BackColor = '255, 203, 26'
	$textbox_computername.BorderStyle = 'FixedSingle'
	$textbox_computername.CharacterCasing = 'Upper'
	$textbox_computername.Font = 'Consolas, 12pt'
	$textbox_computername.Name = 'textbox_computername'
	$textbox_computername.Size = '150, 26'
	$textbox_computername.Text = 'LOCALHOST'
	$textbox_computername.TextBoxTextAlign = 'Center'
	$textbox_computername.ToolTipText = 'Geben Sie einen Computernamen ein'
	$textbox_computername.add_KeyPress($textbox_computername_KeyPress)
	$textbox_computername.add_Click($textbox_computername_Click)
	$textbox_computername.add_TextChanged($textbox_computername_TextChanged)
	#
	# Toolstrip_os
	#
	$Toolstrip_os.Font = 'Segoe UI, 9pt, style=Bold'
	$Toolstrip_os.Name = 'Toolstrip_os'
	$Toolstrip_os.Size = '0, 23'
	#
	# Toolstrip_OSStatus
	#
	$Toolstrip_OSStatus.Name = 'Toolstrip_OSStatus'
	$Toolstrip_OSStatus.Size = '0, 23'
	#
	# toolstrip_home
	#
	$toolstrip_home.Font = 'Segoe UI, 9pt, style=Bold'
	$toolstrip_home.Name = 'toolstrip_home'
	$toolstrip_home.Size = '0, 23'
	#
	# toolstrip_home_status
	#
	$toolstrip_home_status.Name = 'toolstrip_home_status'
	$toolstrip_home_status.Size = '0, 23'
	$toolstrip_home_status.add_Click($toolstrip_home_status_Click)
	#
	# toolstrip_user
	#
	$toolstrip_user.Font = 'Segoe UI, 9pt, style=Bold'
	$toolstrip_user.Name = 'toolstrip_user'
	$toolstrip_user.Size = '0, 23'
	#
	# toolstrip_user_status
	#
	$toolstrip_user_status.Name = 'toolstrip_user_status'
	$toolstrip_user_status.Size = '0, 23'
	$toolstrip_user_status.add_Click($toolstrip_user_status_Click)
	#
	# toolstripseparator2
	#
	$toolstripseparator2.Name = 'toolstripseparator2'
	$toolstripseparator2.Size = '6, 26'
	$toolstripseparator2.Visible = $False
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = 'toolstripseparator1'
	$toolstripseparator1.Size = '6, 26'
	$toolstripseparator1.Visible = $False
	#
	# toolstripseparator11
	#
	$toolstripseparator11.Name = 'toolstripseparator11'
	$toolstripseparator11.Size = '6, 26'
	#
	# toolstripseparator12
	#
	$toolstripseparator12.Name = 'toolstripseparator12'
	$toolstripseparator12.Size = '6, 26'
	#
	# imagelist1
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAACyFgAAAk1TRnQBSQFMAgEBCwEAAWgBAQFoAQEBEAEAARABAAT/AQkBAAj/AUIBTQE2
AQQGAAE2AQQCAAEoAwABQAMAATADAAEBAQABCAYAAQwYAAGAAgABgAMAAoABAAGAAwABgAEAAYAB
AAKAAgADwAEAAcAB3AHAAQAB8AHKAaYBAAEzBQABMwEAATMBAAEzAQACMwIAAxYBAAMcAQADIgEA
AykBAANVAQADTQEAA0IBAAM5AQABgAF8Af8BAAJQAf8BAAGTAQAB1gEAAf8B7AHMAQABxgHWAe8B
AAHWAucBAAGQAakBrQIAAf8BMwMAAWYDAAGZAwABzAIAATMDAAIzAgABMwFmAgABMwGZAgABMwHM
AgABMwH/AgABZgMAAWYBMwIAAmYCAAFmAZkCAAFmAcwCAAFmAf8CAAGZAwABmQEzAgABmQFmAgAC
mQIAAZkBzAIAAZkB/wIAAcwDAAHMATMCAAHMAWYCAAHMAZkCAALMAgABzAH/AgAB/wFmAgAB/wGZ
AgAB/wHMAQABMwH/AgAB/wEAATMBAAEzAQABZgEAATMBAAGZAQABMwEAAcwBAAEzAQAB/wEAAf8B
MwIAAzMBAAIzAWYBAAIzAZkBAAIzAcwBAAIzAf8BAAEzAWYCAAEzAWYBMwEAATMCZgEAATMBZgGZ
AQABMwFmAcwBAAEzAWYB/wEAATMBmQIAATMBmQEzAQABMwGZAWYBAAEzApkBAAEzAZkBzAEAATMB
mQH/AQABMwHMAgABMwHMATMBAAEzAcwBZgEAATMBzAGZAQABMwLMAQABMwHMAf8BAAEzAf8BMwEA
ATMB/wFmAQABMwH/AZkBAAEzAf8BzAEAATMC/wEAAWYDAAFmAQABMwEAAWYBAAFmAQABZgEAAZkB
AAFmAQABzAEAAWYBAAH/AQABZgEzAgABZgIzAQABZgEzAWYBAAFmATMBmQEAAWYBMwHMAQABZgEz
Af8BAAJmAgACZgEzAQADZgEAAmYBmQEAAmYBzAEAAWYBmQIAAWYBmQEzAQABZgGZAWYBAAFmApkB
AAFmAZkBzAEAAWYBmQH/AQABZgHMAgABZgHMATMBAAFmAcwBmQEAAWYCzAEAAWYBzAH/AQABZgH/
AgABZgH/ATMBAAFmAf8BmQEAAWYB/wHMAQABzAEAAf8BAAH/AQABzAEAApkCAAGZATMBmQEAAZkB
AAGZAQABmQEAAcwBAAGZAwABmQIzAQABmQEAAWYBAAGZATMBzAEAAZkBAAH/AQABmQFmAgABmQFm
ATMBAAGZATMBZgEAAZkBZgGZAQABmQFmAcwBAAGZATMB/wEAApkBMwEAApkBZgEAA5kBAAKZAcwB
AAKZAf8BAAGZAcwCAAGZAcwBMwEAAWYBzAFmAQABmQHMAZkBAAGZAswBAAGZAcwB/wEAAZkB/wIA
AZkB/wEzAQABmQHMAWYBAAGZAf8BmQEAAZkB/wHMAQABmQL/AQABzAMAAZkBAAEzAQABzAEAAWYB
AAHMAQABmQEAAcwBAAHMAQABmQEzAgABzAIzAQABzAEzAWYBAAHMATMBmQEAAcwBMwHMAQABzAEz
Af8BAAHMAWYCAAHMAWYBMwEAAZkCZgEAAcwBZgGZAQABzAFmAcwBAAGZAWYB/wEAAcwBmQIAAcwB
mQEzAQABzAGZAWYBAAHMApkBAAHMAZkBzAEAAcwBmQH/AQACzAIAAswBMwEAAswBZgEAAswBmQEA
A8wBAALMAf8BAAHMAf8CAAHMAf8BMwEAAZkB/wFmAQABzAH/AZkBAAHMAf8BzAEAAcwC/wEAAcwB
AAEzAQAB/wEAAWYBAAH/AQABmQEAAcwBMwIAAf8CMwEAAf8BMwFmAQAB/wEzAZkBAAH/ATMBzAEA
Af8BMwH/AQAB/wFmAgAB/wFmATMBAAHMAmYBAAH/AWYBmQEAAf8BZgHMAQABzAFmAf8BAAH/AZkC
AAH/AZkBMwEAAf8BmQFmAQAB/wKZAQAB/wGZAcwBAAH/AZkB/wEAAf8BzAIAAf8BzAEzAQAB/wHM
AWYBAAH/AcwBmQEAAf8CzAEAAf8BzAH/AQAC/wEzAQABzAH/AWYBAAL/AZkBAAL/AcwBAAJmAf8B
AAFmAf8BZgEAAWYC/wEAAf8CZgEAAf8BZgH/AQAC/wFmAQABIQEAAaUBAANfAQADdwEAA4YBAAOW
AQADywEAA7IBAAPXAQAD3QEAA+MBAAPqAQAD8QEAA/gBAAHwAfsB/wEAAaQCoAEAA4ADAAH/AgAB
/wMAAv8BAAH/AwAB/wEAAf8BAAL/AgAD/wIAAfMLAAHzAwAB/w3zAf8DAAH0AfMB9BsAAesB/wIA
Af8B9AHzAfQB/wIAAf8B6wMAAbwBRgFMAQ8BWAEPAXkBDwGdAZEBswEPAqcBvAMAAXMBLgFzBgAD
8xIAAeoB8QH/AfMBvAFLASQBSwG8AfMB/wHxAeoDAAElAUYBTQERAVkBQwF+AUMBwQG6AdoBEQHm
AacBhgMAAS4BNgEvAfMB9AMAAfMBUQFLAVEB8xEAAhIB8wEqASQBKwEkASsCJAHzAhIDAAElAUwB
TQERAVkBQwF+AREBwQG6AdoBEQHOAc8BhgPzAS4BVwEvAS4BeAPzAVIBdAFTARoBUhEAAfEBSgEk
ATEBKgFSASQBUgEkASsBJAFKAfEDAAElARcBTQERAVkBQwF+AUMBwQG6AdoBEQHOAc8BhgEvAy4B
WAEvAi4BUALsAe0B9wGZAcMBUhIAASoBKwFSASsBUwEkAVMBKgFSAioEAAElAW8BTQFDAVkBFQF+
ARUBwQG6AdoBQwHOAc8BhgEuB1gBLgH0Ae8B7AHvAfMBGgFSEgABJAFMAXoBTAF6ASQBegFMAXoB
TAEkBAABJQFvAU0BFQFZARUBfgEVAcEBugHaARUBzgHPAYYBHAMvAXkBUAIvAi4BUAHxAewB8AFS
EQAB8wH0ASQBUgGaAVIBmgElAZoBUgGaAVIBJAH0AfMCAAElARYBTQEVAVkBFAF+ARQBwQG6AdoB
FQHmAbUBhgIAAi4BeQEvBFgBLgEZAe8B7BIAAesB9wEkAXUBmgJMASsCTAGaAXQBJAH3AesCAAEl
AZQBTQEUAXoBFAF+ARQBwQG6AdsBFAHmAbUBhgIAAVABLgF+AS8BeQMuAVAB3AH0AewSAAHxAW0B
JAIrAXQDegF0AUwBKwEkAW0B8QIAASUBlAHjARQBegETAX4BFAHBAboB2wEUAeYBtQGGAgAB7QFQ
Ai4BeQEuAuEC3AH/AewTAAH/ASQDegNTA3oBJAH/AwABJQEaAXUBEwF6ARIBnwETAcEBugHbARMB
5gEJAYYCAAHtAf8B1QEuAX4BLgEJA9wB/wHsEwABvAEjAUwHUgErASMBvAMAASUBGgF1ARIBegES
AZ8BEgHBAbsB2wETAdUBvAGGAgAB7AH/AdUCLgFQAQkD3AH2AewTAAISAUsBKgUrASoBSwISAwAB
JQG9AXUBEgF6ARIBnwESAcEBuwHbARIB1QHxAYYCAAEHAbwBGQHbAfQCGQEJAboBGQG8AQcTAAFt
AgABvAFLAiQBIwFLAbwCAAFtAwABJQEaAXUBEgF6ARIBnwESAcEBuwHbARIB1gHyAYYCAAH/Ae0B
/wEZArQCugEZAf8B7QH/EwAB6wMAARMB9wHsAeoBEQMAAesDAAElARoB9AG8AfYBvAH2AbwC/wH0
AbwB9AHdAYYDAAH/AZIBvAT/AbwB7QH/GAAB9wEUARUBQwH3BwABGwElAUwB6gFSAeoBVwHqAZ0B
kAGzARIBpwGGAfEEAAH/AbwE7QG8Af8dAAH/AbwB8AHyAQcB/wMAAf8B9AjzAfQB/wIAAfQO8wH0
AQABvAGLCoYBiwG8AfQIAAH/AfMB7AETAeoB7AHyAf8BAAH/AfAB7AEUBkMBFAHsAfAB/wEAAQcO
9wEHAbwBtAGuAc8BrgGLAa4CtAWLAbQBBwgAAbwB7AHqAuwBbQHsAQcBAAHvARUBEgHrAewB7QL3
Ae0B7AHrAeoBFQHvAQAB9w7/AfcBiwGuAYsBrgGGAYsCrgKLAbQEhgGLCAAB8wHqAewC9AHtAeoB
8gEAARUB6gFtAesB7AHtAZIB7QPsAesBbQEVAQAB9wH/AbQKrQG0Af8B9wOGBP8BtQX/AmYBhggA
AfIBEwHrAfMB9AHtARMB8QEAARUB6gFtAesC7AGSAe0C7ALrAW0BFQEAAfcB/wGtCrQBrQH/AfcB
hgJmAf8DiwGuBf8BhgFmAYYDAAH/AfMB8AH/AQABvAHsAeoC7AHqAewBBwEAAUMB6gFtAesC7AGS
Ae0C7AHrAm0BQwEAAfcB/wG0Cq0BtAH/AfcBhgJmAf8DiwGuBf8BZgKGAQAC9AH/Ae8BbQHzAf8B
8gH0AewBEwESAewB8wH/AQABQwFtAZIBBwHyBPEB8gG8AZIBbQFDAQAB9wz/AfYB/wH3A4YB/wGL
Av8BiwL/AfIC/wGLAa4BhgEAAfcBEgHsARIBQwLsAUMB8gG8AfIB8wEHAf8CAAHtAfABkgHsAm0C
6wJtAewBkgHwAe0BAAH3Af8BFAHqAusB6gETAf8F9AH/AZIBhgKLAf8EiwGuAYYBZgGLAYYCiwGG
AQAB8gETAUMBEwESARQBQwHsAf8HAAHsARUBEwFtAewB7QGSAe0C7AFtARIBFAHsAQAB9wz/AfQB
/wH3AYYCiwH/AYsC/wGLAa4D/wGGAs8BhgH0AfABEwHsAfIB9AEHARQB7AHzAv8FAAEVAm0B6wLs
AZIB7QLsAusBbQEVAQAB9wH/ARQBEgHqAm0C6wJtAeoBEgEUAf8B9wGGAq4B/wSLAWYD/wFmAc8B
tAGGAewBEgEUAQcB/wEAAfQB6gFDAesB8AH/BQABFQHqAW0B6wLsAZIB7QLsAesCbQFDAQAB9w7/
AfcBhgLPAf8BrQL/Ac8BtQP/Ac8BtAG1AYYBBwHsARQB9wH0Af8B8gISAe8B8wH/BQABQwHqAZIB
BwbxAQcBkgFtAUMBAAH3Af8BFAESAeoCbQPrAW0B6gESARQB/wH3AYYCzwH/Aa0DzwH/Aa4BiwG0
A7UBhgH/AfIBEwESAfcBBwHsARUB7AL/BgABQwHwAe8BkgbsAZIB7wHwAUMBAAH3Af8M8wH/AfcB
hgK0Af8BtAPPAf8FtQEJAYYBAAEHBhQBEgHzBwABQwzsAUMBAAH3Af8M8gH/AfcBiwK0AYsBhgG1
AfMC/wW1AQkBiwEAAfEBBwHyAewBEwG8AfIB9wH0BwABvAEUAesB7Ab3AewB6wEUAbwBAAH3Dv8B
9wG8AbsJtQO7AfABBwMAAf8BvAHsAfQLAAHzAZIBFAZDARQBkgHzAgAB7wL3CpIC9wHvAQAB8QGL
CoYBiwHxAwAB9ArzAfQFAAH/BPMB/wgADvMEAAHzAQAB8wH/AfMBAAHzAQAB8wEAAfMEAAHvAewB
7QbrAe0B7AHvBQABBwSRAQcG8wH0AQADEgITBFICEwMSAwAB9AF0AfMBdAHyAXQB8wF0AfMBdAHz
AXQB9AMAAewCBwEkBFIBJAIHAewCAAH0AvMBkQG1ArsBtQeRAfcBAAPsAusBUgKgAVIC6wPsAgAB
8wH3AeoJbQHqAfcB8wIAAewB9gH/ASQEUgEkAf8B9gHsAgAB7wSRAq4EkQH3AgcBvAGRBgABmgJS
AZoHAAF0AuoJEgLqAXQCAAHtAQgBvAEkAXQCUgF0ASQBvAEIAe0CAAGRAbsB/wb0Af8BuwGRAQcB
uwG8AZECAAH0BPMBbQEUBPMB9AMAAfMB6gFtCRIBbQHqAfMCAAHtAQgB8AEkAXkCKwF5ASQB8AEI
Ae0CAAGRAbsBswLUAtoC1AGzAQcBkQEHAbsBvAGRAgABBwrvAQcDAAF0AeoB6wESBBMEEgHrAeoB
dAIAAe0BGgHwASoBmQIrAZkBKgHwARoB7QIAAZEBvAGzBtQBswG8AZECCQHwAZECAAHvCv8B7wMA
AfIB6gHrARMB8QEHAf8BvAFtAxIB6wHqAfMBAAH0AZIBGwHwASoBmQIaAZkBKgHwARsBkgH0AQAB
kQHwArMB1AHaBNsBvAGRAi4BGQGRAgAB7wP/AW0C6wFtA/8B7wMAAXQB6gHsARMEFAETAhIBEwHs
AeoBdAEAAXQB9wHzAfABUgQqAVIB8AHzAfcBdAEAAZEB8gOzAdQD2wHVAfABkQI1AfMBkQIAAe8D
/wRtA/8B7wMAAfMB6gHsARQB8QK8AZIEEwHsAeoB8wEAASQBSwH/BxsB8AH/AUsBJAEAAZEB8wGs
BLMDtAHxAZECtQHzAZECAAHvAf8BbQESBOoBEgFtAf8B7wMAAXQB6gHtBhQDEwHtAeoBdAIAASoB
UQMbAccBpgMbAVEBKgIAAZEI9ALzAZECGQHzAZECAAHvAf8BFAETBBIBEwEUAf8B7wMAAfMB6gGS
ARQB8QG8Ae8CvAHwAhQBkgHqAfMCAAIqAVIB9AEbAq0BGwH0AVIBJAMAAQcG7QSRA7UB8wGRAgAB
7wH/AUMBFQQUARUBQwH/Ae8DAAF0AeoB9wkUAfcB6gF0AgABKgFSASoBUgH2AvQB/wFSASQB9woA
AZEB9AXxAfQBkQIAAe8B/wEQAUMBcwJDAXMBQwEQAf8B7wMAAfMB6gHvARUIFAHvAeoB8wIAAXkC
KwEqAVIC/wFSASoB8wGSCgABkQH0AQkCvAIJAfQBkQIAAe8B/wEPARABcwIQAXMBEAEPAf8B7wMA
AXQB6gHvAewH7QHsAe8B6gF0BgABKgJSASoB9wEbAZIKAAGRB/8BkQIAAe8B9Aj/AfQB7wQAAe8L
6gHvCAACKwEAAbwB9wG8CgABBweRAQcCAAG8Cu8BvAUAAVIBAAFSAQABUgEAAVIBAAFSAQABUgIA
AUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEBAAEBBQABgAEBFgAD/wEAAb8B+wGAAQAB4wH/AgAB
mAEzAYABAAHjAfECAAGAAQMBgAEAAuACAAGAAQMBgAUAAYABAwGABQABwAEHAYAFAAHAAQcBgAIA
AQEDAAEBAYABAAHAAQMDAAEBAYABAAHAAQMDAAEBAYABAAHAAQMCAAGAAQMBgAEAAcABAwIAAYAB
AwGAAQABwAEDAgABgAEDAYABAAHAAQMCAAGwARsBgAEAAcABAwIAAbgBOwGAAQAB4AEHAgAB+AE/
AYABAAHwAQ8CAAH/AYEBwAEDAgABgAEAAf8BAAGAAQEEAAH/AQABgAEBBAAB/wEAAYABAQQAAf8B
AAGAAQEEAAHhAQABgAEBBAABgAEAAYABAQQAAYABAQGAAQEEAAGAAT8BgAEBBQABDwGAAQEEAAEE
AQ8BgAEBBQABDwGAAQEFAAEfAYABAQQAAYABPwGAAQEEAAGAAT8BgAEBBAAB4QH/AcABAwIAAYAB
AQHAAQMB4AF/AYABAQHoAasBwAEDAeABAAGAAQEBwAEBAcABAwIAAYABAQGAAQABwAEDAgAB/AE/
AYABAAHAAQMCAAHAAQMBgAEAAcABAwIAAcABAwGAAQABwAEDAgABwAEDAYABAAGAAQECAAHAAQMB
gAEAAYABAQIAAcABAwGAAQABgAEBAgABwAEDAYABAAHAAQMCAAHAAQMBgAEAAcABBwIAAcABAwGA
AQABwAEHAf4BAAHAAQMBgAEAAcABBwH+AQABwAEDAYABAAH8AQcB/gEAAcABAwHAAQEB/gFHAf4B
AAHAAQMB6gGrCw=='))
	#endregion
	$imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist1.TransparentColor = 'Transparent'
	#
	# contextmenustrip1
	#
	$contextmenustrip1.Name = 'contextmenustrip1'
	$contextmenustrip1.Size = '61, 4'
	#
	# folderbrowserdialog1
	#
	$menustrip1.ResumeLayout()
	$toolstrip1.ResumeLayout()
	$tabpage_debug.ResumeLayout()
	$tabpage11.ResumeLayout()
	$groupbox17.ResumeLayout()
	$groupbox18.ResumeLayout()
	$tabpage10.ResumeLayout()
	$groupbox23.ResumeLayout()
	$tabpage8.ResumeLayout()
	$groupbox22.ResumeLayout()
	$tabpage6.ResumeLayout()
	$groupbox4.ResumeLayout()
	$groupbox8.ResumeLayout()
	$tabpage5.ResumeLayout()
	$groupbox20.ResumeLayout()
	$groupbox21.ResumeLayout()
	$chart1.EndInit()
	$tabpage4.ResumeLayout()
	$groupbox19.ResumeLayout()
	$tabpage3.ResumeLayout()
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox5.ResumeLayout()
	$groupbox6.ResumeLayout()
	$groupbox7.ResumeLayout()
	$groupbox16.ResumeLayout()
	$tabpage2.ResumeLayout()
	$groupbox9.ResumeLayout()
	$groupbox11.ResumeLayout()
	$groupbox12.ResumeLayout()
	$groupbox13.ResumeLayout()
	$groupbox14.ResumeLayout()
	$groupbox15.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol_Home.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	
	# Configuration	
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!C O N F I G U R A T I O N!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	
	# Snapins
	Add-PSSnapin Quest.ActiveRoles.ADManagement -ErrorAction SilentlyContinue
	Import-module grouppolicy -ErrorAction Continue
	Import-Module CimCmdlets -ErrorAction Continue
	Import-Module ActiveDirectory -ErrorAction Continue
	
	# PowershellToolkit information
	$ApplicationName = "Powershell Toolkit"
	$ApplicationVersion = "3.0.0.1"
	$ApplicationLastUpdate = "17.11.2015"
	
	# Author Information
	$AuthorName = "Renato Bacchi"
	$AuthorEmail 		= "admin@renatobacchi.ch"
	$AuthorWWW			= "http://www.renatobacchi.ch"
	
	# Text to show in the Status Bar when the form load
	$StatusBarStartUp = "$ApplicationName - $ApplicationVersion - (c) Renato Bacchi - $AuthorWWW"
	
	# Title of the MainForm / Mainform Titel
	$domain = $env:userdomain.ToUpper()
	$MainFormTitle = "$ApplicationName $ApplicationVersion - Last Update: $ApplicationLastUpdate - $domain\$env:username"
	
	# Font Styles / Schrift Stile
	$bold = New-Object Drawing.Font("Lucida Console", 8, [Drawing.Fontstyle]::Bold)
	$norm = New-Object Drawing.Font("Lucida Console", 8, [Drawing.Fontstyle]::Regular)
	$log = New-Object Drawing.Font("Lucida Console", 1, [Drawing.Fontstyle]::Regular)
	[Drawing.Color]$gray = "Control"
	[Drawing.Color]$green = "Green"
	[Drawing.Color]$red = "Red"
	[Drawing.Color]$black = "Black"
	$global:Fillchar = 178
	$Newline = "`n"
	$Newline2 = "`n`n"
	
	## Environment Variables / Umgebungsvariablen
	if (Test-Path "C:\Program Files (x86)") { $global:Programfiles = "C:\Program Files (x86)" }
	else { $global:Programfiles = "C:\Program Files" }
	$cmd = "cmd.exe"
	
	# Folder / Ordner
	$global:Profilefolder = ""
	$global:Homefolder = ""
	$global:Outfile = $pwd
	$global:Confpath = $env:APPDATA += "\Powershell Toolkit\"
	
	# SCCM
	$global:SCCMEnabled = "true"
	$global:SiteName = ""
	$global:SCCMServer = ""
	$global:SCCMNameSpace = "root\sms\site_$SiteName"
	$global:CmRCViewer = "$global:Programfiles\ConfigMgr\bin\i386\CmRcViewer.exe"
	
	# External Tools
	$global:Nirlauncher = "$global:Programfiles\Nirsoft"
	$global:Sysinternals = "$global:Programfiles\Sysinternals"
	
	# Loading Lang-Variables because $lang.xyz does not work in AddRichtTextbox -Text if there
	# are multiple Variables, bc. those are not strings but hashtablekeys
	# Maybe these should be change to something like global:langfolder and so on, so the code would be more readable
	$global:ChangePasswordAtLogon = $lang.ChangePasswordAtLogon
	$global:CheckComputerGroups = $lang.CheckComputerGroups
	$global:CheckConn = $lang.CheckConn
	$global:ComputerNotFound = $lang.ComputerNotFound
	$global:ComputerOfflineOrWrong = $lang.ComputerOfflineOrWrong
	$global:Cycle1 = $lang.Cycle1
	$global:Cycle2 = $lang.Cycle2
	$global:Cycle3 = $lang.Cycle3
	$global:Cycle4 = $lang.Cycle4
	$global:Cycle5 = $lang.Cycle5
	$global:Cycle6 = $lang.Cycle6
	$global:Cycle7 = $lang.Cycle7
	$global:Cycle8 = $lang.Cycle8
	$global:Cycle9 = $lang.Cycle9
	$global:DestinationComputer = $lang.DestinationComputer
	$global:DnsConf = $lang.DnsConf
	$global:DoYouWantToTransfer = $lang.DoYouWantToTransfer
	$global:EnterCommand = $lang.EnterCommand
	$global:EnterDestinationComputer = $lang.EnterDestinationComputer
	$global:EnterPassword = $lang.EnterPassword
	$global:EnterSourceComputer = $lang.EnterSourceComputer
	$global:EnterUsername = $lang.EnterUsername
	$global:ErrorUnlocking = $lang.ErrorUnlocking
	$global:FolderPathInputBoxMsg = $lang.FolderPathInputBoxMsg
	$global:FolderPathInputBoxTitle = $lang.FolderPathInputBoxTitle
	$global:FollowingLocked = $lang.FollowingLocked
	$global:LockedUser = $lang.LockedUser
	$global:NetConf = $lang.NetConf
	$global:NoInputDetected = $lang.NoInputDetected
	$global:NoUserUnlocked = $lang.NoUserUnlocked
	$global:NoUsersLocked = $lang.NoUsersLocked
	$global:NotExistinginAD = $lang.NotExistinginAD
	$global:PSRnotEnabled = $lang.PSRnotEnabled
	$global:PasswordResetOK = $lang.PasswordResetOK
	$global:Please = $lang.Please
	$global:RegKeySet = $lang.RegKeySet
	$global:RemoteCommandSent = $lang.RemoteCommandSent
	$global:RunRemoteCMD = $lang.RunRemoteCMD
	$global:ShowFolderRights = $lang.ShowFolderRights
	$global:ShowLocalAdminsOf = $lang.ShowLocalAdminsOf
	$global:ShowingComputergroupsOf = $lang.ShowingComputergroupsOf
	$global:ShowingLastPC = $lang.ShowingLastPC
	$global:SourceComputer = $lang.SourceComputer
	$global:TransferComputerGroups = $lang.TransferComputerGroups
	$global:Transferring = $lang.Transferring
	$global:TwoIdenticalComputers = $lang.TwoIdenticalComputers
	$global:UnlockUser = $lang.UnlockUser
	$global:UnlockedOK = $lang.UnlockedOK
	$global:YouHaveEnteredTwoIdenticalComputers = $lang.YouHaveEnteredTwoIdenticalComputers
	$global:checkHomeRights = $lang.checkHomeRights
	$global:checkProfileRights = $lang.checkProfileRights
	$global:configFolderExisting = $lang.configFolderExisting
	$global:configFrom = $lang.configFrom
	$global:createConfigError = $lang.createConfigError
	$global:created = $lang.created
	$global:existing = $lang.existing
	$global:folder = $lang.folder
	$global:loaded = $lang.loaded
	$global:openPSRS = $lang.openPSRS
	$global:starting = $lang.starting
	# Languagefiles Language.psd1 in Folders, e.g. \de-DE\ with Variables and Strings
	
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion Configuration
	
	# Adder Functions
	
	#region Add-ListViewItem
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[int]$ImageIndex = -1,
			[string[]]$SubItems,
			[System.Windows.Forms.ListViewGroup]$Group,
			[switch]$Clear)
		
		if ($Clear)
		{
			$ListView.Items.Clear();
		}
		
		if ($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{
				$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if ($SubItems -ne $null)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if ($Group -ne $null)
				{
					$listitem.Group = $Group
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if ($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($Group -ne $null)
			{
				$listitem.Group = $Group
			}
		}
	}
	#endregion
	
	#region Add-RichTextBox
	# Function - Add Text to RichTextBox
	function Add-RichTextBox
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.AppendText($timestamp)
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#Set-Alias artb Add-RichTextBox -Description "Add content to the RichTextBox"
	#endregion
	
	#region Add-RichtextBoxOK
	function Add-RichTextBoxOK
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Green
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#endregion RichtextBoxOK
	
	#region Add-RichtextBoxTitle
	function Add-RichTextBoxTitle
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#endregion RichtextBoxWarn
	
	#region Add-RichtextBoxWarn
	function Add-RichTextBoxWarn
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Red
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
		
	}
	#endregion RichtextBoxWarn
	
	# Clearer Functions
	
	#region Clear-Chart
	function Clear-Chart
	{
	<#
		.SYNOPSIS
			This function clears the contents of the chart
	
		.DESCRIPTION
			Use the function to remove contents from the chart control
	
		.PARAMETER  ChartControl
			The Chart Control to clear
	
		.PARAMETER  LeaveSingleChart
			Leaves the first chart and removes all others from the control
		
		.LINK
			http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Position = 1, Mandatory = $true)]
			[System.Windows.Forms.DataVisualization.Charting.Chart]
			$ChartControl
			,
			[Parameter(Position = 2, Mandatory = $false)]
			[Switch]$LeaveSingleChart
		)
		
		$count = 0
		if ($LeaveSingleChart)
		{
			$count = 1
		}
		
		while ($ChartControl.Series.Count -gt $count)
		{
			$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
		}
		
		while ($ChartControl.ChartAreas.Count -gt $count)
		{
			$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
		}
		
		while ($ChartControl.Titles.Count -gt $count)
		{
			$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
		}
		
		if ($ChartControl.Series.Count -gt 0)
		{
			$ChartControl.Series[0].Points.Clear()
		}
	}
	#endregion Clear-Chart
	
	# Getter Functions
	
	#region Get-ComputerTxtBox
	function Get-ComputerTxtBox
	{ $global:ComputerName = $textbox_computername.Text }
	#endregion
	
	#region Get-DiskSpace
	
	function Get-DiskSpace
	{
		
		    <#
		        .Synopsis  
		            Gets the disk space for specified host
		            
		        .Description
		            Gets the disk space for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the diskspace from (Default is localhost.)
		            
		        .Example
		            Get-Diskspace
		            # Gets diskspace from local machine
		    
		        .Example
		            Get-Diskspace -ComputerName MyServer
		            Description
		            -----------
		            Gets diskspace from MyServer
		            
		        .Example
		            $Servers | Get-Diskspace
		            Description
		            -----------
		            Gets diskspace for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-DiskSpace 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Begin
		{
			Write-Verbose " [Get-DiskSpace] :: Start Begin"
			$Culture = New-Object System.Globalization.CultureInfo("en-US")
			Write-Verbose " [Get-DiskSpace] :: End Begin"
		}
		
		Process
		{
			Write-Verbose " [Get-DiskSpace] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
				
			}
			Write-Verbose " [Get-DiskSpace] :: `$ComputerName - $ComputerName"
			Write-Verbose " [Get-DiskSpace] :: Testing Connectivity"
			if (Test-Host $ComputerName -TCPPort 135)
			{
				Write-Verbose " [Get-DiskSpace] :: Connectivity Passed"
				try
				{
					Write-Verbose " [Get-DiskSpace] :: Getting Operating System Version using - Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version"
					$OSVersionInfo = Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version -ea STOP
					Write-Verbose " [Get-DiskSpace] :: Getting Operating System returned $($OSVersionInfo.Version)"
					if ($OSVersionInfo.Version -gt 5.2)
					{
						Write-Verbose " [Get-DiskSpace] :: Version high enough to use Win32_Volume"
						Write-Verbose " [Get-DiskSpace] :: Calling Get-WmiObject -class Win32_Volume -ComputerName $ComputerName -Property `"Name`",`"FreeSpace`",`"Capacity`" -filter `"DriveType=3`""
						$DiskInfos = Get-WmiObject -class Win32_Volume                          `
												   -ComputerName $ComputerName                  `
												   -Property "Name", "FreeSpace", "Capacity"      `
												   -filter "DriveType=3" -ea STOP
						Write-Verbose " [Get-DiskSpace] :: Win32_Volume returned $($DiskInfos.count) disks"
						foreach ($DiskInfo in $DiskInfos)
						{
							$myobj = @{ }
							$myobj.ComputerName = $ComputerName
							$myobj.OSVersion = $OSVersionInfo.Version
							$Myobj.Drive = $DiskInfo.Name
							$Myobj.CapacityGB = [float]($DiskInfo.Capacity/1GB).ToString("n2", $Culture)
							$Myobj.FreeSpaceGB = [float]($DiskInfo.FreeSpace/1GB).ToString("n2", $Culture)
							$Myobj.PercentFree = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.DiskSpace')
							$obj
						}
					}
					else
					{
						Write-Verbose " [Get-DiskSpace] :: Version not high enough to use Win32_Volume using Win32_LogicalDisk"
						$DiskInfos = Get-WmiObject -class Win32_LogicalDisk                       `
												   -ComputerName $ComputerName                       `
												   -Property SystemName, DeviceID, FreeSpace, Size   `
												   -filter "DriveType=3" -ea STOP
						foreach ($DiskInfo in $DiskInfos)
						{
							$myobj = @{ }
							$myobj.ComputerName = $ComputerName
							$myobj.OSVersion = $OSVersionInfo.Version
							$Myobj.Drive = "{0}\" -f $DiskInfo.DeviceID
							$Myobj.CapacityGB = [float]($DiskInfo.Capacity/1GB).ToString("n2", $Culture)
							$Myobj.FreeSpaceGB = [float]($DiskInfo.FreeSpace/1GB).ToString("n2", $Culture)
							$Myobj.PercentFree = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.DiskSpace')
							$obj
						}
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-DiskSpace] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-InstalledSoftware
	
	function Get-InstalledSoftware
	{
		
		    <#
		        .Synopsis
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Description
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Parameter ComputerName
		            Name of the Computer to get the installed software from (Default is localhost.)
		
		        .Example
		            Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software from local machine
		
		        .Example
		            Get-InstalledSoftware -ComputerName MyServer
		            Description
		            -----------
		            Gets installed software from MyServer
		
		        .Example
		            $Servers | Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software for each machine in the pipeline
		
		        .OUTPUTS
		            PSCustomObject
		
		        .Notes
		            NAME:      Get-InstalledSoftware
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		begin
		{
			
			Write-Verbose " [Get-InstalledPrograms] :: Start Begin"
			$Culture = New-Object System.Globalization.CultureInfo("en-US")
			Write-Verbose " [Get-InstalledPrograms] :: End Begin"
			
		}
		process
		{
			
			Write-Verbose " [Get-InstalledPrograms] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
				
			}
			Write-Verbose " [Get-InstalledPrograms] :: `$ComputerName - $ComputerName"
			Write-Verbose " [Get-InstalledPrograms] :: Testing Connectivity"
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					$RegKey = Get-RegistryKey -Path "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" -ComputerName $ComputerName
					foreach ($key in $RegKey.GetSubKeyNames())
					{
						$SubKey = $RegKey.OpenSubKey($key)
						if ($SubKey.GetValue("DisplayName"))
						{
							$myobj = @{
								Name = $SubKey.GetValue("DisplayName")
								Version = $SubKey.GetValue("DisplayVersion")
								Vendor = $SubKey.GetValue("Publisher")
								Install = $SubKey.GetValue("InstallDate")
								#Uninstall = $SubKey.GetValue("UninstallString")
							}
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.SoftwareInfo')
							$obj
						}
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-InstalledPrograms] :: End Process"
			
		}
	}
	
	#endregion 	
	
	#region Get-IP 
	
	function Get-IP
	{
		
		    <#
		        .Synopsis 
		            Get the IP of the specified host.
		            
		        .Description
		            Get the IP of the specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get IP (Default localhost.)
		                
		        .Example
		            Get-IP
		            Description
		            -----------
		            Get IP information the localhost
		            
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		        
		        .Notes
		            NAME:      Get-IP
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		Process
		{
			$NICs = Get-WmiObject Win32_NetworkAdapterConfiguration -Filter "IPEnabled='$True'" -ComputerName $ComputerName
			foreach ($Nic in $NICs)
			{
				$myobj = @{
					Name = $Nic.Description
					MacAddress = $Nic.MACAddress
					IP4 = $Nic.IPAddress | where{ $_ -match "\d+\.\d+\.\d+\.\d+" }
					IP6 = $Nic.IPAddress | where{ $_ -match "\:\:" }
					IP4Subnet = $Nic.IPSubnet | where{ $_ -match "\d+\.\d+\.\d+\.\d+" }
					DefaultGWY = $Nic.DefaultIPGateway | Select -First 1
					DNSServer = $Nic.DNSServerSearchOrder
					WINSPrimary = $Nic.WINSPrimaryServer
					WINSSecondary = $Nic.WINSSecondaryServer
				}
				$obj = New-Object PSObject -Property $myobj
				$obj.PSTypeNames.Clear()
				$obj.PSTypeNames.Add('BSonPosh.IPInfo')
				$obj
			}
		}
	}
	
	#endregion 
	
	#region Get-MemoryConfiguration 
	
	function Get-MemoryConfiguration
	{
		
		    <#
		        .Synopsis 
		            Gets the Memory Config for specified host.
		            
		        .Description
		            Gets the Memory Config for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Memory Config from (Default is localhost.)
		            
		        .Example
		            Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config from local machine
		    
		        .Example
		            Get-MemoryConfiguration -ComputerName MyServer
		            Description
		            -----------
		            Gets Memory Config from MyServer
		            
		        .Example
		            $Servers | Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-MemoryConfiguration 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			Write-Verbose " [Get-MemoryConfiguration] :: Begin Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				Write-Verbose " [Get-MemoryConfiguration] :: Processing $ComputerName"
				try
				{
					$MemorySlots = Get-WmiObject Win32_PhysicalMemory -ComputerName $ComputerName -ea STOP
					foreach ($Dimm in $MemorySlots)
					{
						$myobj = @{ }
						$myobj.ComputerName = $ComputerName
						$myobj.Description = $Dimm.Tag
						$myobj.Slot = $Dimm.DeviceLocator
						$myobj.Speed = $Dimm.Speed
						$myobj.SizeGB = $Dimm.Capacity/1gb
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.MemoryConfiguration')
						$obj
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-MemoryConfiguration] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-MotherBoard
	
	function Get-MotherBoard
	{
		
		    <#
		        .Synopsis 
		            Gets the Mother Board info for specified host.
		            
		        .Description
		            Gets the Mother Board info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Mother Board info from (Default is localhost.) 
		            
		        .Example
		            Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info from local machine
		    
		        .Example
		            Get-MotherBoard -ComputerName MyOtherDesktop
		            Description
		            -----------
		            Gets Mother Board info from MyOtherDesktop
		            
		        .Example
		            $Windows7Machines | Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-MotherBoard
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$MBInfo = Get-WmiObject Win32_BaseBoard -ComputerName $ComputerName -ea STOP
					$myobj = @{
						ComputerName = $ComputerName
						Name = $MBInfo.Product
						Manufacturer = $MBInfo.Manufacturer
						Version = $MBInfo.Version
						SerialNumber = $MBInfo.SerialNumber
					}
					
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.Computer.MotherBoard')
					$obj
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion # Get-MotherBoard
	
	#region Get-NicInfo 
	
	function Get-NICInfo
	{
		
		    <#
		        .Synopsis  
		            Gets the NIC info for specified host
		            
		        .Description
		            Gets the NIC info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the NIC info from (Default is localhost.)
		            
		        .Example
		            Get-NicInfo
		            # Gets NIC info from local machine
		    
		        .Example
		            Get-NicInfo -ComputerName MyServer
		            Description
		            -----------
		            Gets NIC info from MyServer
		            
		        .Example
		            $Servers | Get-NicInfo
		            Description
		            -----------
		            Gets NIC info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-NicInfo 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$NICS = Get-WmiObject -class Win32_NetworkAdapterConfiguration -ComputerName $ComputerName
					
					foreach ($NIC in $NICS)
					{
						$Query = "Select Name,NetConnectionID FROM Win32_NetworkAdapter WHERE Index='$($NIC.Index)'"
						$NetConnnectionID = Get-WmiObject -Query $Query -ComputerName $ComputerName
						
						$myobj = @{
							ComputerName = $ComputerName
							Name = $NetConnnectionID.Name
							NetID = $NetConnnectionID.NetConnectionID
							MacAddress = $NIC.MacAddress
							IP = $NIC.IPAddress | ?{ $_ -match "\d*\.\d*\.\d*\." }
							Subnet = $NIC.IPSubnet | ?{ $_ -match "\d*\.\d*\.\d*\." }
							Enabled = $NIC.IPEnabled
							Index = $NIC.Index
						}
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.NICInfo')
						$obj
					}
				}
				catch
				{
					Add-RichTextBoxWarn -text "Host $ComputerName Failed"
				}
			}
			else
			{
				Add-RichTextBoxWarn -text "Host $ComputerName Failed Connectivity Test"
			}
		}
	}
	
	#endregion 
	
	#region Get-Processor
	
	function Get-Processor
	{
		
		    <#
		        .Synopsis 
		            Gets the Computer Processor info for specified host.
		            
		        .Description
		            Gets the Computer Processor info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Computer Processor info from (Default is localhost.)
		            
		        .Example
		            Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info from local machine
		    
		        .Example
		            Get-Processor -ComputerName MyServer
		            Description
		            -----------
		            Gets Computer Processor info from MyServer
		            
		        .Example
		            $Servers | Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-Processor
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$CPUS = Get-WmiObject Win32_Processor -ComputerName $ComputerName -ea STOP
					foreach ($CPU in $CPUs)
					{
						$myobj = @{
							ComputerName = $ComputerName
							Name = $CPU.Name
							Manufacturer = $CPU.Manufacturer
							Speed = $CPU.MaxClockSpeed
							Cores = $CPU.NumberOfCores
							L2Cache = $CPU.L2CacheSize
							Stepping = $CPU.Stepping
						}
					}
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.Computer.Processor')
					$obj
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion
	
	#region Get-RegistryHive 
	
	function Get-RegistryHive
	{
		param ($HiveName)
		Switch -regex ($HiveName)
		{
			"^(HKCR|ClassesRoot|HKEY_CLASSES_ROOT)$"               { [Microsoft.Win32.RegistryHive]"ClassesRoot"; continue }
			"^(HKCU|CurrentUser|HKEY_CURRENTt_USER)$"              { [Microsoft.Win32.RegistryHive]"CurrentUser"; continue }
			"^(HKLM|LocalMachine|HKEY_LOCAL_MACHINE)$"          { [Microsoft.Win32.RegistryHive]"LocalMachine"; continue }
			"^(HKU|Users|HKEY_USERS)$"                          { [Microsoft.Win32.RegistryHive]"Users"; continue }
			"^(HKCC|CurrentConfig|HKEY_CURRENT_CONFIG)$"          { [Microsoft.Win32.RegistryHive]"CurrentConfig"; continue }
			"^(HKPD|PerformanceData|HKEY_PERFORMANCE_DATA)$"    { [Microsoft.Win32.RegistryHive]"PerformanceData"; continue }
			Default { 1; continue }
		}
	}
	
	#endregion 
	
	#region Get-RegistryKey 
	
	function Get-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Gets the registry key provide by Path.
		            
		        .Description
		            Gets the registry key provide by Path.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to get the registry key from.
		            
		        .Parameter Recurse 
		            Recursively returns registry keys starting from the Path.
		        
		        .Parameter ReadWrite
		            Returns the Registry key in Read Write mode.
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe on MyServer1
		        
		        .Example
		            Get-registrykey HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe and all child keys
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		        .Notes
		            NAME:      Get-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse,
			[Alias("RW")]
			[Parameter()]
			[switch]$ReadWrite
			
		)
		
		Begin
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Begin"
			Write-Verbose " [Get-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Get-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Get-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Get-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Get-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Process"
			Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
				
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
				
				if ($ReadWrite)
				{
					try
					{
						$Key = $BaseKey.OpenSubKey($KeyPath, $true)
						$Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
						$Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru
						$Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
						$Key.PSTypeNames.Clear()
						$Key.PSTypeNames.Add('BSonPosh.Registry.Key')
						$Key
					}
					catch
					{
						Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open Key:$KeyPath in $KeyPath with RW Access"
					}
					
				}
				else
				{
					try
					{
						$Key = $BaseKey.OpenSubKey("$KeyPath")
						if ($Key)
						{
							$Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
							$Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru
							$Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
							$Key.PSTypeNames.Clear()
							$Key.PSTypeNames.Add('BSonPosh.Registry.Key')
							$Key
						}
					}
					catch
					{
						Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open SubKey:$Name in $KeyPath"
					}
				}
				
				if ($Recurse)
				{
					Write-Verbose " [Get-RegistryKey] :: Recurse Passed: Processing Subkeys of [$($Key.Name)]"
					$Key
					$SubKeyNames = $Key.GetSubKeyNames()
					foreach ($Name in $SubKeyNames)
					{
						try
						{
							$SubKey = $Key.OpenSubKey($Name)
							if ($SubKey.GetSubKeyNames())
							{
								Write-Verbose " [Get-RegistryKey] :: Calling [Get-RegistryKey] for [$($SubKey.Name)]"
								Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name -Recurse
							}
							else
							{
								Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name
							}
						}
						catch
						{
							Write-Verbose " [Get-RegistryKey] ::  ERROR :: Write-Host Unable to Open SubKey:$Name in $($Key.Name)"
						}
					}
				}
			}
			Write-Verbose " [Get-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-RegistryValue 
	
	function Get-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Get the value for given the registry value.
		            
		        .Description
		            Get the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter ComputerName 
		            Computer to get value.
		            
		        .Parameter Recurse 
		            Recursively gets the Values on the given key.
		            
		        .Parameter Default 
		            Returns the default value for the Value.
		        
		        .Example
		            Get-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State 
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall.
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe.
		    
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Default
		            Description
		            -----------
		            Returns the default value for HKLM\SOFTWARE\Adobe.
		                    
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Test-RegistryValue
		            
		        .Notes    
		            NAME:      Get-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter()]
			[string]$Name,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse,
			[Parameter()]
			[switch]$Default
		)
		
		Process
		{
			
			Write-Verbose " [Get-RegistryValue] :: Begin Process"
			Write-Verbose " [Get-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			
			if ($Recurse)
			{
				$Keys = Get-RegistryKey -Path $path -ComputerName $ComputerName -Recurse
				foreach ($Key in $Keys)
				{
					if ($Name)
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
							$myobj = @{ } #| Select ComputerName,Name,Value,Type,Path
							$myobj.ComputerName = $ComputerName
							$myobj.Name = $Name
							$myobj.value = $Key.GetValue($Name)
							$myobj.Type = $Key.GetValueKind($Name)
							$myobj.path = $Key
							
							$obj = New-Object PSCustomObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
							$obj
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
						}
						
					}
					elseif ($Default)
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
							$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
							$myobj.ComputerName = $ComputerName
							$myobj.Name = "(Default)"
							$myobj.value = if ($Key.GetValue("")) { $Key.GetValue("") }
							else { "EMPTY" }
							$myobj.Type = if ($Key.GetValue("")) { $Key.GetValueKind("") }
							else { "N/A" }
							$myobj.path = $Key
							
							$obj = New-Object PSCustomObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
							$obj
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:(Default) in $($Key.Name)"
						}
					}
					else
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
							foreach ($ValueName in $Key.GetValueNames())
							{
								Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
								$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
								$myobj.ComputerName = $ComputerName
								$myobj.Name = if ($ValueName -match "^$") { "(Default)" }
								else { $ValueName }
								$myobj.value = $Key.GetValue($ValueName)
								$myobj.Type = $Key.GetValueKind($ValueName)
								$myobj.path = $Key
								
								$obj = New-Object PSCustomObject -Property $myobj
								$obj.PSTypeNames.Clear()
								$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
								$obj
							}
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$ValueName in $($Key.Name)"
						}
					}
				}
			}
			else
			{
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName
				Write-Verbose " [Get-RegistryValue] :: Get-RegistryKey returned $Key"
				if ($Name)
				{
					try
					{
						Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
						$myobj = @{ } # | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = $Name
						$myobj.value = $Key.GetValue($Name)
						$myobj.Type = $Key.GetValueKind($Name)
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
					catch
					{
						Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
					}
				}
				elseif ($Default)
				{
					try
					{
						Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
						$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = "(Default)"
						$myobj.value = if ($Key.GetValue("")) { $Key.GetValue("") }
						else { "EMPTY" }
						$myobj.Type = if ($Key.GetValue("")) { $Key.GetValueKind("") }
						else { "N/A" }
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
					catch
					{
						Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
					}
				}
				else
				{
					Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
					foreach ($ValueName in $Key.GetValueNames())
					{
						Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
						$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = if ($ValueName -match "^$") { "(Default)" }
						else { $ValueName }
						$myobj.value = $Key.GetValue($ValueName)
						$myobj.Type = $Key.GetValueKind($ValueName)
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
				}
			}
			
			Write-Verbose " [Get-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-Routetable 
	
	function Get-Routetable
	{
		
		    <#
		        .Synopsis 
		            Gets the route table for specified host.
		            
		        .Description
		            Gets the route table for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the route table from (Default is localhost.)
		            
		        .Example
		            Get-RouteTable
		            Description
		            -----------
		            Gets route table from local machine
		    
		        .Example
		            Get-RouteTable -ComputerName MyServer
		            Description
		            -----------
		            Gets route table from MyServer
		            
		        .Example
		            $Servers | Get-RouteTable
		            Description
		            -----------
		            Gets route table for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-RouteTable
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				$Routes = Get-WMIObject Win32_IP4RouteTable -ComputerName $ComputerName -Property Name, Mask, NextHop, Metric1, Type
				foreach ($Route in $Routes)
				{
					$myobj = @{ }
					$myobj.ComputerName = $ComputerName
					$myobj.Name = $Route.Name
					$myobj.NetworkMask = $Route.mask
					$myobj.Gateway = if ($Route.NextHop -eq "0.0.0.0") { "On-Link" }
					else { $Route.NextHop }
					$myobj.Metric = $Route.Metric1
					
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.RouteTable')
					$obj
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion 
	
	#region Get-SystemType 
	
	function Get-SystemType
	{
		
		    <#
		        .Synopsis 
		            Gets the system type for specified host
		            
		        .Description
		            Gets the system type info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the System Type from (Default is localhost.)
		            
		        .Example
		            Get-SystemType
		            Description
		            -----------
		            Gets System Type from local machine
		    
		        .Example
		            Get-SystemType -ComputerName MyServer
		            Description
		            -----------
		            Gets System Type from MyServer
		            
		        .Example
		            $Servers | Get-SystemType
		            Description
		            -----------
		            Gets System Type for each machine in the pipeline
		            
		        .OUTPUTS
		            PSObject
		            
		        .Notes
		            NAME:      Get-SystemType 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Begin
		{
			
			function ConvertTo-ChassisType($Type)
			{
				switch ($Type)
				{
					1    { "Other" }
					2    { "Unknown" }
					3    { "Desktop" }
					4    { "Low Profile Desktop" }
					5    { "Pizza Box" }
					6    { "Mini Tower" }
					7    { "Tower" }
					8    { "Portable" }
					9    { "Laptop" }
					10    { "Notebook" }
					11    { "Hand Held" }
					12    { "Docking Station" }
					13    { "All in One" }
					14    { "Sub Notebook" }
					15    { "Space-Saving" }
					16    { "Lunch Box" }
					17    { "Main System Chassis" }
					18    { "Expansion Chassis" }
					19    { "SubChassis" }
					20    { "Bus Expansion Chassis" }
					21    { "Peripheral Chassis" }
					22    { "Storage Chassis" }
					23    { "Rack Mount Chassis" }
					24    { "Sealed-Case PC" }
				}
			}
			function ConvertTo-SecurityStatus($Status)
			{
				switch ($Status)
				{
					1    { "Other" }
					2    { "Unknown" }
					3    { "None" }
					4    { "External Interface Locked Out" }
					5    { "External Interface Enabled" }
				}
			}
			
		}
		Process
		{
			
			Write-Verbose " [Get-SystemType] :: Process Start"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					Write-Verbose " [Get-SystemType] :: Getting System (Enclosure) Type info use WMI"
					$SystemInfo = Get-WmiObject Win32_SystemEnclosure -ComputerName $ComputerName
					$CSInfo = Get-WmiObject -Query "Select Model FROM Win32_ComputerSystem" -ComputerName $ComputerName
					
					Write-Verbose " [Get-SystemType] :: Creating Hash Table"
					$myobj = @{ }
					Write-Verbose " [Get-SystemType] :: Setting ComputerName   - $ComputerName"
					$myobj.ComputerName = $ComputerName
					
					Write-Verbose " [Get-SystemType] :: Setting Manufacturer   - $($SystemInfo.Manufacturer)"
					$myobj.Manufacturer = $SystemInfo.Manufacturer
					
					Write-Verbose " [Get-SystemType] :: Setting Module   - $($CSInfo.Model)"
					$myobj.Model = $CSInfo.Model
					
					Write-Verbose " [Get-SystemType] :: Setting SerialNumber   - $($SystemInfo.SerialNumber)"
					$myobj.SerialNumber = $SystemInfo.SerialNumber
					
					Write-Verbose " [Get-SystemType] :: Setting SecurityStatus - $($SystemInfo.SecurityStatus)"
					$myobj.SecurityStatus = ConvertTo-SecurityStatus $SystemInfo.SecurityStatus
					
					Write-Verbose " [Get-SystemType] :: Setting Type           - $($SystemInfo.ChassisTypes)"
					$myobj.Type = ConvertTo-ChassisType $SystemInfo.ChassisTypes
					
					Write-Verbose " [Get-SystemType] :: Creating Custom Object"
					$obj = New-Object PSCustomObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.SystemType')
					$obj
				}
				catch
				{
					Write-Verbose " [Get-SystemType] :: [$ComputerName] Failed with Error: $($Error[0])"
				}
			}
			
		}
		
	}
	
	#endregion 
	
	#region Get-USB
	
	function Get-USB
	{
		    <#
		    .Synopsis
		        Gets USB devices attached to the system
		    .Description
		        Uses WMI to get the USB Devices attached to the system
		    .Example
		        Get-USB
		    .Example
		        Get-USB | Group-Object Manufacturer  
		    .Parameter ComputerName
		        The name of the computer to get the USB devices from
		    #>
		param ($computerName = "localhost")
		Get-WmiObject Win32_USBControllerDevice -ComputerName $ComputerName `
					  -Impersonation Impersonate -Authentication PacketPrivacy |
		Foreach-Object { [Wmi]$_.Dependent }
	}
	#endregion
	
	#region Get-UserTxtBox
	function Get-UserTxtBox
	{ $global:UserName_Txt = $usertextbox.Text }
	#endregion
	
	#region Get-LocalAdmins
	function get-localadmins
	{
		[cmdletbinding()]
		Param (
			[string]$computerName
		)
		$group = get-wmiobject win32_group -ComputerName $computerName -Filter "LocalAccount=True AND SID='S-1-5-32-544'"
		$query = "GroupComponent = `"Win32_Group.Domain='$($group.domain)'`,Name='$($group.name)'`""
		$list = Get-WmiObject win32_groupuser -ComputerName $computerName -Filter $query
		$list | %{ $_.PartComponent } | % { $_.substring($_.lastindexof("Domain=") + 7).replace("`",Name=`"", "\") }
	}
	#endregion Get-LocalAdmins
	
	#region Get-ComputerStats
	function Get-ComputerStats
	{
		param (
			[Parameter(Mandatory = $true, Position = 0,
					   ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
			[ValidateNotNull()]
			[string[]]$ComputerNames
		)
		
		process
		{
			$avg = Get-WmiObject win32_processor -computername $computername |
			Measure-Object -property LoadPercentage -Average |
			Foreach { $_.Average }
			$mem = Get-WmiObject win32_operatingsystem -ComputerName $computername |
			Foreach { "{0:N2}" -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) * 100)/ $_.TotalVisibleMemorySize) }
			new-object psobject -prop @{
				# Work on PowerShell V2 and below
				# [pscustomobject] [ordered] @{ # Only if on PowerShell V3
				AverageCpuLoad = $avg
				MemoryUsagePercent = $mem
			}
		}
	}
	#endregion Get-ComputerStats
	
	# New Functions
	
	#region New-RegistryKey 
	
	function New-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Creates a new key in the provide by Path.
		            
		        .Description
		            Creates a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to create the key in.
		            
		        .Parameter ComputerName 
		            Computer to the create registry key on.
		            
		        .Parameter Name 
		            Name of the Key to create
		        
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		            
		        NAME:      New-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [New-RegistryKey] :: Start Begin"
			$ReadWrite = [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree
			
			Write-Verbose " [New-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [New-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [New-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [New-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [New-RegistryKey] :: End Begin"
			
		}
		Process
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Process"
			Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
				$Key = $BaseKey.OpenSubKey($KeyPath, $True)
				if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Key [$Name] under $Path"))
				{
					$Key.CreateSubKey($Name, $ReadWrite)
				}
			}
			Write-Verbose " [Get-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region New-RegistryValue 
	
	function New-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Create a value under the registry key.
		            
		        .Description
		            Create a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to create.
		            
		        .Parameter Value 
		            Value to for the new Value.
		            
		        .Parameter Type
		            Type for the new Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, a
		    nd Qword
		            
		        .Parameter ComputerName 
		            Computer to create the Value on.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Creates the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            
		        NAME:      Test-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[Parameter()]
			[string]$Type,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [New-RegistryValue] :: Start Begin"
			Write-Verbose " [New-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [New-RegistryValue] :: `$Name = $Name"
			Write-Verbose " [New-RegistryValue] :: `$Value = $Value"
			
			Switch ($Type)
			{
				"Unknown"       { $ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown; continue }
				"String"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
				"ExpandString"  { $ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString; continue }
				"Binary"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::Binary; continue }
				"DWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::DWord; continue }
				"MultiString"   { $ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString; continue }
				"QWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::QWord; continue }
				default { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
			}
			Write-Verbose " [New-RegistryValue] :: `$Type = $Type"
			Write-Verbose " [New-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			if (Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
			{
				"Registry value already exist"
			}
			else
			{
				Write-Verbose " [New-RegistryValue] :: Start Process"
				Write-Verbose " [New-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
				Write-Verbose " [New-RegistryValue] :: Get-RegistryKey returned $Key"
				Write-Verbose " [New-RegistryValue] :: Setting Value for [$Name]"
				if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Value [$Name] under $Path with value [$Value]"))
				{
					if ($Value)
					{
						$Key.SetValue($Name, $Value, $ValueType)
					}
					else
					{
						$Key.SetValue($Name, $ValueType)
					}
					Write-Verbose " [New-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
					Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
				}
			}
			Write-Verbose " [New-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Load Functions
	
	#region Load-ComboBox
	function Load-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion Load-Combobox
	
	#region Load-Chart
	function Load-Chart
	{
	<#
		.SYNOPSIS
			This functions helps you plot points on a chart
	
		.DESCRIPTION
			Use the function to plot points on a chart or add more charts to a chart control
	
		.PARAMETER  ChartControl
			The Chart Control you when to add points to
	
		.PARAMETER  XPoints
			Set the X Axis Points. These can be strings or numerical values.
	
		.PARAMETER  YPoints
			Set the Y Axis Points. These can be strings or numerical values.
		
		.PARAMETER  XTitle
			Set the Title for the X Axis.
	
		.PARAMETER  YTitle
			Set the Title for the Y Axis.
		
		.PARAMETER  Title
			Set the Title for the chart.
		
		.PARAMETER  ChartType
			Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum
	
		.PARAMETER SeriesIndex
			Set the settings of a particular Series and corresponding ChartArea
	
		.PARAMETER TitleIndex
			Set the settings of a particular Title
		
		.PARAMETER SeriesName
			Set the settings of a particular Series using its name and corresponding ChartArea. 
			The Series will be created if not found.
			If SeriesIndex is set, it will replace the Series' name if the Series does not exist
		
		.PARAMETER Enable3D
			The chart will be rendered in 3D.
		
		.PARAMETER Disable3D
			The chart will be rendered in 2D.	
		
		.PARAMETER Append
			When this switch is used, a new ChartArea is added to Chart Control.
	
		.LINK
			http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
		
	#>
		Param (#$XPoints, $YPoints, $XTitle, $YTitle, $Title, $ChartStyle)
			[ValidateNotNull()]
			[Parameter(Position = 1, Mandatory = $true)]
			[System.Windows.Forms.DataVisualization.Charting.Chart]
			$ChartControl
			,
			[ValidateNotNull()]
			[Parameter(Position = 2, Mandatory = $true)]
			$XPoints
			,
			[Parameter(Position = 3, Mandatory = $true)]
			$YPoints
			,
			[Parameter(Position = 4, Mandatory = $false)]
			[string]$XTitle
			,
			[Parameter(Position = 5, Mandatory = $false)]
			[string]$YTitle
			,
			[Parameter(Position = 6, Mandatory = $false)]
			[string]$Title
			,
			[Parameter(Position = 7, Mandatory = $false)]
			[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]
			$ChartType
			,
			[Parameter(Position = 8, Mandatory = $false)]
			$SeriesIndex = -1
			,
			[Parameter(Position = 9, Mandatory = $false)]
			$TitleIndex = 0,
			[Parameter(Mandatory = $false)]
			[string]$SeriesName = $null,
			[switch]$Enable3D,
			[switch]$Disable3D,
			[switch]$Append)
		
		$ChartAreaIndex = 0
		if ($Append)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			$ChartArea = $ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			
			$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
			$Series = $ChartControl.Series.Add($name)
			$SeriesIndex = $ChartControl.Series.Count - 1
			
			$Series.ChartArea = $ChartArea.Name
			
			if ($Title)
			{
				$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
		}
		else
		{
			if ($ChartControl.ChartAreas.Count -eq 0)
			{
				$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
				[void]$ChartControl.ChartAreas.Add($name)
				$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			}
			
			if ($ChartControl.Series.Count -eq 0)
			{
				if (-not $SeriesName)
				{
					$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
				}
				
				$Series = $ChartControl.Series.Add($SeriesName)
				$SeriesIndex = $ChartControl.Series.Count - 1
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			elseif ($SeriesName)
			{
				$Series = $ChartControl.Series.FindByName($SeriesName)
				
				if ($Series -eq $null)
				{
					if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
					{
						$Series = $ChartControl.Series[$SeriesIndex]
						$Series.Name = $SeriesName
					}
					else
					{
						$Series = $ChartControl.Series.Add($SeriesName)
						$SeriesIndex = $ChartControl.Series.Count - 1
					}
					
					$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
				}
				else
				{
					$SeriesIndex = $ChartControl.Series.IndexOf($Series)
					$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
				}
			}
		}
		
		if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
		{
			$SeriesIndex = 0
		}
		
		$Series = $ChartControl.Series[$SeriesIndex]
		$Series.Points.Clear()
		$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
		
		if ($Enable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $true
		}
		elseif ($Disable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $false
		}
		
		if ($Title)
		{
			if ($ChartControl.Titles.Count -eq 0)
			{
				#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
			
			$ChartControl.Titles[$TitleIndex].Text = $Title
		}
		
		if ($ChartType)
		{
			$Series.ChartType = $ChartType
		}
		
		if ($XTitle)
		{
			$ChartArea.AxisX.Title = $XTitle
		}
		
		if ($YTitle)
		{
			$ChartArea.AxisY.Title = $YTitle
		}
		
		if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($XPoints)
			$XPoints = $array
		}
		
		if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($YPoints)
			$YPoints = $array
		}
		
		$Series.Points.DataBindXY($XPoints, $YPoints)
		
	}
	#endregion Load-Chart
	
	#region Load-ListBox
	function Load-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion Load-ListBo
	
	# Remove Functions
	
	#region Remove-RegistryKey 
	
	function Remove-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Removes a new key in the provide by Path.
		            
		        .Description
		            Removes a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to remove the registry key from.
		            
		        .Parameter ComputerName 
		            Computer to remove the registry key from.
		            
		        .Parameter Name 
		            Name of the registry key to remove.
		            
		        .Parameter Recurse 
		            Recursively removes registry key and all children from path.
		        
		        .Example
		            Remove-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Removes the registry key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1 and all child keys.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            New-RegistryKey
		            Test-RegistryKey
		            
		        .Notes
		        NAME:      Remove-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse
		)
		Begin
		{
			
			Write-Verbose " [Remove-RegistryKey] :: Start Begin"
			
			Write-Verbose " [Remove-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Remove-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Remove-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Remove-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Remove-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Remove-RegistryKey] :: Start Process"
			Write-Verbose " [Remove-RegistryKey] :: `$ComputerName = $ComputerName"
			
			if (Test-RegistryKey -Path $path\$name -ComputerName $ComputerName)
			{
				$RegHive = Get-RegistryHive $hive
				
				if ($RegHive -eq 1)
				{
					Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
				}
				else
				{
					Write-Verbose " [Remove-RegistryKey] :: `$RegHive = $RegHive"
					$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
					Write-Verbose " [Remove-RegistryKey] :: `$BaseKey = $BaseKey"
					
					$Key = $BaseKey.OpenSubKey($KeyPath, $True)
					
					if ($PSCmdlet.ShouldProcess($ComputerName, "Deleteing Key [$Name]"))
					{
						if ($Recurse)
						{
							Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKeyTree($Name)"
							$Key.DeleteSubKeyTree($Name)
						}
						else
						{
							Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKey($Name)"
							$Key.DeleteSubKey($Name)
						}
					}
				}
			}
			else
			{
				"Key [$path\$name] does not exist"
			}
			Write-Verbose " [Remove-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Remove-RegistryValue 
	
	function Remove-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Removes the value.
		            
		        .Description
		            Removes the value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to Remove.
		    
		        .Parameter ComputerName 
		            Computer to remove value from.
		            
		        .Example
		            Remove-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Remove-RegistryValue HKLM\Software\Adobe\MyKey -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Test-RegistryValue
		            Get-RegistryValue
		            Set-RegistryValue
		            
		        NAME:      Remove-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [Remove-RegistryValue] :: Start Begin"
			
			Write-Verbose " [Remove-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [Remove-RegistryValue] :: `$Name = $Name"
			
			Write-Verbose " [Remove-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			if (Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
			{
				Write-Verbose " [Remove-RegistryValue] :: Start Process"
				Write-Verbose " [Remove-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
				Write-Verbose " [Remove-RegistryValue] :: Get-RegistryKey returned $Key"
				Write-Verbose " [Remove-RegistryValue] :: Setting Value for [$Name]"
				if ($PSCmdlet.ShouldProcess($ComputerName, "Deleting Value [$Name] under $Path"))
				{
					$Key.DeleteValue($Name)
				}
			}
			else
			{
				"Registry Value is already gone"
			}
			
			Write-Verbose " [Remove-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Runner Functions
	
	#region Run-RemoteCMD
	#http://gallery.technet.microsoft.com/scriptcenter/56962f03-0243-4c83-8cdd-88c37898ccc4
	function Run-RemoteCMD
	{
		param (
			[Parameter(Mandatory = $true, valuefrompipeline = $true)]
			[string]$ComputerName,
			[string]$Command)
		begin
		{
			
			[string]$cmd = "CMD.EXE /C " + $command
		}
		process
		{
			$newproc = Invoke-WmiMethod -class Win32_process -name Create -ArgumentList ($cmd) -ComputerName $ComputerName
			if ($newproc.ReturnValue -eq 0)
			{ Add-RichTextBoxOK "Command $($command) invoked Sucessfully on $($ComputerName)" }
			# if command is sucessfully invoked it doesn't mean that it did what its supposed to do 
			#it means that the command only sucessfully ran on the cmd.exe of the server 
			#syntax errors can occur due to user input  
		}
		End { Write-Output "Script ...END" }
	}
	#endregion
	
	# Searcher Functions
	
	#region Search-Registry 
	
	function Search-Registry
	{
		
		    <#
		        .Synopsis 
		            Searchs the Registry.
		            
		        .Description
		            Searchs the Registry.
		                        
		        .Parameter Filter 
		            The RegEx filter you want to search for.
		            
		        .Parameter Name 
		            Name of the Key or Value you want to search for.
		        
		        .Parameter Value
		            Value to search for (Registry Values only.)
		            
		        .Parameter Path
		            Base of the Search. Should be in this format: "Software\Microsoft\..." See the Examples for specific exampl
		    es.
		            
		        .Parameter Hive
		            The Base Hive to search in (Default to LocalMachine.)
		            
		        .Parameter ComputerName 
		            Computer to search.
		            
		        .Parameter KeyOnly
		            Only returns Registry Keys. Not valid with -value parameter.
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients" -computername MyServer1
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients" on MyServer1
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry keys and values with name 'Powershell' in "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients" -KeyOnly
		            Description
		            -----------
		            Searchs the Registry keys with name 'Powershell' in "SOFTWARE\Clients"
		        
		        .Example
		            Search-Registry -Hive HKLM -Value "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry Values with Value of 'Powershell' in "SOFTWARE\Clients"
		            
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Get-RegistryValue
		            Test-RegistryKey
		        
		        .Notes
		            NAME:      Search-Registry
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(DefaultParameterSetName = "ByFilter")]
		Param (
			[Parameter(ParameterSetName = "ByFilter", Position = 0)]
			[string]$Filter = ".*",
			[Parameter(ParameterSetName = "ByName", Position = 0)]
			[string]$Name,
			[Parameter(ParameterSetName = "ByValue", Position = 0)]
			[string]$Value,
			[Parameter()]
			[string]$Path,
			[Parameter()]
			[string]$Hive = "LocalMachine",
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME,
			[Parameter()]
			[switch]$KeyOnly
		)
		Begin
		{
			
			Write-Verbose " [Search-Registry] :: Start Begin"
			
			Write-Verbose " [Search-Registry] :: Active Parameter Set $($PSCmdlet.ParameterSetName)"
			switch ($PSCmdlet.ParameterSetName)
			{
				"ByFilter"    { Write-Verbose " [Search-Registry] :: `$Filter = $Filter" }
				"ByName"    { Write-Verbose " [Search-Registry] :: `$Name = $Name" }
				"ByValue"    { Write-Verbose " [Search-Registry] :: `$Value = $Value" }
			}
			$RegHive = Get-RegistryHive $Hive
			Write-Verbose " [Search-Registry] :: `$Hive = $RegHive"
			Write-Verbose " [Search-Registry] :: `$KeyOnly = $KeyOnly"
			
			Write-Verbose " [Search-Registry] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Search-Registry] :: Start Process"
			
			Write-Verbose " [Search-Registry] :: `$ComputerName = $ComputerName"
			switch ($PSCmdlet.ParameterSetName)
			{
				"ByFilter"    {
					if ($KeyOnly)
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
					else
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
							Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
									Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
				}
				"ByName"    {
					if ($KeyOnly)
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							$NameFilter = "^.*\\{0}$" -f $Name
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									$NameFilter = "^.*\\{0}$" -f $Name
									Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
					else
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							$NameFilter = "^.*\\{0}$" -f $Name
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
							Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -eq $Name }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									$NameFilter = "^.*\\{0}$" -f $Name
									Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
									Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -eq $Name }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
				}
				"ByValue"    {
					if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
					{
						Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Value -eq $Value }
					}
					else
					{
						$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
						foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
						{
							try
							{
								$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
								Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Value -eq $Value }
							}
							catch
							{
								Write-Host "Access Error on Key [$SubKeyName]... skipping."
							}
						}
					}
				}
			}
			
			Write-Verbose " [Search-Registry] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Sender Functions
	
	#region Send-WOL
	function Send-WOL
	{
	<#  
	  .SYNOPSIS   
	    Send a WOL packet to a broadcast address 
	  .PARAMETER mac 
	   The MAC address of the device that need to wake up 
	  .PARAMETER ip 
	   The IP address where the WOL packet will be sent to 
	  .EXAMPLE  
	   Send-WOL -mac 00:11:32:21:2D:11 -ip 192.168.8.255  
	#>	
		
		param (
			[string]$mac,
			[string]$ip,
			[int]$port = 9
		)
		$broadcast = [Net.IPAddress]::Parse($ip)
		
		$mac = (($mac.replace(":", "")).replace("-", "")).replace(".", "")
		$target = 0, 2, 4, 6, 8, 10 | % { [convert]::ToByte($mac.substring($_, 2), 16) }
		$packet = (, [byte]255 * 6) + ($target * 16)
		
		$UDPclient = new-Object System.Net.Sockets.UdpClient
		$UDPclient.Connect($broadcast, $port)
		[void]$UDPclient.Send($packet, 102)
		
	}
	#endregion Send-WOL
	
	# Setter Functions
	
	#region Set-RegistryValue 
	
	function Set-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Sets a value under the registry key.
		            
		        .Description
		            Sets a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to Set.
		            
		        .Parameter Value 
		            New Value.
		            
		        .Parameter Type
		            Type for the Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, and Q
		    word
		            
		        .Parameter ComputerName 
		            Computer to set the Value on.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Sets the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            Test-RegistryValue
		        
		        .Notes
		            NAME:      Set-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[Parameter()]
			[string]$Type,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		
		Begin
		{
			
			Write-Verbose " [Set-RegistryValue] :: Start Begin"
			
			Write-Verbose " [Set-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [Set-RegistryValue] :: `$Name = $Name"
			Write-Verbose " [Set-RegistryValue] :: `$Value = $Value"
			
			Switch ($Type)
			{
				"Unknown"       { $ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown; continue }
				"String"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
				"ExpandString"  { $ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString; continue }
				"Binary"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::Binary; continue }
				"DWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::DWord; continue }
				"MultiString"   { $ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString; continue }
				"QWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::QWord; continue }
				default { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
			}
			Write-Verbose " [Set-RegistryValue] :: `$Type = $Type"
			
			Write-Verbose " [Set-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Set-RegistryValue] :: Start Process"
			
			Write-Verbose " [Set-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
			Write-Verbose " [Set-RegistryValue] :: Get-RegistryKey returned $Key"
			Write-Verbose " [Set-RegistryValue] :: Setting Value for [$Name]"
			if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Value [$Name] under $Path with value [$Value]"))
			{
				if ($Value)
				{
					$Key.SetValue($Name, $Value, $ValueType)
				}
				else
				{
					$Key.SetValue($Name, $ValueType)
				}
				Write-Verbose " [Set-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
				Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
			}
			Write-Verbose " [Set-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Show Functions
	
	#region Show-MsgBox
		<# 
		            .SYNOPSIS  
		            Shows a graphical message box, with various prompt types available. 
		 
		            .DESCRIPTION 
		            Emulates the Visual Basic MsgBox function.  It takes four parameters, of which only the prompt is mandatory 
		 
		            .INPUTS 
		            The parameters are:- 
		             
		            Prompt (mandatory):  
		                Text string that you wish to display 
		                 
		            Title (optional): 
		                The title that appears on the message box 
		                 
		            Icon (optional).  Available options are: 
		                Information, Question, Critical, Exclamation (not case sensitive) 
		                
		            BoxType (optional). Available options are: 
		                OKOnly, OkCancel, AbortRetryIgnore, YesNoCancel, YesNo, RetryCancel (not case sensitive) 
		                 
		            DefaultButton (optional). Available options are: 
		                1, 2, 3 
		 
		            .OUTPUTS 
		            Microsoft.VisualBasic.MsgBoxResult 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox Hello 
		            Shows a popup message with the text "Hello", and the default box, icon and defaultbutton settings. 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox -Prompt "This is the prompt" -Title "This Is The Title" -Icon Critical -BoxType YesNo -DefaultButton 2 
		            Shows a popup with the parameter as supplied. 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxresult.aspx 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxstyle.aspx 
		            #>
	# By BigTeddy August 24, 2011 
	# http://social.technet.microsoft.com/profile/bigteddy/. 
	
	function Show-MsgBox
	{
		
		[CmdletBinding()]
		param (
			[Parameter(Position = 0, Mandatory = $true)]
			[string]$Prompt,
			[Parameter(Position = 1, Mandatory = $false)]
			[string]$Title = "",
			[Parameter(Position = 2, Mandatory = $false)]
			[ValidateSet("Information", "Question", "Critical", "Exclamation")]
			[string]$Icon = "Information",
			[Parameter(Position = 3, Mandatory = $false)]
			[ValidateSet("OKOnly", "OKCancel", "AbortRetryIgnore", "YesNoCancel", "YesNo", "RetryCancel")]
			[string]$BoxType = "OkOnly",
			[Parameter(Position = 4, Mandatory = $false)]
			[ValidateSet(1, 2, 3)]
			[int]$DefaultButton = 1
		)
		[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.VisualBasic") | Out-Null
		switch ($Icon)
		{
			"Question" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Question }
			"Critical" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Critical }
			"Exclamation" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Exclamation }
			"Information" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Information }
		}
		switch ($BoxType)
		{
			"OKOnly" { $vb_box = [microsoft.visualbasic.msgboxstyle]::OKOnly }
			"OKCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::OkCancel }
			"AbortRetryIgnore" { $vb_box = [microsoft.visualbasic.msgboxstyle]::AbortRetryIgnore }
			"YesNoCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::YesNoCancel }
			"YesNo" { $vb_box = [microsoft.visualbasic.msgboxstyle]::YesNo }
			"RetryCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::RetryCancel }
		}
		switch ($Defaultbutton)
		{
			1 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton1 }
			2 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton2 }
			3 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton3 }
		}
		$popuptype = $vb_icon -bor $vb_box -bor $vb_defaultbutton
		$ans = [Microsoft.VisualBasic.Interaction]::MsgBox($prompt, $popuptype, $title)
		return $ans
	} #end
	#endregion
	
	#region Show-InputBox
	#http://www.sapien.com/forums/scriptinganswers/forum_posts.asp?TID=2890
	#$c=Show-Inputbox -message "Enter a computername" -title "Computername" -default $env:Computername
	#
	#if ($c.Trim()) {
	#  Get-WmiObject win32_computersystem -computer $c
	#  }
	Function Show-InputBox
	{
		Param ([string]$message = $(Throw "You must enter a prompt message"),
			[string]$title = "Input",
			[string]$default
		)
		
		[reflection.assembly]::loadwithpartialname("microsoft.visualbasic") | Out-Null
		[microsoft.visualbasic.interaction]::InputBox($message, $title, $default)
		
	}
	#endregion
	
	# Sort Functions
	
	#region Sort-ListViewColumn
	function Sort-ListViewColumn
	{
		<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
	
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
	
		.PARAMETER ListView
			The ListView control to sort.
	
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
			
		.PARAMETER  SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
	#>
		param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[Parameter(Mandatory = $true)]
			[int]$ColumnIndex,
			[System.Windows.Forms.SortOrder]$SortOrder = 'None')
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			$local:type = [ListViewItemComparer]
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($Sort -eq [System.Windows.Forms.SortOrder]::None)
			{
				$Sort = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	#endregion
	
	# Tester Functions
	
	#region Test-Host 
	
	function Test-Host
	{
		
		    <#
		        .Synopsis 
		            Test a host for connectivity using either WMI ping or TCP port
		            
		        .Description
		            Allows you to test a host for connectivity before further processing
		            
		        .Parameter Server
		            Name of the Server to Process.
		            
		        .Parameter TCPPort
		            TCP Port to connect to. (default 135)
		            
		        .Parameter Timeout
		            Timeout for the TCP connection (default 1 sec)
		            
		        .Parameter Property
		            Name of the Property that contains the value to test.
		            
		        .Example
		            cat ServerFile.txt | Test-Host | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts.
		            
		        .Example
		            cat ServerFile.txt | Test-Host -tcp 80 | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts against port 80.
		            
		        .Example
		            Get-ADComputer | Test-Host -property dnsHostname | Invoke-DoSomething
		            Description
		            -----------
		            To test the output of Get-ADComputer using the dnshostname property
		            
		            
		        .OUTPUTS
		            System.Object
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Port
		            
		        NAME:      Test-Host
		        AUTHOR:    YetiCentral\bshell
		        Website:   www.bsonposh.com
		        LASTEDIT:  02/04/2009 18:25:15
		        #Requires -Version 2.0
		    #>
		
		[CmdletBinding()]
		Param (
			
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true, Mandatory = $True)]
			[string]$ComputerName,
			[Parameter()]
			[int]$TCPPort = 80,
			[Parameter()]
			[int]$timeout = 3000,
			[Parameter()]
			[string]$property
			
		)
		Begin
		{
			
			function PingServer
			{
				Param ($MyHost)
				$ErrorActionPreference = "SilentlyContinue"
				Write-Verbose " [PingServer] :: Pinging [$MyHost]"
				try
				{
					$pingresult = Get-WmiObject win32_pingstatus -f "address='$MyHost'"
					$ResultCode = $pingresult.statuscode
					Write-Verbose " [PingServer] :: Ping returned $ResultCode"
					if ($ResultCode -eq 0) { $true }
					else { $false }
				}
				catch
				{
					Write-Verbose " [PingServer] :: Ping Failed with Error: ${error[0]}"
					$false
				}
			}
			
		}
		
		Process
		{
			
			Write-Verbose " [Test-Host] :: Begin Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			Write-Verbose " [Test-Host] :: ComputerName   : $ComputerName"
			if ($TCPPort)
			{
				Write-Verbose " [Test-Host] :: Timeout  : $timeout"
				Write-Verbose " [Test-Host] :: Port     : $TCPPort"
				if ($property)
				{
					Write-Verbose " [Test-Host] :: Property : $Property"
					$Result = Test-Port $_.$property -tcp $TCPPort -timeout $timeout
					if ($Result)
					{
						if ($_) { $_ }
						else { $ComputerName }
					}
				}
				else
				{
					Write-Verbose " [Test-Host] :: Running - 'Test-Port $ComputerName -tcp $TCPPort -timeout $timeout'"
					$Result = Test-Port $ComputerName -tcp $TCPPort -timeout $timeout
					if ($Result)
					{
						if ($_) { $_ }
						else { $ComputerName }
					}
				}
			}
			else
			{
				if ($property)
				{
					Write-Verbose " [Test-Host] :: Property : $Property"
					try
					{
						if (PingServer $_.$property)
						{
							if ($_) { $_ }
							else { $ComputerName }
						}
					}
					catch
					{
						Write-Verbose " [Test-Host] :: $($_.$property) Failed Ping"
					}
				}
				else
				{
					Write-Verbose " [Test-Host] :: Simple Ping"
					try
					{
						if (PingServer $ComputerName) { $ComputerName }
					}
					catch
					{
						Write-Verbose " [Test-Host] :: $ComputerName Failed Ping"
					}
				}
			}
			Write-Verbose " [Test-Host] :: End Process"
			
		}
		
	}
	
	#endregion 
	
	#region Test-Port 
	
	function Test-Port
	{
		
		    <#
		        .Synopsis 
		            Test a host to see if the specified port is open.
		            
		        .Description
		            Test a host to see if the specified port is open.
		                        
		        .Parameter TCPPort 
		            Port to test (Default 135.)
		            
		        .Parameter Timeout 
		            How long to wait (in milliseconds) for the TCP connection (Default 3000.)
		            
		        .Parameter ComputerName 
		            Computer to test the port against (Default in localhost.)
		            
		        .Example
		            Test-Port -tcp 3389
		            Description
		            -----------
		            Returns $True if the localhost is listening on 3389
		            
		        .Example
		            Test-Port -tcp 3389 -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if MyServer1 is listening on 3389
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Host
		            Wait-Port
		            
		        .Notes
		            NAME:      Test-Port
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter()]
			[int]$TCPport = 135,
			[Parameter()]
			[int]$TimeOut = 3000,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[String]$ComputerName = $env:COMPUTERNAME
		)
		Begin
		{
			Write-Verbose " [Test-Port] :: Start Script"
			Write-Verbose " [Test-Port] :: Setting Error state = 0"
		}
		
		Process
		{
			
			Write-Verbose " [Test-Port] :: Creating [system.Net.Sockets.TcpClient] instance"
			$tcpclient = New-Object system.Net.Sockets.TcpClient
			
			Write-Verbose " [Test-Port] :: Calling BeginConnect($ComputerName,$TCPport,$null,$null)"
			try
			{
				$iar = $tcpclient.BeginConnect($ComputerName, $TCPport, $null, $null)
				Write-Verbose " [Test-Port] :: Waiting for timeout [$timeout]"
				$wait = $iar.AsyncWaitHandle.WaitOne($TimeOut, $false)
			}
			catch [System.Net.Sockets.SocketException]
			{
				Write-Verbose " [Test-Port] :: Exception: $($_.exception.message)"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			catch
			{
				Write-Verbose " [Test-Port] :: General Exception"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			
			if (!$wait)
			{
				$tcpclient.Close()
				Write-Verbose " [Test-Port] :: Connection Timeout"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			else
			{
				Write-Verbose " [Test-Port] :: Closing TCP Socket"
				try
				{
					$tcpclient.EndConnect($iar) | out-Null
					$tcpclient.Close()
				}
				catch
				{
					Write-Verbose " [Test-Port] :: Unable to Close TCP Socket"
				}
				$true
			}
		}
		End
		{
			Write-Verbose " [Test-Port] :: End Script"
		}
	}
	#endregion 
	
	#region Test-PSRemoting
	
	function Test-PSRemoting
	{
		Param (
			[alias('dnsHostName')]
			[Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName
		)
		Process
		{
			Write-Verbose " [Test-PSRemoting] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			
			try
			{
				
				$result = Invoke-Command -ComputerName $computername { 1 } -ErrorAction SilentlyContinue
				
				if ($result -eq 1)
				{
					return $True
				}
				else
				{
					return $False
				}
			}
			catch
			{
				return $False
			}
		}
	}
	
	#endregion
	
	#region Test-RegistryKey 
	
	function Test-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Test for given the registry key.
		            
		        .Description
		            Test for given the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to test the registry key on.
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Get-RegistryKey
		        
		        .Notes
		            NAME:      Test-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			
			[Parameter(ValueFromPipelineByPropertyName = $True, mandatory = $true)]
			[string]$Path,
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Begin
		{
			
			Write-Verbose " [Test-RegistryKey] :: Start Begin"
			
			Write-Verbose " [Test-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Test-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Test-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Test-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Test-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Test-RegistryKey] :: Start Process"
			
			Write-Verbose " [Test-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Test-RegistryKey] :: `$RegHive = $RegHive"
				
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Test-RegistryKey] :: `$BaseKey = $BaseKey"
				
				Try
				{
					$Key = $BaseKey.OpenSubKey($KeyPath)
					if ($Key)
					{
						$true
					}
					else
					{
						$false
					}
				}
				catch
				{
					$false
				}
			}
			Write-Verbose " [Test-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Test-RegistryValue 
	
	function Test-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Test the value for given the registry value.
		            
		        .Description
		            Test the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter Value 
		            Value to check for.
		            
		        .Parameter ComputerName 
		            Computer to test.
		            
		        .Example
		            Test-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State -Value 0
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0
		            
		        .Example
		            Test-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0 on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		        
		        .Notes    
		            NAME:      Test-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Process
		{
			
			Write-Verbose " [Test-RegistryValue] :: Begin Process"
			Write-Verbose " [Test-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName
			Write-Verbose " [Test-RegistryValue] :: Get-RegistryKey returned $Key"
			if ($Value)
			{
				try
				{
					$CurrentValue = $Key.GetValue($Name)
					$Value -eq $CurrentValue
				}
				catch
				{
					$false
				}
			}
			else
			{
				try
				{
					$CurrentValue = $Key.GetValue($Name)
					if ($CurrentValue) { $True }
					else { $false }
				}
				catch
				{
					$false
				}
			}
			Write-Verbose " [Test-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Test-TcpPort
	function Test-TcpPort ($ComputerName, [int]$port = 80)
	{
		$socket = new-object Net.Sockets.TcpClient
		$socket.Connect($ComputerName, $port)
		if ($socket.Connected)
		{
			$status = "Open"
			$socket.Close()
		}
		else
		{
			$status = "Closed / Filtered"
		}
		$socket = $null
		Add-RichTextBox "ComputerName:$ComputerName`nPort:$port`nStatus:$status"
	}
	#endregion
	
	# Taskmanager Functions
	#region initialize-stuff
	function initialize-stuff
	{
		### Basically just an initialization routine for the hashes and the drawing objects.
		$server = $things["machine"];
		update-Status-Label "Initializing server information...";
		$label3.update();
		$available = load-os-info $server;
		update-Status-Label "Initializing processes...";
		
		$ysize = 0;
		$procs = return-win32_perfrawdata_perfproc_process $server;
		foreach ($proc in $procs)
		{
			if ($proc.IDProcess -eq 0)
			{
				$beforeprocs[0] = $proc.percentprocessortime;
			}
			else
			{
				$beforeprocs.Add($proc.IDProcess, $proc.percentprocessortime);
			}
		}
		
		update-Status-Label "Initializing CPU...";
		$t1 = return-win32_PerfRawData_PerfOS_processor $server;
		$ch = new-object system.drawing.drawing2d.HatchBrush([system.drawing.drawing2d.hatchstyle]::LargeGrid, $things["colors"][1], $things["colors"][2]);
		
		update-Status-Label "Initializing graphics...";
		$orderarray = New-Object -TypeName System.Collections.ArrayList;
		foreach ($cpu in $t1) { $orderarray.add($cpu.name); }
		$y = 100;
		$x = -550;
		$counter = 0;
		for ($j = 0; $j -lt $orderarray.count; $j++)
		{
			$t = "";
			$key = $orderarray[$j];
			foreach ($bob in $t1) { if ($bob.Name -eq $key) { $t = $bob; } }
			if (($counter % 8) -eq 0)
			{
				$y = 100;
				$x += 600;
				$xstrpt = $x - 50;
			}
			$keyhash.Add($key, @($t.percentprocessortime, $t.timestamp_sys100ns));
			$pointhash.Add($key, @());
			$ysize += 105;
			$rect = new-object system.drawing.rectangle(($x + 1), ($y - 100), 500, 99);
			$point = new-object system.drawing.pointf(($x - 50), ($y - 15));
			$point2 = new-object system.drawing.pointf(($x - 50), ($y - 50));
			$parms.Add($key, @($x, $y, 0.0, $rect, $ch, $point, $point2));
			$points = @(new-object system.drawing.point($x, $y));
			$hash.Add($key, @());
			$y = $y + 100;
			$counter++;
		}
		$keyhash.Add("Memory", @(0.0, 0.0));
		$pointhash.Add("Memory", @());
		$hash.Add("Memory", @());
		$xsize = [int32]((($counter/8) + 1) * 575);
		if ($ysize -gt 500) { $ysize = 500; }
		
		#### Memory
		if ((($counter % 8) -eq 0) -OR (($y + 300) -gt 900))
		{
			$y = 100;
			$x += 600;
			$xstrpt = $x - 50;
		}
		else { $ysize += 300; }
		$rect = new-object system.drawing.rectangle(($x + 1), $y, 500, 199);
		$y += 200;
		$ystrpt = $y - 15;
		$point = new-object system.drawing.pointf(($x - 50), ($y - 15));
		$xstrpt = $x - 50;
		$ystrpt = $y - 50;
		$point2 = new-object system.drawing.pointf(($x - 50), ($y - 50));
		$point3 = new-object system.drawing.pointf(($x - 50), ($y - 70));
		$parms.Add("Memory", @($x, $y, 0.0, $rect, $ch, $point, $point2, 0.0, $point3));
		
		update-Status-Label "Updating CPU...";
		
		get-allCPU;
		$parms.Add("Bitmap", @($xsize, $ysize));
		#$picturebox1.AutoScrollMargin = new-object System.Drawing.Size($xsize, $ysize);
		update-Status-Label "";
	}
	#endregion initialize-stuff
	
	#region update-serverdatetime
	function update-serverdatetime
	{
		param ($server);
	}
	#endregion update-serverdatetime
	
	#region load-os-info
	function load-os-info
	{
		param ($server);
		### This was an afterthought sort of like the services tab. It occurred to me that it might be nice to know some of the details
		### about the machine and the OS running on it. All this does is create a bunch of labels on $Tab4 and fill in the information.
		### The only one that's different is the label that shows the localdatetime. That is created in BuildTheForm() so it can be
		### updated every time we refresh the processes.
		while ($Tab4.Controls.count -gt 1) { foreach ($item in $Tab4.Controls) { if ($item.name -ne "ServerTime_Label") { $item.dispose(); } } }
		$tm = 0;
		$cs = CIM-Stuff win32_computersystem;
		$prcsrs = CIM-Stuff win32_processor;
		$srv = CIM-Stuff Win32_OperatingSystem;
		$mem = CIM-Stuff CIM_PhysicalMemory;
		$mem | % { $tm += $_.capacity; }
		$caption = $srv.caption;
		$y = 20;
		$x = 20;
		
		
		$arch = "32-bit";
		if (($srv.OSArchitecture).length -gt 0) { $arch = $srv.OSArchitecture; }
		elseif ($srv.caption -match "x64") { $arch = "64-bit"; }
		foreach ($m in $mem)
		{
			$l = $m.tag + " (" + $m.devicelocator.trimend() + ") | " + (dsize $m.capacity);
			if ($m.speed -gt $null) { $l += " | Speed = " + $m.speed.tostring() + " ns"; }
			$st = "OK";
			if ($m.status -gt $null) { $st = $m.status; }
			$l += " | Status = " + $st;
		}
		
		foreach ($p in $prcsrs)
		{
			$noc = "";
			if ($p.numberofcores -ne $null) { $noc = " -- " + $p.numberofcores + " Cores"; }
		}
		
		
		### If this is an older OS, we need to use Win32_LogicalDisk to get the list of disks. If it's running a later OS, we can use
		### Win32_Volume which will also list the mount points (if any).
		$vlen = 20;
		if ($caption -match "2000")
		{
			$hds = CIM-Stuff Win32_LogicalDisk "DriveType=3" |
			select-object -property @{ expression = { $_.deviceid }; name = "VolumeName" }, @{ expression = { $_.size }; name = "Capacity" },
						  FreeSpace, @{ expression = { $_.volumename }; name = "Label" };
		}
		else
		{
			$hds = CIM-Stuff Win32_Volume "DriveType=3" |
			select-object -property @{ expression = { $_.name }; name = "VolumeName" }, Capacity, FreeSpace, Label;
		}
		
		$hds = $hds | sort-object -property VolumeName;
		foreach ($d in $hds) { if ($d.VolumeName.length -gt $vlen) { $vlen = $d.VolumeName.length; } }
		
		$x = ($vlen * 9);
		$cs.totalphysicalmemory;
	}
	#endregion load-os-info
	
	#region display-myMessageBox
	function display-myMessageBox
	{
		param ($msg);
		$myMessageBox = new-object System.Windows.Forms.Form;
		$myMB_TextBox = new-object System.Windows.Forms.TextBox;
		$myMessageBox.cancelbutton = $Cancel_Button;
		$myMB_TextBox.Anchor = "Left, Top, Right, Bottom";
		$myMB_TextBox.Location = new-object system.drawing.point(0, 0);
		$myMB_TextBox.font = $fonts["cn8"];
		$myMB_TextBox.Name = "myMB_TextBox";
		$myMB_TextBox.multiline = $true;
		$myMB_TextBox.Text = "";
		$myMessageBox.Controls.Add($myMB_TextBox);
		$array = $msg.split("`n");
		$count = $array.count;
		$w = 0;
		foreach ($line in $array) { if ($line.length -gt $w) { $w = $line.length; } }
		$height = $count * 14.0;
		$width = $w * 8.25;
		$myMessageBox.ClientSize = new-object System.Drawing.Size($width, $height);
		$myMB_TextBox.ClientSize = new-object System.Drawing.Size($width, $height);
		$myMB_TextBox.text = $msg;
		$IFWS = new-object System.Windows.Forms.FormWindowState;
		$IFWS = $myMessageBox.WindowState;
		$myMessageBox.TopMost = $true;
		$myMessageBox.Refresh();
		$myMessageBox.BringToFront();
		$myMessageBox.add_Load($OnLoadForm_StateCorrection);
		$myMessageBox.Show() | Out-Null;
	}
	#endregion display-myMessageBox
	
	#region get-services
	function get-services
	{
		### Simply loads the services on the Services tab ($Tab3).
		$server = $things["machine"];
		$listview2.Items.Clear();
		foreach ($s in (return-win32_Service $server))
		{
			$lvi = new-object system.windows.forms.ListViewItem($s.displayname);
			if ($s.description -eq $null) { $s.description = ""; }
			foreach ($c in (1..($listview2.columns.count - 1)))
			{
				$name = $listview2.columns[$c].name;
				$lvi.subitems.add($s.$name);
			}
			
			$listview2.Items.Add($lvi);
		}
		
		$error.clear;
	}
	#endregion get-services
	
	#region get-processes
	function get-processes
	{
		param ($update);
		### Loads and updates the $listview1 listview on $Tab1.
		$server = $things["machine"];
		$procs = return-win32_perfrawdata_perfproc_process $server;
		$idle = $cpu = $totalcpu = $totalcpuUsed = 0;
		$procs | % { if ($_.name -eq "_Total") { $totalcpu = [long]$_.percentprocessortime - [long]$beforeprocs[$_.IDProcess]; } };
		if ($update -eq $false)
		{
			$listview1.items.clear();
			$users = @{ };
			foreach ($proc in (CIM-Stuff win32_process))
			{
				$users.add($proc.ProcessID, ($proc |
				Invoke-CimMethod -CimSession $things["session"] -MethodName GetOwner).user);
			}
		}
		
		drop-dead-procs $procs;
		foreach ($proc in $procs)
		{
			$idproc = $proc.IDProcess;
			if ($proc.Name -eq "Idle")
			{
				$idle = kbytes $proc.WorkingSet;
				if ($update -eq $false) { make-listviewitem $proc $null; }
			}
			elseif ($proc.Name -ne "_Total")
			{
				if ($update -eq $false)
				{
					$cpu = pcnt-cpu $proc.percentprocessortime $beforeprocs[$idproc] $totalcpu;
					$totalcpuUsed += $cpu;
					make-listviewitem $proc $users[$idproc];
				}
				elseif ($beforeprocs[$idproc] -eq $null)
				{
					### If this is a new process, create a ListViewItem for it.
					$beforeprocs.Add($idproc, $proc.percentprocessortime);
					$cpu = 0;
					make-listviewitem $proc (CIM-Method win32_process ("ProcessID='" + $idproc + "'") GetOwner).user;
				}
				else
				{
					### Otherwise, just calculate the CPU for it.
					$cpu = pcnt-cpu $proc.percentprocessortime $beforeprocs[$idproc] $totalcpu;
					$totalcpuUsed += $cpu;
				}
				
				### Update the memory and CPU for the process in its ListView entry
				$lvi = $listview1.FindItemWithText($idproc)
				if ($lvi.SubItems[3].Text -ne [int32]($cpu)) { $lvi.SubItems[3].Text = [int32]($cpu); }
				if ($lvi.SubItems[4].Text -ne (kbytes $proc.WorkingSet)) { $lvi.SubItems[4].Text = kbytes $proc.WorkingSet; }
			}
			
			$beforeprocs[$idproc] = $proc.percentprocessortime;
		}
		
		$indx = $listview1.FindItemWithText("Idle").index;
		$cpu = [int32](100 - $totalcpuUsed);
		$listview1.Items[$indx].SubItems[3].Text = [int32]($cpu);
		$listview1.Items[$indx].SubItems[4].Text = $idle;
		$listview1.refresh();
		$things["procs"] = ($procs.count - 1);
		$things["cpu"] = [int32]$totalcpuUsed;
		update-Procs-Label;
		update-serverdatetime $server;
		if ($things["LVCols"] -ne $null)
		{
			if (($things["LVCols"] -eq 0) -OR ($things["LVCols"] -eq 2))
			{
				$listview1.ListViewItemSorter = new-object ListViewItemComparer($things["LVCols"], $listview1.Sorting);
			}
			else
			{
				$listview1.ListViewItemSorter = new-object ListViewItemIntComparer($things["LVCols"], $listview1.Sorting);
			}
		}
		
	}
	#endregion get-processes
	
	#region make-listviewitem
	function make-listviewitem
	{
		param ($proc,
			$user);
		$idproc = $proc.IDProcess;
		$lvi = new-object system.windows.forms.ListViewItem($proc.Name);
		$lvi.SubItems.Add($idproc);
		if ($user -eq $null) { $user = "SYSTEM"; }
		$lvi.SubItems.Add($user);
		$lvi.SubItems.Add(0);
		$mem = kbytes $proc.WorkingSet;
		$lvi.SubItems.Add($mem);
		$listview1.Items.Add($lvi);
	}
	#endregion make-listviewitem
	
	#region drop-dead-procs
	function drop-dead-procs
	{
		param ($procs);
		$temp = @{ };
		$currp = @();
		foreach ($proc in $procs) { $currp += $proc.IDProcess; }
		foreach ($idproc in $beforeprocs.Keys) { if ($currp -notcontains $idproc) { $temp.Add($idproc, 0); } }
		foreach ($procid in $temp.Keys)
		{
			$indx = $listview1.FindItemWithText($procid).index;
			$listview1.Items[$indx].Remove();
			$beforeprocs.Remove($procid);
		}
		
		$temp.clear()
	}
	#endregion drop-dead-procs
	
	#region set-context-menu
	function set-context-menu
	{
		foreach ($si in $listview2.SelectedItems)
		{
			if ($si.subitems[($listview2.columns["state"].index)].text -eq "Running")
			{
				$start_svc.enabled = $false;
				$stop_svc.enabled = $true;
				$cycle_svc.enabled = $true;
			}
			elseif ($si.subitems[($listview2.columns["state"].index)].text -eq "Stopped")
			{
				$start_svc.enabled = $true;
				$stop_svc.enabled = $false;
				$cycle_svc.enabled = $false;
			}
		}
	}
	#endregion set-context-menu
	
	#region stop-related-services
	function stop-related-services
	{
		param ($sname,
			$dependencies);
		if ($dependencies.count -gt 0)
		{
			foreach ($d in $dependencies) { stop-start-service $d.name "Stop"; }
		}
		
		stop-start-service $sname "Stop";
	}
	#endregion stop-related-services
	
	#region start-related-services
	function start-related-services
	{
		param ($sname,
			$dependencies);
		stop-start-service $sname "Start";
		if ($dependencies.count -gt 0)
		{
			foreach ($d in $dependencies) { stop-start-service $d.name "Start"; }
		}
	}
	#endregion start-related-services
	
	#region stop-start-service
	function stop-start-service
	{
		param ($sname,
			$whattodo);
		$vars = @{
			"Stop" = @("Stopped", "Stopping", "1", { $svc.Stop() }, { $svc.StopService() });
			"Start" = @("Running", "Starting", "4", { $svc.Start() }, { $svc.StartService() });
		};
		
		$svc = CIM-Stuff win32_service ("name = '" + $sname + "'");
		if (($svc.state -eq $vars[$whattodo][0]) -OR ($svc.state -eq $null)) { return; }
		if ($svc.StartMode -eq "Disabled")
		{
			[system.windows.forms.messagebox]::Show("Cannot start or stop a disabled service, and I'm not enabling it just for you.");
			return;
		}
		
		if ($things["adsi"])
		{
			$cmd = "[ADSI](""WinNT://" + $things["machine"] + "/" + $sname + ",service"")";
			$svc = invoke-expression $cmd;
			if ($svc.status -ne $vars[$whattodo][2]) { &$vars[$whattodo][3]; }
		}
		else
		{
			$svc = CIM-Stuff win32_Service "Name='$sname'";
			if ($svc.state -ne $vars[$whattodo][0])
			{
				$r = &$vars[$whattodo][4];
				if ($r.returnvalue -ne 0)
				{
					[system.windows.forms.messagebox]::Show("Unable to $whattodo the $sname service.");
					return;
				}
			}
		}
		
		if ((GetStatus $sname $vars[$whattodo][0]) -eq 1)
		{
			### Update the status of the service
			($listview2.items[($listview2.FindItemWithText($sname).index)]).subitems[($listview2.columns["state"].index)].text = $vars[$whattodo][0];
			set-context-menu;
		}
	}
	#endregion stop-start-service
	
	#region reset-iis
	function reset-iis
	{
		$server = $things["machine"];
		$test = iisreset $server;
		$outcome = "Failed";
		if ($test -match "successfully restarted") { $outcome = "Succeeded"; }
	}
	#endregion reset-iis
	
	#region pcnt-cpu
	### CPU percentage calculation. I picked this up from an article on SQL server long ago. It seems to be the
	### same one used for the OS.
	function pcnt-cpu
	{
		(([long]$args[0] - [long]$args[1]) / [system.double]$args[2]) * 100;
	}
	#endregion pcnt-cpu
	
	#region kbytes
	function kbytes
	{
		param ($dsize);
		[Math]::round($dsize / 1kb, 2);
	}
	#endregion  
	
	#region dsize
	function dsize
	{
		param ($dsize);
		$size = "";
		if ($dsize -ge 1gb) { $size = [Math]::round($dsize / 1gb, 2).tostring() + " GB"; }
		elseif ($dsize -ge 1mb) { $size = [Math]::round($dsize / 1mb, 2).tostring() + " MB"; }
		elseif ($dsize -ge 1kb) { $size = [Math]::round($dsize / 1kb, 2).tostring() + " KB"; }
		else { $size = $dsize.tostring() + " B"; }
		$size;
	}
	#endregion
	
	#region return-Win32_PerfFormattedDAte_PerfProc_Process
	### These two functions get their data depending on how new the OS is. In the most recent version of Task Manager,
	### it uses WorkingSetPrivate (that's the default) for the memory, but that isn't a property on older versions.
	### Whether it's available or not is determined during initialization.
	function return-Win32_PerfFormattedData_PerfProc_Process
	{
		param ($server);
		if ($things["wsp"])
		{
			(CIM-Stuff Win32_PerfFormattedData_PerfProc_Process) |
			select-object -property idprocess, name, @{ expression = { $_.workingsetprivate }; name = "workingset" }, percentprocessortime;
		}
		else
		{
			(CIM-Stuff Win32_PerfFormattedData_PerfProc_Process) | select-object -property idprocess, name, workingset, percentprocessortime;
		}
	}
	#endregion
	
	#region return-win32_perfrawdata_perfproc_process
	function return-win32_perfrawdata_perfproc_process
	{
		param ($server);
		if ($things["wsp"])
		{
			(CIM-Stuff win32_perfrawdata_perfproc_process) |
			select-object -property idprocess, name, @{ expression = { $_.workingsetprivate }; name = "workingset" }, percentprocessortime;
		}
		else
		{
			(CIM-Stuff win32_perfrawdata_perfproc_process) | select-object -property idprocess, name, workingset, percentprocessortime;
		}
	}
	#endregion
	
	#region return-win32_service
	function return-win32_Service
	{
		CIM-Stuff win32_Service | select-object -property name, displayname, processid, description, state, startmode, startname | Sort-Object -property displayname;
	}
	
	#endregion
	
	#region return-win32_PerfRawData_PerfOS_processor
	function return-win32_PerfRawData_PerfOS_processor
	{
		CIM-Stuff win32_PerfRawData_PerfOS_processor | select-object -property name, percentprocessortime, timestamp_sys100ns;
	}
	#endregion
	
	#region CIM-Stuff
	function CIM-Stuff
	{
		param ($class,
			$filter);
		if ($filter -eq $null)
		{
			Get-CimInstance -class $class -CimSession $things["session"];
		}
		else
		{
			Get-CimInstance -class $class -filter $filter -CimSession $things["session"];
		}
	}
	#endregion
	
	#region CIM-Method
	function CIM-Method
	{
		param ($class,
			$filter,
			$method);
		CIM-Stuff $class $filter | Invoke-CimMethod -CimSession $things["session"] -MethodName $method;
	}
	#endregion
	
	#region get-allCPU
	function get-allCPU
	{
		### This calculates the CPU for the individual processors and adds them into $hash.
		$server = $things["machine"];
		$p2 = return-win32_PerfRawData_PerfOS_processor $server;
		for ($i = 0; $i -lt $p2.length; $i++)
		{
			$key = $p2[$i].Name;
			$cpu = 100.0 - (pcnt-cpu $p2[$i].percentprocessortime $keyhash[$key][0] ([system.double]$p2[$i].timestamp_sys100ns - [system.double]$keyhash[$key][1]));
			$count = $hash[$key].count;
			if ($cpu -lt 0.0) { $cpu = 0.0; }
			$x = ($count * 5) + $parms[$key][0];
			$y = $parms[$key][1] - $cpu;
			$parms[$key][2] = $cpu;
			$point = new-object system.drawing.point($x, $y);
			$pointhash[$key] += $y;
			$hash[$key] += $point;
			$keyhash[$key] = @([system.double]$p2[$i].percentprocessortime, [system.double]$p2[$i].timestamp_sys100ns);
		}
		
		##### Memory
		$tpm = (CIM-Stuff win32_computersystem).totalphysicalmemory;
		$avb = (CIM-Stuff Win32_PerfRawData_PerfOS_Memory).availablebytes;
		$newy = (1 - ([system.double]$avb / [system.double]$tpm)) * 200;
		$count = $hash["Memory"].count;
		$x = ($count * 5) + $parms["Memory"][0];
		$y = $parms["Memory"][1] - $newy;
		$parms["Memory"][2] = $newy / 2;
		$parms["Memory"][7] = [system.double]$tpm - [system.double]$avb;
		$point = new-object system.drawing.point($x, $y);
		$pointhash["Memory"] += $y;
		$hash["Memory"] += $point;
	}
	#endregion
	
	#region Plot
	function Plot
	{
		### Draw the pretty pictures of CPU and Memory usage
		param ($old_btmp);
		if ($old_btmp -ne $null) { $old_btmp.Dispose(); }
		$btmp = new-object system.drawing.bitmap($parms["Bitmap"][0], $parms["Bitmap"][1]);
		$grfx = [system.drawing.graphics]::fromimage($btmp);
		
		### Coordinates drawing the graphs for the CPU and memory.
		$orderarray = build-order;
		build-axes $grfx;
		for ($i = 0; $i -lt $orderarray.count; $i++)
		{
			$key = $orderarray[$i];
			$ptarray = $hash[$key];
			for ($j = 1; $j -lt $ptarray.count; $j++)
			{
				$grfx.DrawLine($things["plotpens"][$j - 1], $ptarray[$j - 1], $ptarray[$j]);
			}
		}
		
		$Picturebox1.image = $btmp;
		$grfx.Dispose();
		$pointhash = shift-arrays $pointhash;
		reload-points;
		$error.clear();
		$btmp;
	}
	#endregion
	
	#region reload-points
	function reload-points
	{
		### This may seem like a lot of trouble for nothing, but if you go ahead and turn everything into drawing points and
		### store them in an array to pass into DrawLines, it works much more smoothly than passing the coordinates into
		### DrawLine one at a time and having it do the conversion. Take my word for it, watching it draw a bunch of line
		### segments one at a time is entertaining as hell, but this gives better performance.
		$pts = @{ };
		foreach ($key in $keyhash.Keys) { $points = @(new-object system.drawing.point($parms[$key][0], $pointhash[$key][0])); $pts.Add($key, $points); }
		for ($i = 1; $i -lt $pointhash["_Total"].count; $i++)
		{
			$x = ($i * 5);
			foreach ($key in $keyhash.Keys)
			{
				$pts[$key] += new-object system.drawing.point(($x + $parms[$key][0]), $pointhash[$key][$i]);
			}
		}
		
		foreach ($key in $keyhash.Keys) { $hash[$key] = $pts[$key]; }
		$pts = $null;
	}
	#endregion
	
	#region shift-arrays
	### We only maintain 100 sets of data for each CPU and the memory. When the array gets to 100, we
	### pop off the top one and the new one gets added to the end.
	function shift-arrays ($myhash)
	{
		if ($myhash["_Total"].length -ge 100)
		{
			$null, $things["plotpens"] = $things["plotpens"];
			foreach ($key in $keyhash.Keys)
			{
				$null, $myhash[$key] = $myhash[$key];
			}
		}
		
		$myhash;
	}
	#endregion
	
	#region build-order
	### Probably not needed, but I want to make sure that the CPUs are ordered numerically. It just makes things neater.
	function build-order
	{
		$count = $keyhash.count;
		$count = $count - 1;
		$orderarray = @(0..$count);
		for ($i = 0; $i -lt $count - 1; $i++) { $orderarray[$i] = [system.string]$i; }
		$orderarray[$count - 1] = "_Total";
		$orderarray[$count] = "Memory";
		$orderarray;
	}
	#endregion
	
	#region build-axes
	function build-axes
	{
		param ($grfx);
		### The various drawing surfaces for each processor and memory are stored in the $parms hash. That
		### way we don't have to keep recalculating them for each refresh.
		$orderarray = build-order;
		$mypen = $pens["white"];
		$mypen.Width = 2;
		$font = $fonts["verdana8"];
		$brush = $brushes["red"];
		$y = $add = 100;
		$x = -550;
		$xstrpt = $x - 50;
		for ($i = 0; $i -lt $orderarray.count; $i++)
		{
			$key = $orderarray[$i];
			$x = $parms[$key][0];
			$y = $parms[$key][1];
			if ($key -eq "Memory") { $add = 200; }
			$grfx.FillRectangle($parms[$key][4], $parms[$key][3]);
			$grfx.Drawline($mypen, $x, $y, $x, $y - $add);
			$grfx.Drawline($mypen, $x, $y, $x + 500, $y);
			$grfx.DrawString($key, $font, $brush, $parms[$key][5]);
			$pct = "{0:#.##}%" -f $parms[$key][2];
			$grfx.DrawString($pct, $font, $brush, $parms[$key][6]);
		}
		
		$newgb = "{0:#.##}GB" -f ($parms["Memory"][7] / 1gb);
		$grfx.DrawString($newgb, $font, $brush, $parms["Memory"][8]);
		
	}
	#endregion
	
	#region update-procs-label
	function update-Procs-Label
	{
		$label2.Text = "Updating every " + $things["timer"].interval.ToString() + " ms -- Processes: " +
		($things["procs"]).ToString() + "  |  CPU Usage: " + ($things["cpu"]).ToString() + "%";
	}
	#endregion
	
	#region update-status-label
	function update-Status-Label
	{
		$label3.Text = $args[0];
		$label3.update();
	}
	#endregion
	
	#region restart-timer
	### Called when the "Pause"/"Restart" button is pushed.
	function Restart-timer
	{
		$button2.Text = "Pause";
		$button2.add_click({ Stop-timer; });
		$things["timer"].Enabled = $true;
		$things["timer"].Start();
	}
	#endregion
	
	#region stop-timer
	function Stop-timer
	{
		$things["timer"].Enabled = $false;
		$things["timer"].Stop();
		$button2.Text = "Restart";
		$button2.add_click({ Restart-timer; });
	}
	#endregion
	
	#region Stop-stuff
	### Try to shut down in an orderly fashion. Called when the "Quit" button is pressed.
	function Stop-stuff
	{
		Stop-timer;
		$things["timer"].Dispose();
		if ($things["session"] -ne $null) { remove-cimsession -cimsession $things["session"] }
		$things["session"].Close();
		$things["session"].Dispose();
	}
	#endregion
	
	#region getStatus
	function GetStatus
	{
		param ($service,
			$check_status)
		### This is supposed to sit and wait until a service has been stopped or started. It tests the
		### service status until it matches what we want it to be. If it hasn't done what we requested
		### after 30 seconds, we flag an error and go on.
		$server = $things["machine"];
		$counter = 0;
		$results = 1;
		$test_status = (CIM-Stuff win32_service ("name='" + $service + "'")).State;
		### The thinking behind this is that if it can't kill the service withing 30 seconds, it isn't going to die. So
		### we won't leave ourself hanging out in here. We'll just flag an error and go on with this tedium we call life.
		while (($check_status -ne $test_status) -AND ($counter -lt 60))
		{
			start-sleep -m 500;
			$test_status = (CIM-Stuff win32_service ("name='" + $service + "'")).State;
			$counter++;
			waitingtodie $counter "-";
			if ($counter -eq 60) { $results = 0; };
		}
		
		$results;
	}
	#endregion
	
	#region initialize-the-hashes
	function initialize-the-hashes
	{
		$things["timer"].Dispose();
		if ($things["session"] -ne $null)
		{
			remove-cimsession -cimsession $things["session"];
			$things["session"].Close();
			$things["session"].Dispose();
		}
		
		$keyhash.clear();
		$hash.clear();
		$pointhash.clear();
		$parms.clear();
		$beforeprocs.clear();
		$things.clear();
		initialize-things;
	}
	#endregion
	
	#region initialize-things
	function initialize-things
	{
		$things.add("wsp", $false);
		$things.add("adsi", $true);
		$things.add("LVCols", $null);
		$things.add("SDGCols", $null);
		$things.add("colors", (.{$args} red darkgreen black lightgreen white blue));
		$things.add("timer", (new-object System.Windows.Forms.timer));
		$things.add("machine", $textbox1.text);
		$things.add("plotpens", @((new-object system.drawing.pen("lightgreen")), (new-object system.drawing.pen("lightgreen"))));
		$things.add("procs", 0);
		$things.add("cpu", 0);
		$things.add("session", $null);
		$things.add("response", $null);
		if ($things["machine"] -gt "")
		{
			$things["session"] = New-CimSession -ComputerName $things["machine"] -SessionOption (New-CimSessionOption -Protocol Dcom);
		}
	}
	#endregion
	
	#region test-interval
	function test-interval
	{
		param ($span)
		if ($span -gt $things["timer"].interval) { $things["plotpens"] += $pens["red"]; }
		else { $things["plotpens"] += $pens["lightgreen"] };
	}
	#endregion
	
	#region do-it-to-it
	function do-it-to-it
	{
		### Test the status of the telephony service on the remote machine. We don't really care what the status
		### is, we just want to know that we can get to it. Through playing around with some of this stuff, I've
		### found that this is a way to test that a server is available without generating a bunch of errors.
		$server = $textbox1.text;
		#   if ((new-object system.serviceprocess.servicecontroller("telephony", $server)).status -eq $null) {
		#     $rtrn = [system.windows.forms.messagebox]::Show("Cannot find the $server machine. Make sure it exists and you have permissions to it.");
		#    $main.Cursor = [System.Windows.Forms.Cursors]::Default;
		#   return;
		#}
		
		initialize-the-hashes;
		
		try
		{
			$props = CIM-Stuff win32_perfrawdata_perfproc_process;
			if ($props[0].__property_count -gt 36) { $things["wsp"] = $true; }
		}
		catch
		{
			$rtrn = [system.windows.forms.messagebox]::Show("It looks as though the $server machine does not allow remote WMI calls. We won't be able to monitor it.");
			return;
		}
		
		### Start initializing things.
		initialize-stuff;
		get-services;
		get-allCPU;
		$btmp = new-object system.drawing.bitmap($parms["Bitmap"][0], $parms["Bitmap"][1]);
		get-processes $false;
		$btmp = Plot $btmp;
		
		### The $handler is a list of what to do when the timer fires off.
		### Notice that timer is stopped until the remote machine responds and is then restarted. This prevents
		### putting more stress on a remote box that's already overloaded.
		$handler = {
			$things["timer"].Stop();
			$tmthen = get-date;
			get-allCPU;
			get-processes $true;
			$tmspn = [math]::round((new-timespan -start $tmthen).totalmilliseconds, 0);
			test-interval $tmspn;
			$btmp = Plot $btmp;
			$things["timer"].Start();
		}
		
		
		### This is how I've implemented the update interval. The regular TaskManager refreshes about once a
		### second, but this can run into problems if you try that, particularly if you're going for a machine that
		### is pretty busy. If things are pegged on a machine, it may not have the resources to get back to you every
		### second, so after we've initialized everything, we take a reading of how long it takes to run through the
		### three things it's going to have to do each time the timer fires off. It may take a long time to
		### get through with the initial stuff, but seems to work pretty well after that. To be honest, I haven't run
		### into many cases where the machine resources have slowed things down. It seems mostly limited by
		### the network. You can probably hardcode this to run once a second and it will do great 99 times out of
		### a 100, but that one time when you really need it will be the one that messes up.
		$et = [System.Diagnostics.Stopwatch]::StartNew();
		invoke-command -scriptblock $handler;
		$et.Stop();
		$intrvl = [Math]::round($et.Elapsed.TotalMilliseconds, 0);
		if ($intrvl -lt 1000) { $intrvl = 1000; }
		$things["timer"].interval = $intrvl;
		$trackbar1.value = $intrvl;
		$things["timer"].add_tick($handler);
		$things["timer"].Start();
	}
	#endregion
	
	#endregion Source: Globals.ps1

#region Source: About.psf
function Call-About_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
TR0AAB+LCAAAAAAABADVWW2P2jgQ/l7p/oMVne4TBQKbBfYgEtCudFrudgW09FvlOAP4cOLINi/p
rz+HQGELPZywoCIkRJIZP555Hg/2pNkHwhcg4g9YYaR/SMrDllWx3N/eIdR8FnRCQ8weKYN/cABu
2+NzVYzkuFk6eJZ6eP8CUUjFEbSsQSwVBMURDX2+lMVHLoL0u4COPSqgz5sJ3BXLyaeAunOm5gJa
IcyVwKyAXuYeo+QJ4iGfQdjyajXsEOfeblTvoFxvWCjUU2lZYz2ebSEypcwX2s7q8lAJzmQamJ7o
i+ARCBVvHNqEQKQ6c6V4uLXRVn0Yg/YnsDHz1gbPTxYqbQcqbUf6ychdRiFUA/oNLLdq1wuoel87
6ZTko8OFD2KgYqY9H+kK/A8UMz456fw3XtFA43X4SjtiJuG0Cw2zuiScW+460SdtBwoL9cIlVTRJ
b1cnREdGBEB40ncIK2Wlwju0/bjQQ20Mexz7mwl9TX43S+unW9PTyuxTMk3QdBIuLlChsZTG8vjq
f3V6mI8eJzhNo10tILtaOcjKz7jaxzRw6gP2n0MWW+5QzA/1cITltcYrjWRajTsDhyH2/gp9WCWh
mJgnSkCrgD3ICBN9IxIgQSw06HCKw5lEij+8exQ4JJTL91/wgoJAXazQ+z8m6k+0XC6LDH+Ll7ps
+QENi4QHh5IqpUIxl02PhrMe9oBdXDRMI7EEqZJbMk45KUDGktkhGvNvO/cFVDHic0e/yfDafKB4
ZCzHtHD83p6rKRcfA0zZMadXFURHq8s1mYG/H/rXvfs/FJVbEEv++pKIpW5eX3aIlxWLyfBniWU0
GuWTiv2mUrmOTBKUWm6J3DV0sS875hpZw5nro5ZdH/UMdEeRztE6lh6W6lPkY3Vk5/MrU1fPTV0l
B3Mmud0wVy5nZs5EFylzCVvoFumy8/NVzVaMU7SL8mUinpSvEXh6839jXDln/XE6jWxcmSQzf1E0
2fIdFsVNPm+LtvtzVlhW1kzyeo0FdpNM3Z3DVJZTzBrsokwZn1/dJE5MjvQyfmWmzjtwGp3u96jK
cNjMUQqNzpr7x4Hk1m3RdWZLKeMm46ILy+iwl7YI12Q9vAFTaRv44lTtmslZyGqHRIdpuR2uvYMC
6tPJ9LCaHPqlzeM+SD1by31+MnDZ6aJStXXFzdBr3MZmrI2ak1kaZWNpGM3jk4TPVM4xW7fcO5jM
upwlmT7aQnilqtcXbSkh0AoAubXd3IndQBIuGPXeQEXN0vdRf0RJdXsNjDdfG6cRkzdV1wESeEnD
SR6scnXsjGtj2/adMq7i01hfAnadmKjQMuUiHoBYUAK5KMscXZcLuEp4m6j0UtWhXSC275fp2m6W
9l+fuv8BB0Qo+00dAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$linklabel2 = New-Object 'System.Windows.Forms.LinkLabel'
	$linklabel1 = New-Object 'System.Windows.Forms.LinkLabel'
	$label7 = New-Object 'System.Windows.Forms.Label'
	$label8 = New-Object 'System.Windows.Forms.Label'
	$label18 = New-Object 'System.Windows.Forms.Label'
	$label5 = New-Object 'System.Windows.Forms.Label'
	$label6 = New-Object 'System.Windows.Forms.Label'
	$label4 = New-Object 'System.Windows.Forms.Label'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$form1_Load={
		if(Test-Path "C:\Program Files (x86)\Sysinternals" -ErrorAction 'SilentlyContinue') {
			$label13.Text = "Installed"
			$label13.ForeColor = "Green"
		}
		else {
			$label13.Text = "Not Installed"
			$label13.ForeColor = "Red"
		}	
		
		if(Test-Path "C:\Program Files\Nirsoft\NirLauncher.exe" -ErrorAction 'SilentlyContinue') {
			$label16.Text = "Installed"
			$label16.ForeColor = "Green"
		}
		else {
			$label16.Text = "Not Installed"
			$label16.ForeColor = "Red"			
		}
	}
	
	$linklabel1_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	[System.Diagnostics.Process]::Start("$AuthorWWW")
		
	}
	
	$linklabel2_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	[System.Diagnostics.Process]::Start("mailto:$authoremail?subject=$AuthorEmail")
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:About_richtextbox1 = $richtextbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabel2.remove_LinkClicked($linklabel2_LinkClicked)
			$linklabel1.remove_LinkClicked($linklabel1_LinkClicked)
			$form1.remove_Load($form1_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	#
	# form1
	#
	$form1.Controls.Add($richtextbox1)
	$form1.Controls.Add($linklabel2)
	$form1.Controls.Add($linklabel1)
	$form1.Controls.Add($label7)
	$form1.Controls.Add($label8)
	$form1.Controls.Add($label18)
	$form1.Controls.Add($label5)
	$form1.Controls.Add($label6)
	$form1.Controls.Add($label4)
	$form1.Controls.Add($label2)
	$form1.Controls.Add($label1)
	$form1.Controls.Add($buttonOK)
	$form1.AcceptButton = $buttonOK
	$form1.ClientSize = '318, 367'
	$form1.FormBorderStyle = 'FixedDialog'
	$form1.MaximizeBox = $False
	$form1.MinimizeBox = $False
	$form1.Name = 'form1'
	$form1.StartPosition = 'CenterScreen'
	$form1.Text = 'About'
	$form1.add_Load($form1_Load)
	#
	# richtextbox1
	#
	$richtextbox1.Location = '13, 132'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.ReadOnly = $True
	$richtextbox1.Size = '293, 194'
	$richtextbox1.TabIndex = 13
	$richtextbox1.Text = 'Thanks to:
Francios-Xavier Cat -> www.lazywinadmin.com'
	#
	# linklabel2
	#
	$linklabel2.Location = '150, 36'
	$linklabel2.Name = 'linklabel2'
	$linklabel2.Size = '156, 23'
	$linklabel2.TabIndex = 12
	$linklabel2.TabStop = $True
	$linklabel2.Text = "$AuthorEmail"
	$linklabel2.add_LinkClicked($linklabel2_LinkClicked)
	#
	# linklabel1
	#
	$linklabel1.Location = '150, 82'
	$linklabel1.Name = 'linklabel1'
	$linklabel1.Size = '156, 23'
	$linklabel1.TabIndex = 11
	$linklabel1.TabStop = $True
	$linklabel1.Text = "$AuthorWWW"
	$linklabel1.add_LinkClicked($linklabel1_LinkClicked)
	#
	# label7
	#
	$label7.Location = '149, 105'
	$label7.Name = 'label7'
	$label7.Size = '176, 23'
	$label7.TabIndex = 8
	$label7.Text = "$ApplicationLastUpdate"
	#
	# label8
	#
	$label8.Location = '12, 105'
	$label8.Name = 'label8'
	$label8.Size = '100, 23'
	$label8.TabIndex = 7
	$label8.Text = 'Last Update'
	#
	# label18
	#
	$label18.Location = '13, 82'
	$label18.Name = 'label18'
	$label18.Size = '100, 23'
	$label18.TabIndex = 5
	$label18.Text = 'Website'
	#
	# label5
	#
	$label5.Location = '150, 59'
	$label5.Name = 'label5'
	$label5.Size = '176, 23'
	$label5.TabIndex = 6
	$label5.Text = "$ApplicationVersion"
	#
	# label6
	#
	$label6.Location = '13, 59'
	$label6.Name = 'label6'
	$label6.Size = '100, 23'
	$label6.TabIndex = 5
	$label6.Text = 'Version'
	#
	# label4
	#
	$label4.Location = '13, 36'
	$label4.Name = 'label4'
	$label4.Size = '100, 23'
	$label4.TabIndex = 3
	$label4.Text = 'Contact'
	#
	# label2
	#
	$label2.Location = '150, 13'
	$label2.Name = 'label2'
	$label2.Size = '176, 23'
	$label2.TabIndex = 2
	$label2.Text = "$Authorname"
	#
	# label1
	#
	$label1.Location = '13, 13'
	$label1.Name = 'label1'
	$label1.Size = '100, 23'
	$label1.TabIndex = 1
	$label1.Text = 'Author:'
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '231, 332'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = 'OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: About.psf

#region Source: Options.psf
function Call-Options_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
9HT7LvL5hU4P/wXwcsEA32kAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form_options = New-Object 'System.Windows.Forms.Form'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$button2 = New-Object 'System.Windows.Forms.Button'
	$button1 = New-Object 'System.Windows.Forms.Button'
	$textbox8 = New-Object 'System.Windows.Forms.TextBox'
	$textbox9 = New-Object 'System.Windows.Forms.TextBox'
	$label_nirlauncher = New-Object 'System.Windows.Forms.Label'
	$label_sysinternals = New-Object 'System.Windows.Forms.Label'
	$button_OK = New-Object 'System.Windows.Forms.Button'
	$button_Export = New-Object 'System.Windows.Forms.Button'
	$button_import = New-Object 'System.Windows.Forms.Button'
	$button_save = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$button3 = New-Object 'System.Windows.Forms.Button'
	$textbox10 = New-Object 'System.Windows.Forms.TextBox'
	$label_cmrcviewer = New-Object 'System.Windows.Forms.Label'
	$textbox6 = New-Object 'System.Windows.Forms.TextBox'
	$label_sccmnamespace = New-Object 'System.Windows.Forms.Label'
	$checkbox1 = New-Object 'System.Windows.Forms.CheckBox'
	$textbox4 = New-Object 'System.Windows.Forms.TextBox'
	$textbox5 = New-Object 'System.Windows.Forms.TextBox'
	$label_site = New-Object 'System.Windows.Forms.Label'
	$label_sccm = New-Object 'System.Windows.Forms.Label'
	$label_sccmserver = New-Object 'System.Windows.Forms.Label'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$button6 = New-Object 'System.Windows.Forms.Button'
	$button5 = New-Object 'System.Windows.Forms.Button'
	$button4 = New-Object 'System.Windows.Forms.Button'
	$textbox0 = New-Object 'System.Windows.Forms.TextBox'
	$label_configpath = New-Object 'System.Windows.Forms.Label'
	$textbox3 = New-Object 'System.Windows.Forms.TextBox'
	$label_logpath = New-Object 'System.Windows.Forms.Label'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$label_homepath = New-Object 'System.Windows.Forms.Label'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$label_profilepath = New-Object 'System.Windows.Forms.Label'
	$button_abort = New-Object 'System.Windows.Forms.Button'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$FormEvent_Load = {
		#Load Variables into textboxes
		$textbox0.Text = $global:Confpath
		$textbox1.Text = $global:Profilefolder
		$textbox2.Text = $global:Homefolder
		$textbox3.Text = $global:Outfile
		if ($global:SCCMEnabled -eq $true)
		{
			$checkbox1.Checked = $global:SCCMEnabled
			$textbox4.Text = $global:SiteName
			$textbox5.Text = $global:SCCMServer
			$textbox6.Text = $global:SCCMNameSpace
			$textbox10.Text = $global:CmRCViewer
		}
		else
		{
			$checkbox1.Checked = $false
			$textbox4.enabled = $false
			$textbox5.enabled = $false
			$textbox6.enabled = $false
			$textbox10.enabled = $false
		}
		$textbox8.Text = $global:Nirlauncher
		$textbox9.Text = $global:Sysinternals
	}
	############################################################################################
	$checkbox1_CheckedChanged = {
		if ($checkbox1.Checked -eq $true)
		{
			$textbox4.Text = $global:SiteName
			$textbox5.Text = $global:SCCMServer
			$textbox6.Text = $global:SCCMNameSpace
			$textbox10.Text = $global:CmRCViewer
			$textbox4.enabled = $true
			$textbox5.enabled = $true
			$textbox6.enabled = $true
			$textbox10.enabled = $true
		}
		else
		{
			$textbox4.enabled = $false
			$textbox5.enabled = $false
			$textbox6.enabled = $false
			$textbox10.enabled = $false
		}
	}
	
	############################################################################################
	$button_save_Click = {
		if ($textbox1.Text.Length -ne 0)
		{
			if ($textbox2.Text.Length -ne 0)
			{
				if ($textbox3.Text.Length -ne 0)
				{
					if ($checkbox1.Checked -eq $true)
					{
						if ($textbox4.Text.Length -ne 0)
						{
							if ($textbox5.Text.Length -ne 0)
							{
								if ($textbox6.Text.Length -ne 0)
								{
									Save-Config
								}
								else
								{
									Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
								}
							}
							else
							{
								Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
							}
						}
						else
						{
							Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
						}
					}
					else
					{
						Save-Config
					}
				}
				else
				{
					Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
				}
			}
			else
			{
				Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
			}
		}
		else
		{
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
		}
	}
	############################################################################################
	$button_OK_Click = {
		if ($textbox1.Text.Length -ne 0)
		{
			if ($textbox2.Text.Length -ne 0)
			{
				if ($textbox3.Text.Length -ne 0)
				{
					if ($checkbox1.Checked -eq $true)
					{
						if ($textbox4.Text.Length -ne 0)
						{
							if ($textbox5.Text.Length -ne 0)
							{
								if ($textbox6.Text.Length -ne 0)
								{
									Save-Config
									$form_options.DialogResult = 'OK'
								}
								else
								{
									Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
								}
							}
							else
							{
								Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
							}
						}
						else
						{
							Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
						}
					}
					else
					{
						Save-Config
						$form_options.DialogResult = 'OK'
					}
				}
				else
				{
					Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
				}
			}
			else
			{
				Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
			}
		}
		else
		{
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
		}
	}
	############################################################################################
	$button_Export_Click = {
		$folderbrowserdialog1.ShowDialog()
		$save = $folderbrowserdialog1.SelectedPath += "/config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = $SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $save -NoTypeInformation -Force
	}
	############################################################################################
	$button_abort_Click = { $Options.Close() }
	############################################################################################
	$button_import_Click = {
		$openfiledialog1.ShowDialog()
		$load = $openfiledialog1.FileNames
		$Import = Import-Csv -Path $load
		Add-RichTextBox -text $Import
		foreach ($Line in $Import)
		{
			$global:Profilefolder = $($Line."global:Profilefolder")
			$global:Homefolder = $($Line."global:Homefolder")
			$global:Outfile = $($Line."global:Outfile")
			$global:SiteName = $($Line."global:SiteName")
			$global:SCCMServer = $($Line."global:SCCMServer")
			$global:SCCMNameSpace = $($Line."global:SCCMNameSpace")
			$global:SCCMEnabled = $($Line."global:SCCMEnabled")
			$global:Nirlauncher = $($Line."global:Nirlauncher")
			$global:Sysinternals = $($Line."global:Sysinternals")
			$global:CmRCViewer = $($Line."global:CmRCViewer")
		}
		# Saving the imported Config
		Save-Config
	}
	############################################################################################
	
	$button1_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox8.Text = $folderbrowserdialog1.SelectedPath
		$global:Nirlauncher = $textbox8.Text
	}
	
	$button2_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox9.Text = $folderbrowserdialog1.SelectedPath
		$global:Sysinternals = $textbox9.Text
	}
	
	$button3_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox10.Text = $folderbrowserdialog1.SelectedPath
		$global:CmRCViewer = $textbox9.Text
	}
	
	$button4_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox3.Text = $folderbrowserdialog1.SelectedPath
		$global:logpath = $textbox3.Text
	}
	
	$button5_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox1.Text = $folderbrowserdialog1.SelectedPath
		$global:profilepath = $textbox1.Text
	}
	
	$button6_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox2.Text = $folderbrowserdialog1.SelectedPath
		$global:outfile = $textbox2.Text
	}
	
	$form_options_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		$Options.Close()
	}
	############################################################################################
	#region Save-Config
	function Save-Config
	{
		$global:Profilefolder = $textbox1.Text
		$global:Homefolder = $textbox2.Text
		$global:Outfile = $textbox3.Text
		$global:SiteName = $textbox4.Text
		$global:SCCMServer = $textbox5.Text
		$global:SCCMNameSpace = $textbox6.Text
		$global:SCCMEnabled = [bool]$checkbox1.Checked
		$global:Nirlauncher = $textbox8.Text
		$global:Sysinternals = $textbox9.Text
		$global:CmRCViewer = $textbox10.Text
		$Exportpath = $Confpath + "/Config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = $SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $Exportpath -NoTypeInformation
	}
	#endregion 
	############################################################################################
	
	
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form_options.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Options_textbox8 = $textbox8.Text
		$script:Options_textbox9 = $textbox9.Text
		$script:Options_textbox10 = $textbox10.Text
		$script:Options_textbox6 = $textbox6.Text
		$script:Options_checkbox1 = $checkbox1.Checked
		$script:Options_textbox4 = $textbox4.Text
		$script:Options_textbox5 = $textbox5.Text
		$script:Options_textbox0 = $textbox0.Text
		$script:Options_textbox3 = $textbox3.Text
		$script:Options_textbox2 = $textbox2.Text
		$script:Options_textbox1 = $textbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$button2.remove_Click($button2_Click)
			$button1.remove_Click($button1_Click)
			$button_OK.remove_Click($button_OK_Click)
			$button_Export.remove_Click($button_Export_Click)
			$button_import.remove_Click($button_import_Click)
			$button_save.remove_Click($button_save_Click)
			$button3.remove_Click($button3_Click)
			$checkbox1.remove_CheckedChanged($checkbox1_CheckedChanged)
			$button6.remove_Click($button6_Click)
			$button5.remove_Click($button5_Click)
			$button4.remove_Click($button4_Click)
			$button_abort.remove_Click($button_abort_Click)
			$form_options.remove_FormClosed($form_options_FormClosed)
			$form_options.remove_Load($FormEvent_Load)
			$form_options.remove_Load($Form_StateCorrection_Load)
			$form_options.remove_Closing($Form_StoreValues_Closing)
			$form_options.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form_options.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# form_options
	#
	$form_options.Controls.Add($groupbox3)
	$form_options.Controls.Add($button_OK)
	$form_options.Controls.Add($button_Export)
	$form_options.Controls.Add($button_import)
	$form_options.Controls.Add($button_save)
	$form_options.Controls.Add($groupbox2)
	$form_options.Controls.Add($groupbox1)
	$form_options.Controls.Add($button_abort)
	$form_options.AcceptButton = $button_OK
	$form_options.CancelButton = $button_abort
	$form_options.ClientSize = '484, 489'
	$form_options.FormBorderStyle = 'FixedDialog'
	$form_options.MaximizeBox = $False
	$form_options.MinimizeBox = $False
	$form_options.Name = 'form_options'
	$form_options.StartPosition = 'CenterScreen'
	$form_options.Text = 'Options'
	$form_options.add_FormClosed($form_options_FormClosed)
	$form_options.add_Load($FormEvent_Load)
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($button2)
	$groupbox3.Controls.Add($button1)
	$groupbox3.Controls.Add($textbox8)
	$groupbox3.Controls.Add($textbox9)
	$groupbox3.Controls.Add($label_nirlauncher)
	$groupbox3.Controls.Add($label_sysinternals)
	$groupbox3.Location = '12, 357'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '460, 87'
	$groupbox3.TabIndex = 24
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'External Tools (optional)'
	#
	# button2
	#
	$button2.BackColor = 'Transparent'
	#region Binary Data
	$button2.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button2.BackgroundImageLayout = 'Center'
	$button2.FlatStyle = 'Flat'
	$button2.ForeColor = 'Control'
	$button2.Location = '419, 42'
	$button2.Name = 'button2'
	$button2.Size = '30, 26'
	$button2.TabIndex = 16
	$button2.UseVisualStyleBackColor = $False
	$button2.add_Click($button2_Click)
	#
	# button1
	#
	$button1.BackColor = 'Transparent'
	#region Binary Data
	$button1.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button1.BackgroundImageLayout = 'Center'
	$button1.FlatStyle = 'Flat'
	$button1.ForeColor = 'Control'
	$button1.Location = '419, 15'
	$button1.Name = 'button1'
	$button1.Size = '30, 26'
	$button1.TabIndex = 14
	$button1.UseVisualStyleBackColor = $False
	$button1.add_Click($button1_Click)
	#
	# textbox8
	#
	$textbox8.Location = '76, 19'
	$textbox8.Name = 'textbox8'
	$textbox8.Size = '337, 20'
	$textbox8.TabIndex = 13
	#
	# textbox9
	#
	$textbox9.Location = '76, 46'
	$textbox9.Name = 'textbox9'
	$textbox9.Size = '337, 20'
	$textbox9.TabIndex = 15
	#
	# label_nirlauncher
	#
	$label_nirlauncher.Location = '7, 21'
	$label_nirlauncher.Name = 'label_nirlauncher'
	$label_nirlauncher.Size = '100, 23'
	$label_nirlauncher.TabIndex = 2
	$label_nirlauncher.Text = 'Nirlauncher:'
	#
	# label_sysinternals
	#
	$label_sysinternals.Location = '7, 48'
	$label_sysinternals.Name = 'label_sysinternals'
	$label_sysinternals.Size = '100, 23'
	$label_sysinternals.TabIndex = 4
	$label_sysinternals.Text = 'Sysinternals:'
	#
	# button_OK
	#
	$button_OK.Anchor = 'Bottom, Right'
	$button_OK.Location = '73, 454'
	$button_OK.Name = 'button_OK'
	$button_OK.Size = '75, 23'
	$button_OK.TabIndex = 17
	$button_OK.Text = 'OK'
	$button_OK.UseVisualStyleBackColor = $True
	$button_OK.add_Click($button_OK_Click)
	#
	# button_Export
	#
	$button_Export.Anchor = 'Bottom, Right'
	$button_Export.Location = '154, 454'
	$button_Export.Name = 'button_Export'
	$button_Export.Size = '75, 23'
	$button_Export.TabIndex = 18
	$button_Export.Text = 'Export'
	$button_Export.UseVisualStyleBackColor = $True
	$button_Export.add_Click($button_Export_Click)
	#
	# button_import
	#
	$button_import.Anchor = 'Bottom, Right'
	$button_import.DialogResult = 'OK'
	$button_import.Location = '235, 454'
	$button_import.Name = 'button_import'
	$button_import.Size = '75, 23'
	$button_import.TabIndex = 19
	$button_import.Text = 'Import'
	$button_import.UseVisualStyleBackColor = $True
	$button_import.add_Click($button_import_Click)
	#
	# button_save
	#
	$button_save.Anchor = 'Bottom, Right'
	$button_save.Location = '316, 454'
	$button_save.Name = 'button_save'
	$button_save.Size = '75, 23'
	$button_save.TabIndex = 20
	$button_save.Text = 'Speichern'
	$button_save.UseVisualStyleBackColor = $True
	$button_save.add_Click($button_save_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($button3)
	$groupbox2.Controls.Add($textbox10)
	$groupbox2.Controls.Add($label_cmrcviewer)
	$groupbox2.Controls.Add($textbox6)
	$groupbox2.Controls.Add($label_sccmnamespace)
	$groupbox2.Controls.Add($checkbox1)
	$groupbox2.Controls.Add($textbox4)
	$groupbox2.Controls.Add($textbox5)
	$groupbox2.Controls.Add($label_site)
	$groupbox2.Controls.Add($label_sccm)
	$groupbox2.Controls.Add($label_sccmserver)
	$groupbox2.Location = '13, 183'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '459, 168'
	$groupbox2.TabIndex = 23
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'SCCM'
	#
	# button3
	#
	$button3.BackColor = 'Transparent'
	#region Binary Data
	$button3.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button3.BackgroundImageLayout = 'Center'
	$button3.FlatStyle = 'Flat'
	$button3.ForeColor = 'Control'
	$button3.Location = '418, 123'
	$button3.Name = 'button3'
	$button3.Size = '30, 26'
	$button3.TabIndex = 12
	$button3.UseVisualStyleBackColor = $False
	$button3.add_Click($button3_Click)
	#
	# textbox10
	#
	$textbox10.Location = '76, 126'
	$textbox10.Name = 'textbox10'
	$textbox10.Size = '337, 20'
	$textbox10.TabIndex = 11
	#
	# label_cmrcviewer
	#
	$label_cmrcviewer.Location = '6, 128'
	$label_cmrcviewer.Name = 'label_cmrcviewer'
	$label_cmrcviewer.Size = '100, 23'
	$label_cmrcviewer.TabIndex = 9
	$label_cmrcviewer.Text = 'CmRCViewer:'
	#
	# textbox6
	#
	$textbox6.Location = '76, 100'
	$textbox6.Name = 'textbox6'
	$textbox6.Size = '337, 20'
	$textbox6.TabIndex = 10
	#
	# label_sccmnamespace
	#
	$label_sccmnamespace.Location = '6, 102'
	$label_sccmnamespace.Name = 'label_sccmnamespace'
	$label_sccmnamespace.Size = '100, 23'
	$label_sccmnamespace.TabIndex = 7
	$label_sccmnamespace.Text = 'Namespace:'
	#
	# checkbox1
	#
	$checkbox1.Checked = $True
	$checkbox1.CheckState = 'Checked'
	$checkbox1.Location = '76, 19'
	$checkbox1.Name = 'checkbox1'
	$checkbox1.Size = '15, 24'
	$checkbox1.TabIndex = 7
	$checkbox1.UseVisualStyleBackColor = $True
	$checkbox1.add_CheckedChanged($checkbox1_CheckedChanged)
	#
	# textbox4
	#
	$textbox4.Location = '76, 47'
	$textbox4.Name = 'textbox4'
	$textbox4.Size = '337, 20'
	$textbox4.TabIndex = 8
	#
	# textbox5
	#
	$textbox5.Location = '76, 74'
	$textbox5.Name = 'textbox5'
	$textbox5.Size = '337, 20'
	$textbox5.TabIndex = 9
	#
	# label_site
	#
	$label_site.Location = '7, 49'
	$label_site.Name = 'label_site'
	$label_site.Size = '100, 23'
	$label_site.TabIndex = 2
	$label_site.Text = 'Site:'
	#
	# label_sccm
	#
	$label_sccm.Location = '6, 22'
	$label_sccm.Name = 'label_sccm'
	$label_sccm.Size = '100, 23'
	$label_sccm.TabIndex = 0
	$label_sccm.Text = 'SCCM:'
	#
	# label_sccmserver
	#
	$label_sccmserver.Location = '7, 76'
	$label_sccmserver.Name = 'label_sccmserver'
	$label_sccmserver.Size = '100, 23'
	$label_sccmserver.TabIndex = 4
	$label_sccmserver.Text = 'Server:'
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($button6)
	$groupbox1.Controls.Add($button5)
	$groupbox1.Controls.Add($button4)
	$groupbox1.Controls.Add($textbox0)
	$groupbox1.Controls.Add($label_configpath)
	$groupbox1.Controls.Add($textbox3)
	$groupbox1.Controls.Add($label_logpath)
	$groupbox1.Controls.Add($textbox2)
	$groupbox1.Controls.Add($label_homepath)
	$groupbox1.Controls.Add($textbox1)
	$groupbox1.Controls.Add($label_profilepath)
	$groupbox1.Location = '13, 13'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '459, 164'
	$groupbox1.TabIndex = 22
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'General'
	#
	# button6
	#
	$button6.BackColor = 'Transparent'
	#region Binary Data
	$button6.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button6.BackgroundImageLayout = 'Center'
	$button6.FlatStyle = 'Flat'
	$button6.ForeColor = 'Control'
	$button6.Location = '418, 66'
	$button6.Name = 'button6'
	$button6.Size = '30, 26'
	$button6.TabIndex = 4
	$button6.UseVisualStyleBackColor = $False
	$button6.add_Click($button6_Click)
	#
	# button5
	#
	$button5.BackColor = 'Transparent'
	#region Binary Data
	$button5.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button5.BackgroundImageLayout = 'Center'
	$button5.FlatStyle = 'Flat'
	$button5.ForeColor = 'Control'
	$button5.Location = '418, 41'
	$button5.Name = 'button5'
	$button5.Size = '30, 26'
	$button5.TabIndex = 2
	$button5.UseVisualStyleBackColor = $False
	$button5.add_Click($button5_Click)
	#
	# button4
	#
	$button4.BackColor = 'Transparent'
	#region Binary Data
	$button4.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button4.BackgroundImageLayout = 'Center'
	$button4.FlatStyle = 'Flat'
	$button4.ForeColor = 'Control'
	$button4.Location = '418, 93'
	$button4.Name = 'button4'
	$button4.Size = '30, 26'
	$button4.TabIndex = 6
	$button4.UseVisualStyleBackColor = $False
	$button4.add_Click($button4_Click)
	#
	# textbox0
	#
	$textbox0.Location = '76, 18'
	$textbox0.Name = 'textbox0'
	$textbox0.ReadOnly = $True
	$textbox0.Size = '337, 20'
	$textbox0.TabIndex = 0
	#
	# label_configpath
	#
	$label_configpath.Location = '8, 20'
	$label_configpath.Name = 'label_configpath'
	$label_configpath.Size = '100, 23'
	$label_configpath.TabIndex = 8
	$label_configpath.Text = 'Configpath:'
	#
	# textbox3
	#
	$textbox3.Location = '76, 98'
	$textbox3.Name = 'textbox3'
	$textbox3.Size = '337, 20'
	$textbox3.TabIndex = 5
	#
	# label_logpath
	#
	$label_logpath.Location = '7, 100'
	$label_logpath.Name = 'label_logpath'
	$label_logpath.Size = '100, 23'
	$label_logpath.TabIndex = 4
	$label_logpath.Text = 'Logpath:'
	#
	# textbox2
	#
	$textbox2.Location = '76, 70'
	$textbox2.Name = 'textbox2'
	$textbox2.Size = '337, 20'
	$textbox2.TabIndex = 3
	#
	# label_homepath
	#
	$label_homepath.Location = '7, 72'
	$label_homepath.Name = 'label_homepath'
	$label_homepath.Size = '100, 23'
	$label_homepath.TabIndex = 2
	$label_homepath.Text = 'Homepath:'
	#
	# textbox1
	#
	$textbox1.Location = '76, 44'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '337, 20'
	$textbox1.TabIndex = 1
	#
	# label_profilepath
	#
	$label_profilepath.Location = '7, 46'
	$label_profilepath.Name = 'label_profilepath'
	$label_profilepath.Size = '100, 23'
	$label_profilepath.TabIndex = 0
	$label_profilepath.Text = 'Profilepath:'
	#
	# button_abort
	#
	$button_abort.Anchor = 'Bottom, Right'
	$button_abort.DialogResult = 'Cancel'
	$button_abort.Location = '397, 454'
	$button_abort.Name = 'button_abort'
	$button_abort.Size = '75, 23'
	$button_abort.TabIndex = 21
	$button_abort.Text = 'Abbrechen'
	$button_abort.UseVisualStyleBackColor = $True
	$button_abort.add_Click($button_abort_Click)
	#
	# folderbrowserdialog1
	#
	#
	# openfiledialog1
	#
	$openfiledialog1.FileName = 'openfiledialog1'
	$openfiledialog1.Filter = 'CSV-Dateien|*.csv'
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$form_options.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form_options.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form_options.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form_options.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form_options.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form_options.ShowDialog()

}
#endregion Source: Options.psf

#region Source: Taskmanager.psf
function Call-Taskmanager_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$listbox1 = New-Object 'System.Windows.Forms.ListBox'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$listview2 = New-Object 'System.Windows.Forms.ListView'
	$toolstrip1 = New-Object 'System.Windows.Forms.ToolStrip'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$trackbar1 = New-Object 'System.Windows.Forms.TrackBar'
	$label3 = New-Object 'System.Windows.Forms.Label'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$Image_Name = New-Object 'System.Windows.Forms.ColumnHeader'
	$PID = New-Object 'System.Windows.Forms.ColumnHeader'
	$User_Name = New-Object 'System.Windows.Forms.ColumnHeader'
	$CPU = New-Object 'System.Windows.Forms.ColumnHeader'
	$Memory_Usage = New-Object 'System.Windows.Forms.ColumnHeader'
	$toolstriplabel1 = New-Object 'System.Windows.Forms.ToolStripLabel'
	$textbox1 = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$button1 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button2 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button3 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button4 = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator2 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator3 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$form1_Load={
		Get-ComputerTxtBox
		$textbox1.Text = $ComputerName
	}
	
	   ### This sets up the context menu for a selected item on the services page.
	   $row_click = { set-context-menu };
	
	   ### $listview2(the listview that shows the services)
	   $listview2.AllowColumnReorder = "True";
	   $listview2.Dock = "Fill";
	   $listview2.Name = "SDGCols";
	   $listview2.FullRowSelect = "True";
	   $listview2.View = "Details";
	   $listview2.MultiSelect = $false;
	   $listview2.Columns.Add("displayname", "Display Name", 100).tag = [System.String];
	   $listview2.Columns.Add("name", "Service Name", 100).tag = [System.String];
	   $listview2.Columns.Add("processid", "PID", 50).tag = [System.Int32];
	   $listview2.Columns.Add("description", "Description", 80).tag = [System.String];
	   $listview2.Columns.Add("state", "Status", 60).tag = [System.String];
	   $listview2.Columns.Add("startmode", "Startup Type", 80).tag = [System.String];
	   $listview2.Columns.Add("startname", "Log On As", 100).tag = [System.String];
	   $listview2.Parent = $Tab3;
	   $listview2.FullRowSelect = $true;
	   $listview2.Add_ColumnClick($columnClick);
	   $listview2.Add_ItemSelectionChanged($row_click);
	
	   ### Build the context menu for the processes tab
	   $svcs_CM = new-object System.Windows.Forms.ContextMenuStrip;
	   ### The menu options
	   $start_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Start";
	   $stop_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Stop";
	   $cycle_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Recycle";
	   $svc_props = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Properties";
	
	   $svcs_CM.Items.Add($start_svc) | out-null; # Add options to the context menu 
	   $svcs_CM.Items.Add($stop_svc) | out-null;
	   $svcs_CM.Items.Add($cycle_svc) | out-null;
	   $svcs_CM.Items.Add($svc_props) | out-null;
	
	   ### This sets up sorting for a clicked column. The first IF determines if this is the  
	   ### same column that was clicked last time. If not, it sets the order to descending so  
	   ### that the next IF will reset it to ascending (the default for a new column click).  
	   ### The last IF determines if we're sorting strings or numbers.    
		$columnClick = {  
	      $cn = $_.Column;  
	      $obj = $args[0];   ### Which listview  
	      $typ = $obj.Columns[$cn].tag.tostring()  
	         if ($things[$obj.name] -ne $cn) {  
	         $things[$obj.name] = $cn;  
	         if ($typ -eq "System.String") {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	         } else {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	         }  
	      }  
	      if ($obj.Sorting -eq [System.Windows.Forms.SortOrder]::Descending) {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	      } else {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	      }  
	      if ($typ -eq "System.String") {  
	         $obj.ListViewItemSorter = new-object ListViewItemComparer($cn, $obj.Sorting);  
	      } else {  
	         $obj.ListViewItemSorter = new-object ListViewItemIntComparer($cn, $obj.Sorting);  
	      }  
	   }  
	   ### Set the actions for when each of the options is selected
	   $start_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).servicesdependedon;
	         start-related-services $sname $d;
	      }
	   }
	
	   $stop_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).dependentservices;
	         $confirm = "Yes";
	         if ($d.count -gt 0) {
	            $warning = "The following services are dependent upon $sname running. Do you want to kill them, also?`n`n";
	            foreach ($dependent in $d) { $warning += $dependent.name + "`n"; }
	            $confirm = [System.Windows.Forms.MessageBox]::Show($warning, "No kidding?", "YesNo");
	         }
	
	         if ($confirm -eq "Yes") { stop-related-services $sname $d; }
	      }
	   }
	
	   $cycle_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).dependentservices;
	         $confirm = "Yes";
	         if ($d.count -gt 0) {
	            $warning = "The following services are dependent upon $sname running and will be cycled, also. Do you want to continue?`n";
	            foreach ($dependent in $d) { $warning += $dependent.name + "`n"; }
	            $confirm = [System.Windows.Forms.MessageBox]::Show($warning, "No kidding?", "YesNo");
	         }
	
	         if ($confirm -eq "Yes") {
	            stop-related-services $sname $d;
	            start-related-services $sname $d;
	         }
	      }
	   }
	
	   $svc_props_click = {
	      $ps = @{};
	      foreach ($si in $listview2.SelectedItems) {
	         $svc = CIM-Stuff win32_service ("name='" + $si.subitems[$listview2.columns["name"].index].Text + "'");
	         $svc | gm -membertype property | % { $p = $_.name; $ps.add($p, $svc.$p) };
	         $props = $ps | ft -auto | out-string;
	      }
	
	      display-myMessageBox $props;
	   }
	
	   $start_svc.Add_Click($start_svc_click);
	   $stop_svc.Add_Click($stop_svc_click);
	   $cycle_svc.Add_Click($cycle_svc_click);
	   $svc_props.Add_Click($svc_props_click);
	
	   $listview2.ContextMenuStrip = $svcs_CM;
	
	   ### Build the context menu for the processes tab
	   $procs_CM = new-object System.Windows.Forms.ContextMenuStrip;
	
	   $end_proc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "End Process";
	   $proc_props = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Properties";
	
	   $procs_CM.Items.Add($end_proc) | out-null; # Add option to context menu 
	   $procs_CM.Items.Add($proc_props) | out-null;
	   $end_proc_click = ({
	   	  $pi = $listview1.columns["PID"].index;
	   	  $in = $listview1.columns["Image_Name"].index;
	      foreach ($si in $listview1.SelectedItems) {
	         $label1.text = "Killing process " + $si.subitems[$pi].text + " (" + $si.subitems[$in].text + ") ...";
	         CIM-Method win32_process ("handle='" + $si.subitems[$pi].Text + "'") terminate;
	         $label1.text += " Stopped";
	      }
	   })
	
	   $proc_props_click = ({
	      $props = "";
	   	  $pi = $listview1.columns["PID"].index;
	      foreach ($si in $listview1.SelectedItems) {
	      	$props = Get-WmiObject win32_process -computer $ComputerName -filter ("handle='" + $si.subitems[1].Text + "'") | out-string;
	        #$props = CIM-Stuff Win32_PerfFormattedData_PerfProc_Process ("idprocess='" + $si.subitems[$pi].Text + "'") | out-string;
	        #$props = (CIM-Stuff win32_process ("handle='" + $si.subitems[$pi].Text + "'")).ciminstanceproperties | sort -property name | select-object -property name,value | ft -auto | out-string;
	        #$props = CIM-Stuff win32_process ("handle='" + $si.subitems[$pi].Text + "'") | select-object -property * | out-string;
	      }
	
	      display-myMessageBox $props;
	   })
	
	   $end_proc.Add_Click($end_proc_click);
	   $proc_props.Add_Click($proc_props_click);
	
	   $listview1.ContextMenuStrip = $procs_CM;
	
	   $pcs = {
	      if ($_.scrollorientation -eq "HorizontalScroll") {
	        $picturebox1.horizontalscroll.value = $_.newvalue;
	      } else {
	        $picturebox1.verticalscroll.value = $_.newvalue;
	      }
	   }
	
	   ### After about 15 days of screwing around, I finally figured out that in order to get this to work
	   ### correctly with the picturebox, we can't set anything on AutoScrollMargin right here. We HAVE to
	   ### wait until we figure out how big the bitmap will be and then set it. I don't really care how big it is
	   ### just as long as it's big enough to display everything, so when we do get around to setting the size,
	   ### it's actually much bigger than it needs to be. Maybe someday I'll get around to sizing it correctly,
	   ### but probably not. It works, and that's what I care about.
	#  $picturebox1.AutoScroll = $true;
	#  $picturebox1.AutoScrollPosition = new-object system.drawing.point(0, 0);
	   $picturebox1.Anchor = "Left, Top, Right, Bottom";
	   $picturebox1.BackColor = "black";
	   $picturebox1.BorderStyle = "Fixed3D";
	#  $picturebox1.add_scroll($pcs);
	   $picturebox1.Controls.Add($listbox1);
	
	   ### $listbox1
	   ### I don't remember where I found out about this. It seems that you can't get a scrollbar to just appear
	   ### on a panel device. There are only certain things that will allow a scrollbar to be added. A listbox is
	   ### one of those things. This does nothing except activate the scrollbar on $picturebox1.
	   $listbox1.Location = new-object system.drawing.point(210, 203);
	   $listbox1.Size = new-object System.Drawing.Size(0, 0);
	
	### Make a popup window to display properties for either a process or a service. I tried using a PropertyGrid, but
	### it never displayed the services satisfactorily.
	### Return a formatted datetime MM/DD/YYYY hh:mm:ss
	filter return-datetime {
	   ([datetime] ($_.substring(4,2) + "/" + $_.substring(6,2) + "/" + $_.substring(0, 4) + " " +
	       $_.substring(8,2) + ":" + $_.substring(10,2) + ":" + $_.substring(12,2))).tostring().trimend();
	}
	
	### A bit about all these hashes. I don't remember how I figured out that hashes are global, and I'm not
	### sure why they are. It may have something to do with $error being a hash and the need to have it
	### available everywhere, but that's just speculation. At any rate, I had all this data that needed to be
	### used in multiple functions, and this seemed like the easiest way at the time. I don't know what impact,
	### if any, it has on performance. It probably could have been done passing parameters as normal, but
	### this works well, it makes it very easy to re-initialize things to start over with a new machine, and
	### it hasn't brought any host machine to its knees (yet).
	$keyhash = @{};
	$hash = @{};
	$pointhash = @{};
	$parms = @{};
	$beforeprocs = @{};
	$pens = @{};
	$brushes = @{};
	$things = @{};
	$fonts = @{};
	$fonts.add("mss8",  (new-object System.Drawing.Font("Microsoft Sans Serif", 8.25, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("mssnb",  (new-object System.Drawing.Font("Microsoft Sans Serif", 8.25)));
	$fonts.add("cn9", (new-object System.Drawing.Font("Courier New", 9, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("cn8", (new-object System.Drawing.Font("Courier New", 8.25, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("verdana6", (new-object system.Drawing.Font("Verdana", 6)));
	$fonts.add("verdana8", (new-object system.Drawing.Font("Verdana", 8.25)));
	initialize-things;
	foreach ($clr in ($things["colors"])) {
	   $pens.add($clr, (new-object system.drawing.pen($clr)));
	   $brushes.add($clr, (new-object system.drawing.solidbrush($clr)));
	};
	
	$pens["red"].width = 4;
	
	################################
	### This is a string for the custom comparer class that I copied from a MS article
	### at http://msdn.microsoft.com/en-us/library/ms996467.aspx. I had read that you
	### could do this, and you can imagine my surprise at how well it works.
	$ccs = @"
using System;
using System.Collections;
using System.Windows.Forms;

public class ListViewItemComparer : IComparer {
  private int col;
  private SortOrder order;
  public ListViewItemComparer() {
      col=0;
      order = SortOrder.Ascending;
  }
  public ListViewItemComparer(int column, SortOrder order) 
  {
      col=column;
      this.order = order;
  }
  public int Compare(object x, object y) 
  {
      int returnVal= -1;
      returnVal = String.Compare(((ListViewItem)x).SubItems[col].Text, ((ListViewItem)y).SubItems[col].Text);
      if (order == SortOrder.Descending)
          returnVal *= -1;
      return returnVal;
  }
}
"@;
	
	### A similar class to use for comparing columns of integers so they don't get compared as strings.
	$cci = @"
using System;
using System.Collections;
using System.Windows.Forms;

public class ListViewItemIntComparer : IComparer {
  private int col;
  private SortOrder order;
  public ListViewItemIntComparer() {
      col = 0;
      order = SortOrder.Ascending;
  }
  public ListViewItemIntComparer(int column, SortOrder order) 
  {
      col = column;
      this.order = order;
  }
  public int Compare(object x, object y) 
  {
      int returnVal = -1;
      int ix = int.Parse(((ListViewItem)x).SubItems[col].Text);
      int iy = int.Parse(((ListViewItem)y).SubItems[col].Text);
      returnVal = ix.CompareTo(iy);
      if (order == SortOrder.Descending)
         returnVal *= -1;
      return returnVal;
  }
}
"@;
	
	### This is the C# code to make a double-buffered listview. Atually, it's an OPTIMIZED double-buffered
	### listiview. The ControlStyles.DoubleBuffer control doesn't seem to do anything different than what we
	### see in a regular listview. At http://msdn.microsoft.com/en-us/library/system.windows.forms.controlstyles(v=vs.110).aspx,
	### it states that:
	###               If you set this property to true, you should also set the AllPaintingInWmPaint to true.
	### So I did. Of course it also states that for DoubleBuffer, you should set AllPaintingInWmPaint and UserPaint.
	### The problem is that if you set UserPaint, nothing shows up in the listview whether you use DoubleBuffer or
	### OptimizedDoubleBuffer. There may be a way to get it to work, but I quickly got bored with the whole thing.
	$dblv = @"
using System;
using System.Windows.Forms;

public class DoubleBufferedListView : System.Windows.Forms.ListView
{
    public DoubleBufferedListView()
    {
        this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
    }
}
"@;
	
	### Add the comparer class
	Add-Type $ccs -ReferencedAssemblies ('System.Windows.Forms');
	Add-Type $cci -ReferencedAssemblies ('System.Windows.Forms');
	Add-Type -WarningAction SilentlyContinue $dblv -ReferencedAssemblies ('System.Windows.Forms');
	
	$listview1_ColumnClick=[System.Windows.Forms.ColumnClickEventHandler]{
	 $cn = $_.Column;  
	      $obj = $args[0];   ### Which listview  
	      $typ = $obj.Columns[$cn].tag.tostring()  
	         if ($things[$obj.name] -ne $cn) {  
	         $things[$obj.name] = $cn;  
	         if ($typ -eq "System.String") {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	         } else {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	         }  
	      }  
	      if ($obj.Sorting -eq [System.Windows.Forms.SortOrder]::Descending) {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	      } else {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	      }  
	      if ($typ -eq "System.String") {  
	         $obj.ListViewItemSorter = new-object ListViewItemComparer($cn, $obj.Sorting);  
	      } else {  
	         $obj.ListViewItemSorter = new-object ListViewItemIntComparer($cn, $obj.Sorting);  
	      }  
	}
	
	$button1_Click={
		do-it-to-it
	}
	$Textbox1.Add_KeyDown({if ($_.KeyCode -eq "Enter") { do-it-to-it; }});  
	
	$trackbar1_ValueChanged={
	  Stop-timer;
	  if ($trackbar1.value -lt 500) { $trackbar1.value = 500 };   ### Don't let it fire off faster than twice a second... that would just be silly
	  $things["timer"].interval = $trackbar1.value;
	  update-Procs-Label;
	  Restart-timer;
	}
	
	$button2_Click={
		Stop-timer
	}
	
	$button3_Click={
		Stop-stuff
	}
	
	$button4_Click={
		get-services
	}
	
	$form1_FormClosing=[System.Windows.Forms.FormClosingEventHandler]{
	   Stop-timer;
	   $things["timer"].Dispose();
	   if ($things["session"] -ne $null) { remove-cimsession -cimsession $things["session"] }
	   $things["session"].Close();
	   $things["session"].Dispose();
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Taskmanager_listview1 = $listview1.SelectedItems
		$script:Taskmanager_listbox1 = $listbox1.SelectedItems
		$script:Taskmanager_listview2 = $listview2.SelectedItems
		$script:Taskmanager_trackbar1 = $trackbar1.Value
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$listview1.remove_ColumnClick($listview1_ColumnClick)
			$trackbar1.remove_ValueChanged($trackbar1_ValueChanged)
			$form1.remove_FormClosing($form1_FormClosing)
			$form1.remove_Load($form1_Load)
			$button1.remove_Click($button1_Click)
			$button2.remove_Click($button2_Click)
			$button3.remove_Click($button3_Click)
			$button4.remove_Click($button4_Click)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage1.SuspendLayout()
	$tabpage2.SuspendLayout()
	$tabpage3.SuspendLayout()
	$toolstrip1.SuspendLayout()
	$panel1.SuspendLayout()
	$trackbar1.BeginInit()
	#
	# form1
	#
	$form1.Controls.Add($tabcontrol1)
	$form1.Controls.Add($toolstrip1)
	$form1.Controls.Add($panel1)
	$form1.ClientSize = '801, 826'
	$form1.MinimumSize = '817, 788'
	$form1.Name = 'form1'
	$form1.SizeGripStyle = 'Show'
	$form1.Text = 'Form'
	$form1.add_FormClosing($form1_FormClosing)
	$form1.add_Load($form1_Load)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Controls.Add($tabpage3)
	$tabcontrol1.Dock = 'Fill'
	$tabcontrol1.Location = '0, 31'
	$tabcontrol1.Name = 'tabcontrol1'
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '801, 741'
	$tabcontrol1.TabIndex = 6
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($listview1)
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '793, 715'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'Processes'
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# listview1
	#
	$listview1.AllowColumnReorder = $True
	[void]$listview1.Columns.Add($Image_Name)
	[void]$listview1.Columns.Add($PID)
	[void]$listview1.Columns.Add($User_Name)
	[void]$listview1.Columns.Add($CPU)
	[void]$listview1.Columns.Add($Memory_Usage)
	$listview1.Dock = 'Fill'
	$listview1.FullRowSelect = $True
	$listview1.Location = '3, 3'
	$listview1.MultiSelect = $False
	$listview1.Name = 'listview1'
	$listview1.Size = '787, 709'
	$listview1.TabIndex = 0
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	$listview1.add_ColumnClick($listview1_ColumnClick)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($listbox1)
	$tabpage2.Controls.Add($picturebox1)
	$tabpage2.BackColor = 'Control'
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '793, 715'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Performance'
	#
	# listbox1
	#
	$listbox1.FormattingEnabled = $True
	$listbox1.Location = '3, 666'
	$listbox1.Name = 'listbox1'
	$listbox1.Size = '10, 4'
	$listbox1.TabIndex = 1
	#
	# picturebox1
	#
	$picturebox1.BackColor = 'Desktop'
	$picturebox1.Dock = 'Fill'
	$picturebox1.Location = '3, 3'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '787, 709'
	$picturebox1.TabIndex = 0
	$picturebox1.TabStop = $False
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($listview2)
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '793, 715'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'Services'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# listview2
	#
	$listview2.Dock = 'Fill'
	$listview2.FullRowSelect = $True
	$listview2.Location = '3, 3'
	$listview2.Name = 'listview2'
	$listview2.Size = '787, 709'
	$listview2.TabIndex = 0
	$listview2.UseCompatibleStateImageBehavior = $False
	$listview2.View = 'Details'
	#
	# toolstrip1
	#
	$toolstrip1.GripStyle = 'Hidden'
	[void]$toolstrip1.Items.Add($toolstriplabel1)
	[void]$toolstrip1.Items.Add($textbox1)
	[void]$toolstrip1.Items.Add($button1)
	[void]$toolstrip1.Items.Add($toolstripseparator1)
	[void]$toolstrip1.Items.Add($button2)
	[void]$toolstrip1.Items.Add($toolstripseparator2)
	[void]$toolstrip1.Items.Add($button3)
	[void]$toolstrip1.Items.Add($toolstripseparator3)
	[void]$toolstrip1.Items.Add($button4)
	$toolstrip1.Location = '0, 0'
	$toolstrip1.Name = 'toolstrip1'
	$toolstrip1.Padding = '4, 4, 4, 4'
	$toolstrip1.Size = '801, 31'
	$toolstrip1.TabIndex = 10
	$toolstrip1.Text = 'toolstrip1'
	#
	# panel1
	#
	$panel1.Controls.Add($label1)
	$panel1.Controls.Add($trackbar1)
	$panel1.Controls.Add($label3)
	$panel1.Controls.Add($label2)
	$panel1.Dock = 'Bottom'
	$panel1.Location = '0, 772'
	$panel1.Name = 'panel1'
	$panel1.Size = '801, 54'
	$panel1.TabIndex = 11
	#
	# label1
	#
	$label1.Location = '703, 30'
	$label1.Name = 'label1'
	$label1.Size = '76, 23'
	$label1.TabIndex = 10
	$label1.Text = 'reload speed'
	$label1.TextAlign = 'MiddleCenter'
	#
	# trackbar1
	#
	$trackbar1.BackColor = 'Control'
	$trackbar1.Cursor = 'Default'
	$trackbar1.LargeChange = 100
	$trackbar1.Location = '703, 2'
	$trackbar1.Maximum = 8000
	$trackbar1.Name = 'trackbar1'
	$trackbar1.Size = '76, 45'
	$trackbar1.TabIndex = 8
	$trackbar1.TickFrequency = 1000
	$trackbar1.Value = 1000
	$trackbar1.add_ValueChanged($trackbar1_ValueChanged)
	#
	# label3
	#
	$label3.Location = '7, 7'
	$label3.Name = 'label3'
	$label3.Size = '399, 23'
	$label3.TabIndex = 9
	#
	# label2
	#
	$label2.Location = '7, 30'
	$label2.Name = 'label2'
	$label2.Size = '399, 23'
	$label2.TabIndex = 7
	#
	# Image_Name
	#
	$Image_Name.Text = 'Image Name'
	$Image_Name.Width = 230
	#
	# PID
	#
	$PID.Text = 'PID'
	#
	# User_Name
	#
	$User_Name.Text = 'User Name'
	$User_Name.Width = 233
	#
	# CPU
	#
	$CPU.Text = 'CPU'
	#
	# Memory_Usage
	#
	$Memory_Usage.Text = 'Memory Usage'
	$Memory_Usage.Width = 111
	#
	# toolstriplabel1
	#
	$toolstriplabel1.Name = 'toolstriplabel1'
	$toolstriplabel1.Size = '94, 20'
	$toolstriplabel1.Text = 'Computername:'
	#
	# textbox1
	#
	$textbox1.Font = 'Segoe UI, 9pt, style=Bold'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '200, 23'
	#
	# button1
	#
	$button1.DisplayStyle = 'Text'
	#region Binary Data
	$button1.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button1.ImageTransparentColor = 'Magenta'
	$button1.Name = 'button1'
	$button1.Size = '64, 20'
	$button1.Text = 'Get Status'
	$button1.add_Click($button1_Click)
	#
	# button2
	#
	$button2.DisplayStyle = 'Text'
	#region Binary Data
	$button2.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button2.ImageTransparentColor = 'Magenta'
	$button2.Name = 'button2'
	$button2.Size = '42, 20'
	$button2.Text = 'Pause'
	$button2.add_Click($button2_Click)
	#
	# button3
	#
	$button3.DisplayStyle = 'Text'
	#region Binary Data
	$button3.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button3.ImageTransparentColor = 'Magenta'
	$button3.Name = 'button3'
	$button3.Size = '34, 20'
	$button3.Text = 'Quit'
	$button3.add_Click($button3_Click)
	#
	# button4
	#
	$button4.DisplayStyle = 'Text'
	#region Binary Data
	$button4.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button4.ImageTransparentColor = 'Magenta'
	$button4.Name = 'button4'
	$button4.Size = '95, 20'
	$button4.Text = 'Refresh Services'
	$button4.add_Click($button4_Click)
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = 'toolstripseparator1'
	$toolstripseparator1.Size = '6, 23'
	#
	# toolstripseparator2
	#
	$toolstripseparator2.Name = 'toolstripseparator2'
	$toolstripseparator2.Size = '6, 23'
	#
	# toolstripseparator3
	#
	$toolstripseparator3.Name = 'toolstripseparator3'
	$toolstripseparator3.Size = '6, 23'
	$trackbar1.EndInit()
	$panel1.ResumeLayout()
	$toolstrip1.ResumeLayout()
	$tabpage3.ResumeLayout()
	$tabpage2.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol1.ResumeLayout()
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: Taskmanager.psf

#Start the application
Main ($CommandLine)
