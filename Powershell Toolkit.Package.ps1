#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: cfba2739-092a-48d5-9ae9-9fc3160d1664
# Source File: \\kt.ur.ch\kt\home\renato.bacchi\documents\SAPIEN\PowerShell Studio 2015\Projects\Powershell Toolkit\Powershell Toolkit.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
wAMAAB+LCAAAAAAABACVk11vgjAUhu9N/A+Ee4SqcyPBJpsfy5JNjSO7WrIc4eCYpSUt7OPfrwgY
xhKDl+/5eM5p+9bbYiA+Uf7MIQPa7xmGt5HiA4PsKLR8QaliwSkZEM+uRZVbxgwf5jSIdjC8HrmW
4w7BGt+EV5YL6FpuFIzIxAnJZDL27Kq4aq2m+D8pUsezm7KGCxbqcZU8BWiI1nyhcaVqZ5Fbi1Ur
W0vV3LsJ1tLYYoQSeYArSHBqmsZdHrNwajomfc5AZnk6SJUqj3G+dQaMWU8Q86WQyVuqoiarjmtY
1Bl2z8QOmEaRBsqYiSQBHi6+M+TFq0xNX+Zo0rJa6Qmk84Tbnciz9q7H4EWLrtNML6LaoCp8EcoH
ddDHgz3KNq6R6oo8tROzNNDrI/B9rhGaEHa6pybi6LIziFKUFjuZu1RrGe9jDqwoKMB0I760Nd+R
McMXgh3i4spT3eLZ/2r7Pc/+82N/AZwFk/DAAwAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.96
     Generated on:       17.11.2015 13:42
     Generated by:       renato.bacchi
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2015
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
SwQAAB+LCAAAAAAABAC9lEtLAzEQgO+C/yH0vOzD7boWsgtS6UXQ4kr1mk1nS2geZZK07L93W0sV
PYiFhlwyEzIfH8MMfQFutoD9A3OMDBcrjK5GN6P6+ooQ+oxiJTSTMyHhiSmoG8fQ+U28sZYmv14P
f+6tBdVKAfYQf2X6WlluUIo2IosjaRyn+xORqZfOI1QavEMmIzL3Qw3+CP2rWYOu2rJkBS9us0k+
hvRuQpNT1Z+UprcOVAhG/Cb00uxsPDOobBDivk9hQMh2Qq/OYaV5V3Rll2XLImU5+5v1rmQYJ4HA
ncG+AdwKDme17N92U4MQRO9oNUczqF3A7RR+zjZNvi+P+gNBqg7+SwQAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
ozU9Z6FjeUeNgDEM74p0k1MrAAAKvk+2FHrUumOvdRPYkG2mHA0mCzPVoukQllyrOYLZMWDLXAKv
TveMPGJ4fzv/Nm2aEMYjwWYVvUsyR5at9qBJlS4Erc8sMBaf5F2kLgpL6vR00bK576I8TF3xShiZ
UM84TukPHRnf38xef8DImFuwsWasxLnSWLBY3jwPebpvUMBCF6oixVymDqIH2C2lqJcdNJYmNm70
WF7UTdl2EHcohj3nlHpttAVoChW49W9ddfxfEeNL85Q/Lfo/DDA+tykC8yHhp88S8WvGi58U/m9f
aYT+K5VGv66U51+uNPp5Y/wqKo1+3S1+bHL1XU16+vP5kT+k1oiNpuj7Ucvjuzn5C1NEw0chyve/
/LzV/eNlX2CHyOWRISSGRwmCoymC/WiH8cd9v6CXJt0NSTrUZZuy0Vh8p6T/+L9s90tO4+8v/+5x
qSGN/jFokj42dv8LSvwY9Q9VJPh3julXKYDtPvzdf1c1+w/rOM3TNvlN9fX9kF+/sv4mN/qxFeeX
mgX8/WVqNOTledEp6A9fn1X99v3S+JWXGFGdTtN5FT18xpza6VCmv+mUfj/i1z+l37t9jLj+5yfy
1x4V/TeE+ld3uf1xW9Un4JNFqb901YfWPpSS/v1MfKfXTz9M7un1vpvc//j0If3/9x8/SP8fn37G
GX6s8OlnKNv38/MPr//0ziftbwzj9MvfL9EfV//5wncSOd/ZBh0NP/z94fP+xqme/yaN50SXJ+OW
2h+H+K5a8u+n6/sp+wWp/s8PPufnxP3+rR/E/Uk6rv1g+f/9zX5p0P/zV1D4uRv+9O4P9/zbp/25
2/ziaD+89XdW+3Mm8CdphQ3/j/XCxiDi19cU/+iOLycT+/7ri4qR4c/ro30h0C8qRv6MK760GNmc
02G3P075+Bjhy0uRleiR1r+7tdUfdzHqcz2l3EeHVb6sU26b0vbLUmHtx/6YMh66scumT3bUjp8+
lmB22tNfCKz/osaH0Becb/OLj/W5ZB8/LRr+pRL23/Jz1O+F/ZR+SPvp4/PUT+mHvB+z/Cn9S/6X
T39Jt180xD9FlrX/nqr9v/FjYf3G1kX+BT6t6z8/jd+hNN3Vv35z1h+ev6XQjx/6j/lbm0Gsv8vf
6pkxWdVHMpahnzYvax+FCYzInq88KZKijIv98dZHgjfzq3OsRjl/JbHzBSHeDkO6Ix+VRLpXs+aF
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
H4rBP3w9xcvPsrgI5r/cL59l+fvng8/UXn9mMuisIPj88Mzia/a9UaM7vXekFf/vtyszXuD2q7x8
fswb+dnud579rtfzDKUQqDfZ9/NIff3U2neL5Fe/1/+wj/26Xn/R+61SQB+jfGa98nkpmG+d/Moj
dLmGLMbbP3co8Tfe3b5R88Lr26+9NP4w9MdJ/tcm+PVe+Eu+PczT2Llcnwp79pHQv3G2LbG3bDu1
lczoQ7atrrrbnrEIWomuzbkz2/OT+7t9xKZ+LxCs0VkYLOjEj1R75E/HDDeXeVpYC9yMO/nlZUKy
MtfPL3bZnUrxlOPI1KcZxe4vT2uVJriS8CHbXsX93v64GXTXa7I1EYx9yTjBeTXVx1NqqpbkMvUH
9o7vDSLbbp2NUSVPpSxI2UU+36d0IESjc3dPLYnpaVjd37Urn5gkVtOVZuiVlnK1aTKtyKLGXdVp
ll1/sbGVflTNRvR5u7iMOuymKCWyuKgWY4+Wq7HosGR7pVhyxgJuubXKFhtzVMrZlCPVjtqeuPNq
MklFaShn3eFADMnEFw+8RI0nraa62+1WO2O3Ix2i8hpST83GC2q9LRLZX9zfuefG1Kj89mBwsW3i
rBLL05INz6Tb20oH3qK2SRbSc5IKuOmpvRObebJP/MBpOZuVrap21bhk3ky4BOkxF+/vymI8ZnKq
b7Yro0cr50qWNn6HJA+TbkfKhqZc2JtNcaFmB2/WIJIOS8jGVssoeRVne9dShrbcaaw2Dr9nmsA3
oz3eKt11qDvF8JBNhqWiT7vidpEnWxoqyB3LJf3deHssPV44bRd+h6MDZpVGiyERFIYolvplvN75
FF9N7+84z+uEfFQ5l0tnoiyrWc/PBuba3MfL7BjH+fmsNaJzyyfoGdV17BhMeGvMLtsJe2guXM1d
NOmm7PUmWqCc0Hui7L4at3dpa7+PTlSgE/OjWo2zdAf3tn6UzEu6eSLYmc9qlEG11XlaVuU3DxD6
3hxdhbv7wnlflo7dxhu9f2/4jiwdHfvz3Mwv59gYlR/of3/B5vVrT1q9La98NOKttdIzEfjvnzA+
v+73Ko+eHfJT0kXaQ7s2Xz8n/ZyyPovVH6K1vfcq7de7VH+Szr6wv/CH1s8sd04hjnjZn7jtsA8z
xTnu3eAZ8tp/AH1plrjeOf0TRYdI2yX7H7i084NKm0dHVU2Z5jnAJ1HRcUufB637O7ND7tbiOnB3
JqUt9JO1M31j0Q7sztywF3zkLUXZnqFscLT7XN7ItiHrOi/RpwXk7EHWsdKYmt3fMcyiZYZRZOpC
Q57zacFRkZwKVsiqx17/sHMWdqIE7FwbDkyeGw+rbeBYqTXe+bnVGfltJWlv00UU8ie9fX+36ZIm
SzcYdl82g+502lxtu12eoJq95SCa8wRBrmbxtGRIac4PRqS71MN+eppJ3XAz2/UNi5tfGnabMVYb
krm/S9aHLAjlXs8YHQY73RlctFLpW/nObBTZ2OwzjTSe9SaRuZFHodS3/XXMq3zgaZl7nAeyuO5I
7tTcn0nGyO7vyEk2afVb2oXoXJjTjO87xnzOU4bb6pFn6+wflIuVpsvJWIyk7qGnLZTzOt+EA6vJ
nxNyr4T6USwPQd/q8MT93SBck1rZ9067XnhssKNVe+nLW3rUbo5T8Rw4nUqUu0ogZUtvvQ2pBlmN
OtrsKAS9pnyc65Kzt7zFat8fxFPz/u5IZYOqP6T2+3AyjZZaK7G2sm4P09QJSDFsOM5U7+tLrbNY
xvqytT1mmipSm+7BHC/pkRP7qZidl3o6ZcUhzBYrWb9ntS3GJKn50BqruU3QK9fbXFRll08Vr+mE
Y3WXtLpjXW7Ymd33Fymz0idNYb6snF6yLg5ngt11W9b9HbuZRYS8U2zGXVpekafDRbG3hhOyW/Wn
yYoclKF88PYHVjpfQmbqGNO00xirm4JaDWd7Ylfsg/N0mjDKYQ4l4TJqUxWrrsar9YkbtZWeeb7Q
caT3luOlqib2lnN4daUrZZeVJqHDzPdqKCdknOpk0tDE1ah5spudUI3anH1/1xwfWv4h3npDWhDT
YngOsj6TjkXt7E+7Ls0NxMw66Ye90++0ZqZcplaLZXuWfDo1bLOM+eZ4MIwP0ba0t9H9XVWZmSru
JNWch7G8jR3jchny4qL0ege653qTcTAkL1Mox4YzZVK0iSwdZUS83qqtkS1cFtX0tIkbrnUg3fn9
3VinrVYSLHcHcTDsLuR8t17kPJ3I7HRsZH2KmXKi5Wt6JiTdi6Z96/Xl96wrf3dyixeX35rc4kfV
f7vc67V05PVV5pcHvpW9XfI9S80P8N623vwyej+wiPhlYnox73hVRi+N+ikCmtbA3iSdlxD7XUXz
bN70TdE8N+qn1N3TGtibRfMcYr+jaF6vRl6Vz6tDf4r9jD9DfJOgXsXwd5TWi0/jvSqol0b9lBg/
wcDeuIL1Ema/8abnk5f/X+DUW04uf2HMzFm9dcA7Dzn/y8ebv/IoX6ePnlxvdd+0Y0sn2drLrhuE
fHj21ka497962vHrgUzgZI4LvGecHD8ubwKlz3iKr57/Q4eo16enO6AS7c4zh6e/vnf9WOhvDk/v
2b9WJgyliBNj9gM3sL8cCBYzq+0FbZmsvP0nI/Q+eSEYMzoG/YHAPbr33v3wxxz6jj3xJ8OfOcfn
yVhEAujC3vfWL8zwqMcPcTK/5k2DJ+8uv6rMhucn3idT+scnMi3+8SlHtvR/6ST+ttXXev0Y0r/j
HYVfzc+HN6ffyJVb/z+XN1+8oPxTte0prP8Unt5eSn0Ha65D/gKHXvCyz0H5gTnYr2Yvfo/5F6ks
gvWfoLKP36N+B2t+vso+gvKH7H2/9R3CzwP+wt73133nYR6ucO7txPkPe8fo3/oIzLufgPlg6OsM
fT9H/wpLf08evduM23/Fjt/Lo/o9uTAvfjprQgQJfa7uRaXBuIDAPGf39V44RaGDetkm+kfVm17o
n0qh/XB+PfOW45a9aB3nnfhoC2TXvfSFVVcu3Evpz3fzi9uJT6ttq6VsKfTxBaZXKgzNrhfn1nop
x9NFP14v9Yu1KHOJp9vW7pxarSL25vrJ6cyP04XUHXe4tlWZHXUWVWPBLCdsxCNM7u8oxn4Ffl9e
Lfi9bZ5Tt6vP1qIcW4t27Pr44GFOF/iWpbkMpoOKWPRJKaCzRI8cMxce3Y3aM32v0YbGA7UczZQw
ck7RlMZrlMbRHOKMjp4JmAFnIrhum5Qp0TON68BsmiYAmA5cGbgmVEnRGrCNmlEstGEWisbPEWgl
/AddfYr20e8JmhHaJWoDBIuiEW4j1IMt0R2XoruUSKEZCEocUY4FI7gKpqdVhONMxW34nVFLiaLO
6HfVhTYrAfUw2wVhO56jO4AtRbUk1KOPZvQpnqA2BLRlrb4KM3S/jfgG7SElqqh99sUF5REYN/jr
6KKeGuVEdKZJuKeKeLmwgFrBRtRUlIRwg7ZUIWrVkt/VV/gdX0UVZqv/aqKr7eMZaEzFzgI+wgg7
qq9uWV83BHODsNM4PPNOwzMz93c7hIsd1bDh2kQzuSXgAFTMVAZfF1Z9xTMrSLOhf41B84pjE3Cs
cWuWNf03HJtPOQ4439qA000ibvnwO+6/QXzDVFWoJ/BjYdVXO6qveARcsQS4qsYRX28yZm6QbB/j
pl05eoMFPW+4YS7ga40D5vii1hoqjeor5lLdH/FNbF6pVG+yeaASINxgVw9UKupD/xvOWAewvkFP
zMkb3+zooccVJoNxxdpy64fb9K2NIcI4pG/1HTwS96hxhR5VrTVS9dC+zVBTf9WmWoLod5it1nWs
L3gE2ASGtbPqEXC9QcJ8xNebrG98BAjpA243TuKeN9xqPuIr5mMtqStOzK1/9UCL2Kz1Df31MAJw
vVFx00M8EtNQj8TtNKpt4kb1lW+1rPAdrCU3q6n5dZv5NhLPhCVVz3y1KnytZXrreZMN5set5w0C
lj3GqZZpGtX9+2jmkY36Yf9mX72NXVs2vj5oQXWVOfBTrXGC3/Py1r+GcLVvmA3/xVUPI25U3fiH
f6/5t9OUK99U6kEvH2kX9m/qU749tKvaV0i3EVd9q2V8669+ltSDvj3yOjeLBu+D+YKtq+ZjRT3i
482esdZgL4bt9IbtTRNhRmzRNZ8wFXgEliGD/WB+5Wt+teO81kPAjUCwFPUBR+xba4tWHzh8s76b
Hde/XyExNxwR3x55vEd2+pkvOE4w6tUjqteZseRuenfVw5pv2Hdoj71ybdkYh90VwuJqt9AfW9uN
jzcbAT5jmWLsb7CxxuKZR3Z9rfXq1u/mtTH/amqvtOGYdaPuZtFA1c0urxbN3PSxuuIIfL7yT2nW
kORdHRdulo5lA1pyhV1rR03VdcYaZwlBdEwU0TfIe61R/x6CMFnguMBe0J0hivHTJWp30YgG4tv0
gNoEajd9RENJbfKaWkdjEkRDD+Urday7v2uimH66crL8HM0wFZCf4Pi6URX4vap/7yIvj2ZowX2a
pHOK8vKbncJIEvXcaHVkhvYAQViVtO5D1qUR9ILiptQyotlSWFM2R+cltA8ufUL2ulRpxecrSFog
fyPOMIOX0ATSdYB1oniFMiB/KwUCtUFWZ/gdZV8xZVooT9OpeURrJd+gTJUuNWFArROa00Tk3xyX
DlD+YfTosc+dMPYIJlxNDWaeczRxBuoDiSZK7oAgjUouooyckRFNgXSFhGzhCSydewxrQrkEQJpW
CNK8BEhw9ShozyV6TfEzSk9oM0B85mjD5yLkezl65PMGgmn6GCYtU/wIetQwdfc16q4QAdKlB7gB
h09U2KNNSskpr0WTWPeBygD4aSRAFYKU0yaibq7WkMOEw5AWBEDiWQSJ1/gG4KabD7C08gHWERJI
kBVogYdzSMxPAWbiQK8Ad5VaJvSM4geIJs+v28A3ikMmQssaf6LMFoJhIwgbn5tTLkcffdFB7coX
p5Rl0SKlnpC2mJR0pQnJvIQ8mTfu7ziUMZeAA+ab4CAO73ygwk4e2nKtqUzNR6wlc0wdhSSnPdB2
f8eDnlArE6gDPgEsT+NONI+o5GxMJS1hXScR35YmQJJVpB0zCiAtNQSpC79jSChmaQiWieh+CiuH
9iNIUIGAzjcogwCI6hG1uwhnrzQoRO2iBbjJlJQBDBY42UIaiDUTfiFQ5DBMOqbELYLg+dyMWvYQ
BJpaJXSnBAw8iy40QUAWP4RaB3CrqTtSR47pIsv3yhn2AAaCMJ5R3QRRgz2CrHEOopYrQZa6RO9L
gFBLakXpKLfs+5wMskKRpUAW30YzAw4Kuk+iWC7mHMx0orgt4C6ChmeUodYWD7iD1rTRzIC7gfhG
0JyPsM8R9jNqbULPK/YIp7XJAL+gYotYwL1T4y4ZlJmDJpsZ0nCjhHaJ/JusCSTG3n/A3sDYlwh7
CXAFDmPcORF5KUGD+xuNETTAHfgnaOBrNBcg8EWdv2EvFGq0VMJ1hWuW4gmfXoLki5crl5rIKpHv
Bb3KNOaI9AtVYuDnEJ+wxwTOksA35P84TUV6d/UECXgt5P8swASoX6EILbYAN8AefO8aYNT+3Zag
B1SycB/NDBUo0lwTWRfYcZcGSEJZ+7MB8gAAaV6KB8pGuEWUUCGs0xI4v+E4POOq5IaIHxtifW2j
evUC/KFxHMHef/vI+2sTosZNQ3wTFCax6BB7b6S2tVcfUiBjgD1EM91i+gbJmjPpSEWanKM2jkya
O7m/AyqwrApKOCJvlPmCQjk9pqAWIBGNpksfRxyY8UAdS3qlwQwaqmfBS+lIQmKGfMhQU7qAG8gC
emYIB/AAJ4QrWQ4BBxfheqSsHEEQ4Mpk/ghB4AKACIJEvucAMzEk0nwP+RACxXSAARwtkK8Yol9A
EkNtmqP2CnkfDAHxTxtlmtDCfCsnAj0lwE6XTZT5BL6P46kEdge44VgFM4FW4Nj+GQIzpASQXQuu
SoY8Ao/zFSQRoWAyDap3EdNyfxf4OCNhEVX0BnlxyDdu2gIQiGs+d6Kw3jGYf8AnGnEeIs5jiJhv
DObbrgX69ACzxRxaIJka5pcQbX8koEyHxDZAIMlUdY5E4EhSArVgNci/XzNDiHaYf3QpXugpRGgf
tAfaKxSjMB+rJrIFsIEuypEAAwVwg4wmLCGD2UgMugPagWIWxhGknyPN1kqIjkAVnnGDY754zY8L
pG8R6rdrQW45KOUC4QR3SqQtFPLzgDWP9SsHvoAGbwievFpdgLRkQ3C19lgo+1eQ5UNbqG2BQCMA
NqYWvLaGLH1DiBTivI59bVFr6E220AacsS08UK1hHwK44LkBNmjolVrI20BjcyRjFP0opEU5opJE
fg4gDlFGcyJ48ClzJMEBcAP5XqSpwJfjF5oKI4BvB8SPmhvglXzwJVhzAdKhB5w3FFTv4yzWRTIt
kNdGMkU9sY9AEtCQHrHIFpC+oTUusLoD0lyEwwMGoGefZTxEtTPWJ2WKYGaoxnORtUzrKyW0Eadp
RCXgSqKcAPoRPsQB0DOkTTTWJuTfJMCNLldnhFOEdNpUH8kU6V8CsKfYmkC2WEI3PleIG06Lra89
5CGQfxuiWI50XqplCrjWuJjAaaUJ+SyCXSJcIn9VU4nanyGrWOOvdjrC2BfUFFHLFxqOr6iSFekA
S6JC3lsrq/zJDL549VowHrwWeKk24htai1m00YpmWNZZJ7Km2tpq3Uf8ousIbdZea9VFvw9QvFjh
qqnLnpBMSTRilcuFNhkivaKvfh/7jI1W1wk20lSbRXwDm8E19bBUukwqMQAJe1hCQ3ZaxwOIwACb
pDIUOXjkjegpyu6hCDipHJ6xzvOwl/rcRrTg308I1/u7obbKrt78hKRNl4YOMhZwhghVEedLM5qX
GK5UjRoij2uYNYo8kL8R5UMb1fVwB9cH4N/BA0LCiHJJSURtXP2cVDrSQO+yHPTQ0xHnof7CtmP6
Ix9yT7AVaOM6i0D64yXyCuk69CRQfASsSR9nXRzO+pE1Ia+D+QW4H3pcpME4H1VHgo60CHJOnCMl
4CsA22Mic75yAFxrv6X5SIYRapsoU4S8GNoS8iEUzIByqma5wtp1LAXEHcDtiGRqc5gqxHmwfBNd
b9UR8vuMjnwuwl19gERgSBED9UQfQYK2VMeFG6y8VEyqSJg2yiaQtWkocueYGkQlXWagDS6LaQGf
Avpm0LTK1REaxdM1qs9BpgLyvZDZ7TTIg6HKHqE25EJDvB7MoRkrEANArGlhNPi9punEgOYOQU/r
eDpAc9dxVKw1FzzAGe6XmDoayxY0WCgfIDqfIeZIo5E2oRwJwchUuk2JDj2+UgWZNeSMei1D8E4L
5DEBQrPGAWnVAEcgleNR5hPgCI98L9C7RvX5EvuvClmX6WsHVMMQuKZ2699tFAUnFbXW2E4pznGs
0qQ2wj1C3PAIFsUF/TNMLMPaMxLaCMVPjrvmltiKcE0NVneufTLKpOUbpFIA3GhFZQtUiwBHCxSz
r5xF/ANtMegJigc8zv4fUVmAt2IBUlHTVlef93empq4o16VTH65zVPliGUokpeCZhS8gID7RNPas
5gMETBPOQzBVIHWPYE5ovSPAXueqqRLmH0S9FQV5iYA8Aa4JVZRLCkMNrAx8N1HWEgMfgrwM+FRe
026ZMspUHjSULCMTSWKArAtG1FU7qjYhFz+hOFFX8WSZ4HVLDmAvzyjqXWWDoqCGILilzKL1Dg21
n1CFs1SJx34tqT3FEq1xjdCqxBxlNDVMwNpgfCR9pJERUC/JX0Caov0st5Q0BIlDKy+bB1uoZYR8
pzhEGTKMQFTRmCoZQ4BMewXaMkL2TIM23WYm0c4YQBqWGmqDJ0czAbvBF3A490ZxgsEW7iEvgzwC
wRyRtZkUkgDw00BWZKKs7EkbryPVu24NFJOmeM3GRxLAe2gqlh2HoiFN4/0tDop0tFKFIBN0oxTw
TlqvvK1x7dDanoV24aBG3iC9Qj3UejfuSD1qm3h3joIZ0MwlypUsBBbtzbnwO8ZN4+r9vnpGNPJb
7acQXQRBuu0DXrEFWGy9YwjXpyOx13kycuXTkxuVCEcY16A4lCPVI0tKI+o60+Iez3xd2UMjrxXd
lX9oRQbzD41Hb0Je1y0fegaPe952MXFPfL31g+uMqPtBf7a83ec4xLevfkHZ5+bxTNPymZkAYg/V
ME/5pmH+AP18s55BTCgnr6n1qBuVqE0/Hlnj+pnfzcd8u3Jc/FpWbq0Vj0eWD5LCkB7G3d995s/T
kYiapyOfh0g/gljXC1gTNz36655i4wGnekYCZ9r+DXcRc6Hp83g8XifHM4DvzJjy/QcUfX020cvH
Cr/3EQr0HQjvXPy6z1G4NcC3fZXi+adOvprirY+ctP/x6csjVt7LLz6J115GZ3DHy9jQiRP/p7Ns
g2GuaphrDPPhkI1/Unnu7WAaL7/Rfr1z+d9d7iZZHK5+ACr/bD7M+iWUmvhfAeOHM/jbEFmncH4N
oMwpw73/PbBa3U1/M9y02+t+y+k634a13MW/hqYwA2tKsovhZafQ9b5LZO+mjkky75eQd6UKvxCd
/xraWC8P/f0vAfXU7SE7qD9mHlb4+OfvwKHbXm26RH/grLuDntftf4HDQ7N2Zf9s6p6bnLzsgmD/
7/8H600YEI4fBAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms.DataVisualization, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$richtextbox_output = New-Object 'System.Windows.Forms.RichTextBox'
	$tabcontrol_Home = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox15 = New-Object 'System.Windows.Forms.GroupBox'
	$button_deleteGPO = New-Object 'System.Windows.Forms.Button'
	$button_gpresult = New-Object 'System.Windows.Forms.Button'
	$Button_gpupdate = New-Object 'System.Windows.Forms.Button'
	$groupbox14 = New-Object 'System.Windows.Forms.GroupBox'
	$button_export = New-Object 'System.Windows.Forms.Button'
	$button_clear = New-Object 'System.Windows.Forms.Button'
	$groupbox13 = New-Object 'System.Windows.Forms.GroupBox'
	$button_nbbattery = New-Object 'System.Windows.Forms.Button'
	$buttonFixWMI = New-Object 'System.Windows.Forms.Button'
	$button_shutdown = New-Object 'System.Windows.Forms.Button'
	$button_C = New-Object 'System.Windows.Forms.Button'
	$button_WOL = New-Object 'System.Windows.Forms.Button'
	$groupbox12 = New-Object 'System.Windows.Forms.GroupBox'
	$button_logoff_user = New-Object 'System.Windows.Forms.Button'
	$button_get_session = New-Object 'System.Windows.Forms.Button'
	$button_Userunlock = New-Object 'System.Windows.Forms.Button'
	$button_ResetPWD = New-Object 'System.Windows.Forms.Button'
	$groupbox11 = New-Object 'System.Windows.Forms.GroupBox'
	$button_DNScheck = New-Object 'System.Windows.Forms.Button'
	$button_ping4 = New-Object 'System.Windows.Forms.Button'
	$button_ipconfig = New-Object 'System.Windows.Forms.Button'
	$groupbox9 = New-Object 'System.Windows.Forms.GroupBox'
	$button_regedit = New-Object 'System.Windows.Forms.Button'
	$button_cmd = New-Object 'System.Windows.Forms.Button'
	$button_psremote = New-Object 'System.Windows.Forms.Button'
	$button_MSRA = New-Object 'System.Windows.Forms.Button'
	$button_Remotecontrol = New-Object 'System.Windows.Forms.Button'
	$button_rdp = New-Object 'System.Windows.Forms.Button'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox16 = New-Object 'System.Windows.Forms.GroupBox'
	$button_hotfix = New-Object 'System.Windows.Forms.Button'
	$groupbox7 = New-Object 'System.Windows.Forms.GroupBox'
	$button_MMCServices = New-Object 'System.Windows.Forms.Button'
	$button_compmgmt = New-Object 'System.Windows.Forms.Button'
	$groupbox6 = New-Object 'System.Windows.Forms.GroupBox'
	$button_localadmins = New-Object 'System.Windows.Forms.Button'
	$button_folderrights = New-Object 'System.Windows.Forms.Button'
	$button_profilerights = New-Object 'System.Windows.Forms.Button'
	$button_homerights = New-Object 'System.Windows.Forms.Button'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$button_PCGroups = New-Object 'System.Windows.Forms.Button'
	$button_ComputerGroups = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$button_autostart = New-Object 'System.Windows.Forms.Button'
	$button_installedSoftware = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$button_printer = New-Object 'System.Windows.Forms.Button'
	$button_USBDevice = New-Object 'System.Windows.Forms.Button'
	$button_systemtype = New-Object 'System.Windows.Forms.Button'
	$button_memory = New-Object 'System.Windows.Forms.Button'
	$button_processor = New-Object 'System.Windows.Forms.Button'
	$button_mainboard = New-Object 'System.Windows.Forms.Button'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox19 = New-Object 'System.Windows.Forms.GroupBox'
	$button_ipconfig2 = New-Object 'System.Windows.Forms.Button'
	$button_testport = New-Object 'System.Windows.Forms.Button'
	$button_hosts = New-Object 'System.Windows.Forms.Button'
	$button_routetable = New-Object 'System.Windows.Forms.Button'
	$button_checkWLAN = New-Object 'System.Windows.Forms.Button'
	$tabpage4 = New-Object 'System.Windows.Forms.TabPage'
	$chart1 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Chart'
	$groupbox21 = New-Object 'System.Windows.Forms.GroupBox'
	$labelPleaseEnterFileExten = New-Object 'System.Windows.Forms.Label'
	$button_process_stop = New-Object 'System.Windows.Forms.Button'
	$button_process_start = New-Object 'System.Windows.Forms.Button'
	$textbox_Process = New-Object 'System.Windows.Forms.TextBox'
	$groupbox20 = New-Object 'System.Windows.Forms.GroupBox'
	$button_cpuram = New-Object 'System.Windows.Forms.Button'
	$button_taskmanager = New-Object 'System.Windows.Forms.Button'
	$button_process_cmd = New-Object 'System.Windows.Forms.Button'
	$button_process_grid = New-Object 'System.Windows.Forms.Button'
	$button_process_owner = New-Object 'System.Windows.Forms.Button'
	$button_process_100 = New-Object 'System.Windows.Forms.Button'
	$button_proclasthour = New-Object 'System.Windows.Forms.Button'
	$button_process = New-Object 'System.Windows.Forms.Button'
	$tabpage5 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox8 = New-Object 'System.Windows.Forms.GroupBox'
	$button_servicesrunning = New-Object 'System.Windows.Forms.Button'
	$button_services = New-Object 'System.Windows.Forms.Button'
	$button_servicesauto = New-Object 'System.Windows.Forms.Button'
	$button_servicesautostop = New-Object 'System.Windows.Forms.Button'
	$button_servicesnonstandard = New-Object 'System.Windows.Forms.Button'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$button_servicesstop = New-Object 'System.Windows.Forms.Button'
	$button_servicesstart = New-Object 'System.Windows.Forms.Button'
	$button_servicesrestart = New-Object 'System.Windows.Forms.Button'
	$button_servicescheck = New-Object 'System.Windows.Forms.Button'
	$textbox_services = New-Object 'System.Windows.Forms.TextBox'
	$tabpage6 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox22 = New-Object 'System.Windows.Forms.GroupBox'
	$button_diskusage = New-Object 'System.Windows.Forms.Button'
	$button_deleteoffline = New-Object 'System.Windows.Forms.Button'
	$button_volumes = New-Object 'System.Windows.Forms.Button'
	$tabpage8 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox23 = New-Object 'System.Windows.Forms.GroupBox'
	$button_eventlogmmc = New-Object 'System.Windows.Forms.Button'
	$button_eventlog20 = New-Object 'System.Windows.Forms.Button'
	$button_eventlognames = New-Object 'System.Windows.Forms.Button'
	$tabpage10 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox18 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonTSHanging = New-Object 'System.Windows.Forms.Button'
	$button_getsccmcache = New-Object 'System.Windows.Forms.Button'
	$button_getadvertisedsoftware = New-Object 'System.Windows.Forms.Button'
	$groupbox17 = New-Object 'System.Windows.Forms.GroupBox'
	$button_sccm_start = New-Object 'System.Windows.Forms.Button'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$tabpage11 = New-Object 'System.Windows.Forms.TabPage'
	$button_search = New-Object 'System.Windows.Forms.Button'
	$textbox_search = New-Object 'System.Windows.Forms.TextBox'
	$tabpage_debug = New-Object 'System.Windows.Forms.TabPage'
	$button_getvariablesfilter = New-Object 'System.Windows.Forms.Button'
	$button_listvariables = New-Object 'System.Windows.Forms.Button'
	$textbox_debug = New-Object 'System.Windows.Forms.TextBox'
	$button_debug = New-Object 'System.Windows.Forms.Button'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$toolstrip1 = New-Object 'System.Windows.Forms.ToolStrip'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$toolstriplabel2 = New-Object 'System.Windows.Forms.ToolStripLabel'
	$FileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$button_Check = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripmenuitem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$textbox_username = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$button_GetPC = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripseparator10 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$quitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator4 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aDExplorerToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$procexpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$procmonToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$nirLauncherToolStripMenuItem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$optionsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$textbox_computername = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$Toolstrip_os = New-Object 'System.Windows.Forms.ToolStripLabel'
	$Toolstrip_OSStatus = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_home = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_home_status = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_user = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_user_status = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstripseparator2 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator11 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator12 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!P O W E R S H E L L  -    T O O L K I T !!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!O P E N I N G    A C T I O N S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$OnLoadFormEvent = {
		# Add 1 New Line in Richtextbox an the Date/Time	
		$Date = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
		Add-RichTextBoxTitle -text "$Date"
		
		# Get List of all AD-Computers for AutoComplete in $ComputerTxtBox
		$PCList = (Get-QADComputer -SizeLimit 5000).name
		$textbox_computername.AutoCompleteCustomSource.AddRange($PCList)
		# Get List of all PoSH-Functions for debugging
		$debugger = (Get-Command -CommandType 'Cmdlet', 'Function', 'Workflow').name
		$textbox_debug.AutoCompleteCustomSource.AddRange($debugger)
		
		#region Load Config
		# # # Load Config # # #	
		
		# # # # Checking if Configfolder exisits # # # #
		$Folderexisting = Test-Path $global:Confpath
		if ($Folderexisting -eq $true)
		{
			Add-RichTextBoxOK -text "$folder $global:Confpath $existing"
		}
		if ($Folderexisting -eq $false)
		{
			New-Item -ItemType directory -Path $global:Confpath
			$Folderexisting = Test-Path $global:Confpath
			if ($Folderexisting -eq $true)
			{
				$created = $lang.created
				Add-RichTextBoxOK -text "$folder $global:Confpath $created"
				if ($Folderexisting -eq $false)
				{
					Add-RichTextBoxWarn -text "$configerror $global:Confpath"
				}
			}
		}
		
		# # # # Checking if Configfile exists # # # #
		$loadconfig = $Confpath + "/Config.csv"
		if (Test-Path $loadconfig -PathType Leaf)
		{
			$load = Import-Csv -Path $loadconfig
			foreach ($Line in $Load)
			{
				$global:Profilefolder = $($Line."global:Profilefolder")
				$global:Homefolder = $($Line."global:Homefolder")
				$global:Outfile = $($Line."global:Outfile")
				$global:SiteName = $($Line."global:SiteName")
				$global:SCCMServer = $($Line."global:SCCMServer")
				$global:SCCMNameSpace = $($Line."global:SCCMNameSpace")
				$global:SCCMEnabled = $($Line."global:SCCMEnabled")
				$global:Nirlauncher = $($Line."global:Nirlauncher")
				$global:Sysinternals = $($Line."global:Sysinternals")
				$global:CmRCViewer = $($Line."global:CmRCViewer")
				Add-RichTextBoxOK -text "$configfrom $global:Confpath $loaded"
			}
		}
		else
		{
			Add-RichTextBox -text $lang.noConfigFound
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure the shown options"
			Call-Options_psf
		}
		
		# Loading Combobox	
		Load-ComboBox $combobox1 $Cycle1, $Cycle2, $Cycle3, $Cycle4, $Cycle7, $Cycle8, $Cycle9
		
		
		# # # # Deactivating SCCM based functions if SCCM is unchecked # # # #
		if ($global:SCCMEnabled -eq $false)
		{
			$button_GetPC.Enabled = $false
			$tabpage10.Enabled = $false
			$textbox_username.Enabled = $false
		}
		#endregion
		
		# # # Some Settings # # #
		
		# Set the status bar name
		$statusbar1.Text = $StatusBarStartUp
		
		# Set the Form Title
		$MainForm.Text = $MainFormTitle
		
		# Set Variable for Computername	
		$textbox_computername.Text = $env:COMPUTERNAME
		
		# Change the text of some buttons / menus / groupboxes to the used language	
		$button_folderrights.Text = $lang.button_folderrights
		$button_homerights.Text = $lang.button_homerights
		$button_PCGroups.Text = $lang.button_PCGroups
		$button_profilerights.Text = $lang.button_profilerights
		$FileToolStripMenuItem.Text = $lang.FileToolStripMenuItem
		$groupbox11.Text = $lang.groupbox11
		$groupbox12.Text = $lang.groupbox12
		$groupbox5.Text = $lang.groupbox5
		$groupbox6.Text = $lang.groupbox6
		$optionsToolStripMenuItem.Text = $lang.OptionsToolStripMenuItem
		$quitToolStripMenuItem.Text = $lang.QuitToolStripMenuItem
		$tabpage3.Text = $lang.tabpage3
		$tabpage4.Text = $lang.tabpage4
		
		
		## Verify External Tools are presents
		
		# SystemInfo.exe
		if (Test-Path "$env:systemroot/system32/systeminfo.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Systeminfo.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Systeminfo.exe not found"
		}
		
		# MSInfo32.exe
		if (Test-Path "$env:programfiles\Common Files\Microsoft Shared\MSInfo\msinfo32.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - msinfo32.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - msinfo32.exe not found"
		}
		
		# DriverQuery.exe
		if (Test-Path "$env:systemroot/system32/driverquery.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Driverquery.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Driverquery.exe not found"
		}
		
		# Sysinternals
		if (Test-Path "$global:Sysinternals" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Sysinternals found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Sysinternals not found - Buttons ADExplorer, procexp, Procmon, PSExec, Disabled"
			$button_cmd.Enabled = $false
			$aDExplorerToolStripMenuItem.Enabled = $false
			$procexpToolStripMenuItem.Enabled = $false
			$procmonToolStripMenuItem.Enabled = $false
		}
		
		Add-RichTextBox -text ""
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion load
	#------------------------------------------------------------------------------------------#
	#region Code
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!C O D E!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#region Buttons
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!!B U T T O N S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	############################################################################################
	$button_autostart_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Startup Commands"
		$result = Get-WmiObject Win32_StartupCommand –ComputerName $ComputerName | Sort-Object Caption | Format-Table Caption, User, Command -auto | out-string -Width $richtextbox_output.Width
		Add-richtextbox $result
		Add-RichTextBox -text "$ComputerName - Startup Commands - Done."
	}
	############################################################################################
	$button_C_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Open C$ Drive"
		$PathToCDrive = "\\$ComputerName\c$"
		Explorer.exe $PathToCDrive
	}
	############################################################################################
	$button_check_Click = {
		$MainForm.Cursor = 'WaitCursor'
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $Checkconn"
		if (Test-Connection $ComputerName -Count 1 -Quiet -TimeToLive 4)
		{
			$button_Check.Text = "Online"; $button_Check.ForeColor = "green"
			# Base64 Code of the "green" cable icon
			$button_Check.Image = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAg9JREFUeNqkU99LU2EYfr6zQ13sJvwLmpgIYQitMJo/aUNTDAlWN
0oXXgTexBS60UbSRTdeFF0EBUYoCqITdFuj7WKOM1s67KKurK1QCBW3icyp53hevy/cwXRTqBfOOXB4nud9n+d7P0ZE+K/6F4H374YoOhebEVz5LHD9Ux/pOkG00WBC76UVWCoqMTIy3HKj+vrpE9
S6vRRZI/rwi2jqB9H4EtG1JwHq7+kWpKuCKxUjNwz4qavjNlyDHqxvqYgt56D8zKLzTi3CF9oFJC5eRQU0HdhPZ3DP2Y5Xw9MoObeDPU1DaisLE6kGTirU2eb20etbDG+mo9CzG8nG5lZMzYRhlra
Rzu5BYigsIDx33m9Ct7Mu0RXQEB1osXpDMYtZzyQv1zTis7KAdE7lAuzkMYq0lXUe0uMJej5P9HIulajjgiIsG/++UFbJ6dkg+zP/n395rnRUaG0TcD1og2diEquq2WK7WZXkUy28dciYDC4i9W0e
H/uarfkARRl7QGDc3y6SXKTjrh2jHi+q6h2W8sqKxMPQUmnY3WQ9hMaP2jYmEEuyuaNB1XV8zwAOew2+RkLYPV9SKksGMX48dEOgt2wZY14FKjNhn7tcycm4Um3F7y+fEOwzup8oOb/bF/l6OhaHM
DsrQSYNjHFTTEKw/2/PBS+Tzx+I9Lge5dM9/px+EQ+PsewscDGBAwEGAIugAWGn5gy5AAAAAElFTkSuQmCC')
			Add-RichTextBoxOK -text "$Computername is online"
			
			# Get OS
			$OSWin32_OS = Get-WmiObject -Query "SELECT * FROM Win32_OperatingSystem" -ComputerName $ComputerName
			$OSCaption = ($OSWin32_OS | Select-Object caption).Caption
			$OSVersion = $OSWin32_OS.Version
			#2003/xp+
			$OSOther = $OSWin32_OS.OtherTypeDescription
			$OSSP = $OSWin32_OS.CSDVersion
			#2008/win7+
			$OSArchi = $OSWin32_OS.OSArchitecture
			$OSFullCaption = "$OSCaption $OSOther $OSArchi $OSSP"
			if ($OSFullCaption -contains "64")
			{
				$OSFullCaption = "$OSCaption $OSOther x86 $OSSP"
			}
			$Toolstrip_Os.Text = "OS:"
			$toolstrip_OSStatus.Text = $OSFullCaption.Replace('  ', ' ')
			$toolstrip_OSStatus.ForeColor = "blue"
			
			# Get the uptime
			# Uptime incorrect in Windows 8.1 / 10 if fast reboot is enabled (default)
			$LBTime = $OSWin32_OS.ConvertToDateTime($OSWin32_OS.Lastbootuptime)
			[TimeSpan]$uptime = New-TimeSpan $LBTime $(get-date)
			$OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
			
			# Get the User
			$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
			$textbox_username.Text = $Username
			if ($OS -lt "6.3.9600")
			{
				$Profilepath = "$Profilefolder\$username.v2"
				# Deactivate functions that do not work with OS < Windows 8.1"
				$Button_gpupdate.Enabled = $false
			}
			else
			{
				$Profilepath = "$Profilefolder\$username.v4"
				# Activate functions that only work with Windows 8.1 and 10"
				$Button_gpupdate.Enabled = $true
			}
			
			$toolstrip_User.Text = "User:"
			$toolstrip_user_status.Text = "$Profilepath"
			$toolstrip_user_status.ForeColor = "blue"
			$toolstrip_user_status.islink = $true
			
			# Get Home Drive
			$Homepath = "$Homefolder\$Username"
			$toolstrip_home.Text = "Home:"
			$toolstrip_home_status.Text = "$Homepath"
			$toolstrip_home_status.ForeColor = "blue"
			$toolstrip_home_status.IsLink = $true
			$toolstripseparator1.Visible = $true
			$toolstripseparator2.Visible = $true
			
			# Activate Buttons Rights Home and Rights Profile
			$button_homerights.Enabled = $true
			$button_profilerights.Enabled = $true
			# Output
			Add-RichTextBox -text "Username: `t$Username`nWindows: `t$OS`nProfile: `t$Profilepath `nHome: `t`t$Homepath`nUptime: `t$($uptime.days) Days $($uptime.hours) Hours $($uptime.minutes) Minutes $($uptime.seconds) Seconds"
		}
		else
		{
			# Base64 Code of the "red" cable icon
			$button_Check.Image = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZ
Wdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxID
Y0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjp
EZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIg
eG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNS4xIFdpbmRvd3MiIHhtc
E1NOkluc3RhbmNlSUQ9InhtcC5paWQ6Q0M1NzBEQTQ3RjBEMTFFNUE5QjdGMkUwMzJFNTYyQTAiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6Q0M1NzBEQTU3RjBEMTFFNUE5QjdGMkUwMzJFNT
YyQTAiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpDQzU3MERBMjdGMEQxMUU1QTlCN0YyRTAzMkU1NjJBMCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDp
DQzU3MERBMzdGMEQxMUU1QTlCN0YyRTAzMkU1NjJBMCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PogXkCcAAACuUExURczM
zL8zM7QxMcU1NcQ1Ncc2Nr0zM7IwMNx+fuenp+KTk9lwcOCMjMI0NOqystdqasE0NOy3t+7AwN2Bge29vbwzM+28vOahoeemproyMuOWluGOjuekpNt4eLkyMu/ExOWenvLQ0OWbm9zc3Nt5edx8f
Npzc7YxMa8vL9+GhvPS0vTX1+aiouu0tNhubtdra8uurtx7e7cxMeKRkemtrfX19fDHx+irq96EhP///4XRHlAAAAA6dFJOU/////////////////////////////////////////////////////
///////////////////////wA3wP8KAAAAoElEQVR42kTPRRLDMAwFUMkUbpjLzEy+/8XqtImrlfXGkuaD7MpDFMeRhK7HyTNKSqKBhUav3vSZBrQKUpnuHyDd34bmhbbgZxLEdIE+/4HTW6s/ojp
xaMDDgjQOTPUSdnjISvXwEwlf9rZGbgVqymi3B1FIbButFXRwt/NrbDJ9H8f12xVL3kUAJ3Xj+YDqTPAilFJ+1qFhBk09NHwEGABOxiQDxhPG6wAAAABJRU5ErkJggg==')
			$textbox_username.Text = ""
			$button_Check.Text = "Offline"; $button_Check.ForeColor = "red"
			Add-RichTextBoxWarn -text "$Computername is offline!"
			$Toolstrip_Os.Text = ""
			$toolstrip_OSStatus.Text = ""
			$toolstrip_User.Text = ""
			$toolstrip_user_status.Text = ""
			$toolstrip_home.Text = ""
			$toolstrip_home_status.Text = ""
			$toolstripseparator1.Visible = $false
			$toolstripseparator2.Visible = $false
		}
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_checkWLAN_Click = {
		# This only works with Centrino NICs ATM, it must be filled with more nic types
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Checking Wireless-Adapter"
		$NicInfo = Get-NICInfo -ComputerName $ComputerName | Where { $_.Name -like "*Centrino*" } | Out-String
		if ($NicInfo -eq "")
		{
			Add-RichTextBoxWarn -text "No WLAN-Hardware found"
		}
		else
		{
			Add-RichTextBox -text "$NicInfo"
		}
	}
	############################################################################################
	$button_clear_Click = {
		$richtextbox_output.Text = ""
		$Date = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
		Add-RichTextBox -text ""
		Add-RichTextBoxTitle -text "$Date"
	}
	############################################################################################
	$button_cmd_Click = {
	Get-ComputerTxtBox
	Add-RichTextBoxTitle -text "$ComputerName - $RunRemoteCMD"
	if (Test-Connection $ComputerName -Count 1 -Quiet)
	{
		$RemoteCommand = Show-Inputbox -message "$EnterCommand" -title "$Computername - Run-RemoteCMD" -default "ipconfig /all"
		if ($RemoteCommand -ne "")
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command $RemoteCommand
			Add-RichTextBox -text "$ComputerName - $RemoteCommandSent"
		}
	}
	else
	{
		Add-RichTextBoxWarn -text "$ComputerOfflineOrWrong"
		Show-MsgBox -Prompt "$ComputerOfflineOrWrong" -BoxType "OKOnly" -Title "Computer offline!" -Icon "Exclamation"
	}
	}
	############################################################################################
	$button_compmgmt_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Compmgmt $Computername"
		$command = "compmgmt.msc"
		$arguments = "/computer:$ComputerName"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_ComputerGroups_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$CheckComputerGroups $Computername"
		$ComputerGroups = Get-QADComputer $ComputerName -Properties Memberof | Select-Object -Expand memberof | Out-String
		$ComputerGroups = $ComputerGroups -split ',*CN=*,'
		$ComputerGroups = $ComputerGroups -replace ('CN=', '') -replace (',OU.*', '')
		Add-RichTextBox -text "$ComputerGroups"
	}
	############################################################################################
	$button_cpuram_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Performance of $Computername"
		$Perf = Get-ComputerStats -ComputerName $ComputerName | fl | Out-String
		Add-RichTextBox -text $Perf
		$cpu = Get-WmiObject win32_processor -computername $computername |
		Measure-Object -property LoadPercentage -Average |
		Foreach { $_.Average }
		$ram = Get-WmiObject win32_operatingsystem -ComputerName $computername |
		Foreach { "{0:N2}" -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) * 100)/ $_.TotalVisibleMemorySize) }
		Load-Chart $chart1 -XPoints ("RAM $ram%" -f $ram), ("CPU $cpu%" -f $cpu) -YPoints $ram, $cpu -ChartType 'Bar'
	}
	############################################################################################
	$button_debug_Click = {
		$Command_debug = $textbox_debug.Text
		Get-ComputerTxtBox
		Add-RichTextBox -text "$command_debug"
		try
		{
			$result = Invoke-Expression $Command_debug | Out-String -Width $richtextbox_output.Width
			Add-RichTextBox -text "$result"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_deleteGPO_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Deleting local gpo of the computer $Computername"
		Remove-Item "\\$ComputerName\c$\windows\system32\Grouppolicy" -Force -Recurse
		Remove-Item "\\$ComputerName\c$\windows\system32\grouppolicyusers" -Force -Recurse
		Add-RichTextBox -text "Deleted folder grouppolicy and grouppolicyusers."
	}
	############################################################################################
	$button_deleteoffline_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$Computername - Reset Offline Files"
		New-RegistryValue HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\CSC\Parameters -Name FormatDatabase -Value 1 -Type Dword -ComputerName $ComputerName
		Add-RichTextBox -text "$RegKeySet"
	}
	############################################################################################
	$button_diskusage_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Hard Drive - DiskSpace"
		$result = Get-DiskSpace -ComputerName $ComputerName | Out-String
		Add-RichTextBox -text $result
	}
	############################################################################################
	$button_DNScheck_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $DnsConf"
		#		
		$DNS = Resolve-DnsName $ComputerName
		Add-RichTextBox -text "$DNS"
	}
	############################################################################################
	$button_eventlog20_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - EventLog - Last 20"
		if ($ComputerName -like "localhost")
		{
			$Events_Last20Sytem = Get-EventLog -Newest 20 | Select-Object Index, EventID, Source, Message, MachineName, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20Sytem
		}
		else
		{
			$Events_Last20Sytem = Get-EventLog -Newest 20 -ComputerName $ComputerName | Select-Object Index, EventID, Source, Message, MachineName, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20Sytem
		}
	}
	############################################################################################
	$button_eventlogmmc_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Event Viewer MMC (eventvwr $Computername)"
		$command = "eventvwr"
		$arguments = "$ComputerName"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_eventlognames_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - EventLog - LogNames list"
		if ($ComputerName -eq "localhost")
		{
			$EventsLog = Get-EventLog -list | Format-List | Out-String
			Add-RichTextBox $EventsLog
		}
		else
		{
			$EventsLog = Get-EventLog -list -ComputerName $ComputerName | Format-List | Out-String
			Add-RichTextBox $EventsLog
		}
	}
	############################################################################################
	$button_export_Click = {
		$timestamp = Get-Date -Format "dd-MM-yyyy HH-mm"
		$Filepath = "$Outfile" + "\log-$timestamp"
		($richtextbox_output.Text | Out-String) -replace "`n", "`r`n" | Out-File -FilePath "$Filepath.log"
		Add-RichTextBoxOK -text "Saved in $Filepath.log."
	}
	############################################################################################
	$buttonFixWMI_Click = {
		#not sure if this is working when WMI actually needs a fix! 
		Get-ComputerTxtBox
		Invoke-Command -ComputerName $ComputerName -ScriptBlock {
			WinMgmt /standalonehost
			WinMgmt /resetrepository
		}
		Add-RichTextBox -text "WMI on Computer $ComputerName reset. Please reboot."
	}
	############################################################################################
	$button_folderrights_Click = {
		$Folderpath = Show-InputBox -title "$FolderPathInputBoxTitle" -message "$FolderPathInputBoxMsg"
		Add-RichTextBoxTitle -text "$ShowFolderRights $Folderpath"
		Try
		{
			$Folderrights = Get-Acl "$Folderpath" | Format-List | Out-String
			Add-RichTextBox -text "$Folderrights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_getadvertisedsoftware_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Software of $Computername"
		$MainForm.Cursor = 'WaitCursor'
		$Applications = Get-WmiObject -Query "Select * From CCM_Application" -Namespace "Root\ccm\ClientSDK" -ComputerName $ComputerName | Sort-Object -Property Fullname | Select-Object -Property Fullname, @{ label = "Installed"; Expression = { $_.convertToDateTime($_.LastInstallTime) } }, InstallState | format-table | Out-String
		Add-RichTextBoxWarn $_.Exception.Message
		Add-RichTextBox $Applications
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_GetPC_Click = {
		# This only Works with SCCM!
		$MainForm.Cursor = 'WaitCursor'
		Get-UserTxtBox
		$SamAccountName = $textbox_username.Text
		Add-RichTextBoxTitle -text "$ShowingLastPC"
		Get-QADUser -Identity $SamAccountName
		try
		{
			$User_Computer = Get-WmiObject -namespace $SCCMNameSpace -computer $SCCMServer -query "select SMS_R_System.Name, SMS_R_System.SystemOUName from  SMS_R_System where SMS_R_System.LastLogonUserName = ""$SamAccountName""" | Select-Object -ExpandProperty Name
			Add-RichTextBox -text "User: $SamAccountName Computer: $User_Computer"
			$textbox_computername.Text = "$User_Computer"
			$button_Check.PerformClick()
		}
		catch [Exception]{
			Add-RichTextBoxWarn -text "Error checking Computer of $SamAccountname. User maybe not existing."
		}
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_getsccmcache_Click = {
		Get-ComputerTxtBox
		$CacheSize = (Get-WmiObject -Namespace 'Root\ccm\SoftMgmtAgent' -Class CacheConfig -ComputerName $ComputerName).size
		Add-RichTextBoxTitle -text "Cache Size of $Computername"
		Add-RichTextBox -text "Cache $CacheSize MB"
	}
	############################################################################################
	$button_get_session_Click = {
		Get-ComputerTxtBox
		$Result = Invoke-Command -ComputerName $ComputerName -ScriptBlock { qwinsta } | Out-String
		Add-RichTextBoxTitle -text "Getting Sessions on $Computername"
		Add-RichTextBox -text "$Result"
	}
	############################################################################################
	$button_getvariablesfilter_Click = {
		$Variables = Get-Variable -Exclude button*, textbox*, label*, toolstrip*, *menu*, tab* | Out-String
		Add-RichTextBox -text "$Variables"
	}
	############################################################################################
	$Button_gpupdate_Click = {
		#Not sure if this stuff is working....
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - GPUpdate (Remotely via WMI)"
		$Force = Show-MsgBox -Title "Force?" -BoxType 'YesNo' -Icon 'Question' -Prompt "Force?"
		if ($Force -eq "YES")
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command "gpupdate /force"
		}
		else
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command "gpupdate"
		}
	}
	############################################################################################
	$button_gpresult_Click = {
		# maybe polish this so that you can select only possible users? maybe like in the default 
		# gpresult.
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Get GPResult of $Computername"
		$GPUser = Show-InputBox -title "Enter Username" -message "Enter Username"
		$folderbrowserdialog1.ShowDialog()
		$folder = $folderbrowserdialog1.SelectedPath
		$timestamp = Get-Date -Format "dd-MM-yyyy HH-mm"
		$Filepath = "$Folder" + "\report-$timestamp.htm"
		Get-GPResultantSetOfPolicy -Computer $ComputerName -User $GPUser -ReportType html -path $Filepath
		Add-RichTextBox -text "GPResult of User $GPUser on Computer $Computername saved in $Filepath"
	}
	############################################################################################
	$button_homerights_Click = {
		$Username = $textbox_username.Text
		Add-RichTextBoxTitle -text "$checkHomeRights $Username"
		$Homepath = $toolstrip_home_status.Text
		try
		{
			$Homerights = Get-Acl -Path "$Homepath" | format-list | Out-String
			Add-RichTextBox -text "$Homerights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_hosts_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Showing hostsfile of $Computername"
		$Hostsfile = Get-Content "\\$computername\c$\windows\system32\drivers\etc\hosts" | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $Hostsfile
	}
	############################################################################################
	$button_hotfix_Click = {
		$MainForm.Cursor = 'WaitCursor'
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Get the Windows Updates Installed"
		$result = Get-HotFix -ComputerName $ComputerName | Sort-Object InstalledOn | Format-Table __SERVER, Description, HotFixID, InstalledBy, InstalledOn, Caption -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox $result
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_installedSoftware_Click = {
		Get-ComputerTxtBox
		$result = Get-InstalledSoftware -ComputerName $ComputerName | Sort-Object -Property Name | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBoxTitle -text "$ComputerName - Installed Softwares List"
		Add-RichTextBox $result
	}
	############################################################################################
	$button_ipconfig_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $NetConf"
		$result = Get-IP -ComputerName $ComputerName | Format-List Name, IP4, IP4Subnet, DefaultGWY, MacAddress, DNSServer | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "$result`n"
	}
	############################################################################################
	$button_ipconfig2_Click = {
		$button_ipconfig.PerformClick()
	}
	############################################################################################
	$button_localadmins_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ShowLocalAdminsOf $Computername"
		$LocalAdmins = Get-LocalAdmins $ComputerName | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $LocalAdmins
	}
	############################################################################################
	$button_logoff_user_Click = {
		#this could be polished, get session ids and just let you select them maybe?
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Logoff User Session"
		$Session_Logoff = Show-InputBox -title "Enter Session to logoff" -message "Please enter the Session-ID that will be logged of"
		Add-RichTextBox -text "$ComputerName - Session to Logoff $Session_Logoff"
		Run-RemoteCMD -ComputerName $ComputerName -Command "rwinsta $Session_Logoff /server:$Computername"
		Add-RichTextBox -text "Session logged off!"
	}
	############################################################################################
	$button_listvariables_click = {
		$Variables = Get-Variable | Out-String
		Add-RichTextBox -text "$Variables"
	}
	############################################################################################
	$button_mainboard_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - MotherBoard"
		$result = Get-MotherBoard -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "$result"
	}
	############################################################################################
	$button_memory_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Memory Configuration"
		$result = Get-MemoryConfiguration -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_MMCServices_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services MMC (services.msc /computer:$ComputerName)"
		$command = "services.msc"
		$arguments = "/computer:$computername"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_MSRA_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Remote Assistance"
		MSRA.exe /OfferRA $ComputerName
	}
	############################################################################################
	$button_nbbattery_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Getting batterystate of $Computername ..."
		$OnBattery = Get-WmiObject Win32_Battery -ComputerName $ComputerName | Select-Object -ExpandProperty BatteryStatus
		if ($OnBattery -eq 1)
		{
			$CableConnected = "false"
			$BatteryConnected = "true"
		}
		if ($OnBattery -eq 2)
		{
			$CableConnected = "true"
			$BatteryConnected = "false"
		}
		$BatteryState = Get-WmiObject Win32_Battery -ComputerName $ComputerName | Select-Object @{ N = 'Remaining Charge %'; E = { $_.EstimatedChargeRemaining } }, Status | fl | Out-String
		Add-RichTextBox -text "On cable: $Cableconnected`nOn battery: $BatteryConnected `n$BatteryState"
	}
	############################################################################################
	$button_openc_Click = {
		explorer.exe \\$ComputerName\c$
	}
	############################################################################################
	$button_PCGroups_Click = {
		Add-RichTextBoxTitle -text "$TransferComputerGroups"
		$ComputerOLD = Show-InputBox -title "$EnterSourceComputer" -message "$Please $EnterSourceComputer"
		$TestComputerOLD = Get-ADComputer $ComputerOLD
		if ($TestComputerOLD -eq $null)
		{
			Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "ComputerNotFound" -Icon "Exclamation"
			Add-RichTextBoxWarn -text "$ComputerNotFound"
		}
		else
		{
			Add-RichTextBox -text "$SourceComputer $ComputerOLD"
			$ComputerNEW = Show-InputBox -title "$EnterDestinationComputer" -message "$EnterDestinationComputer"
			$TestComputerNEW = Get-QADObject $ComputerNEW
			if ($TestComputerNEW -eq $NULL)
			{
				Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "$ComputerNotFound" -Icon "Exclamation"
				Add-RichTextBoxWarn -text "$ComputerNotFound"
			}
			else
			{
				if ($ComputerNEW -eq $ComputerOLD)
				{
					Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "$YouHaveEnteredTwoIdenticalComputers" -Icon "Exclamation"
					Add-RichTextBoxWarn -text "$TwoIdenticalComputers"
				}
				else
				{
					Add-RichTextBox -text "$DestinationComputer $ComputerNew"
					$CheckOK = Show-MsgBox -Title "$Transferring" -Prompt "$DoYouWantToTransfer `n$SourceComputer : $ComputerOLD `n$DestinationComputer : $ComputerNEW" -BoxType "YESNO" -Icon "Exclamation"
					if ($CheckOK -eq "YES")
					{
						#Move AD Groups von OLD to New
						Add-RichTextBox -text "Transferring computergroups..."
						#Auslesen der Computergruppen
						#$ComputerGroups = Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | Out-String
						Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | ForEach-Object { Add-QADGroupMember -Identity $ComputerNEW -Members $_.Memberof }
						Add-RichTextBox -text "$ShowingComputergroupsOf $ComputerOLD`n$Computergroups"
						#Add-QADGroupMember "Group" -Member "Computer"
						$ComputerOLD = $ComputerOLD + "$"
						$ComputerNEW2 = $ComputerNEW + "$"
						$Groups = get-QADMemberOf $ComputerOLD
						$Groups | foreach{
							if ($_.name -ne "Domain Computers")
							{
								Add-RichTextBox -text "$ComputerNew adding to group $_ ..."
								try { Add-QADGroupMember $_ -Member $ComputerNEW2 }
								catch [Exception]{
									Add-RichTextBoxWarn $_.Exception.Message
								}
							}
						}
					}
					if ($CheckOK -eq "NO")
					{
						Add-RichTextBoxWarn -text "Aborted."
					}
				}
			}
		}
	}
	############################################################################################
	$button_ping_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Ping Test"
		$result = Test-Connection $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "Ping`n$result"
	}
	############################################################################################
	$button_printer_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - Printers"
		$result = Get-WmiObject Win32_Printer -ComputerName $ComputerName | Format-table SystemName, Name, Comment, PortName, Location, DriverName -AutoSize | Out-String -Width $richtextbox_output.Width
		if ($result -ne $null)
		{
			Add-RichTextBox $result
		}
		else { Add-RichTextBox "$ComputerName - No Printer detected" }
	}
	############################################################################################
	$button_process_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - All Processes"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$ProcessALL = get-process -ComputerName $ComputerName | out-string
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_process_100_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processes >100MB"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$Processes_Over100MB = Get-Process -ComputerName $ComputerName | Where-Object { $_.WorkingSet -gt 100mb } | Select-Object Handles, NPM, PM, WS, VM, CPU, ID, ProcessName, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } } | sort ws | ft -AutoSize | Out-String
		Add-RichTextBox $Processes_Over100MB
	}
	############################################################################################
	$button_process_cmd_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Get the CommandLine Argument for each process"
		#Get-WmiObject Win32_Process -Filter "Name like '%powershell%'" | select-Object CommandLine
		$result = Get-WmiObject Win32_Process -ComputerName $ComputerName | select-Object Name, ProcessID, CommandLine | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox $result
	}
	############################################################################################
	$button_process_grid_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - All Processes - GridView"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Select @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, * | Out-GridView
	}
	############################################################################################
	$button_process_owner_Click = {
		Add-RichTextBoxTitle -text "$ComputerName - Processes with owners"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Select ProcessName, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, CPU, WorkingSet, Handles, Id | ft -AutoSize | out-string
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_process_start_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Start Process"
		$Process_query = $textbox_Process.text
		Add-RichTextBox -text "$ComputerName - Process to Start: $Process_query"
		Run-RemoteCMD -ComputerName $ComputerName -Command $Process_query
		Add-RichTextBox -text "Process $Process_query started"
	}
	############################################################################################
	$button_process_stop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Terminate Process"
		$Process_query = $textbox_Process.text
		Add-RichTextBox -text "$ComputerName - Process to Terminate: $Process_query"
		Run-RemoteCMD -ComputerName $ComputerName -Command "taskkill /IM $Process_query /F"
		Add-RichTextBox -text "Process $Process_query stopped"
	}
	############################################################################################
	$button_processor_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processor Information"
		$result = Get-Processor -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_proclasthour_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processes - Processes started in last hour"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Where-Object { trap { continue }  (New-Timespan $_.StartTime).TotalMinutes -le 10 } | Select ProcessName, @{ l = "StartTime"; e = { $_.StartTime } }, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, CPU, WorkingSet, Handles, Id | fl | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_profilerights_Click = {
		$Username = $textbox_username.Text
		Add-RichTextBoxTitle -text "$checkProfileRights $Username"
		$Profilepath = $toolstrip_user_status.Text
		Try
		{
			$Profilerights = Get-Acl "$Profilepath" | format-list | Out-String
			Add-RichTextBox -text "$Profilerights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_psremote_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $openPSRS"
		if (Test-PSRemoting -ComputerName $ComputerName)
		{
			Add-RichTextBox -text "$ComputerName - $starting $openPSRS"
			Start-Process powershell.exe -ArgumentList "-noexit -command Enter-PSSession -ComputerName $ComputerName"
		}
		else
		{
			Add-RichTextBoxWarn -text "$ComputerName - $PSRnotEnabled"
		}
	}
	############################################################################################
	$button_rdp_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - RDP"
		$command = "mstsc"
		$argument = "/v:$computername /admin"
		Start-Process $command $argument
	}
	############################################################################################
	$button_regedit_Click = {
		Start-Process regedit.exe
	}
	############################################################################################
	$button_Remotecontrol_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Starting Remotecontrol $Computername"
		& $global:CmRCviewer $ComputerName
	}
	############################################################################################
	$button_ResetPWD_Click = {
		Add-RichTextBoxTitle -text "User Passwort Reset"
		$PWUser = Show-InputBox -message "$EnterUsername" -title "$EnterUsername"
		if ($PWUser -ne $null)
		{
			$PWUserExists = Get-ADUser -identity $PWUser
			if ($PWUserExists -ne $null)
			{
				$PWPW = Show-InputBox -message "$EnterPassword" -title "$EnterPassword"
				$PWSecure = $PWPW | ConvertTo-SecureString -AsPlainText -Force
				Set-ADAccountPassword $PWUser -NewPassword $PWSecure -Reset -PassThru | Set-AdUser -ChangePasswordAtLogon $True
				Add-RichTextBox -text "Password: $PWPW User: $PWUser. `n$ChangePasswordAtLogon."
				Show-MsgBox -Prompt "Password: $PWPW User: $PWUser. `n$ChangePasswordAtLogon." -Title "$PasswordResetOK" -Icon Information -BoxType OKOnly
			}
			else
			{
				Add-RichTextBoxWarn -text "User $PWUser $NotExistinginAD."
				Show-MsgBox -Prompt "User $PWUser $NotExistinginAD." -Title "$NotExistinginAD" -Icon Information -BoxType OKOnly
			}
		}
		else
		{
			Add-RichTextBoxWarn -text "$NoInputDetected"
			Show-MsgBox -Prompt "$NoInputDetected" -Title "$NoInputDetected" -Icon Information -BoxType OKOnly
		}
	}
	############################################################################################
	$button_routetable_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Route table"
		$result = Get-Routetable -ComputerName $ComputerName | ft -auto | Out-String
		Add-RichTextBox $result
	}
	############################################################################################
	$button_sccm_start_Click = {
		Get-ComputerTxtBox
		$action = $combobox1.SelectedItem
		switch ($action)
		{
			"Auswertungszyklus für Softwareupdatebereitstellung" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000108}"
				}
			}
			"Benutzerrichtlinienabruf und Auswertungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000027}"
				}
			}
			"Computerrichtlininenabruf und Auswertungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000021}"
				}
			}
			"Dateisammlungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000010}"
				}
			}
			"Hardwareinventurzyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000001}"
				}
			}
			"Softwareinventurzyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000002}"
				}
			}
			"Überprüfungszyklus für Softwareupdates"{
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-0000000000113}"
				}
			}
			"Software Metering Usage Report Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000108}"
				}
			}
			"User Policy Retrieval & Evaluation Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000027}"
				}
			}
			"Machine Policy Retrieval & Evaluation Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000021}"
				}
			}
			"File Collection Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000010}"
				}
			}
			"Hardware Inventory Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000001}"
				}
			}
			"Software Inventory Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000002}"
				}
			}
			"Software Updates Deployment Evaluation Cycle"{
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-0000000000113}"
				}
			}
		}
		
		Add-RichTextBoxTitle -text "Action $action started on Computer $Computername"
	}
	############################################################################################
	$button_search_Click = {
		#on first search set global:run to 1 for "search next". Always adding +1 to the result
		#so the search starts one char later
		if ($global:run -ne 1)
		{
			$global:run = 1
			$Search = $textbox_search.Text
			$Result = $richtextbox_output.Find($Search)
			$global:Start = $Result + 1
		}
		else
		{
			$Search = $textbox_search.Text
			$Result = $richtextbox_output.Find($Search, $global:Start, 'None')
			$global:Start = $Result + 1
		}
	}
	############################################################################################
	$button_services_Click = {
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - All Services + Owners"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName | select Name, ProcessID, StartMode, State, @{ Name = "Owner"; Expression = { $_.StartName } } | ft -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicesauto_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - StartMode:Automatic"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='auto'" | Select-Object DisplayName, Name, ProcessID, StartMode, State | Format-Table -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicesautostop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Services with StartMode: Automatic and Status: NOT Running"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='auto' AND state!='running'" | Select-Object DisplayName, Name, StartMode, State | ft -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicescheck_Click = {
		Get-ComputerTxtBox
		$a = new-object -comobject wscript.shell
		Add-RichTextBoxTitle "$COMPUTERNAME - Query Service"
		#$Service_query = Read-Host "Enter the Service Name to Query `n"
		$Service_query = $textbox_services.text
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Query Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			Add-RichTextBox "$COMPUTERNAME - Checking Service $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox "$COMPUTERNAME - Command Sent! Service $Service_query"
			Add-RichTextBox $Service_query_return
			Add-RichTextBox -Text "$ComputerName - Query Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				Add-RichTextBox "$COMPUTERNAME - Checking the Service $Service_query ..."
				$Service_query_return = Get-WmiObject -computername $ComputerName Win32_Service -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox "$COMPUTERNAME - Command Sent! Service $Service_query"
				Add-RichTextBox $Service_query_return
				Add-RichTextBox -Text "$ComputerName - Query Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesnonstandard_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Non-Standard Windows Service Accounts"
		$NormalAccount1 = "LocalSystem"
		$NormalAccount2 = "NT Authority\\LocalService"
		$NormalAccount3 = "NT Authority\\NetworkService"
		$wql = 'Select Name, DisplayName, StartName, __Server From Win32_Service WHERE ((StartName != "LocalSystem") and (StartName != "NT Authority\\LocalService") and (StartName != "NT Authority\\NetworkService"))'
		$query = Get-WmiObject -Query $wql -ComputerName $ComputerName -ErrorAction Stop | Select-Object __SERVER, StartName, Name, DisplayName | Format-Table -AutoSize | Out-String
		if ($query -eq $null) { Add-RichTextBox "$Computername - All the services use Standard Windows Service Accounts" }
		else { Add-RichTextBox $query }
		
	}
	############################################################################################
	$button_servicesrestart_Click = {
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Restart Service"
		#Add-RichTextBox "# SERVICES - RESTART SERVICE - COMPUTERNAME: $ComputerName `n`n"
		#$Service_query = Read-Host "Enter the Service Name to Start `n"
		$Service_query = $textbox_services.text
		add-richtextbox -text "$ComputerName - Service to Restart: $Service_query"
		#Add-RichTextBox "SERVICE: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Start Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
			add-richtextbox -Text "$ComputerName - Restarting the Service $Service_query ..."
			#Add-RichTextBox "Starting Service: $Service_query...`r"
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
				add-richtextbox -Text "$ComputerName - Restarting the Service $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesrunning_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Status: Running"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_running = Get-Service -ComputerName $ComputerName | Where-Object { $_.Status -eq "Running" } | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $Services_running
	}
	############################################################################################
	$button_servicesstart_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Start Service"
		$Service_query = $textbox_services.text
		add-richtextbox -text "$ComputerName - Service to start: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Start Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Starting Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Starting Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesstop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Stop Service"
		$Service_query = $textbox_services.text
		Add-richtextbox -text "$ComputerName - Service to Stop: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Stop Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_shutdown_Click = {
		Start-Process shutdown.exe -ArgumentList /i
	}
	############################################################################################
	$button_systemtype_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - System Type"
		$result = get-systemtype -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_taskmanager_Click = { Call-Taskmanager_psf }
	############################################################################################
	$button_testport_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Network - Test-Port"
		$port = Show-Inputbox -message "Enter a port to test" -title "$ComputerName - Test-Port" -default "80"
		if ($port -ne "")
		{
			$result = Test-TcpPort $ComputerName $port
			Add-RichTextBox $result
		}
	}
	############################################################################################
	$buttonTSHanging_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -Text "Remove hanging tasksequence"
		$Out = Get-WmiObject -computername "$ComputerName" -Namespace root\ccm\SoftMgmtAgent -Class CCM_TSExecutionRequest -Filter "State = 'Completed' And CompletionState = 'Failure'"
		$Out.delete()
		Add-RichTextBox -text "Done."
	}
	############################################################################################
	$button_USBDevice_Click = {
		$button_USBDevice.Enabled = $false
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - USB Devices"
		$MainForm.Cursor = 'WaitCursor'
		$result = Get-USB -computerName $ComputerName | Select-Object SystemName, Manufacturer, Name | Sort-Object Manufacturer | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $result
		$button_USBDevice.Enabled = $true
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_Userunlock_Click = {
		$Locked_User = Get-QADUser -Locked | Select-Object -expand samaccountname
		if ($Locked_User -ne $null)
		{
			Show-MsgBox -Prompt "$FollowingLocked `n $Locked_user" -Title "$LockedUser" -Icon Information -BoxType OKOnly
			$Confirmation_User = Show-MsgBox -Prompt "$UnlockUser" -Title "$UnlockUser" -Icon Information -BoxType YesNo
			if ($Confirmation_User -eq "YES")
			{
				$Unlock_User = $Locked_User
				Unlock-QADUser $Unlock_User
				$Locked_User_2 = Get-QADUser -Locked | Select-Object -expand samaccountname
				if ($Locked_User_2 -eq $Locked_User)
				{
					$Locked_Error = Show-MsgBox -Prompt "$ErrorUnlocking $Unlock_User" -Title "$ErrorUnlocking" -Icon Critical -BoxType OKOnly
					Add-RichTextBoxWarn -text "$ErrorUnlocking $Unlock_User"
				}
				else
				{
					Show-MsgBox -Prompt "$Unlock_User $UnlockedOK" -Title "$UnlockedOK" -Icon Information -BoxType OKOnly
				}
			}
			else
			{
				Show-MsgBox -BoxType "OKOnly" -Title "$UnlockUser" -Prompt "$NoUserUnlocked" -Icon "Information"
			}
		}
		else
		{
			Show-MsgBox -Prompt "$NoUsersLocked" -Icon Information -BoxType OKOnly
		}
	}
	############################################################################################
	$button_volumes_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Hard Drive - Physical Disk"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Disks_Physical = Get-WmiObject Win32_DiskDrive -ComputerName $ComputerName | Select DeviceID, `
																							 Model,`
																							 Manufacturer,`
																							 @{ Name = "SizeGB"; Expression = { $_.Size/1GB } }, `
																							 Caption, `
																							 Partitions, `
																							 SystemName,`
																							 Status,`
																							 InterfaceType,`
																							 MediaType,`
																							 SerialNumber,`
																							 SCSIBus, SCSILogicalUnit, SCSIPort, SCSITargetId | fl | Out-String
		Add-RichTextBox $Disks_Physical
	}
	############################################################################################
	$button_WOL_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "WOL PC $Computername"
		$ComputerMAC = Get-IP -ComputerName $ComputerName | Select-Object -ExpandProperty MACAddress
		Add-RichTextBox -text "Mac-Address - $ComputerMAC"
		$ComputerIP = Get-IP -Computername $ComputerName | Select-Object -ExpandProperty IP4
		Add-RichTextBox "Computer IP - $ComputerIP"
		Send-WOL -mac $ComputerMAC -ip $ComputerIP -port 7
		Add-RichTextBox "WOL sent to $Computername with MAC $ComputerMAC"
	}
	#endregion buttons
	#region Textboxes
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!T E X T B O X E S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$textbox_computername_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_Check.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_computername.CharacterCasing = 'Upper'
	############################################################################################
	$textbox_computername_TextChanged = {
		$toolstrip_OSStatus.Text = ""
		if ($textbox_computername.Text -eq "")
		{
			$textbox_computername.BackColor = [System.Drawing.Color]::FromArgb(255, 128, 128);
			Add-RichTextBoxTitle -text "Please Enter a ComputerName"
		}
		if ($textbox_computername.Text -ne "")
		{
			$textbox_computername.BackColor = [System.Drawing.Color]::FromArgb(255, 203, 26)
		}
	}
	############################################################################################
	$textbox_services_MouseClick = [System.Windows.Forms.MouseEventHandler]{
		$textbox_services.Text = ""
	}
	############################################################################################
	$textbox_username_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		Get-ComputerTxtBox
		If ($_.KeyChar -eq 13)
		{
			$button_GetPC.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_username_Click = {
		$textbox_username.Text = ""
	}
	############################################################################################
	$textbox_computername_Click = {
		$textbox_computername.Text = ""
	}
	############################################################################################
	$textbox_debug_Click = {
		$textbox_debug.Text = ""
	}
	############################################################################################
	$textbox_debug_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_debug.performClick()
		}
	}
	############################################################################################
	$textbox_Process_Click = {
		$textbox_Process.Text = ""
	}
	############################################################################################
	$textbox_Process_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_process_start.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_search_Click = {
		$textbox_search.Text = ""
		$global:run = 0
	}
	############################################################################################
	$textbox_search_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_search.PerformClick()
		}
	}
	############################################################################################
	#endregion textboxes
	#region Richtextbox
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!R I C H T E X T B O X !!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$richtextbox_output_TextChanged = {
		#Scroll to Bottom when text is changed
		$richtextbox_output.SelectionStart = $richtextbox_output.Text.Length
		$richtextbox_output.ScrollToCaret()
	}
	#endregion richtextbox
	#region Toolstrips
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!T O O L S T R I P S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$toolstrip_user_status_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Profile folder"
		# Getting OS Version
		$OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
		$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
		Add-RichTextBox -text $Splitversion
		# this needs some polishing!! maybe do some switch-stuff!	
		if ($OS -gt "10")
		{
			$Profilepath = "$Profilefolder$username.v5"
		}
		else
		{
			if ($OS -gt "6.3")
			{
				$Profilepath = "$Profilefolder$username.v4"
			}
			else
			{
				if ($OS -gt "6.2")
				{
					$Profilepath = "$Profilefolder$username.v3"
				}
				else
				{
					if ($OS -gt "6.1")
					{
						$Profilepath = "$Profilefolder$username.v2"
					}
					else
					{
						$Profile = "$Profilefolder$username"
					}
				}
			}
		}
		Add-RichTextBox -text $Profilepath
		Explorer $Profilepath
	}
	############################################################################################
	$toolstrip_home_status_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Home folder"
		$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
		Add-RichTextBox -text $Splitversion
		$Homepath = "$Homefolder$Username"
		Add-RichTextBox -text $Homepath
		Explorer $Homepath
	}
	############################################################################################
	#endregion toolstrips
	#region MenuItems
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!M E N U I T E M S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	
	$aboutToolStripMenuItem_Click = { Call-About_psf }
	############################################################################################
	$quitToolStripMenuItem_Click = { $MainForm.Close() }
	############################################################################################
	$optionsToolStripMenuItem_Click = { Call-Options_psf }
	############################################################################################
	$aDExplorerToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\AdExplorer.exe"
	}
	############################################################################################
	$procexpToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\procexp.exe"
	}
	############################################################################################
	$procmonToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\Procmon.exe"
	}
	############################################################################################
	$nirLauncherToolStripMenuItem1_Click = {
		Start-Process "$global:Nirlauncher\NirLauncher.exe"
	}
	#endregion MenuItems
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion code
	#------------------------------------------------------------------------------------------#
	#region Mainform
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! F O R M   C L O S I N G !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$MainForm_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		#Writing the config back but only if there already is a config. If there is no config you
		#need to save or klick atleast ok in the options.
		$Exportpath = $Confpath + "/Config.csv"
		if (Test-Path $Exportpath -PathType Leaf)
		{
			New-Object -TypeName PSCustomObject -Property @{
				"global:Language" = $Language
				"global:Profilefolder" = $Profilefolder
				"global:Homefolder" = $Homefolder
				"global:Outfile" = $Outfile
				"global:SiteName" = $SiteName
				"global:SCCMServer" = $SCCMServer
				"global:SCCMNameSpace" = $SCCMNameSpace
				"global:SCCMEnabled" = $SCCMEnabled
				"global:Nirlauncher" = $Nirlauncher
				"global:Sysinternals" = $Sysinternals
				"global:CmRCViewer" = $CmRCViewer
			} | Export-Csv -Path $Exportpath -NoTypeInformation
		}
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!! F O R M   S I Z E   C H A N G E D !!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$MainForm_SizeChanged = {
		# Change the Richtextbox_output width according to the window size.
		$Newsize = $richtextbox_output.width / 7.1
		$Newsize = [System.Math]::Truncate($Newsize)
		$Newsize = $Newsize - 2
		$global:Fillchar = $Newsize
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion Mainform
	#------------------------------------------------------------------------------------------#
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_richtextbox_output = $richtextbox_output.Text
		$script:MainForm_textbox_Process = $textbox_Process.Text
		$script:MainForm_textbox_services = $textbox_services.Text
		$script:MainForm_combobox1 = $combobox1.Text
		$script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItem
		$script:MainForm_textbox_search = $textbox_search.Text
		$script:MainForm_textbox_debug = $textbox_debug.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$richtextbox_output.remove_TextChanged($richtextbox_output_TextChanged)
			$button_deleteGPO.remove_Click($button_deleteGPO_Click)
			$button_gpresult.remove_Click($button_gpresult_Click)
			$Button_gpupdate.remove_Click($Button_gpupdate_Click)
			$button_export.remove_Click($button_export_Click)
			$button_clear.remove_Click($button_clear_Click)
			$buttonFixWMI.remove_Click($buttonFixWMI_Click)
			$button_shutdown.remove_Click($button_shutdown_Click)
			$button_C.remove_Click($button_C_Click)
			$button_WOL.remove_Click($button_WOL_Click)
			$button_logoff_user.remove_Click($button_logoff_user_Click)
			$button_get_session.remove_Click($button_get_session_Click)
			$button_Userunlock.remove_Click($button_Userunlock_Click)
			$button_ResetPWD.remove_Click($button_ResetPWD_Click)
			$button_DNScheck.remove_Click($button_DNScheck_Click)
			$button_ping4.remove_Click($button_ping_Click)
			$button_ipconfig.remove_Click($button_ipconfig_Click)
			$button_regedit.remove_Click($button_regedit_Click)
			$button_cmd.remove_Click($button_cmd_Click)
			$button_psremote.remove_Click($button_psremote_Click)
			$button_MSRA.remove_Click($button_MSRA_Click)
			$button_Remotecontrol.remove_Click($button_Remotecontrol_Click)
			$button_rdp.remove_Click($button_rdp_Click)
			$button_hotfix.remove_Click($button_hotfix_Click)
			$button_MMCServices.remove_Click($button_MMCServices_Click)
			$button_compmgmt.remove_Click($button_compmgmt_Click)
			$button_localadmins.remove_Click($button_localadmins_Click)
			$button_folderrights.remove_Click($button_folderrights_Click)
			$button_profilerights.remove_Click($button_profilerights_Click)
			$button_homerights.remove_Click($button_homerights_Click)
			$button_PCGroups.remove_Click($button_PCGroups_Click)
			$button_ComputerGroups.remove_Click($button_ComputerGroups_Click)
			$button_autostart.remove_Click($button_autostart_Click)
			$button_installedSoftware.remove_Click($button_installedSoftware_Click)
			$button_printer.remove_Click($button_printer_Click)
			$button_USBDevice.remove_Click($button_USBDevice_Click)
			$button_systemtype.remove_Click($button_systemtype_Click)
			$button_memory.remove_Click($button_memory_Click)
			$button_processor.remove_Click($button_processor_Click)
			$button_mainboard.remove_Click($button_mainboard_Click)
			$button_ipconfig2.remove_Click($button_ipconfig2_Click)
			$button_testport.remove_Click($button_testport_Click)
			$button_hosts.remove_Click($button_hosts_Click)
			$button_routetable.remove_Click($button_routetable_Click)
			$button_checkWLAN.remove_Click($button_checkWLAN_Click)
			$button_process_stop.remove_Click($button_process_stop_Click)
			$button_process_start.remove_Click($button_process_start_Click)
			$textbox_Process.remove_Click($textbox_Process_Click)
			$textbox_Process.remove_KeyPress($textbox_Process_KeyPress)
			$button_cpuram.remove_Click($button_cpuram_Click)
			$button_taskmanager.remove_Click($button_taskmanager_Click)
			$button_process_cmd.remove_Click($button_process_cmd_Click)
			$button_process_grid.remove_Click($button_process_grid_Click)
			$button_process_owner.remove_Click($button_process_owner_Click)
			$button_process_100.remove_Click($button_process_100_Click)
			$button_proclasthour.remove_Click($button_proclasthour_Click)
			$button_process.remove_Click($button_process_Click)
			$button_servicesrunning.remove_Click($button_servicesrunning_Click)
			$button_services.remove_Click($button_services_Click)
			$button_servicesauto.remove_Click($button_servicesauto_Click)
			$button_servicesautostop.remove_Click($button_servicesautostop_Click)
			$button_servicesnonstandard.remove_Click($button_servicesnonstandard_Click)
			$button_servicesstop.remove_Click($button_servicesstop_Click)
			$button_servicesstart.remove_Click($button_servicesstart_Click)
			$button_servicesrestart.remove_Click($button_servicesrestart_Click)
			$button_servicescheck.remove_Click($button_servicescheck_Click)
			$textbox_services.remove_MouseClick($textbox_services_MouseClick)
			$button_diskusage.remove_Click($button_diskusage_Click)
			$button_deleteoffline.remove_Click($button_deleteoffline_Click)
			$button_volumes.remove_Click($button_volumes_Click)
			$button_eventlogmmc.remove_Click($button_eventlogmmc_Click)
			$button_eventlog20.remove_Click($button_eventlog20_Click)
			$button_eventlognames.remove_Click($button_eventlognames_Click)
			$buttonTSHanging.remove_Click($buttonTSHanging_Click)
			$button_getsccmcache.remove_Click($button_getsccmcache_Click)
			$button_getadvertisedsoftware.remove_Click($button_getadvertisedsoftware_Click)
			$button_sccm_start.remove_Click($button_sccm_start_Click)
			$button_search.remove_Click($button_search_Click)
			$textbox_search.remove_Click($textbox_search_Click)
			$textbox_search.remove_KeyPress($textbox_search_KeyPress)
			$button_getvariablesfilter.remove_Click($button_getvariablesfilter_Click)
			$button_listvariables.remove_Click($button_listvariables_Click)
			$textbox_debug.remove_Click($textbox_debug_Click)
			$textbox_debug.remove_KeyPress($textbox_debug_KeyPress)
			$button_debug.remove_Click($button_debug_Click)
			$MainForm.remove_AutoSizeChanged($MainForm_SizeChanged)
			$MainForm.remove_FormClosed($MainForm_FormClosed)
			$MainForm.remove_Load($OnLoadFormEvent)
			$MainForm.remove_SizeChanged($MainForm_SizeChanged)
			$MainForm.remove_Resize($MainForm_SizeChanged)
			$button_Check.remove_Click($button_check_click)
			$aboutToolStripMenuItem.remove_Click($aboutToolStripMenuItem_Click)
			$textbox_username.remove_KeyPress($textbox_username_KeyPress)
			$textbox_username.remove_Click($textbox_username_Click)
			$button_GetPC.remove_Click($button_GetPC_Click)
			$quitToolStripMenuItem.remove_Click($quitToolStripMenuItem_Click)
			$aDExplorerToolStripMenuItem.remove_Click($aDExplorerToolStripMenuItem_Click)
			$procexpToolStripMenuItem.remove_Click($procexpToolStripMenuItem_Click)
			$procmonToolStripMenuItem.remove_Click($procmonToolStripMenuItem_Click)
			$nirLauncherToolStripMenuItem1.remove_Click($nirLauncherToolStripMenuItem1_Click)
			$optionsToolStripMenuItem.remove_Click($optionsToolStripMenuItem_Click)
			$textbox_computername.remove_KeyPress($textbox_computername_KeyPress)
			$textbox_computername.remove_Click($textbox_computername_Click)
			$textbox_computername.remove_TextChanged($textbox_computername_TextChanged)
			$toolstrip_home_status.remove_Click($toolstrip_home_status_Click)
			$toolstrip_user_status.remove_Click($toolstrip_user_status_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$tabcontrol_Home.SuspendLayout()
	$tabpage1.SuspendLayout()
	$groupbox15.SuspendLayout()
	$groupbox14.SuspendLayout()
	$groupbox13.SuspendLayout()
	$groupbox12.SuspendLayout()
	$groupbox11.SuspendLayout()
	$groupbox9.SuspendLayout()
	$tabpage2.SuspendLayout()
	$groupbox16.SuspendLayout()
	$groupbox7.SuspendLayout()
	$groupbox6.SuspendLayout()
	$groupbox5.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	$tabpage3.SuspendLayout()
	$groupbox19.SuspendLayout()
	$tabpage4.SuspendLayout()
	$chart1.BeginInit()
	$groupbox21.SuspendLayout()
	$groupbox20.SuspendLayout()
	$tabpage5.SuspendLayout()
	$groupbox8.SuspendLayout()
	$groupbox4.SuspendLayout()
	$tabpage6.SuspendLayout()
	$groupbox22.SuspendLayout()
	$tabpage8.SuspendLayout()
	$groupbox23.SuspendLayout()
	$tabpage10.SuspendLayout()
	$groupbox18.SuspendLayout()
	$groupbox17.SuspendLayout()
	$tabpage11.SuspendLayout()
	$tabpage_debug.SuspendLayout()
	$toolstrip1.SuspendLayout()
	$menustrip1.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($richtextbox_output)
	$MainForm.Controls.Add($tabcontrol_Home)
	$MainForm.Controls.Add($statusbar1)
	$MainForm.Controls.Add($toolstrip1)
	$MainForm.Controls.Add($menustrip1)
	$MainForm.AutoSize = $True
	$MainForm.BackColor = 'Control'
	$MainForm.ClientSize = '1272, 873'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
AAABAAIAICAAAAAAIACoEAAAJgAAACgoAAAAACAAaBoAAM4QAAAoAAAAIAAAAEAAAAABACAAAAAA
AAAgAAAAAAAAAAAAAAAAAAAAAAAAA9T+/wTV//8D1f7/A9T+/wPU/v8E1P7/A9T+/wPU/v8E1P3/
BNT9/wTU/f8E0/z/BdP7/wXT+v8G0vj/B9D2/wfO9v8G0vj/BNT7/wTU/f8D1P7/A9X+/wPV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wPV//8D1v//A9b//wPW
//8D1v//A9f//wPX//8D1///A9j//wPY//8D2f7/BM3r/wqnv/8OkKj/D4yk/wuguP8GxuL/A9r9
/wPX//8D1v//A9b//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9X//wXI6f8WX23/HSsx/xs9RP8a
Qkn/Hisw/xhPWv8Hv9z/A9f//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8C3f//EXyO
/x4lKf8PjZ7/EniG/xRwfP8Mobf/HDY9/xdVYf8D2f7/BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV+v8cNDv/FGh3/wTO8/8bMzz/HC4y/wTP7P8QhJP/Hiov/wXN8v8E1v//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNb6/xs/SP8VZHL/C6K6/xtES/8cOT//DJ+0/xF8i/8dMTf/
BND1/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//EIqe/xwzOf8bQEf/Gz1D/xw0
Of8aQEf/HDU7/xRpd/8D2v3/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPd//8TcH//
Gzk+/xdXYP8dLjP/HiQp/xdYYP8bP0P/F1Re/wPV/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//At7//xVicP8dMTf/FHF+/x4nLP8eISX/FWh0/xpAR/8aPUb/A9f+/wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8D2f//C6jE/x4mK/8bOkD/IB4i/x8eIv8eKS7/Hx8i/w+Kn/8C
3P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8FyOf/HDc+/xs8Qf8eJSn/Hx8i
/x0wNv8cMDb/Br/j/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNb//we83f8d
KS7/HDI4/x4qL/8fISb/HDg+/x4qL/8HvN3/BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8D3P//DZau/yAbHv8eKCz/Higs/x0rL/8cNjz/IRga/xF+kP8C3f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//A9j//wbF4/8bOT//IBod/x4nLf8eJyz/HTE3/x00O/8gGh3/HS4z/wfB
3/8D2P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wPX//8GxuL/Fllk/yAYHP8gHCD/Higt/x4nLP8cMzn/
HDY7/yAbH/8gGRz/GFNd/wfA3P8D1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1f//BNH0/xRqeP8fGh3/Hx8i/x4i
J/8eJyz/Higt/x0tMv8cNz3/Hx8j/x8fI/8gGx3/FWFu/wXO7/8D1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8D1f//A9X+/wPX+/8Jscf/
HS81/x4oLf8Olab/FHB8/xlMVP8eKC3/Hx8k/xpGTf8UbXr/EIua/x4mK/8eJyz/C6W+/wPW/P8D
1f//A9X//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//A9X//wTM
7v8LpMH/DJ61/xRre/8fIyf/F1xm/xNxf/8cO0D/GE9W/x8eI/8fHSH/Gz9F/xw2O/8VYWz/FWdw
/x4mKv8TbX7/DJ63/wqpxf8EzvD/A9X//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//
BNX//wPV//8E0PX/D4ue/xpDSv8ZRUv/Gzo//x4nK/8bQkj/HTI2/x0wNP8dKi7/Hx4i/x8eIv8e
Jir/HSwx/x0vNf8aRkz/HSou/xs7Qf8aP0b/G0RL/w+Po/8E0PP/A9X//wTV//8E1f//BNX//wTV
//8D1P7/BNX//wTV//8E1f//A9X//wTQ9P8PkKP/G0NJ/xpBSP8bPkX/Hx0h/x8eIv8fHiL/Hx4i
/x8dIf8gHiL/IB4i/x8dIf8fHiL/Hx4i/x8eIv8fHSH/HDM4/xw3PP8dNDn/FHOB/wXL7P8D1f//
BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wPa//8EzvH/CLjS/xtAR/8f
HCD/HyIm/x8fI/8eJCr/Hiov/x4nLP8eJyv/Hiku/x4kKP8fHyP/IB4h/yAbHv8cNz7/CLTR/wbF
5/8D1fv/A9b//wTU//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX/
/wPa+v8UbX3/IBYY/xlGT/8MobT/DJmt/wiyy/8Iudb/CLTP/wizzf8IttH/Ca3G/w2Wqv8NlKT/
GkNM/yEYGv8Tb3//At39/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E
1f//BNX//wTV//8D2P//B8Di/x8jJ/8eKCz/DJuw/wLZ/P8D2P//A9j//wPX//8D1///A9f//wPX
//8D2P//A9j//wLZ/P8NmK7/Hics/x8mKv8GweL/A9f//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wPU/v8E1f//BNX//wTV//8E1f//BNX//wPa//8KqsP/IBYY/xZYZv8EzO3/A9X//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A9b//wXJ6f8XUV3/IBMU/w2Uq/8C2///BNX//wTV//8E
1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//A9r//wqnwP8hFRf/EneL/wTW
/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNP7/xNsfv8hEhT/D42j
/wLb//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8D2P//
B77f/x8hJP8TcIL/A9X7/wPV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPV//8D
1Pr/FGt8/x8fIf8JuNb/Atj//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV
//8E1f//BNX//wTV//8D1/r/FGt6/xs7Q/8It9P/A9b+/wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//A9b+/wi51f8bO0P/FGV0/wPY+/8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wPV//8Fy+n/F1Zg/xdSXf8E0PD/BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E0PD/GFRf/xlHUf8GyeX/A9b//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPW//8GxOD/GUxU
/w2Wrf8C2///BNX//wTV//8E1f//BNX//wTV//8E1f//Atv//wyZs/8aQ0v/B73Z/wPX//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wPZ//8MoLX/D5Cl/wLc//8E1f//BNX//wTV//8E1f//BNX//wTV//8C3P//DZKp/w2X
qv8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX/
/wTV//8D1v//A9f//wPX//8D1///A9j//wXM7v8Fy+3/A9f//wPW//8D1///A9f//wPX//8D1///
A9f//wPZ//8Gxuj/Bcfp/wLY//8D1///A9f//wPY//8D2P//A9j//wPV//8E1f//BNX//wTV//8D
1P7/A9T+/wPU/v8D1P7/A9X+/wPV/v8E1f7/BNT9/wTV/f8E1f3/BNX+/wPV/v8D1f7/A9X+/wTV
/v8E1f7/BNX+/wTV/f8E1P3/BNX9/wTV/f8E1f3/BNX9/wTV/v8D1f7/BNX9/wTW/f8D1v7/A9X+
/wPU/v8D1P7/A9T+/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACgAAABQAAAAAQAgAAAAAAAAMgAAAAAAAAAA
AAAAAAAAAAAAAATV//8E1f//BNX//wTV/v8F1P7/BNT+/wXU/v8F1P7/BNT+/wXU/v8F1P7/BdT9
/wXU/f8F1P3/BdP8/wbT/P8G0vv/B9H5/wjR+P8I0Pf/Cc/3/wjR+P8G0vr/BdP8/wXU/v8F1P7/
BNX+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8D2P//A9j//wPY//8D2P//A9j//wPZ//8D2f//A9n//wPZ//8D2v//A9r//wPa
//8D2///A97//wLk//8D3P//BdH2/wbO8v8E2P//AuL//wPf//8D2///A9r//wPZ//8D2P//BNf/
/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9n//wXT9f8U
doX/HTQ6/yAhJP8hHSD/Hi4z/xhYZP8IxeL/A93//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9j//wXQ8/8bR0//IwoK/yAiJv8YVV//
F11o/x4wNf8jCQr/HjI3/wfD4P8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wLh//8Rg5X/JAcH/xhVXv8HyuT/FHSC/xZncv8G0u//EYSV
/yMND/8ZUVz/A9v+/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8E1vv/HDg//x8nK/8F0PL/Bc71/yAcIP8hGBn/B8Hi/wLn//8bRE3/Hycr/wbN
8v8E2P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1///
BdL4/x4sMv8cPkb/A93//wbK7P8fKzD/HyUo/wfD4f8B5///FG5//yAiJP8GzPD/BNj//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPf//8WZXL/Hi0z
/xZmc/8aSlH/Gk5V/x05P/8aS1T/GFZe/xtCSv8cO0T/BNb8/wTW//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//CrfT/x8oK/8eMDX/HTc9/x40
Of8eMDX/HTQ5/xxBRv8hHR//D5ao/wPe//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A+D//xRxgP8dNDj/GkhQ/xZqdP8fJir/IRgc/xVvef8b
QUf/G0NI/xlQWv8E1f7/BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wLh//8WZnT/Iw0P/xR1gv8TfYv/IB0h/yEZHP8WZXD/EYiW/yAgI/8cOkP/
BNf+/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8D3f//DKzH/yIXGf8eLjP/Gz9F/yEYHP8gHSD/Hisw/x8nK/8iDxH/EnyN/wLg//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNf//wTW+v8b
QEj/ICAk/xlRWP8hGx7/IB0g/x4vNP8gIib/HTI4/wXO8v8E2P//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3v//GVBc/yIUFv8YU1v/
HyIm/yEbHv8cQ0r/ICAj/xtASf8E1v//BNf//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E2P//Bc70/x0yOP8hFhr/G0JJ/x8oLf8gHSH/GkxT
/yEbH/8eMjf/BdD0/wTY//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//A97//wq00f8gHB//IRsf/x0xNv8fKCz/HyYq/xpJUP8hGh7/IhcZ/w6Y
rv8C4P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNb//wPd//8YWGL/IRYZ/yAcIP8eLzX/HyYr/x4uM/8bRk//IRod/yEXGv8bQUn/BNv//wTX//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wLj//8Pl63/IhUX
/yAeIv8gHCD/HjE2/x8mK/8eMTb/G0VK/yEaHf8gHyP/IRcZ/xCOof8C5P//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPf//8Norf/IB8h/yEbH/8gHSH/IBwg/x4w
Nf8fJiv/HTI3/xpKUf8hGRz/IB0h/yEbH/8hGx3/D5Oo/wPg//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wPb//8Iwd//ICUo/yEWGf8gHyL/Hiwx/yEXGv8dMzn/Hygt/x8oLf8Z
TFT/IRYZ/x8nLP8gICT/IRkb/yAeIP8KtdD/A9z//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNb/
/wTY//8C4///FW16/yIQEv8fJSn/D5an/w+Uo/8aSFD/GktT/x8lKv8gGx//GktS/xxARv8Plaf/
EYyb/yAhJf8iEhT/GVFc/wPe//8E2P//BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9z//wTU/P8Gy+z/B8Xl/x4x
N/8iERP/F2Ft/wymvf8fKi7/Fmhz/xhZYP8hGBz/IRkd/xxBR/8YWmT/Hiov/xCMnP8Vb3r/IhAS
/x00Ov8Gyuz/Bc/y/wTY//8D3P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A9z//w2iuf8aS1T/GFpg/xtESv8hGh7/HDtB/xZtdv8d
Njv/ICIl/xpMUf8eKS7/IB0h/yAeIv8fJSn/G0BG/yAiJv8dMjj/FHZ//xtITv8hGh7/G0BH/xhU
XP8ZUlz/DKrE/wPc//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//A9v//wm31v8bSEv/HTc7/xw5P/8ZUFb/ICIn/x8jJ/8eLzT/HjI3/x4xNv8eLjP/
IB0h/yAfI/8gHyP/IB0h/x8pLf8eLzT/HTA1/x4uNP8fJCn/HyIn/xlWXP8dMjj/HjM3/xpPVP8K
tM//A9r//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPY
//8Hx+f/E3eF/xw+RP8bQEf/GVRc/yAdIf8gHiL/IBwg/yAcIP8gHCD/IB0g/yAeIv8gHyP/IB8j
/yAeIv8gHiH/IBwg/yAcIP8gHCD/IB4i/yAdIP8cP0X/HTc8/x4xNv8aTVX/CrPO/wPa//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNj//wPe//8G
yu7/Bszp/xdjbf8hGBv/IBwg/yIVF/8iFBb/IRYZ/yIUFv8hHSD/IRYY/yIWGP8hHB//IhMV/yEW
GP8iFBf/IhMW/yEcH/8hGBv/GVJb/wbJ6f8Iv+L/BdP6/wPb//8E1P//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//AuL//w2ivP8iFRf/
IRgb/x02PP8RiJf/FWp2/w2cs/8PkaX/CrHO/w6ZsP8Ol63/C67J/xCFl/8Ol63/FmRx/xRxff8e
MDT/IRod/yEZHP8Nobr/AuP//wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNf//wXQ9P8dOD7/IRcZ/yAeIP8MqsT/Aeb/
/wLh//8C3///AuD//wPc//8C3///At///wPc//8C4f//At///wPg//8B6P//DKfC/yEaHP8hFhn/
HD9G/wTX/P8E1v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wPc//8Ks9L/IRwf/yITFf8WZXL/AuL//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPg//8WYm7/IhQW/yEcH/8KsM3/A9z/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8D3///DaG4/yIUFv8fJSn/CMDf/wPb//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8D3f//CbXT/yAeIf8iERL/EIWZ/wLh//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9//
/w2etf8iEBH/Gz5G/wTW/v8E1v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNj//wbN9P8dMTf/Ig4P/xJ+kf8C4f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPc//8KsM7/IhQV/xtC
S/8E2f//BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTW//8E1f3/HDtC/yMREv8No7z/At7//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E2P//Bc/y/x4xNv8gJCj/B8fn/wPb//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//B8Pk/yAe
If8dMjf/BdL2/wTX//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wPe//8No7r/Iw8P/xlOWP8D2/7/BNf//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1///BNz+/xhXYf8jDQ7/Dpiv/wPe//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//A97//xCOof8jDAz/FWp5/wPe//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1v//A93+/xRxgP8kBQX/E3iI/wPh//8E1v//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8C4f//EI+j/yIVFf8Lrsn/A9z//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//A9z//wqxz/8iExP/E3uM/wPf//8E1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNb//wLk//8XYGz/En+R/wLh//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wLf//8P
jKH/GFNd/wLk//8E1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3f//DKW7
/wq31v8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D2///C6zJ/w+Spf8C3///
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNf//wPZ//8D2f//A9n//wPZ//8D2f//A9n//wTX//8D2f//A9j//wPY
//8D2f//A9n//wPZ//8D2f//A9n//wPZ//8D2f//A9r//wPZ//8E1v7/A9r//wPZ//8D2f//A9n/
/wPa//8D2v//A9v//wPb//8D1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1P7/BdT+/wXT/f8F0/3/BdT9/wXU/v8F1P7/BNT+/wTU/v8E1P7/BNT+/wXU/v8F
1P7/BdT+/wXU/f8F0/3/BdP9/wXU/f8F1P3/BdT9/wXU/f8F1P3/BdT+/wTU/v8E1P7/BdT9/wXU
/f8E1P7/BNX//wTV//8E1f//BNX//wTV//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AA==')
	#endregion
	$MainForm.MainMenuStrip = $menustrip1
	$MainForm.MinimumSize = '1288, 912'
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'Main Form'
	$MainForm.add_AutoSizeChanged($MainForm_SizeChanged)
	$MainForm.add_FormClosed($MainForm_FormClosed)
	$MainForm.add_Load($OnLoadFormEvent)
	$MainForm.add_SizeChanged($MainForm_SizeChanged)
	$MainForm.add_Resize($MainForm_SizeChanged)
	#
	# richtextbox_output
	#
	$richtextbox_output.BackColor = 'Control'
	$richtextbox_output.BorderStyle = 'FixedSingle'
	$richtextbox_output.DetectUrls = $False
	$richtextbox_output.Dock = 'Fill'
	$richtextbox_output.Font = 'Lucida Console, 9pt'
	$richtextbox_output.HideSelection = $False
	$richtextbox_output.Location = '0, 167'
	$richtextbox_output.Name = 'richtextbox_output'
	$richtextbox_output.ReadOnly = $True
	$richtextbox_output.ScrollBars = 'ForcedVertical'
	$richtextbox_output.Size = '1272, 686'
	$richtextbox_output.TabIndex = 1
	$richtextbox_output.Text = ''
	$richtextbox_output.add_TextChanged($richtextbox_output_TextChanged)
	#
	# tabcontrol_Home
	#
	$tabcontrol_Home.Controls.Add($tabpage1)
	$tabcontrol_Home.Controls.Add($tabpage2)
	$tabcontrol_Home.Controls.Add($tabpage3)
	$tabcontrol_Home.Controls.Add($tabpage4)
	$tabcontrol_Home.Controls.Add($tabpage5)
	$tabcontrol_Home.Controls.Add($tabpage6)
	$tabcontrol_Home.Controls.Add($tabpage8)
	$tabcontrol_Home.Controls.Add($tabpage10)
	$tabcontrol_Home.Controls.Add($tabpage11)
	$tabcontrol_Home.Controls.Add($tabpage_debug)
	$tabcontrol_Home.Dock = 'Top'
	$tabcontrol_Home.HotTrack = $True
	$tabcontrol_Home.ImageList = $imagelist1
	$tabcontrol_Home.ImeMode = 'Off'
	$tabcontrol_Home.Location = '0, 50'
	$tabcontrol_Home.Name = 'tabcontrol_Home'
	$tabcontrol_Home.SelectedIndex = 0
	$tabcontrol_Home.Size = '1272, 117'
	$tabcontrol_Home.TabIndex = 5
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($groupbox15)
	$tabpage1.Controls.Add($groupbox14)
	$tabpage1.Controls.Add($groupbox13)
	$tabpage1.Controls.Add($groupbox12)
	$tabpage1.Controls.Add($groupbox11)
	$tabpage1.Controls.Add($groupbox9)
	$tabpage1.BackColor = 'ControlLightLight'
	$tabpage1.BackgroundImageLayout = 'Stretch'
	$tabpage1.ImageIndex = 0
	$tabpage1.Location = '4, 23'
	$tabpage1.Margin = '0, 0, 0, 0'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '1264, 90'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'Home'
	#
	# groupbox15
	#
	$groupbox15.Controls.Add($button_deleteGPO)
	$groupbox15.Controls.Add($button_gpresult)
	$groupbox15.Controls.Add($Button_gpupdate)
	$groupbox15.ForeColor = '59, 59, 59'
	$groupbox15.Location = '918, 6'
	$groupbox15.Name = 'groupbox15'
	$groupbox15.Size = '227, 78'
	$groupbox15.TabIndex = 22
	$groupbox15.TabStop = $False
	$groupbox15.Text = 'GPO'
	#
	# button_deleteGPO
	#
	$button_deleteGPO.ForeColor = 'Black'
	#region Binary Data
	$button_deleteGPO.Image = [System.Convert]::FromBase64String('
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
ou7ubJTub2nfg3L6encDAAAAAElFTkSuQmCC')
	#endregion
	$button_deleteGPO.Location = '97, 19'
	$button_deleteGPO.Name = 'button_deleteGPO'
	$button_deleteGPO.Size = '124, 24'
	$button_deleteGPO.TabIndex = 8
	$button_deleteGPO.Text = 'Delete Local GPO'
	$button_deleteGPO.TextImageRelation = 'ImageBeforeText'
	$button_deleteGPO.UseVisualStyleBackColor = $True
	$button_deleteGPO.add_Click($button_deleteGPO_Click)
	#
	# button_gpresult
	#
	$button_gpresult.ForeColor = 'Black'
	#region Binary Data
	$button_gpresult.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH1SURBVDhPlVPPTxNBGN3ERPTilTTxQvwH
MJw4cCA9edD/Bm1ROLQleijG1cSjIP3BzG53A7SUQCKliXA2UUsDCf0BhouxCVIidHef3zfbVtDW
hJe8ffPNvHn5ZrKjBWLrjTvTedx+muvyFnPS18vz7GO/dhk8eR2wv73VByczvpwCkeWvKDVp/BP4
TGTlmud5ncH+9lYfnYDoSgkv8mU8z5Uxk91FLFtSyjXP8zpjoF9A9QKIr9dQp3HF9VklHlI9u1FD
taVsuDG52jsgTqYlfRTWmyAMPQhTH4etj2Hp9ShW9BG8/MDRgPZk7WoA3zTjO9GK3wd2HgLbj4CP
D/Ap/wrCzEFKC2JxETKdhC3TsAyBjGnCtu1Gt4O3m3VYkUEYsSGI6BBk9C7SRlat9YNJId0O6Lh4
VzxSysd1iKmUoC+wf1BBpVZH7fBIKdcMKeWfgPnNMhLFfbzf2sNcYQ/zxQOkkgm4nodvx8eYmHiM
UCislGsXnh/QOQIjWdhtj3wkEwtwHAc/Gg00z87w6/xcKdeu6/oB//sTBXdAxtNmE6FwGM+mppRy
7VFnKiAQWTvpvIXOG7hJ1EJ5LNONMy5aLTgU5NGYlWuGCiAME0d6cdWSytgPhmFc/Sf+RmphrmCS
SQjxD3lzJpM5aVv74h6xZ3c+teHfVSynIPQd5DgAAAAASUVORK5CYII=')
	#endregion
	$button_gpresult.Location = '6, 19'
	$button_gpresult.Name = 'button_gpresult'
	$button_gpresult.Size = '85, 24'
	$button_gpresult.TabIndex = 0
	$button_gpresult.Text = 'GPResult'
	$button_gpresult.TextImageRelation = 'ImageBeforeText'
	$button_gpresult.UseVisualStyleBackColor = $True
	$button_gpresult.add_Click($button_gpresult_Click)
	#
	# Button_gpupdate
	#
	$Button_gpupdate.Enabled = $False
	$Button_gpupdate.Font = 'Microsoft Sans Serif, 8.25pt'
	$Button_gpupdate.ForeColor = 'Black'
	#region Binary Data
	$Button_gpupdate.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKwSURBVDhPhZPvS1NhFMdvRUYJ9ao3hRmV
/QHWG0EZ266/VjAqKQJpSGUmiWSGiWRt80flrzDENHVlKLKNINfcnVdrlk4G6iq1UinLcqEkaWRo
vvh2nnvv1HxRXzhcnuec83nOOc9zOQDc/8QXtiPxhgi1SRD5QvcBZVsWA8QViUt8gZsFQGUUpG8s
JSkhnMbsRtvwNKo6x5B02wNaWxWXDCBFplt8c3Z/AK2DU3hCwWqzsAxg8KS6flxzjsJJvjO1XmgK
3FWSM9iCvqwTac2vEFXSjevOEakKyUGKK2pHbNlz8Hd8ON7wEtaBr9CXdILaCZcARDMWOd4gpXkI
2kof6nu/QEunKvlcePQxfUz2g6a44g7o7vYjw/4O5W46xOiyygCTa6Gy6xN0tX4klHZBa3aOrp4B
aRNZWHSWpelQZS/0DYOoevFZrlICUL9mcQJHLcNIKHmGrTsjIqnsBTl3RaHbw3YnlnpwomkExZ5J
0MEyQEuAS45xnGoZg5Ztctz6kNBtB+U0WfHF4gb6rNOY2nDaPo4cgdoMAngCGGzjyHZNwFDjZcPZ
yIKlTEVU0TxVutlQ7UWuGEC6YxK8OQgoEJBie49zjyeQYxui3lzlSt6y2FCTq3t+m1rfIrU1gLOP
PrIKFiWAKrfFffL+a6Q5Aqjtm8GRCnosJqGCBrlXTuc4gsI+Mg+LfxYXhGkkNw4hKvNejQTYxxti
2F1nCFO46plB3cB3XLQP022svAW1sQ353T9g6p5FJgHib3Yw3w4JQAqJufzQepiuMKvjG4w9c6gf
XJCnrEhL/eb7FpHn/YXSvnmcb/TPSQ4FwLRLdaVF1N16ilT7B+T1/PyrgthCN61d0FAlDMyeN1W9
tBrAtGe/LjVZlWfzscGyJGWfif2Fay1yLYBpC1kEWTDoH+K4PxJHyEw1ZC2AAAAAAElFTkSuQmCC')
	#endregion
	$Button_gpupdate.Location = '6, 49'
	$Button_gpupdate.Name = 'Button_gpupdate'
	$Button_gpupdate.Size = '85, 24'
	$Button_gpupdate.TabIndex = 7
	$Button_gpupdate.Text = 'GPUpdate'
	$Button_gpupdate.TextImageRelation = 'ImageBeforeText'
	$Button_gpupdate.UseVisualStyleBackColor = $True
	$Button_gpupdate.add_Click($Button_gpupdate_Click)
	#
	# groupbox14
	#
	$groupbox14.Controls.Add($button_export)
	$groupbox14.Controls.Add($button_clear)
	$groupbox14.ForeColor = '59, 59, 59'
	$groupbox14.Location = '1170, 6'
	$groupbox14.Name = 'groupbox14'
	$groupbox14.Size = '88, 78'
	$groupbox14.TabIndex = 21
	$groupbox14.TabStop = $False
	$groupbox14.Text = 'Log'
	#
	# button_export
	#
	$button_export.ForeColor = 'Black'
	#region Binary Data
	$button_export.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIGSURBVDhPfZPLTxNhFMUb/xA27lwRVF4G
VBYWWkATVsalS3ThwoAmBJKpZQeEhsSFJsTQloROZ2o1RhqImQSJstAEXBgTRXm0Ux59OTC0lMN3
L0Of1pOcfGfuzP19j5mxAWCHwuGErKoIBIOYK1jmUVYUBFU1bqsQ9RUA9ND/pOs6wX1WL0uUiwCa
mfTz17rwb8vrXHvl9fIYi0YRUBS/1V8OoKWS/mxsYmNzi02ZNOPzIZvLcaaViO0EqgGyTPexLWaJ
xmLsreg21z6vrDDkfCW03ZoAXY8jHt8p2DAOuF4qVX1dG7Czu4/dvX0kEikYmUMcGcfIGvmCSZG3
i7UBiWQSyVQK5kEWI/4hNA40oGnwivBVdsuTJtwcboPTbZ+lvipAOp3B34wBiDOj5oVvE3i/Oob5
1QlE1ibFOA7t+xQcLjs9Xg2gPZuHR5xpxvAXifO09hB3py5wfvNVQqd0i2I1wDRN5LJnr6x5sBH+
T4/gXx7g65daP48zyw8EoHIF1ndwnM/j5ISj2G8zXizdR7+3TjQ9PisKPdfuoUvqpFgE0H9QqWtP
W+HR+qyrojzaHXEGDopFgBIKpekDOf953oXnxWlfx+RSL0YXO+CKtEOKtMG9cAOej7fR43aWA4Tq
hS+XumO4/Uf3MwecLifPSKbc4+5G15D9QyXgX7okXAYt8UUAtlMVDs/zLJvPSgAAAABJRU5ErkJg
gg==')
	#endregion
	$button_export.Location = '6, 49'
	$button_export.Name = 'button_export'
	$button_export.Size = '75, 24'
	$button_export.TabIndex = 1
	$button_export.Text = 'Export'
	$button_export.TextImageRelation = 'ImageBeforeText'
	$button_export.UseVisualStyleBackColor = $True
	$button_export.add_Click($button_export_Click)
	#
	# button_clear
	#
	$button_clear.ForeColor = 'Black'
	#region Binary Data
	$button_clear.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALPSURBVDhPpZJJTBNAFIbfiRgPHjQmyCI3
E02ACEQ0xsQqi+xLWMq+iCJYpYstUErBtiIFCRjCVqAspSwVEFoqSWMJi0QWsSKLGKJ4McrJswf9
nZZEMQgXX/Jn3hy+781MhgzVXHpal0kTvWXUr46jIdb3V8SSqY5LosJSFjkNqiOpRxlO7fJgsj2M
I1tVgltTohfmVZGmgwUSGQlZDBXh6CoPRXtpcNSyOr64Kd4TE9IgSDne2FdgrOWSQFxCfGERPs+K
sWouQEfZNTRn+eGVKsoB5109lfRPQd+DGBqp4RJPIMXUzBry7oixZS2AbTgXbbIrqIjzQ3Wsj46I
Dv8tqGSC2gzSK6MPPVEnflp/xnPA45Yl5N2VYHMsF0v6TGgKL6EozTO7QXSBmCCRhhlk1cuptyLG
3VCd+tiiFeKtWYwV021smvMd8PDoS+TzC/HekI4FbTIa+OfQZBewY28NPkpZsnRLMWlQY9FYjpVx
IWZ1OXgzIsTKUC5WB9IdcO/ANHiCYmzouGjk+6FZdJ7ouU7688vHOWzMNGLdIoa1lQtrxy2smQsx
r8/CjDYLy305WO3hgieUokM3Ab6kDOz+vg5BjSCozdyQAnN9NAzqRLwelTGYj0lNMqbabsLWl4vJ
Bi6Wu1MxXR0AUZHcAbeKfKnFLmDlUi/gfJ/QSfBhsoxNzUC/IgLzvQVY7E6DUR0NW3c2TIoAlIYc
+2qHxfJKapf4k0Zykb0B+1kcH/cQzT0OukrDMKUvwjujEAudadBJA2HruQ7j/UDIwlzssKcqyplU
kc6kjHQhRZTbjoCVU07oaV59nj9M6nC8aEmAVsKBjT2kUbELjjlJqlgW++roPXYEnbIQu+TIxTPH
w6vSPbfLk85iTnsDY8pAlISe2P4De+zJb4FGdNkucWLxyuG4lihiPH7II1y/2WHlrol7BPvUURYf
Fm/H7qAC8B8B/QJreuGdId4vfwAAAABJRU5ErkJggg==')
	#endregion
	$button_clear.Location = '6, 19'
	$button_clear.Name = 'button_clear'
	$button_clear.Size = '75, 24'
	$button_clear.TabIndex = 0
	$button_clear.Text = 'Clear'
	$button_clear.TextImageRelation = 'ImageBeforeText'
	$button_clear.UseVisualStyleBackColor = $True
	$button_clear.add_Click($button_clear_Click)
	#
	# groupbox13
	#
	$groupbox13.Controls.Add($button_nbbattery)
	$groupbox13.Controls.Add($buttonFixWMI)
	$groupbox13.Controls.Add($button_shutdown)
	$groupbox13.Controls.Add($button_C)
	$groupbox13.Controls.Add($button_WOL)
	$groupbox13.ForeColor = '59, 59, 59'
	$groupbox13.Location = '641, 6'
	$groupbox13.Name = 'groupbox13'
	$groupbox13.Size = '271, 78'
	$groupbox13.TabIndex = 20
	$groupbox13.TabStop = $False
	$groupbox13.Text = 'PC'
	#
	# button_nbbattery
	#
	$button_nbbattery.ForeColor = 'Black'
	#region Binary Data
	$button_nbbattery.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJMSURBVDhPfZJdS1RRFIb3bYTeddNV/YAo
kCC8iTAQSyEpFUlGJZsKsZFIzGo+zjmTpTN+DDrmMW9MhtLxM0tNo0zNRGQklMkcCxNFC/HCfsDT
GopwgpkFi80++13PXnu9RwH/cn8Ee/tpaW3jsfmE/sEhymy3Dvw9iq2J2UhoWrVuv6evhhbC7O7u
sbW9QzD4gqo7zoihP9QTAnTtEcMTHuYjHkZHZ5n9sEqg8zUPjGamFryMTnoxRLO/JgbgctQws5lN
79IhzBlFm2T7rKySnR8PMjKfieaqEWkcgNNew/dfJqEfpXzb8xPZNVn+abK0YTKxaCO83obLmRBQ
y+JOJYGwIvhV8fSTdCBd+N8qavsUM58r0Zy1Io0DcNk9cruV7lVFbpZG17K0vqBISy2lcVjxfvGa
PMEj0jgAzeFlbusSfeuKgty7DMja/UVx7qwV/xvFWCgH3eUVaVxAHdObpymxuLlSXEFBfhk52Vc5
n3GZ1JMXGZo7Iy7UizQuoIHxteMMbCisJVUUFd8gL89CRno+re8UXZMnBNAg0jgA3eHj5coR+tYU
JYV2igpLyc0pJD2tAP+4omPsKG7NJ9I4AEMAPeFkemSIrsYs8nNucyHzOtbyUzSNKFqGknHriQAu
H8+WxMKIYjA6wBVFIGrltML3StHQq+SvTABwG17qTAuB+SQGZQ7PxcaOkMKcUjT2JFFdb6HancAF
iRTbzYp25/26bcPRhOFoxnA2y7ubEIe2y20V7VFNTE3M5k8cljwmmfJfRr9Fz/bVoH4Doa6IqPMH
NU4AAAAASUVORK5CYII=')
	#endregion
	$button_nbbattery.ImageAlign = 'MiddleRight'
	$button_nbbattery.Location = '177, 19'
	$button_nbbattery.Name = 'button_nbbattery'
	$button_nbbattery.Size = '88, 24'
	$button_nbbattery.TabIndex = 16
	$button_nbbattery.Text = 'NB Battery'
	$button_nbbattery.TextImageRelation = 'ImageBeforeText'
	$button_nbbattery.UseVisualStyleBackColor = $True
	#
	# buttonFixWMI
	#
	$buttonFixWMI.Font = 'Microsoft Sans Serif, 8.25pt'
	$buttonFixWMI.ForeColor = 'Black'
	#region Binary Data
	$buttonFixWMI.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH4SURBVDhPhZLPS9NxHMbXrUOCW9HBAimp
S4cIE4qCoFOX/oRO1n1hP1Zmm7NWk5Figykux9qvpsMIrDa3oV1cm9PmNjLdLDdwkItNipjs8uoz
xYVO/T7wnN7P84L3+/ORAbL9ZLU7my02x4rbM8r7Dz4c7hFeO1xxm/NN00Z3P4DZYr02LIoLi4sU
C2us5n+xvJwlEJhgyGoTVQmA0TRQTiSSpFJLvH03ht3ppn/wFf3mIUyDZmmAobePTDaL1+dnfDxA
T5+xEm7esiRApzewnMkQ+hwhHImiN7zYFpYEdGi6/nxbSBGNzhKeniESnuaJTo/26TN0z7tFVQJw
r72rEIslmAqFmYsnyYsjFotF0uk0jx5r1vYE5LV1wxPqi/z4+ZdQJIbd5UbZdpdusUJ7hxrl7bao
iJ3dFZDrlLvWvedh7gYFbyujvimUdx6siFH1eMKnhWtvkNPIXaWPV+DLTXCKf2I5yqS6hXq5olKq
0TZArlPhKgUvw2wr+FsE4BTl3iN8f3jQL8YHNkI7VAXktIc9v0fESjOi/OkSeM6wbmwgrqr3idzJ
zXitqoD8y0aI3YLwVRg7R9l0jHlVXaV8YjO6u/4DjALw9ToEL1AaaGT+/iHJckVVQFKlmMz3HGfV
0EBCJQ+KmWS5oipAqEl464n23HmnANk/QeJ+bQT7sMEAAAAASUVORK5CYII=')
	#endregion
	$buttonFixWMI.Location = '91, 49'
	$buttonFixWMI.Name = 'buttonFixWMI'
	$buttonFixWMI.Size = '80, 24'
	$buttonFixWMI.TabIndex = 15
	$buttonFixWMI.Text = 'Fix WMI'
	$buttonFixWMI.TextImageRelation = 'ImageBeforeText'
	$buttonFixWMI.UseVisualStyleBackColor = $True
	$buttonFixWMI.add_Click($buttonFixWMI_Click)
	#
	# button_shutdown
	#
	$button_shutdown.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_shutdown.ForeColor = 'Black'
	#region Binary Data
	$button_shutdown.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFKSURBVDhPnZHPSgJxFEZ9lFa9QI9URAUV
SFRQDQljuHFRhEFJLbRWIeJrjDqZf1MzU7MyK0sHS8SvuUKX39VF5MBZXL4zZ0AdXq/XtMEEmAAc
FMBgMPg39B4H+v0+gucXKN9X/oQ88kXgu9dD6a7M7B8cYnZunqFb3ckXgW73C8XbErOwuIS4mWDo
VnfyRcCyLOQLRWZ5ZRXpTJahW93JF4HPdhu5mzzjdK7BMAyGbnUnXwRarQ9ksjlmfWMT18kUQ7e6
ky8Cr2/vSKWzzNb2DqrVGkO3upMvAi/Npv2lNLPrcqHTsRi61Z18EXhuNHCVSDJu9x4uQ2GGbnUn
XwTqj0/ib/P5jnDsP2MCgaDYyReB2kMdJ/5TRGPmkFA4MsbvRh75IlCxfyiVWNwcY9ThgKZpETpU
PB7PGKOOruvRYcB+pmxmJmAagOMHFX4HMETwr9UAAAAASUVORK5CYII=')
	#endregion
	$button_shutdown.Location = '6, 19'
	$button_shutdown.Name = 'button_shutdown'
	$button_shutdown.Size = '80, 24'
	$button_shutdown.TabIndex = 8
	$button_shutdown.Text = 'Boot?'
	$button_shutdown.TextImageRelation = 'ImageBeforeText'
	$button_shutdown.UseVisualStyleBackColor = $True
	$button_shutdown.add_Click($button_shutdown_Click)
	#
	# button_C
	#
	$button_C.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_C.ForeColor = 'Black'
	#region Binary Data
	$button_C.Image = [System.Convert]::FromBase64String('
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
AABJRU5ErkJggg==')
	#endregion
	$button_C.Location = '91, 19'
	$button_C.Name = 'button_C'
	$button_C.Size = '80, 24'
	$button_C.TabIndex = 6
	$button_C.Text = "C$"
	$button_C.TextImageRelation = 'ImageBeforeText'
	$button_C.UseVisualStyleBackColor = $True
	$button_C.add_Click($button_C_Click)
	#
	# button_WOL
	#
	$button_WOL.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_WOL.ForeColor = 'Black'
	#region Binary Data
	$button_WOL.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAL4SURBVDhPjZJrTJNnGIa/X/7XzBij2Yw4
yaI7KGyIViillkOsHFWomVJRDi2ieOiqhdAWD9E0slltQaOT4IE5SYiJifLDGFTURBI0UWEYEDmJ
gIdoWTm0194X+WHYknkn15t8z3PfT773zaPsr6ytc3prcXyC3VNL6X9g91zGMYnMyKxiP/Enr0b9
DAYDvAGGBC/HofPvIO2+wAQdwwG6/AH6RsfpHxvj5Yifbp8P+4lLKCXuP+j1jzJNUZj9xUxC5oWQ
rgmjuzKWZ+6YCTq9Gp66taSlrMeQYSAjLZ1nb95TcqwGpdhdQ8eHEWZNn8H3337HTz+qKMuJY/Ca
kfFBNyPPy+k8pcNWaGTLVjOmPDNbNmXxeOAdtmMXUWy/XeDp0DDz585leUQkUTHxXLAl8v5+Km8f
pNLi0XLWYWBjnoXCHRZ27dxNfk4uTd1D2H49j7JPHE09b/lmwQKio2LQxqdwx6UTD1HAQMMGHh2N
ps2jpv/3KCz7nBQXl1JUuJ3G9gH2ygHW8mpui48fFi9Cp4tDn2yg77SKrpoEhlu3weti/A+zOW+N
ISJSTfjScL7+ah432/qxHq0WA8RR/6SXiCVL0CfqSUs3kGtYzaF8HX1X1+Jvzqf6FzVqbRKa2DhW
LlexODSU6497Pg6wuM5S19TJsrBwYjVa1OpY1KuSqNqjwnc/m3PWaOL1mSQkJrNKG4cqcgWLFoZO
ZCyuKpTdR85Q3dDCmoQEklbrWZeewboMI80HvuSKU4sxpwjj5jw2/ZxF5vpMUpNTiNdoOHerBZlV
dh0+TcW1ZrFEQV4LhoJBXgWgdwx6RhGLE2BgPCAW7WNPeqRXZmRWMZWU39xx8BTb9ldSUFZBgbMC
syDf7iWv1IPJ7sHs8E7UZE96pFdmZFYRChGEfUqmyeayHL/sq6q/R6rFg9VT6zOYba6pPoHM/lvb
D57kRnMrja0vuPtXFw2P2pC1yfb/a2ORs8rs9GJyiCsIzGVeZG2y/VmaI5j6u7I2RYryD8V+McUJ
9WYhAAAAAElFTkSuQmCC')
	#endregion
	$button_WOL.Location = '6, 49'
	$button_WOL.Name = 'button_WOL'
	$button_WOL.Size = '80, 24'
	$button_WOL.TabIndex = 14
	$button_WOL.Text = 'WOL'
	$button_WOL.TextImageRelation = 'ImageBeforeText'
	$button_WOL.UseVisualStyleBackColor = $True
	$button_WOL.add_Click($button_WOL_Click)
	#
	# groupbox12
	#
	$groupbox12.Controls.Add($button_logoff_user)
	$groupbox12.Controls.Add($button_get_session)
	$groupbox12.Controls.Add($button_Userunlock)
	$groupbox12.Controls.Add($button_ResetPWD)
	$groupbox12.ForeColor = '59, 59, 59'
	$groupbox12.Location = '430, 6'
	$groupbox12.Name = 'groupbox12'
	$groupbox12.Size = '205, 78'
	$groupbox12.TabIndex = 19
	$groupbox12.TabStop = $False
	$groupbox12.Text = 'User'
	#
	# button_logoff_user
	#
	$button_logoff_user.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_logoff_user.ForeColor = 'Black'
	#region Binary Data
	$button_logoff_user.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJkSURBVDhPjZFfSFNxGIZHVJSVMS8qC41N
LCM1mREaLiWjoigwLbTSOcsU0zRyKaIMujAREiFLU2EUtTnbnH8qSrOSlCSJirTypskoEstKCzVH
ezqba5oL8oGX3znn/b6HczgiQPSHM1Fiv9wd4sHS+NWci/EmJ9JrULVd7Oes3XDszhSckot79Xn+
tJZEoC+IQLVHStoWca+zdsNNoNrphakohPtl+zGoY8jbG4RSJp4emIWbIDvSk3KllOaSOPpaCnlQ
k0ZSsOfcBambF8K4iYn+y3zsLmagQ82RgAVzFyQFirRYqhl8UszbO3m8aMhCETyv0lm74SbYECAJ
6DQW8q41n+c3M6grT7GX3lOtO38Jdl0c0B2r/0bb43buXkmmqiCa0ooK0prGia4d1jqGZuESRJa8
HNJ0fuL1Z/ja30LX1USuq+U0atT0WUGTnsNt/yWYNq7EuMmHRpnE8VkuQcKlVzwz/6Do4RjmEbDZ
4PvYOF0fJqjKLKAnaj2cz4QyFZSepntfmEPiEuwufkp9zzAnjUNkm4awTY4xMvqF9FYrTT7zIT8e
8uKx5cY5TgoVGIN9hFWnIPTsIy7cGyRRYyah1szBajNxtRZitCPckgi/tq3OPjxNuwFD0Br71ZRg
haKJw5VvyNJZyNQKuWEhQ/eelIZR2tZ5wPFIrEo5P5O2Os5fJ6IxhvhOC5bKc7OXxeqsHgd02LNY
yKJYPaJDzaRGHaU7QopVEYZNGc5kcjgd2wKoCfY1uAQCy4XIhIT+K9cCV+kbZBKMMinGUKmwvNYg
PLe/gkvwP3yFzJTa74VdRL8BYsK9r5BPFgMAAAAASUVORK5CYII=')
	#endregion
	$button_logoff_user.Location = '108, 49'
	$button_logoff_user.Name = 'button_logoff_user'
	$button_logoff_user.Size = '90, 24'
	$button_logoff_user.TabIndex = 13
	$button_logoff_user.Text = 'Logoff User'
	$button_logoff_user.TextImageRelation = 'ImageBeforeText'
	$button_logoff_user.UseVisualStyleBackColor = $True
	$button_logoff_user.add_Click($button_logoff_user_Click)
	#
	# button_get_session
	#
	$button_get_session.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_get_session.ForeColor = 'Black'
	#region Binary Data
	$button_get_session.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH9SURBVDhPlYxbSJNxGIdHUFCU8nlR2FUp
wYSSUOlqsk50hMAOkMk0i1DKtSjXYjgGXdgwKilrZcIKyqm1LRPCtIOVkhhiBysNassuGtvCWWpS
sKfvw0/Z/2JlLzzw/vgdNMA0U3dstZRevl4KVu1ezMm8VI7oU4LmtVK6aosdQah3OFfqb7Qso82h
o9Gqw7wljZJVUr9qix1BqGfekILPtpIHZ7dx256HZesKirOk6YDQEYR6Jn0S1cVp3HXs5G1LBY+u
llCYmTTzgQM5c+Cnj4kPl/jafYrAEzsF2tkzHyhcrqlnqJbg80oG7ll46TVSlDnLqdpiRxDqZWiX
ajs9FXxqO0HfrYM0VO9TzNRJ9x8DGy8E3PuborQ/e0jrlb1ctq7jdM15Sr3f2VwTaPjrgN7xKuTq
DPMuAsODLXRdN3DDrqO5zspgFK51hVlT9ToU3xEG8i++odc/iu3xOP4RiMXgx+gY3R8j2J9O0Pd5
jBxbjxxNMLCpsoemF9845Alh8oWI/RpnJBrBdCdEmTeMp3eYjKMdcjTBQPbxDs7cD2Jw+cmv87Or
dhLlN7gCnGsLsqS0VY4mGFhY1Mwe53uM7iHK6mVuqsi/0f2FAucAi+RMfEcYmJ9bblqww/173nY3
CnNVprTiKZn4jjAgX7JMlkx2AhQvWejEi/8HzR9B2Vmp/hZrHwAAAABJRU5ErkJggg==')
	#endregion
	$button_get_session.Location = '108, 19'
	$button_get_session.Name = 'button_get_session'
	$button_get_session.Size = '90, 24'
	$button_get_session.TabIndex = 11
	$button_get_session.Text = 'Get Session'
	$button_get_session.TextImageRelation = 'ImageBeforeText'
	$button_get_session.UseVisualStyleBackColor = $True
	$button_get_session.add_Click($button_get_session_Click)
	#
	# button_Userunlock
	#
	$button_Userunlock.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_Userunlock.ForeColor = 'Black'
	#region Binary Data
	$button_Userunlock.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMQSURBVDhPhZF5SNNhGMcfiAQlj82s1DzW
DteymVseMUWbZqJdloIWpYaRZHnklVJIBRVFEZQdYyRdDkuzkii1k/xDOojADsv22+HspykpGhkd
395tESlCL3x4X3je5/M8z/tSuVbooDReIC5LFPCHM/2wL80XxXFCvlwrEFcksDijWCugPK0nDSYo
yJYgJ0t8CJljpEQ7l3o7KIwVdDVUStF2KAYN1RqUJ4uwNVLQlR8tpDxGVpQXjSwLpY8J88n6r6A6
1YeqUnyoPEmI5j2LcPfYKjTWpKEidSFywgXIiZhJGRHeNJoUSnyignpZ8gRBZRJrkVEU54HjufNw
82A6XrXsxn3dVmQp3ZGxWEijyxTEM3oTndUnCEo106goxo22LHYBvjZjvPsU+joPwPioBmvkLhhj
M/ezth3JUwlSLoxT9RKiTaFUD4sOPEt+c3sXnl4vwUa1e+2gVl7KHg0s2YnjLN//V7DyjJVS9MM0
Xy6SdzTthrGtCs+uFeLc2RJYYiVmW5wM7PJU8E7Byfe0/ITJkHdlGO2P7+GOLhcn965A/eoI9EWJ
YNWIYdSI+4lIbadNFVRrjpXBQYx0P8UfejlQ1zGA14PA5+4WdFzMRt3hFHBKX1hVc2FeqYFN7Q9L
pOg8pxYxB/m2hgXWmpZIYIqWgDJru/CcG8OeB1/AjQA/ATAXrBIv2BTeuGv+Bd3qzfio8ocpIriB
C3NKTJFi2KHkA89w5ekQCpp4FDUP4OePb+CZpTfIFX1SD1x6Mgz3vRxehAiumsODwIWLLjOIU4lg
h9QVD3G0lcfGOg5Zeg7r9GakXh6GRTYTvNgLLVVHQFXvwKoGdir8bxmVwTAqg/qcezBoVvYNrD/9
BjsMFmyvt2CbwYq8xiHU59fgk9gDA2yUghWVsMl87K0HdysCBj8sCISdVomvnmbElhW5Zxi+u601
wI4rY3p6I2hDO+6HhqFXMhsW6RxwMn/0hAT85a107hAT+tmtngwVw/FNk3kQ4K0ziv3QI2GCP7QG
zNazmJJ1wbb/L3uVyWJHZSKi3/SRxkDQBynyAAAAAElFTkSuQmCC')
	#endregion
	$button_Userunlock.Location = '6, 19'
	$button_Userunlock.Name = 'button_Userunlock'
	$button_Userunlock.Size = '96, 24'
	$button_Userunlock.TabIndex = 9
	$button_Userunlock.Text = 'User Unlock'
	$button_Userunlock.TextImageRelation = 'ImageBeforeText'
	$button_Userunlock.UseVisualStyleBackColor = $True
	$button_Userunlock.add_Click($button_Userunlock_Click)
	#
	# button_ResetPWD
	#
	$button_ResetPWD.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ResetPWD.ForeColor = 'Black'
	#region Binary Data
	$button_ResetPWD.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJySURBVDhPfZPLT1NBFIfnDzC6NpGF7Fwo
AoVIQZ4RE6Tgghg2xoQoxmBosNBCQOhLfMRogtFaIIIbook7BGkpIPKwUSivNKUoBAlCd7qRgJR8
zr2Uxgf1JL/MnXvP7ztn5s6I/0W/LdPqNmfiNmfhtmTRb81iwJ5tjXwWQORpn3A3Zaz5nAVs+K7C
p0pY1LM1d42ZZ0V4bNnrSk5MgDRbfc5z0ljFzrye795yJuV8qlXHD58CKcYjO4kJ6Ks/xeacnnDQ
wM6CgQlHgZKZrGiqTcd2wKAuJybAY9bK6tWE502wUMekoxD3TW2cqyE9ztdaBMsm3E2nYwPcTeng
18vqDfC5ifBUHYH2C/jbSticNkKwir7GjNiAN7Wp8PEyLNlltbsctwpudAnsL4/B1wdsv70o/8x/
AIO1abKDGnhXJjuwkyIBs1+MKsTWfoTAwzN0Vmic+wKG6tOWK24dILlZkCyNKRZBqlngX7UwHCyl
+pWg3HZwR6Ye/gfQV6tZWWwrJOWOYOnbE2ZDOmbXi5lZ0xEIPcIxIhhdvkR9tyD7vnjxB6DXlLQy
/TgPfFfQ2AWToUqcXhGV473gqRxbPwgm1srIv6ecowigx5i4MtGSyc/xEhgrRSPbHwzl0BkQqjr8
gvbpXXXMCSwuQV6jGFABvcbEkK8lnY1hecqGCuXGnee65RC5skK+XEr+bUGuTfA8KGHzArNHkNMg
XLJuvAroqUkg7C1mc0TH1mgR3mYtYzVapTf15Ck6K0Fdq9I8GDUfldq9C73GBF4bTtBtUMaTuExJ
e+ZoFMhu7OOqeUBOVbMSe3sQrfSb/o699/HqLBKA+AVNXLmpaNymFAAAAABJRU5ErkJggg==')
	#endregion
	$button_ResetPWD.Location = '6, 49'
	$button_ResetPWD.Name = 'button_ResetPWD'
	$button_ResetPWD.Size = '96, 24'
	$button_ResetPWD.TabIndex = 10
	$button_ResetPWD.Text = 'Reset PWD'
	$button_ResetPWD.TextImageRelation = 'ImageBeforeText'
	$button_ResetPWD.UseVisualStyleBackColor = $True
	$button_ResetPWD.add_Click($button_ResetPWD_Click)
	#
	# groupbox11
	#
	$groupbox11.Controls.Add($button_DNScheck)
	$groupbox11.Controls.Add($button_ping4)
	$groupbox11.Controls.Add($button_ipconfig)
	$groupbox11.ForeColor = '59, 59, 59'
	$groupbox11.Location = '257, 6'
	$groupbox11.Name = 'groupbox11'
	$groupbox11.Size = '167, 78'
	$groupbox11.TabIndex = 18
	$groupbox11.TabStop = $False
	$groupbox11.Text = 'Network'
	#
	# button_DNScheck
	#
	$button_DNScheck.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_DNScheck.ForeColor = 'Black'
	#region Binary Data
	$button_DNScheck.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHgSURBVDhPpZPfS1NhGMef/6NuxJuuAvUy
dpXocMqqQf9AXoT4a+w9P3aGR9Oi0uZG0/mLTY9uzhWVF91EXXQTBMEsjC4KzQ5C2TIXZuFFfHuf
I8Zmmwq+8Dnvw/P5PrzwvhwCcCJoYOLB4rX4ffSN3kPfSPYf3JPOYir7h4tkxjL4+nsb+Z0CNn9t
yX0LGz8LsH8U0HM341DJm7EFkBFNYe1bHqf1NzgXW4HPsnElbWPZXocRSSEoqeijaZAetrC0soaz
kY+oz27ClfmOmvg6Xrz9AHbaIT44PAtSh6bx5NU7nBnfQFV2F1WP/uBUPI/HL5fBThlMVvSa9CTk
x3qWw9KqjdfyJIbr5NMc2B3lqc2MPvffnELXjYkiJuG/lUCrPphuDQ6l/bcTTs9x1/cyPMOzJFe1
pK4cmqqi2d0oH7u8l1STEp4jUUKK/OF56g7oJPQeNHm8aHR7KBBZcFxxlmdJUdQShNCoM2BQYe48
XQ30w9Xgw/Z8A3WJEAlF+y9PimaUILQQtQuTPk+7rU+JZtjJFnyZcVvtotdxB/Okh0wG+2hGLzrU
fqyOuYCdAQeuuceuOCshunjhEoN9vF4f6j2X8T5Wi9ydOgeuuceuOCuR97i3yt3wcaCyv+jxAf0F
JH9G0480278AAAAASUVORK5CYII=')
	#endregion
	$button_DNScheck.Location = '6, 19'
	$button_DNScheck.Name = 'button_DNScheck'
	$button_DNScheck.Size = '73, 24'
	$button_DNScheck.TabIndex = 13
	$button_DNScheck.Text = 'DNS'
	$button_DNScheck.TextImageRelation = 'ImageBeforeText'
	$button_DNScheck.UseVisualStyleBackColor = $True
	$button_DNScheck.add_Click($button_DNScheck_Click)
	#
	# button_ping4
	#
	$button_ping4.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ping4.ForeColor = 'Black'
	#region Binary Data
	$button_ping4.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKnSURBVDhPpZDZS1RhGMbnD+giRCpFpQUz
dVJspf2iRUMyLWdcRnNGW8gxW8YiaSqERp0ZNVdKCCWCLsKiCKOcxmaOOkbZvlmUVmqlo11EUFDw
6/uOodfWgeech/O9z+99v1dTUVHhstvtlJeXT0kyI7Maab4MjzDiH1XlH/uKf3Rs3P/9Do/4J86l
l/VSMquRtE+fhwkLCcNkzCNyQRQxC2MxmwtZuWIVa9eso6joKBs3bCJ+YwLFxVbVDw59USdRJxj8
9JmI8AgK8vexNG4Rq5ct57DlCIkJiSRtTaakxMb2VB36VD02WzlbErfycWBwfAL5ev9hgOjIaMx7
8mka8HNhcIzObz/R6zPQiVBZmQNDpoEsQ7YIVZCSvI2+/g+TgLfv+omJ0lJz8RInPT6mJSSwuvUm
pVeuY0jPxOE8jdGYizHHJBZXhU6Xxpu3fZOAV71viI3W0vUb5omOQYYsIkRX++g3cjOzqHRWUXDQ
wvHaMziqa9UdvBSZCcCTZy/YrEunpX+IAHHX0LydRIvCFa23aO68z/nLVyn5/ov9ni66fsGS2Die
Pn85Cei5/xBLYzNF11qZmZWtArRV1QQbTay/0UbK815m5OYxPTmFUx3d7Cop5UHP43GAw2HH5+vG
6ekmqfEcQWLkkFwTMbUNzDYXELbXjFZMEyoA8iy+8jSVHffo9t1FZgXAgeJRaPkB2mNWgsWm5QQx
dQ3MOXCIuRYLsfVnCd21m+DsHURYT9DUN4Ti7RAAxzjA7fZQ9+gVQcXHCNCnEbgjh3DRdVZBIUGF
B5hfU0eguE5ARgbBViv1j1+rGRXgdDpxue7ganPjue1BuaOgtHvxigLF7VWlevFPaVfUGtctt8i0
I7Mam83WK42kTUUyI7Ma8UQKLf5HRWqA/xCaPwjpfGnrltfSAAAAAElFTkSuQmCC')
	#endregion
	$button_ping4.Location = '6, 49'
	$button_ping4.Name = 'button_ping4'
	$button_ping4.Size = '73, 24'
	$button_ping4.TabIndex = 2
	$button_ping4.Text = 'Ping v4'
	$button_ping4.TextImageRelation = 'ImageBeforeText'
	$button_ping4.UseVisualStyleBackColor = $True
	$button_ping4.add_Click($button_ping_Click)
	#
	# button_ipconfig
	#
	$button_ipconfig.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ipconfig.ForeColor = 'Black'
	#region Binary Data
	$button_ipconfig.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJOSURBVDhPpZPtS1NxFMd/f0t/gKWbejeb
NYU0t3oRkS56ICRF1N3RNjY377zb0J5sz1ttFulk5cOooCiqTSwRIsI5C12RWm98Y9CboqAX385v
OjDYC6sffDgPv8v3nMPvXAbgvyib/BuYWx7AkFuCYI4xjSXM6nfJAeKgNcL4UXhdTlQaQ6g2+gnf
NtzfGf+ZE0Q/NObQAzaSSDDJYUc2/xkzi6uYya0im1tHdvHTFtzfkctwcmt4ubQOwRQAi8fjcNpt
mJz/gLZLabRdTmM6lcRFr6fIFPnHKc8tj4eIifFRpOcLqKEuSOAG+vtsuD37HlpBgXORZwj7fWjQ
NhYJ+67hTPh50fJYq21AYPgqki8KqC0JSCQQzRTQkZhF5805SNTREZ2+CPfP35pHP1ldix4tRJ/V
ikS2QCOQQIJGcDlsGH5SQKNQhZ6xV2g/ZcCxo/oi7acN6E6+xtmTBjQf1uNQkx6tJ1rhe7yyJcBf
YcBph+dhAaY7CxBTb2BMLcA0+RbiNsa7eXSN54BfGeAn8eMp3PffQcUFXC6JeSQHpEcf0VSnhGV6
Gb0TK6irEdA9tQaNaj/qVWoSXEFPagmdY0voGMvDeW8Zav4KsjzABmUJ1ReiUJsjUNA+4HsMG6PN
wLcRbCR1VHUEVb0h1NIOVHb76T4IRW8AtV2DGdpEmQ26XXwWBUdlCn5RilFUitexT4yhiqzSFKNq
wU1+T1U3BVOYx18p3kMdyMxL63zFI7E6S4xyrIJ/WIaK7dUt3e8trTI/PPFvp9wftnvAfgPh9Dv/
DN/PlAAAAABJRU5ErkJggg==')
	#endregion
	$button_ipconfig.Location = '85, 19'
	$button_ipconfig.Name = 'button_ipconfig'
	$button_ipconfig.Size = '73, 24'
	$button_ipconfig.TabIndex = 5
	$button_ipconfig.Text = 'IPConfig'
	$button_ipconfig.TextImageRelation = 'ImageBeforeText'
	$button_ipconfig.UseVisualStyleBackColor = $True
	$button_ipconfig.add_Click($button_ipconfig_Click)
	#
	# groupbox9
	#
	$groupbox9.Controls.Add($button_regedit)
	$groupbox9.Controls.Add($button_cmd)
	$groupbox9.Controls.Add($button_psremote)
	$groupbox9.Controls.Add($button_MSRA)
	$groupbox9.Controls.Add($button_Remotecontrol)
	$groupbox9.Controls.Add($button_rdp)
	$groupbox9.ForeColor = '59, 59, 59'
	$groupbox9.Location = '8, 6'
	$groupbox9.Name = 'groupbox9'
	$groupbox9.Size = '243, 78'
	$groupbox9.TabIndex = 16
	$groupbox9.TabStop = $False
	$groupbox9.Text = 'Remote Tools'
	#
	# button_regedit
	#
	$button_regedit.BackgroundImageLayout = 'None'
	$button_regedit.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_regedit.ForeColor = 'Black'
	#region Binary Data
	$button_regedit.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_regedit.Location = '163, 48'
	$button_regedit.Name = 'button_regedit'
	$button_regedit.Size = '74, 24'
	$button_regedit.TabIndex = 16
	$button_regedit.Text = 'Regedit'
	$button_regedit.TextImageRelation = 'ImageBeforeText'
	$button_regedit.UseVisualStyleBackColor = $True
	$button_regedit.add_Click($button_regedit_Click)
	#
	# button_cmd
	#
	$button_cmd.BackgroundImageLayout = 'None'
	$button_cmd.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_cmd.ForeColor = 'Black'
	#region Binary Data
	$button_cmd.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAGpJREFUOE9jGHjQP2n6f0ow2IDLNx8QxBmVEzFouAGnzpwlC8MNAPqE
LEx9A2AAWRFMHF0MhFEMQFYEY6PT6BinAegYBtDFiXYBOhuGUQwAYRhAVoQsB6NBAMTGMIBUTD0D
KMFAgygBDAwAnWumm5ZCmokAAAAASUVORK5CYII=')
	#endregion
	$button_cmd.Location = '163, 18'
	$button_cmd.Name = 'button_cmd'
	$button_cmd.Size = '74, 24'
	$button_cmd.TabIndex = 4
	$button_cmd.Text = 'CMD'
	$button_cmd.TextImageRelation = 'ImageBeforeText'
	$button_cmd.UseVisualStyleBackColor = $True
	$button_cmd.add_Click($button_cmd_Click)
	#
	# button_psremote
	#
	$button_psremote.BackColor = 'Transparent'
	$button_psremote.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_psremote.ForeColor = 'Black'
	#region Binary Data
	$button_psremote.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAjVJREFUOE+tk+tLU2Ecx88fY2CGFaRGRr2qfFMU64Uw6ILgq6hZYjnD
yoldFq2EXFo2qGNqEy8rUae7u+bWLmyruXCXnLWcgStHvtAu33x+Z+x0QHpTP/jwcOB8v8/v9nD/
Na4Y/NhyWY+SJr3k3IxjHVPIy4RgYo05isl4FiPx5QKGueymDIWXcVxrEk12qIZJoPF8pDOYWUF7
YAk3PIsF2maE79uvl8BHMjjQYRQNWEqd3gU0m+fIYP3nL7xfWcO1mUU0ONJEvUVAZfuEO9YYFD0e
0eBcv5/EtS9mUW+Kwzj/hUwCn1dxxp5GzXiKODWchHIshfODflGsHPJC+TKI0wMBHOb9kA28Rc1E
AuYPOTLRJ75iPx9D+f0wStUByHURHNFapOkzg6ruV9j9wIWy7gAqe95AbppHZvU7cms/UN45iyKV
D0WNbtR2hVHRZhAN2FhYCSU3jSjWOMjgrDWF9Ld16sOJkQTdzMSldfaN2kNSg33qUZx8bCODSp2b
OsxSZ808+Owdpb691YetjS5UXHTiQn+Y/s/LOU7+0AJZlwl7N+pi42Mpt0wnUT0YlcydcajFRdne
Gg8JBtfHgqjjnai6N0pz7QumIOPdKLtrxVGdD7ZkFp6FHCaiWUKm9qL60bR4O0tF2WfHnqu9KL70
lGArzNjWPIldrXZip9JJ9bMGspLzco5j66g1BdH03AHFEysUvIMyYksiECrQ0BtB+1SM3kJeLgQz
+fOh/A3J/v97cNxvbRwpGSKGCe4AAAAASUVORK5CYII=')
	#endregion
	$button_psremote.Location = '83, 48'
	$button_psremote.Name = 'button_psremote'
	$button_psremote.Size = '74, 24'
	$button_psremote.TabIndex = 3
	$button_psremote.Text = 'PS'
	$button_psremote.TextImageRelation = 'ImageBeforeText'
	$button_psremote.UseVisualStyleBackColor = $False
	$button_psremote.add_Click($button_psremote_Click)
	#
	# button_MSRA
	#
	$button_MSRA.BackColor = 'Transparent'
	$button_MSRA.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_MSRA.ForeColor = 'Black'
	#region Binary Data
	$button_MSRA.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAjVJREFUOE+FU/9rUnEU9b8qCAoGMYoiWj+MokWMIQXZGKEhK6F9obHa
Cq0RUjJczQ0rwZUzY6spOmVNtkJrlm5Wk2n5hUqTxjzt3PFcry/0gcPj8Xnn3HPvPU/Ds5otIZEu
IrKQhNe/IHB65jDyMAjr2HNY7JPot3rQZX6AzqsOGC6PQIjKIblWqwkq1XUUvq4jk/+BZOY74isV
RBPfEI59ge9FSaDvtakFFuNpIVungeuTQI8LMIwCumHghHkDzVfKOHQpg0ZDHO5gHjrTLbWAP/JW
BCxP1GStFTg6WMXh7hz2GRNoOBsRgVOdZrUAe6ZA/wRw0bkl0DqkJrP6rjYfXIG/CDi9cyKgkFlZ
sX7Q9AF7zy1i9+kZ7DzpFgda4021wD13SIb3r75pnUXsrkB9K9wInYvAbcdTESD5d+sk0zrJW1va
kG+J+ja4Y17I2lJZRF8XEH6Zw/R8Cd7QR0zMvBcBkvg09tlkzfVZKAHp6LojK2KPvPwVdEmSko/k
ahWt+gFomD7FEvGpCGTz5T9wY7NvkjgDFogtF3HsTC8087GM9DZbeYZaeTORn8eEwHgvpdbq8Wab
JDGVSjKb2kyoh8icMwJpHzClkf+Cs/CH47j/OCj2eyzjQro2PCUOGOn9Lee3BV69W8abpRUw1nRF
sDrvg9EULgyMylAJT7ggaGjugKRw/FEINkdAbHYP+eRjrogD5QA5LL6b785i0L6NPUd06kD977S0
90nfjcf1Qt5xQIufQS28ytGYvtsAAAAASUVORK5CYII=')
	#endregion
	$button_MSRA.Location = '6, 18'
	$button_MSRA.Name = 'button_MSRA'
	$button_MSRA.Size = '71, 24'
	$button_MSRA.TabIndex = 0
	$button_MSRA.Text = 'MSRA'
	$button_MSRA.TextImageRelation = 'ImageBeforeText'
	$button_MSRA.UseVisualStyleBackColor = $False
	$button_MSRA.add_Click($button_MSRA_Click)
	#
	# button_Remotecontrol
	#
	$button_Remotecontrol.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_Remotecontrol.ForeColor = 'Black'
	#region Binary Data
	$button_Remotecontrol.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAaNJREFUOE/NkMlLQlEUxv0/2revIKJWEaEQQYKUQQNEgxAPJQOHtAGR
LCwtylJBelqYmg2+CpxQMjKQyly0aLAoaOvG1l/dW1mQ0NsEffBxD9+958e5R/BnusxeQGLYQSad
QmuHGi6XBx9Xv6tX58b93S00K1EYzT4oZgLYCexCNmbjB1HMH4Bl/TBZnaho0GFkVA/lhA2Ti0F+
AMYSRqdyBU/5G+wnM9jnQqhvkcPoOOQH6DKE0K50UsBj/haJeBzNYj00lm1+AInGjykzS/dQKBQo
oF8+j0G9mx9gcNxFl/byUgRR7jJHdyKUGn8CHAHubctLJZPMZveWmonIFOnjEyjUlp8A0rT3WKQm
NdtdA29fLfwD9eDGpDhdn8NNNk0BBoOpPMCVuYaZS1LARk81njeH8eCWIb+hxNG0lGYE/P30MaJ3
WDnAmbUbudUhXHm0yDqGS7a3VSLENCKlE1OzQ00ofWE5cU4Bax1VdPywSoiIWkSBn/b21SGkkiA2
zXx9ZdbOYmE7CkswAlKTLDbL0IdbciGCCiE4bTtIRhv+mQSCV19YWTxAQ5InAAAAAElFTkSuQmCC')
	#endregion
	$button_Remotecontrol.Location = '6, 48'
	$button_Remotecontrol.Name = 'button_Remotecontrol'
	$button_Remotecontrol.Size = '71, 24'
	$button_Remotecontrol.TabIndex = 15
	$button_Remotecontrol.Text = 'RC'
	$button_Remotecontrol.TextImageRelation = 'ImageBeforeText'
	$button_Remotecontrol.UseVisualStyleBackColor = $True
	$button_Remotecontrol.add_Click($button_Remotecontrol_Click)
	#
	# button_rdp
	#
	$button_rdp.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_rdp.ForeColor = 'Black'
	#region Binary Data
	$button_rdp.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_rdp.Location = '83, 18'
	$button_rdp.Name = 'button_rdp'
	$button_rdp.Size = '74, 24'
	$button_rdp.TabIndex = 1
	$button_rdp.Text = 'RDP'
	$button_rdp.TextImageRelation = 'ImageBeforeText'
	$button_rdp.UseVisualStyleBackColor = $True
	$button_rdp.add_Click($button_rdp_Click)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($groupbox16)
	$tabpage2.Controls.Add($groupbox7)
	$tabpage2.Controls.Add($groupbox6)
	$tabpage2.Controls.Add($groupbox5)
	$tabpage2.Controls.Add($groupbox2)
	$tabpage2.Controls.Add($groupbox1)
	$tabpage2.ImageIndex = 1
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '1264, 91'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Computer & OS'
	$tabpage2.UseVisualStyleBackColor = $True
	#
	# groupbox16
	#
	$groupbox16.Controls.Add($button_hotfix)
	$groupbox16.ForeColor = '59, 59, 59'
	$groupbox16.Location = '1151, 6'
	$groupbox16.Name = 'groupbox16'
	$groupbox16.Size = '105, 78'
	$groupbox16.TabIndex = 10
	$groupbox16.TabStop = $False
	$groupbox16.Text = 'Updates'
	#
	# button_hotfix
	#
	$button_hotfix.ForeColor = 'Black'
	#region Binary Data
	$button_hotfix.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIfSURBVDhPhZHfS5NhFMfPZX9BWC7bJAhF
Mt0mSiO7sa1gQkJ1EUFFd+FWLNGLMtKKiOqqFrRRtC3QtYKKwIykSaRJlFH005xadBdY0IVXn87z
vr5r4qIHvu/3Oc853+857/PI7R7PMuS63ZLtqpKBWCWGTVyuzmDZQa7bY4kzkQpYmCStPGiZLK1z
sCTIKbJdayUdrYSpfri3Ej73kYqsZvBoeZPixulsxD+HOuBhNQwrhjzw5SSpzvImRbFJmk4UeuFR
DTypZUVFwGKG18P08bImGrhtsSYpHIPHdTBSD8/qcdVus5iRDfa55v+a2Bdrj925CmZ6IN+oHX0w
6ocJHzX+XRZbsTk3ea3LaP0tvas7Ook+lQt+J2C8CZ62KDZpV8WLFja2HrTYis25yY81w69r3I26
eRBbJ2Z5rQnmolq8GZ632nipeGN4i06hPK6Y0P1UjIY+IXBW2J1RtfkX26SS+Xw7vG5TkeJtEJe/
gU95L0yG4FWQj6MhQnHh8oyQ/CbsvS4UX8Ex4fsheBeGDx00nRZ8/QLvd8LsERp7VVwQrqrBnqSK
VVN8DsfkZsTFwtgO6nTMS1+F+KzQfMJGXIUJjdtO2eJ9N/TrGJSaDETXwI9OfGpiRFembSTmhK1n
bPH+lMgyAwuLJtlIFcxHCWg3I0zqNMFFcfi8yIH0vwwUziT3D1dbgtA5YbvC7NsvioQvlBj8Z3lL
2NmXLJE/2hzRpERwB9gAAAAASUVORK5CYII=')
	#endregion
	$button_hotfix.Location = '6, 20'
	$button_hotfix.Name = 'button_hotfix'
	$button_hotfix.Size = '93, 23'
	$button_hotfix.TabIndex = 0
	$button_hotfix.Text = 'Hotfix Check'
	$button_hotfix.TextImageRelation = 'ImageBeforeText'
	$button_hotfix.UseVisualStyleBackColor = $True
	$button_hotfix.add_Click($button_hotfix_Click)
	#
	# groupbox7
	#
	$groupbox7.Controls.Add($button_MMCServices)
	$groupbox7.Controls.Add($button_compmgmt)
	$groupbox7.ForeColor = '59, 59, 59'
	$groupbox7.Location = '1003, 9'
	$groupbox7.Name = 'groupbox7'
	$groupbox7.Size = '143, 78'
	$groupbox7.TabIndex = 9
	$groupbox7.TabStop = $False
	$groupbox7.Text = 'MMC'
	#
	# button_MMCServices
	#
	$button_MMCServices.ForeColor = 'Black'
	#region Binary Data
	$button_MMCServices.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAG6SURBVDhPpVHbSgJRFD1fE4ERRR8Vps6Y
mo7aeNccZ8x7l8cMI+itIiKiixVEPUQX0ZfMSCTqVQXpYbf3KYtIJWjDYp21z+x1NmsYAPwLLBqL
s3R2kaUyC00EqPEknYE09em+izlF637LmTS/iERV5guEjhVVA2w2iFEXqf8Xg1Z4LlZdyRc699Ua
PNUbQLyyWnjD/hbeNwca+IORB18gDHelCmzv7EIineNMmvqhiALBcJRlckssnkjz4R8GWDrrjOPi
+qYEqpbAVNgEMWmnW34hnV1Y5gPafOq3gVv2ViTXLBTPzmFtfQMiUYXzCWrqowng64841DNgZpfc
7WmrvR7Tkp29/UM4ODoFYly9aRItJUG0VLz+4KaixnsGTDWOGDEKYl2ctsKk3nBJrDeYyhhiGTO6
zecLzX4BM8klM8FsIbSnjEINzYaQqwaT+IzDV4MCRhNgTreH4YvdTXQzDieddYhRxLDV3jfgV9Jf
BmaLjcNml/hGHl+AzXp85UEB4w/43oCGiUlLLoLcN2BcvYP9J7xv9TGQObB6BmwUzHXqI8YGGhB6
BFwjTf3PR/5UPOCPI2fSWIy9A9wD+f2hDKCYAAAAAElFTkSuQmCC')
	#endregion
	$button_MMCServices.ImageAlign = 'MiddleRight'
	$button_MMCServices.Location = '6, 48'
	$button_MMCServices.Name = 'button_MMCServices'
	$button_MMCServices.Size = '132, 24'
	$button_MMCServices.TabIndex = 1
	$button_MMCServices.Text = 'Dienste'
	$button_MMCServices.TextImageRelation = 'ImageBeforeText'
	$button_MMCServices.UseVisualStyleBackColor = $True
	$button_MMCServices.add_Click($button_MMCServices_Click)
	#
	# button_compmgmt
	#
	$button_compmgmt.ForeColor = 'Black'
	#region Binary Data
	$button_compmgmt.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALsSURBVDhPdZLrS9RZGMfPv9CLthdBmEWw
KfgilgiWCCJoX2xFUBBFkGzRiG52c2ckZ0ZnnC4uOt51ZtXJmalGGWeq3dQoi9qLaZJmhk41FZPT
5Fx0Lo6J0Kfzs160u/bA55zDOc/z/Z6bMFk9X8XQ7Pbq6jsoqXVJrnyBC2VeWV+ysNzSJYzNbqGt
czG78IFEeuF/KPPK+pICCqUNHaLYfIlo6j3dgz56PqOMuwd8RJLvKTY7Pwkojv9F2YG6ykk4McfD
5zGGFF7E5DjKwLMoofgsakVAJnpLGzrRyzPp612fkFtTKKm5jEaKqCsdsndQ3nKN8/abGO29BBIp
iswOhE4mTs0liaRniKWnF4nOxoikYoQl75Ix3koCM9NopOPjt2kmDLfxGW5RWGtHnKl2EpiO8M3p
Yb41TfBdjZ/NlgDbbZPstk9ywPmGQ5Kx4DuKKi+hLdPx2vuK/voBnhR3IYqr7IxPTrLWOM6mxlds
cwTZ2TnFPm+E3GthVNfDHPVE+cc/RYnOSDA0haHiHD3qXoaPNCI0le0M+vxkVb5ky8UgO7pi/Hg1
zp4bCfbfiLP/9ySHe2Hkl1UknrnRnaum+1Yfx4tO8LO5HaH+1Ubfo6fk1AXYeDFEjnOabHeaLM88
61zzrGiFMc0a6N8CHRmMufXkF55m0B+i8EIrokg27vsjrDa/IaMpTKYjRab3A6v/gBVuGNdkyuKt
0JkFlmW05q6l68Fz7o36OVZuQZyUAtaeIeLzSeJzM8SVl0jFCcnf9vjUKvh7syxeD78tp+VwNh0P
XuP+c5SbQxMUGJoQKq35buFZKwXGZvLLGsnTN/CT1sq853sInocnOrAuw6bKQd9+B0//Uzx/Dcvf
OEa+rBEy1kg2KJypcWJs78XWN4rdsJfuy3p5AVW0Hc0h13QFlbGFvNJGVPp62UsjTcVdcaqibZFj
Jos4eMLQViDPlWeyoc3bTfmRH/BV71JcFg2WQDH/V6yULJX4lRDiI1mPiYTV4rA5AAAAAElFTkSu
QmCC')
	#endregion
	$button_compmgmt.Location = '6, 19'
	$button_compmgmt.Name = 'button_compmgmt'
	$button_compmgmt.Size = '132, 24'
	$button_compmgmt.TabIndex = 0
	$button_compmgmt.Text = 'CompMGMT'
	$button_compmgmt.TextImageRelation = 'ImageBeforeText'
	$button_compmgmt.UseVisualStyleBackColor = $True
	$button_compmgmt.add_Click($button_compmgmt_Click)
	#
	# groupbox6
	#
	$groupbox6.Controls.Add($button_localadmins)
	$groupbox6.Controls.Add($button_folderrights)
	$groupbox6.Controls.Add($button_profilerights)
	$groupbox6.Controls.Add($button_homerights)
	$groupbox6.ForeColor = '59, 59, 59'
	$groupbox6.Location = '701, 9'
	$groupbox6.Name = 'groupbox6'
	$groupbox6.Size = '296, 78'
	$groupbox6.TabIndex = 8
	$groupbox6.TabStop = $False
	$groupbox6.Text = 'Permission'
	#
	# button_localadmins
	#
	$button_localadmins.ForeColor = 'Black'
	#region Binary Data
	$button_localadmins.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAN6SURBVDhPbY5tTJNnFIaPycyMQnzbpmQ/
hhkdixJ1Rb66ORwvLcFppqISBYPDsoytc3y2hRY6mcwoIEiRLd1iGgSHLUNnRjUMpoKgQdEBbVog
czhK1QGbUF3mgBbuva3LwpY9yZVz8iTnvm5SS/l+VPF8OrQtyD/VHEpZ0LMZxwvRbOZ7a9KDcXTv
i8hl+V61lCcqkPHJx78CdG8LKT+O4Y4YJl8m5AJ4lP0mb/ab4jVoL2fRrGNRuDUUmVGM9wOJgHz8
E6BkeSLtWwJPbcYqHNsbzJkEf6pYZpkqgYcmzXq0lm9HY9FOFCdF4sAGBu/FCClTIiTKlwkoTyrg
TIzXb6qI/9v0Ct6NWOk6+MZy9DUrMHhJi1/vVGK08zD2rV0BeQSfMqK4BkVbhaTdIiSVjDMVLjLt
iETaukCkv/rcIKbNmLZWY+RqCeyWQqSGLZ2QhweQPDyQSJXAcC0Y+nAjZ/qaM1m0+M1n6vgEe15+
HkQU5ttHOz7FnfMqdBnTEBwUED1hSaRfWjYTKV9bQlmSpSRft2QS0ya4rSdwr+MQHJYCpLxEwxqD
mH++LmPc3rgbDmM0nOcSMHI2DiOm+M9GzFIi6Rdu+rZYTJLVvLixKxq4Oktgu5CHDsM+6I6sHau/
rEBvUxp+bk6Ad/Ag5hxZmLN9hAcXt+PHr1gDJervkqz2AbF655ozDVWT18+8j6byJOQq30F9byOu
j9egv3o1FobVwL0itOo24ruPY/37UH0sKLHKEchWDg8cbZ9CX88FdNftx2ldLMqOFKC03QO29ip6
K0TAaCngLIVFKcZFVTjw8BjsxtdBsrIB3Lj7GH0PPZicARYWgN//eArb/Se4NQG037Th5vFQzDty
4LFlczMPGMrHvD0X9lNcwI6qflwefIyCVjeK29yYn30K9/QUlG0eVFzqh1UfgrkBBeaHsvHkWjJm
elIxcyMFPzVsgqk6BiTRdsHQOQl5gxNpdU6kGMeQbByHpqELjloRPNYsf/1H19JxpSwMXVXrcatm
AxorIz3SPaE59EJ6C/Z/OYy8JhdyzS5km+4j8+wUXKdCMNu5DQtWBR51H8APBs5GFLmICI6VFLhJ
nROQbPas2G3C8l0mLNtlBiW1oKQwFbf1YeipCUdbmfh731H3CTH1nIygvs+j6Jw+mhSHY7hvX8qz
tMXp/0XE8T+P6C/QrhFL9yUQbwAAAABJRU5ErkJggg==')
	#endregion
	$button_localadmins.Location = '6, 19'
	$button_localadmins.Name = 'button_localadmins'
	$button_localadmins.Size = '134, 24'
	$button_localadmins.TabIndex = 3
	$button_localadmins.Text = 'Local Admins'
	$button_localadmins.TextImageRelation = 'ImageBeforeText'
	$button_localadmins.UseVisualStyleBackColor = $True
	$button_localadmins.add_Click($button_localadmins_Click)
	#
	# button_folderrights
	#
	$button_folderrights.ForeColor = 'Black'
	#region Binary Data
	$button_folderrights.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALhSURBVDhPfZPrS9NRGMfPy6g/oHe+UBBE
dF42U5uXdFqQIEVKYlFGL/JCas4stTdTNMyWTtM5EbJXlRZ4wS6aOJ2Y97k5L9MtDbUyTUy03b89
v20uIejA5/c7HM7zfZ7vc85hGnn8jro+CtOySCfcfKbxzBqt+2vkohAi1EOTKFTbJDqlVSQwrSLR
CeMCYFsGfi+4sCxhUirAVG2ER/Qo3H6NPG7TIzAtO02BOphnrsOkzoD9RzdwsAiY9C7MHEuuv4Vw
fHaKaJsSBH8FDsZg1mUSOTDPZhHcPBOWuSxYF7JhW8yGXc+RCfpAXSfEq5IwnltACOwNwLqYB6u+
gBC7WBLDbryL5ZfJGHsUhvFqAcHHxGM+2Qt3W4l/QwLUg713VFkRHCslcKyWAhxfHsDQdhHfPqS6
LZAtzgKHjQBZeRoLNl0XTRY6YWy/gLEqwRHCsPkxnfbmUdW5WO08S6fDg1YRgrmWEGz050JZJRxm
nIrJUIOFZyJSNrgycBktRjoczsZ9rHQkQ/8iDlbqD0jMPp+Dta7zGG2MfM1mGuKwqcrHRl8O8KuX
AgphMxYR92BfISvrZRiq8oNtvhAwFKOnJBJvS6lvxmLMtwrBZhrjYWhPxb5eCmw/h2NdQpQ7wdcK
YKsaAxW+wEoZ9UaCrgIeusVBwEYltC0RYHS7qKMxgLWNmtkM7MqIOjf1wL4cfRJvmKayYdXchl2X
D8f8HbKTB7UiHEwtT9il4yCRWLpp0ZhyEuOiNgafagKxpbxKvnOxp0yBaSQNB6rL0LVGobsiqJ3R
4BWn+V0rTPG9IiYKLvmm30rySUkMPZkw0cDHjuomlV6On6ob6K/0w2B1AIZrgtEhCeCCvVz3mbET
xPEjHFM3h+N7TxIcmmxsD2VgsjEMtB56BK9pRQTzvKpDZpvPsUFpIOuS+CtVT3gYqQ3G+4e8Xi5o
SMpjI7IQNlrPZ+MNAuYU+M/wIQ6zeXML/w7G/gD66oaB/Zvo/AAAAABJRU5ErkJggg==')
	#endregion
	$button_folderrights.Location = '6, 49'
	$button_folderrights.Name = 'button_folderrights'
	$button_folderrights.Size = '134, 24'
	$button_folderrights.TabIndex = 2
	$button_folderrights.Text = 'Folder Permissions'
	$button_folderrights.TextImageRelation = 'ImageBeforeText'
	$button_folderrights.UseVisualStyleBackColor = $True
	$button_folderrights.add_Click($button_folderrights_Click)
	#
	# button_profilerights
	#
	$button_profilerights.Enabled = $False
	$button_profilerights.ForeColor = 'Black'
	#region Binary Data
	$button_profilerights.Image = [System.Convert]::FromBase64String('
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
AAAAAElFTkSuQmCC')
	#endregion
	$button_profilerights.Location = '146, 18'
	$button_profilerights.Name = 'button_profilerights'
	$button_profilerights.Size = '144, 24'
	$button_profilerights.TabIndex = 1
	$button_profilerights.Text = 'Profile Permissions'
	$button_profilerights.TextImageRelation = 'ImageBeforeText'
	$button_profilerights.UseVisualStyleBackColor = $True
	$button_profilerights.add_Click($button_profilerights_Click)
	#
	# button_homerights
	#
	$button_homerights.Enabled = $False
	$button_homerights.ForeColor = 'Black'
	#region Binary Data
	$button_homerights.Image = [System.Convert]::FromBase64String('
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
rkJggg==')
	#endregion
	$button_homerights.Location = '146, 49'
	$button_homerights.Name = 'button_homerights'
	$button_homerights.Size = '144, 24'
	$button_homerights.TabIndex = 0
	$button_homerights.Text = 'Home Permissions'
	$button_homerights.TextImageRelation = 'ImageBeforeText'
	$button_homerights.UseVisualStyleBackColor = $True
	$button_homerights.add_Click($button_homerights_Click)
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($button_PCGroups)
	$groupbox5.Controls.Add($button_ComputerGroups)
	$groupbox5.ForeColor = '59, 59, 59'
	$groupbox5.Location = '524, 9'
	$groupbox5.Name = 'groupbox5'
	$groupbox5.Size = '171, 78'
	$groupbox5.TabIndex = 7
	$groupbox5.TabStop = $False
	$groupbox5.Text = 'Computergroups'
	#
	# button_PCGroups
	#
	$button_PCGroups.ForeColor = 'Black'
	#region Binary Data
	$button_PCGroups.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAANtSURBVDhPdZJtTJNXFMcP25xGqDx9So0m
ugTcJm5OIyUUIVsLj0MBsSobxGEtQsaETcW2vNSW1zC0QAfKooVoihiHxU3jKxFFqsFoNoNlZKWL
yVytUtMsWuIHcaD/3YJZ2Ifd5Jdz7of/+Z3cXCpJ5qfQJ/FUmTF/qpYwdML86aoQR5av5ScPaBaj
PnsRipX8ZEmyOKpU4CnIfwaY1ktJq+BYiOO0gpQNENOuT8QvThuj0WtW4pRJibK0d1EQy03ukEso
yL8DdEpxlGGdZKI17x3sy17MTJLneiU3R79GDHv5R+gxb8CJvZtg3ChD7ioOX8ZJqUAuJdIKEtqT
LGEmbnLK1JD02vQe8mPCvV8nzsXgqUKMXDTgrzsWeBw1yPkwFHkynvJjI4j2pknJkColvcBMZTNM
Khm2LhdBs+ItFwLdeDZ0AJ7+WoxcKMe2D972fyULoyLZPCL9Go5twVFRAjN1F8J1Pmhqwp/91cha
MhtEtGzUUYe+C3m4ZM9G7yE14qMXKH6sSKXq9tVEuvgQ2imfRduXh/jxtAuBoe9wv78KI+fLkBP5
pruiLZa/cqzocVw9wdorQso+8heZ3482tMqo6qCcKNkaoLPGlSRfKlY86CuH11GF4TN69FnVKK5f
8qDSlohzZwuRUEf41VMK65VwbLSEwNQc56xpWT2PUlrukdD6iJQtnujjnRb/wPEd+Mm8BWnfEgo6
FyLfJkXeUSly2yMw7K3CdXc2rP08NjW9AaNF/pJSLL+JlE1uZ33vEwzeOoOBDg1OVKQjnq18/8n3
GPKlwzmagbuP0uHyHcShG4SBP9Q4cjMCqoZZIGG/EzfvjWFwdAL+cUydv1mV1xAGfd+g7TZNc4tw
mGFlffvPhF9Gc/GpmUAqy11cdY2htCcA4+UAXrH082dAYi3B4UtAxwjhGMPmIhxxTmMbJlReJny+
nwPJDTdw2OHH9k4Ptto8+OKoFzm2p1jfLGAtM6xjpDYQBPaInb8TOtyE6qsEVZ1oPCNr2S5aoDkH
dZsbe+xeFJ9kdAWrD1r7GHTd49C0jYHfMjye3kj44SELXyMoTNTD/scqRjiJPi7ZHfbZyYnQzC7M
3TyDTDtCM7sRlnn6xZwYnVrVTGi8Q0gyUR8LRmY1hpG2NoG1wSlEMQzZ/xA0hc64RzFeH6J/AFRR
7NCExeMEAAAAAElFTkSuQmCC')
	#endregion
	$button_PCGroups.Location = '6, 48'
	$button_PCGroups.Name = 'button_PCGroups'
	$button_PCGroups.Size = '160, 23'
	$button_PCGroups.TabIndex = 1
	$button_PCGroups.Text = 'Transfer Computergroups'
	$button_PCGroups.TextImageRelation = 'ImageBeforeText'
	$button_PCGroups.UseVisualStyleBackColor = $True
	$button_PCGroups.add_Click($button_PCGroups_Click)
	#
	# button_ComputerGroups
	#
	$button_ComputerGroups.ForeColor = 'Black'
	#region Binary Data
	$button_ComputerGroups.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMKSURBVDhPdZFpSNRRFMVvQeHSMguKHypI
0iyy0AqjqMaZaJHKbAQpx9RWNZcZZ3EWpzEtdysRK4PcBtMpSlpIihLbCIqsLJcICrOCDEwTLNM6
vfeysg89+HHP/7z37rnzhoxKmcAQKqMDm7xFNTL0Ku9fdbV0tnmdbLQ0diZyo2ZAq5CNGpVSX5NK
Rpx/GmRu9CIAgnSVF2sgpdRV0uELtgBcL1DgXKYCGWFzsHeJZDQhRE6cPw30CqmvZb18pGznLORF
zWRJ8i8GhcTNsEYKlzkQTQWbUWeNgG3LYsQFSbB7qZz2MFiSnHRKOUuSjIqkwtCxJD/sCprWs3+F
Bx6fS8CLqxb0PSpCd0sWts9zQ9xCd4oPdCOyhnmRZYMXGVQsKeNvknVzMDTzPRAbSG0YOIPOW0fw
4HI2uq6kQ+NP74rKq6i47BSRYY2ETSGhpOUeaD2biI7LFnx8WITXN22IW8F+b0z47vctJqQbfnG7
Qg0iCjRbM8lisxPpl02glJBJFL9gQi8+1aP/6RG8arbjeWMyTGYrcg7noaOzC3X1LgHX3Muw2GDm
DZQn++mibRGFzJWufnPTjJ4WB9oatWguV+PgoVy0PWtHQVGJqOO1ze5A5tGASbT22EtSlb0jxbHu
AGdtSe9d5z64CiNgMWtEWn5hsbhwiKVyuOYe37MWKEdobUn7VEVx15Pc631ovd+IO9UxqDmwCqna
dFRVO8WFLDYJX4NDg0Jzr7KqBuwdQKr8J7j3cgCt70fQ+xX4wQ4ODX9DSppOHOKHHVk5SHH6IZXB
NfdOV1aLd6Dwkse40TEAU1M/bNf68f3bEAY/94lEPubvse2OgwKuucf3UrL9QSGW2zjR0ov42m5o
qrqx7TSjsgfRtR/EQ/ELOWNjj9dGk5n/nYvJJ/YSYiq6oHP1QNvAqOf1LVJdH5Cm00NvzBBpx09U
CKI1O0q5x/d0eiPR1JXGtCmRDSOe6np4bB2DaXe1C26R5zFZ3Tg8MTghNjEpGRyW6iOSGaIBW9MZ
wdz4D0EMz3Hf4xbRT+U7HtWFp1FPAAAAAElFTkSuQmCC')
	#endregion
	$button_ComputerGroups.Location = '6, 19'
	$button_ComputerGroups.Name = 'button_ComputerGroups'
	$button_ComputerGroups.Size = '160, 23'
	$button_ComputerGroups.TabIndex = 0
	$button_ComputerGroups.Text = 'Get Computer Groups'
	$button_ComputerGroups.TextImageRelation = 'ImageBeforeText'
	$button_ComputerGroups.UseVisualStyleBackColor = $True
	$button_ComputerGroups.add_Click($button_ComputerGroups_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($button_autostart)
	$groupbox2.Controls.Add($button_installedSoftware)
	$groupbox2.ForeColor = '59, 59, 59'
	$groupbox2.Location = '410, 9'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '108, 78'
	$groupbox2.TabIndex = 6
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'OS / Software'
	#
	# button_autostart
	#
	$button_autostart.ForeColor = 'Black'
	#region Binary Data
	$button_autostart.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKYSURBVDhPpVJNT1NREJ0fQGLiyrBT15Io
ceFOE5EPUeOiCSmauDcaXUjUAGmpfPWLQAzQ0r7SUkoKtOWjBZoWJAaktkUkUQttI6ghVowbK4UC
epz3oAobN05yMm/m3XPm3nMvAfgv0LWWw7iip7zLOnKWagmX1ISLzYTzjYS7xnPw+sc2/YFplXds
gnI4RC7X0U3OeOQg6IYI1skziL23YGbRhw+pBL6kvuHFXBijvvE1kewb9x+YrKM8kdwZINy3E3qC
bZjwhmAwONDQ2IL2DgEejxcrK6sIR+fhGR5d6x9075GvMko15Kz3EZTDhAfdZbBZRhAJLyL9IwOz
WeC8gVAogk6jgLfvluAPTIIFVHsCeqISPq/zDaGik6DqeIjFV3Gk0xvYyGRQVVWFzGYG39NphCPz
6B9wS7vo7XNu5c5O5Wxab4wFDAS9QQv8Ana22GfONyor+QPYzu5gd/cnjCYLQi8jsNkdEKejjKcr
pgi2JKFmkl2vJ5xVEBZWg5BXVMLhcEAul0OpVMLtckGrb0UwOA2TxQYqqaNnokBfil3/RLB/Jlxg
gVvGY8hub0uTZTKZlHNhZuLU9HN0GEz8EIhOFtWSv5jvuu8rk58QrmuPIJH8uL/8cMRiS3D2uxAI
TqHtaXtW8oDjeJGCgsW8E5n+KGZnorBZB7C8nNyn7cXScgJCdw9mZudgsfbgcXVNlySwL3KCUahv
ElJD7jFEo6/h8ozAJNjQJVilPMh1JLqAQZcHDU2adV6f/0egjNGmtotCp5R1jesmczc7HUUinkQ8
npCyWIt9RV29SC5oUvP1iWTpITFaNAKpNa2iSMHtO/dMNQpVtrpWiRzEWuyL/5s1ehLxr8hnnGYU
HoBYi/2/wd78B0C/ATooV+x+3KOsAAAAAElFTkSuQmCC')
	#endregion
	$button_autostart.Location = '6, 48'
	$button_autostart.Name = 'button_autostart'
	$button_autostart.Size = '97, 23'
	$button_autostart.TabIndex = 1
	$button_autostart.Text = 'Autostart'
	$button_autostart.TextImageRelation = 'ImageBeforeText'
	$button_autostart.UseVisualStyleBackColor = $True
	$button_autostart.add_Click($button_autostart_Click)
	#
	# button_installedSoftware
	#
	$button_installedSoftware.ForeColor = 'Black'
	#region Binary Data
	$button_installedSoftware.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGlSURBVDhPjZLLSkJRFIY3CaWlmSRdBhWE
1AP0FEG9S/fCzEqh5lF0c9CkCwSmXVQquoyiQffQaJKQQlB5KqIGBX9r7aNpp1O48GPBXvv85zvb
LUrdodVKTwQVnvC/VHkj4L11o1siF8EP+05TmDlJYZa6Hr4zBXMXT6imkJqRzZ8B9uEQgtevsHn3
YHat6WIhrO4N2IdCv0yEbTCEg+QHjM5VTB0/SqbJho20sKnWRFgomcvQG8T8uYKy4R1diwzWgXWU
kwl/OpuIEpcaIHqCmDi8g8m5hsmjB+IeU3/yIM+GQ7IBnQHZC8hkOfqM+rFLNIxfolEDr/HMf/Ui
TbIBHStq7wpg++YNzQtxtCzG0br0E17j2W78XR6sMA9oAtr9sudTxfRy+S9wiW71E0SbGhCLRhGN
xXThGZexfx3C0rW0bxsMo5AOjytjkEgkcJtI6sIzLhlA5SCarBmT9GE+KSmkFEUXnnEZnRTAl6GW
yJgY+lQTfH7Qj+CeC63xjMvEBt9XMm1icasm+RRdpGxArgkPOL2IFPXgGe/hvfxmbUmT/BCOL1mQ
puqR+h0MAAAAAElFTkSuQmCC')
	#endregion
	$button_installedSoftware.Location = '6, 19'
	$button_installedSoftware.Name = 'button_installedSoftware'
	$button_installedSoftware.Size = '97, 23'
	$button_installedSoftware.TabIndex = 0
	$button_installedSoftware.Text = 'Inst. Software'
	$button_installedSoftware.TextImageRelation = 'ImageBeforeText'
	$button_installedSoftware.UseVisualStyleBackColor = $True
	$button_installedSoftware.add_Click($button_installedSoftware_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($button_printer)
	$groupbox1.Controls.Add($button_USBDevice)
	$groupbox1.Controls.Add($button_systemtype)
	$groupbox1.Controls.Add($button_memory)
	$groupbox1.Controls.Add($button_processor)
	$groupbox1.Controls.Add($button_mainboard)
	$groupbox1.ForeColor = '59, 59, 59'
	$groupbox1.Location = '8, 9'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '396, 78'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Hardware'
	#
	# button_printer
	#
	$button_printer.ForeColor = 'Black'
	#region Binary Data
	$button_printer.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHfSURBVDhPlVPLShthGM2ztG9gthY3JloH
6qWlr2A2TToYUeMFTDIpgrGlJsx4i5uEGq8LcZFgRNRuu2jpphUFUfC2bOmF0tPv/PPPmBRdeOBk
vpxzvjO3JAAgUI9nE9WNJ+ktGMlNGOOaMlOjp2MKavf/AsOq4I+I34Xf/rrkTI2ejimoXfWhMRDv
Q1uqohbenwEHpy45U6PHjI7fFDiOs+E4NhbnHIStGn6K+Fv4S5MzNXrMMMsdkdyCfD4vByD20kR/
PA7TNBGNxfAi6pIzNXrMEHrHLcjlpvkFVmYC2ewbTL1+eyvpMUPoHa8gh8urayStV3JGU87Sdyvp
McMsd/wCXs7Xw2Ps7u2jvLyGcnkV75ZWGkiNHjPMNtyCbdv4+OkzhhIjiPRGJLyEUqmEYrGoyJka
PWaY5Y5fkM1O7s7OOPKEbbRndiCvXj31H5qcqdFjhlnuiOQWCB4Kg2Tb6HrFsKoIpbYRStcQTu/I
XJMfURX0vBx36gvq8UCoQpHoEJpbHjPgLdHzcVeBwnkhVDiZ78DJgoGLxXBByw3wCwaHx6CYGMVA
YgzR/nEc2Y/kj5AUptRMjR4zXt4v6O7qgcfOzqdoNZ7jy3QTPkwGFTlTo1ef9QsE3j3eiwAC/wCI
DTa5sUvmUwAAAABJRU5ErkJggg==')
	#endregion
	$button_printer.ImageAlign = 'MiddleRight'
	$button_printer.Location = '194, 49'
	$button_printer.Name = 'button_printer'
	$button_printer.Size = '94, 24'
	$button_printer.TabIndex = 5
	$button_printer.Text = 'Printer'
	$button_printer.TextImageRelation = 'ImageBeforeText'
	$button_printer.UseVisualStyleBackColor = $True
	$button_printer.add_Click($button_printer_Click)
	#
	# button_USBDevice
	#
	$button_USBDevice.ForeColor = 'Black'
	#region Binary Data
	$button_USBDevice.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHWSURBVDhPlZBNSxtRFIYHwY27ao36IyrC
uPGDiqYtXRQVwY9FcaFSBb9W/gS1pIlSTUad+EUEq4JMJi6rsSq4VKOiNqU1ZNJkorv+gddz7owo
wSb4wHDuzD3Pe88dCYD0HGZnfFAURUiqqhY8KyAw+xXJRBIJIwmv18tiXs4Ax1AIRQM6Cvp0/DNj
WF5ahH9hEbG4YU2SLaBoIAj1IA1lL4XpXRNSt4bvWxp0LYi4kSPgJcnKvomGiVO8dkdQ7YrAs5Oi
kCCODvfgnxFXkJ8M4JOH13+ijmVPBFWuE2oDat2n8ITTyO/dsmQmM6CwX4ObTqqmZkb+fCxqJdW6
yTMxxYv+0INEe/aKTibZtZ1CzcS5kF6NWXLFuDXBO+8FJn+kwT/WVh4C+M7uHRPO6QvR3LP6W9Ry
W35DcsvCLxQPBlmwxmdoTyqhxC/hGzSqUdTbAY9567uCc+oEjkyZoX3JMahjdNtE03wUTt+lkEZC
cbH+4I+iY+X6aZnhgJIhHePhW7QsWWO/n4uimcZtC/xB57f4/2WGAwi5mP5B55qB1sA12kn8uBpD
14aRXWbsAEbm5k/aX/RsJtCrJXPLzKMARi4bDqGUrsSV363PWcgIYFi6f3IgSXebHodcCgf8BwAA
AABJRU5ErkJggg==')
	#endregion
	$button_USBDevice.ImageAlign = 'MiddleRight'
	$button_USBDevice.Location = '194, 19'
	$button_USBDevice.Name = 'button_USBDevice'
	$button_USBDevice.Size = '94, 24'
	$button_USBDevice.TabIndex = 4
	$button_USBDevice.Text = 'USB Device'
	$button_USBDevice.TextImageRelation = 'ImageBeforeText'
	$button_USBDevice.UseVisualStyleBackColor = $True
	$button_USBDevice.add_Click($button_USBDevice_Click)
	#
	# button_systemtype
	#
	$button_systemtype.ForeColor = 'Black'
	#region Binary Data
	$button_systemtype.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALPSURBVDhPdZLbS1RRFIf3X9FDPZTZSxj0
EBG9RARBLxUUEUEFRi+VWpmJTuUlxzEbncy8jqKOzslLjU4JkwWVXcUxS8nKzEs5jWkeZzyjjkXU
195TQRdb8LEWa/32+u1zEZaKlv+SVe5ypxc3ceZSo6ThNxpRfTVf8GC2vVmYy10iraiRuS/fCIW/
/IPqq/mCCxSZJU3CVHCZqdlP3OgaoO0nqr7hHUCf+YSpQPuxQDn+jbpBygWNydA8TwYDdCuGArKe
wjugMz49i5oroTuz5AoZ8pkyiht/IK+mOFNYT6oUpdicMjuxVF4j13GT7CoPPj1Ecn4dIl0KP87P
oIenCYSDEabmAuizASYlEzMBPkh800FSbRp9o3P0DBuMjAdJtjoQpy9q+II6i072sNLymrWFw2yw
+9hS42dHnZ+92ntinT5ejn3AlF9PodaJzfGYQb9BklpgulBHv9/PCnM/60vfstk5xvYrH9nj1jlw
fZLDrRMcaR6X72CUU3kudncKdj4SvH43x4ncGkSqrZaugWFibCNsdIyxrTnA1msGuzwGez1BYlt1
Ej06D/oGMVmvsskm2GAVPB8KkZhThUjJq+HOs5esLvKxzjHOai3IKleYVc3zxNQbrKycYKltlDbv
C06eq+WW14en4y2dr/wczalEJJ+vwvWgl6iC9ywrm2S5c5Zo91eiW2F5Q5ioyikW2/w03X3GcUsF
rY/7aJH6e71vSMi2I07IBRVt3RifZzDmpzHCAQz5FSKoWvZCcmb3eIk3l+N+1IPr/lNudb8iPqsM
cSitoP1YTkVkGHe2lCMZJRxKL4qgatVLkLOjFju51W6ud/Tiftgj/8YXxMm+kBEtWaM4Xahhrm1D
u90V4ZzzJqoXJ53izWUyl3I4UxpkFEfywVRru0iyVkeQDmJ/YlZ1QnZ5RKxQzvuOZdp/GSyAMv8j
lkj+Fi2W/CeE+A7y3I1Qt5F/hwAAAABJRU5ErkJggg==')
	#endregion
	$button_systemtype.ImageAlign = 'MiddleRight'
	$button_systemtype.Location = '94, 19'
	$button_systemtype.Name = 'button_systemtype'
	$button_systemtype.Size = '94, 24'
	$button_systemtype.TabIndex = 3
	$button_systemtype.Text = 'System Type'
	$button_systemtype.TextImageRelation = 'ImageBeforeText'
	$button_systemtype.UseVisualStyleBackColor = $True
	$button_systemtype.add_Click($button_systemtype_Click)
	#
	# button_memory
	#
	$button_memory.ForeColor = 'Black'
	#region Binary Data
	$button_memory.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFESURBVDhPpZK9SsNgFIa/S/EGhLSm8UOI
DiUBjaKhWtFJRKSppWl113twEB10kLYiRVJ7AQ4WHFw13oA6C8X99Zz8iIZvMBh4cs55fyBDBIB/
oRTzoBTzoBTzIMwD+SFbOgy/GNNMZrpn72TnDneFbJXwEA4xCgOMXgYYPRM8wwHun2J4/+0FUYe7
YtrXETyewTTKmJUWtk9MzEk7YuvYjEhv9jjDWe5wN/qC07sjzJcrcKw11C8XsGhXsWSvo37hwCMc
qwqHNPY4w1nuJF9g4PB2B7XuMrECr+uiceVi/7qCdm8Vex0XXo90otYhKMNZ7nBXGPTC5w3ezjeA
cZ/mZnQXGnpE7JFG3ut3hibp3BUzbTnWaSk0S9AInnxL33jXd4vDn15KmuGuoEcjphRMEhMZLYum
/DnyoBTzoBTzoBT/DsQXJCWD+6cSFXMAAAAASUVORK5CYII=')
	#endregion
	$button_memory.ImageAlign = 'MiddleRight'
	$button_memory.Location = '6, 49'
	$button_memory.Name = 'button_memory'
	$button_memory.Size = '82, 24'
	$button_memory.TabIndex = 2
	$button_memory.Text = 'Memory'
	$button_memory.TextImageRelation = 'ImageBeforeText'
	$button_memory.UseVisualStyleBackColor = $True
	$button_memory.add_Click($button_memory_Click)
	#
	# button_processor
	#
	$button_processor.ForeColor = 'Black'
	#region Binary Data
	$button_processor.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIRSURBVDhPhZNLaxNhGIWz83d00V/QdZv7
5DK5TG6Tps3MxJlkEhBB8NZFFRfWC8W0ddO0FkukblLcKbq2oIJpKlWoi7T9JeH4vh8zSZMofnA4
fO887/kOgXgAeNxz9jotLmf7/3GHE8cNKGr222XdhGaQKhZ00t+cvzPHvFjkgO+tDIplC+8/fML6
ehMvmptoNremxHP+zhzzvOc2mCuWTXQO32F+3otAIDSlYDAsfGHBJzjmeW+sQbt9MIRduQGhkIRI
JCa8/eZgusGiZmF75xX8/iD65xc47p2g0zkU3jv5gdOfv0SAJEWxvbsH5kcNdrI0qKK5sSVe8PkC
oqrX6xeBPItG40gkUojFZGxsvhQ87w0blPQaHj95hnA4gvN+H93uMXr0equ1CzmeQCqlIE2S5STW
nj4H82MNlowaVh8+QpReCAQleKkFK0SVE8k0lExOKEkhD4hjftigLM1mlgwbt+/eh0w1Ly8u8fno
CIPBAF++fkO1ZiObKyCXV0XInXsrFGCPGnQpabli48bNW0grWXqRqlJQnOryi5lsXiznC0URxBzz
vDf8DcqVOsxqQ0CTKqiLUIslIb4zx/xYAx6UyjryBOdVAh0VJsTfmWN+rIGi6h8Ns47rVh2G1YBm
NoSbVZqRrjpzzA8bOGfm974iap3uZaCFZxV2vrvzCZ8hjf6Nzpm74tcc5/MP93j+AM2X7D2jJo54
AAAAAElFTkSuQmCC')
	#endregion
	$button_processor.ImageAlign = 'MiddleRight'
	$button_processor.Location = '6, 19'
	$button_processor.Name = 'button_processor'
	$button_processor.Size = '82, 24'
	$button_processor.TabIndex = 1
	$button_processor.Text = 'CPU'
	$button_processor.TextImageRelation = 'ImageBeforeText'
	$button_processor.UseVisualStyleBackColor = $True
	$button_processor.add_Click($button_processor_Click)
	#
	# button_mainboard
	#
	$button_mainboard.ForeColor = 'Black'
	#region Binary Data
	$button_mainboard.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKvSURBVDhPlZHLTxNRFIf5M1yrCyUtYotQ
ykMIr5pShBZI0RhdGDfGKIpSLCZGUSERrIDybAAhqBHoA2gB5U0LFGjLU0Kk0EJ1YQoIkUQ3P8/M
FIi60Um+/Oac3PnuuXcCAAQY1cJNvSoI+lw+wfsHaB2tZ75jBXoVH55pM9yODpZVewdW7O1YmSIo
mdrt6ITbaSIomffpLlbCCgy3DmPVUofugkh0PoiEPl8EnfrUPvp7IpgeRqHnSSwRQ+ui4LI2kYDP
CcYcC3hUXIGgcAneP46m1hbhIzb9uYXewhjwQiUYL5MgMCQeHmsdDHsT9A6MoLrhLWyaOPQXxVLr
C1rzQtidmWTq4adxEEZKMVMtg0AsgddSBUOeX9DVNwadeRD8sCQMFcdRy43BkiSMlMrYZOpRTQJC
T6fgo/YsQqOlWB8qh3FPYLxxCJ6eAjgqpLBoJMCPRTir5ZjRZrKJn4uwlZ2BKDYVSw1yiGJSsN7/
jAQnOIF1cg6FmhrwwiSwvUgGdmeAHScxzSXV9koZxAkKLDelQxwvh7eviI7gF5gHJtDY1ovZ2jRM
VsphfS7FMI0+XJLI5mipFHNaBSISM+FuViIiIR3eDwUkCOYE+pyjcLXnwVmbgckqBbBtox9gBTYs
XO7YMF+XAXFSFlZen6NUYr3n/oFAlxuET8ZcOGoyMVWpwMTLVDpKCmzlMjanaKr5+iy4mi9gmWDS
Y1ZDvy9QBWNZlw18o503aEcf7ewb4WCm2B7HUuN5HAtLxtq7S2x6TXd+F7h012lMJWa1GXQX6QdQ
vVCvhOvNRXxuu3yAKYcEJ/13QC9rxmvAdzt3/j/ZtcOru4Lj4anwma4iUJyGr903Ybgr4ASvsoMH
mClab/PQkhP4F0yfubDOfME+7WohWlQCNyug5wgh/H8CeL8A7J+jNx2aU/gAAAAASUVORK5CYII=')
	#endregion
	$button_mainboard.ImageAlign = 'MiddleRight'
	$button_mainboard.Location = '94, 49'
	$button_mainboard.Name = 'button_mainboard'
	$button_mainboard.Size = '94, 24'
	$button_mainboard.TabIndex = 0
	$button_mainboard.Text = 'Mainboard'
	$button_mainboard.TextImageRelation = 'ImageBeforeText'
	$button_mainboard.UseVisualStyleBackColor = $True
	$button_mainboard.add_Click($button_mainboard_Click)
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($groupbox19)
	$tabpage3.ImageIndex = 2
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '1264, 91'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'Network'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# groupbox19
	#
	$groupbox19.Controls.Add($button_ipconfig2)
	$groupbox19.Controls.Add($button_testport)
	$groupbox19.Controls.Add($button_hosts)
	$groupbox19.Controls.Add($button_routetable)
	$groupbox19.Controls.Add($button_checkWLAN)
	$groupbox19.ForeColor = '59, 59, 59'
	$groupbox19.Location = '6, 6'
	$groupbox19.Name = 'groupbox19'
	$groupbox19.Size = '277, 78'
	$groupbox19.TabIndex = 7
	$groupbox19.TabStop = $False
	$groupbox19.Text = 'Network Settings'
	#
	# button_ipconfig2
	#
	$button_ipconfig2.ForeColor = 'Black'
	#region Binary Data
	$button_ipconfig2.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFtSURBVDhPpVBNSwJRFO2n+EG0zz6hWoSV
YaAV9AfCTFJoERUFFbVt16JNH0gISY3OOOi6XxC0dREUViudNkGO2end65tJywzrwJl35p5zD7zX
AeBf5I+m66qiqrhMpaCk0y3JGZEVO3m7gIx2IXdqBdRKKBQeML8QQTgSg2E88xkKL6FYLAkdZY8y
BLlTK7hQFPpByTBQeatgbHwSZsXks/pexWu5LLSPPcoQ5E5jQdk04enpZ22ht29AKrBHGUJjgbwC
wel0w+FwsabT5eqU2s2eBbkjH1G8aruQO7WCs0TiKqWpSIkhU9OQzmSgZ7PQczmoGZ1nn76K82Ty
xi4QcAt6vnIxuoKhES8FvnmCXfUFTRFa3sHgaPDHQMuCx5OJ+N2RH/fHU3g69cXluAF2wfrmFiyu
bWwjtrqL28Nh4GWPSZpm5NVn7YLp4AwsBgKz8PrnkD/oxvW+h0maZuTVZ+0CgWaP9Cvtgr8THR8X
4ntqivo2yQAAAABJRU5ErkJggg==')
	#endregion
	$button_ipconfig2.Location = '6, 19'
	$button_ipconfig2.Name = 'button_ipconfig2'
	$button_ipconfig2.Size = '75, 24'
	$button_ipconfig2.TabIndex = 0
	$button_ipconfig2.Text = 'IP Config'
	$button_ipconfig2.TextImageRelation = 'ImageBeforeText'
	$button_ipconfig2.UseVisualStyleBackColor = $True
	$button_ipconfig2.add_Click($button_ipconfig2_Click)
	#
	# button_testport
	#
	$button_testport.ForeColor = 'Black'
	#region Binary Data
	$button_testport.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAADtSURBVDhP7VKxDgFRENxfoXcKhUIoREII
NR+gukT8g0aEOKcQjV6jlaAgCh2hkagUlDqFRDHeHCeSO1cQnUnmTXZ2d+5d8gTAV5R0TUBm6oKU
IX1ROPSy/V03h20nCypr+uxzzt6xAoyVoKVobgTJpkDXK9h3E8DFBM6Gpazps885znPPcYNkQ07q
Q6FFNTxcNyO4HougsqYfr8jIcQM2XqjRUPBNqsHxsh0ClfXdFr/ic94OeAd7mOoKz4B5LDiYRTUo
5W+5wjOAyygXQH1YDngGTKMBoJQH9WE58A/4dYDC88VZlQusAB6fE3IDzRkoaGqrtEwAAAAASUVO
RK5CYII=')
	#endregion
	$button_testport.Location = '196, 19'
	$button_testport.Name = 'button_testport'
	$button_testport.Size = '75, 24'
	$button_testport.TabIndex = 6
	$button_testport.Text = 'Test Port'
	$button_testport.TextImageRelation = 'ImageBeforeText'
	$button_testport.UseVisualStyleBackColor = $True
	$button_testport.add_Click($button_testport_Click)
	#
	# button_hosts
	#
	$button_hosts.ForeColor = 'Black'
	#region Binary Data
	$button_hosts.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKBSURBVDhPjZFfSFNxFMdvLz0ICvXSy2QG
IYpQlpD2j4JKyjKKJCsfCgmit4hyuXKZ1pyZV53L0MwlKHNsLbfS6eaWZmpt1ZrbXO7OOdKVKOQ/
Civi2/1db86FQV/4wLnnnO/5Hc6l/iVhiTmORckyzQIeEpNcHN+2stiG5CT6+fTNbjOYeQsmfwzg
47cBOL8YIbEa/wxK5tsjRaYnlVtnWn3T+PzdBfesH09GF9AcMEIx9AymCQkMTDeEUtPMipsIb3c2
ijoZ2KZ+wj3fD8fXIrRPyqCf2oG6YCKOdzagwi3G9S52E7aXt4UVLzXO3mvWobxCzlGnKoaWSYci
cBgixymkqsewRdUDTeAy2WKWt4WVU9oIs8WKsfEQPENedJi6QNfnoTa0CvRIDHbr+rChwY8Cey53
WN4WllRWBq93GPqnbaArq0G+CbUhCtldD7GpKQjhAx82N2lWHiArvQvH+0FYrD0oulWCUuYg6j7F
gA7EIrNdjXilH+vuexFFO8kN5nhbWI91rXC5PXhts+NGYfES+c50SD8IcMmeitwXe7FeroUgv0XP
27jfpzyt8Sidg645m/0t7G/egfGPwOPx4mLhHWzTGFAdpFDOUMgxZXCvrzlwbueS+aTWB0PwF2SW
AFrUmpDo6jUQzhTKkVDVj7UKDy7078F+lWjRfOh8NmtdHWE+2zaBTO04BGJ1a3TakUxBvspAmsmx
ONiY5KK3H8tgzVHc61trXkWYU2pdiC3QabjpFBXXW5auH64/CgKJSY6vLWpj1csI8y7JI1wRiZdw
1+zDwmgeB4mX1wgUWSmR7kVCRR97VZUhK+sEluOoTIvg7zpZgqyUwrM8/g+olN/LfeaCXY3IuQAA
AABJRU5ErkJggg==')
	#endregion
	$button_hosts.Location = '6, 49'
	$button_hosts.Name = 'button_hosts'
	$button_hosts.Size = '75, 24'
	$button_hosts.TabIndex = 5
	$button_hosts.Text = 'Hostsfile'
	$button_hosts.TextImageRelation = 'ImageBeforeText'
	$button_hosts.UseVisualStyleBackColor = $True
	$button_hosts.add_Click($button_hosts_Click)
	#
	# button_routetable
	#
	$button_routetable.ForeColor = 'Black'
	#region Binary Data
	$button_routetable.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJgSURBVDhPnVNdSJNRGH7v3AZtUBellTfd
hyAaQqUX0TCL6qLbbrqOrrrQfX2b+zUUlSgoSsswK7DSct82ly6IzZ+QcM5m/jBFE0dENrQiraf3
nP20QAl64OE933fO+7zPec85VOgMfDaqGvSKhgKLBp2kNxPzxjyvV3wwME2qDyKv2BMkEsn/A5PV
j33ufiK94k3/eX0MCFcDETNUbREYMjOrYdOWgeGTwOg5HK4nlCoklxutIex1DbIAWxRQeueg9s3D
oc3D419AQyCJxuAXtAyso3lwA60hoMJOiCau4yhHo20Ce1xviXSWPikQXwemvwKJH0BrYAmjySVZ
sdJBqHJyZF55RrgbIYRnVZg9hLPN9Ecg8Q1Y+A6s/AQ8z4My2R0idE0RHjA744R7McKdcRaZIPhn
zqOmiZATaHoRQ4s3jpvBZZlsGyTU+kmOs7QEOHmaMLBSjuPsgOuX5gQ+bgCfNgE2IRdf6CJc6jyC
7vCanBeosBKeLhpQxT0wWJM4k7+FFFsXS1c3f6FMTXda4BAnCUGBrBOBA47LcpwTuBWI4Xb/O3SE
EuiOrKJ3BFLoQ/IGKnihcJJl3eNKXGxPi5GuLi3ABiQFeobWUM6V4ysK2sIEhbufrS5o4e8GLSOg
zzjIx8FawpPoabSJrkcJHZN8Eu8JD7mBj2YIja/SyQLbXmXRqPaxMtyfJdS//NuB4H5XT/oUCu2+
lHxM7KSAt6Pnh7NDDcFkm8SJq4Rrw7tQw3GnfQ67neN8+8aYIyhyhFNF7jesQVQilbbhKb4souIW
cyXFngEO/0Y2YQsQ/QaNGWXFRtHxxgAAAABJRU5ErkJggg==')
	#endregion
	$button_routetable.Location = '87, 49'
	$button_routetable.Name = 'button_routetable'
	$button_routetable.Size = '103, 24'
	$button_routetable.TabIndex = 1
	$button_routetable.Text = 'Route Table'
	$button_routetable.TextImageRelation = 'ImageBeforeText'
	$button_routetable.UseVisualStyleBackColor = $True
	$button_routetable.add_Click($button_routetable_Click)
	#
	# button_checkWLAN
	#
	$button_checkWLAN.ForeColor = 'Black'
	#region Binary Data
	$button_checkWLAN.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGoSURBVDhPlVK/SwJxHL3wV17Q5hBB/QNJ
0jmFOQVCZlpBEBRBBUF5VkMWBRW2KEgNDS1SQtCQXJbolro2Sa1BYQQ1BiVBLp8+n69fj7vAgx48
7t177/uOO04AAEELMVJeQN4h4Q+fkPO8xsDOagd4CeyLSsbqXZlFSyKanWOj9rmLVHOIlRG6AQw+
Rbn4hZIO9ZLF/U68WJHdSIk61KVMHUCjyg+7KLBHytF2uQw2TtLobVCGcIlyqYZnXrUDYJGmA5Ri
8dwSLn0LHll9BWFwecYSZiMF6ph63F4xfPuhDvCijQQ9UehyelB20D2HKPSFApThw8x4b0L2awe0
oDFTMa+sZZVLIKJeRY++A2VtSIZWAwy5qwxGDZDmtg4YtR5QMhmo3D8wkua2DsYDigI/9TojaW7r
YDiQSB7Gszd5uM4VIJE8inNbB8MBhGNpfR/cHj8VHA1LD8OBt1NfupoagZeUH97PfGlu66AObO3s
QpOb23sgR2PwfDIEUIshD5gmjzJtVx0YD01Ak8HgJAz7p+DxeAAqSYmRNHmUabvqAKLxy/6TACD8
AqxBR+NLAYUlAAAAAElFTkSuQmCC')
	#endregion
	$button_checkWLAN.Location = '87, 19'
	$button_checkWLAN.Name = 'button_checkWLAN'
	$button_checkWLAN.Size = '103, 24'
	$button_checkWLAN.TabIndex = 4
	$button_checkWLAN.Text = 'Check WLAN'
	$button_checkWLAN.TextImageRelation = 'ImageBeforeText'
	$button_checkWLAN.UseVisualStyleBackColor = $True
	$button_checkWLAN.add_Click($button_checkWLAN_Click)
	#
	# tabpage4
	#
	$tabpage4.Controls.Add($chart1)
	$tabpage4.Controls.Add($groupbox21)
	$tabpage4.Controls.Add($groupbox20)
	$tabpage4.ImageIndex = 3
	$tabpage4.Location = '4, 22'
	$tabpage4.Name = 'tabpage4'
	$tabpage4.Padding = '3, 3, 3, 3'
	$tabpage4.Size = '1264, 91'
	$tabpage4.TabIndex = 3
	$tabpage4.Text = 'Processes'
	$tabpage4.UseVisualStyleBackColor = $True
	#
	# chart1
	#
	$chart1.BorderlineDashStyle = 'Dot'
	$System_Windows_Forms_DataVisualization_Charting_ChartArea_1 = New-Object 'System.Windows.Forms.DataVisualization.Charting.ChartArea'
	$System_Windows_Forms_DataVisualization_Charting_ChartArea_1.Name = 'ChartArea1'
	[void]$chart1.ChartAreas.Add($System_Windows_Forms_DataVisualization_Charting_ChartArea_1)
	$chart1.Dock = 'Right'
	$System_Windows_Forms_DataVisualization_Charting_Legend_2 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Legend'
	$System_Windows_Forms_DataVisualization_Charting_Legend_2.Enabled = $False
	$System_Windows_Forms_DataVisualization_Charting_Legend_2.Name = 'Legend1'
	[void]$chart1.Legends.Add($System_Windows_Forms_DataVisualization_Charting_Legend_2)
	$chart1.Location = '682, 3'
	$chart1.Margin = '0, 0, 0, 0'
	$chart1.Name = 'chart1'
	$chart1.Palette = 'Bright'
	$System_Windows_Forms_DataVisualization_Charting_Series_3 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Series'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.ChartArea = 'ChartArea1'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.ChartType = 'Bar'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.IsVisibleInLegend = $False
	$System_Windows_Forms_DataVisualization_Charting_Series_3.Legend = 'Legend1'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.Name = 'Series1'
	[void]$chart1.Series.Add($System_Windows_Forms_DataVisualization_Charting_Series_3)
	$chart1.Size = '579, 85'
	$chart1.TabIndex = 10
	$chart1.Text = 'CPU + RAM'
	#
	# groupbox21
	#
	$groupbox21.Controls.Add($labelPleaseEnterFileExten)
	$groupbox21.Controls.Add($button_process_stop)
	$groupbox21.Controls.Add($button_process_start)
	$groupbox21.Controls.Add($textbox_Process)
	$groupbox21.ForeColor = '59, 59, 59'
	$groupbox21.Location = '507, 6'
	$groupbox21.Margin = '1, 1, 1, 1'
	$groupbox21.Name = 'groupbox21'
	$groupbox21.Size = '174, 78'
	$groupbox21.TabIndex = 8
	$groupbox21.TabStop = $False
	$groupbox21.Text = 'QueryStartStop'
	#
	# labelPleaseEnterFileExten
	#
	$labelPleaseEnterFileExten.Font = 'Microsoft Sans Serif, 6.75pt'
	$labelPleaseEnterFileExten.Location = '10, 48'
	$labelPleaseEnterFileExten.Name = 'labelPleaseEnterFileExten'
	$labelPleaseEnterFileExten.Size = '161, 27'
	$labelPleaseEnterFileExten.TabIndex = 5
	$labelPleaseEnterFileExten.Text = 'Please enter file extension e.g. .exe'
	#
	# button_process_stop
	#
	$button_process_stop.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_process_stop.ForeColor = 'Black'
	#region Binary Data
	$button_process_stop.Image = [System.Convert]::FromBase64String('
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
AInBlkgn/ujMAAAAAElFTkSuQmCC')
	#endregion
	$button_process_stop.Location = '129, 20'
	$button_process_stop.Margin = '1, 1, 1, 1'
	$button_process_stop.Name = 'button_process_stop'
	$button_process_stop.Size = '20, 20'
	$button_process_stop.TabIndex = 4
	$button_process_stop.UseVisualStyleBackColor = $True
	$button_process_stop.add_Click($button_process_stop_Click)
	#
	# button_process_start
	#
	$button_process_start.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_process_start.ForeColor = 'Black'
	#region Binary Data
	$button_process_start.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUND
IHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoi
SFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQ
yhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnp
fIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZ
Yu4V8bZMIUfEiK+ICzO5nCwR3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJ
X3HcVyzgZAvEl3JJS8/hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi
2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti
0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4b
Ky0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNFhImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5
FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH554SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S
8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJVgMWSASpgA+yQB7YBApBMdgJ9oBq
UAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG+UBAU
CcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyCqbASrAUbwwzYCfaBQ+BV
cAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqR
PuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegE
dBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9rB3WH8vE
CrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf+
On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFp
B+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5k
heQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TG
KQhFneJCYVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04b
pr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLC
zFLqUtulrKVFS48vvacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/C
VSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08j
T6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0b
erCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLu
M/5oYmGSYtJoct9UxtTbNN+02/R3Mz0zllmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfi
g6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWN
y8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c+c7tzvMuNi7rXM65
Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU
+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI
8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaI
LoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp
40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp
2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7
zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8V5vDN3cX
KBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33zaEb9j
oNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2v
Tqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sU
moqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/j
PScYJ1p/0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dz
z86dSz83cz7h/HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3
/2TxU/uA5UDHdavrXTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriX
eW/h/sYH6AdFD6UeVjxSfNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2d
mnafvvF05dOJZ+nPFmYKf5X+tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/M
F72Rf3P4LeNt37vwd5MLWe+x7ys/6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAAG6AAA
BugB4Yi/JwAAAINJREFUOE+10k0OQEAMBWBxASwk1m7gJHau6RYWfs5U7yUWtJXMaCy+hTftSxiF
iIS4YQ43HOZ+hMY700yAxRYEjpQSE2Cpuwpoh1rP3JlAFdAGryUmwLAuoBUqPUsmwKBXQAuUev7x
QBj6pSD0CqGP+OkaYz8SYXFKWSY3zOGG6aQ4AcRopl57vhHTAAAAAElFTkSuQmCC')
	#endregion
	$button_process_start.Location = '151, 20'
	$button_process_start.Margin = '1, 1, 1, 1'
	$button_process_start.Name = 'button_process_start'
	$button_process_start.Size = '20, 20'
	$button_process_start.TabIndex = 3
	$button_process_start.UseVisualStyleBackColor = $True
	$button_process_start.add_Click($button_process_start_Click)
	#
	# textbox_Process
	#
	$textbox_Process.Location = '7, 20'
	$textbox_Process.Name = 'textbox_Process'
	$textbox_Process.Size = '118, 20'
	$textbox_Process.TabIndex = 0
	$textbox_Process.Text = '<Processname>'
	$textbox_Process.add_Click($textbox_Process_Click)
	$textbox_Process.add_KeyPress($textbox_Process_KeyPress)
	#
	# groupbox20
	#
	$groupbox20.Controls.Add($button_cpuram)
	$groupbox20.Controls.Add($button_taskmanager)
	$groupbox20.Controls.Add($button_process_cmd)
	$groupbox20.Controls.Add($button_process_grid)
	$groupbox20.Controls.Add($button_process_owner)
	$groupbox20.Controls.Add($button_process_100)
	$groupbox20.Controls.Add($button_proclasthour)
	$groupbox20.Controls.Add($button_process)
	$groupbox20.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox20.ForeColor = '59, 59, 59'
	$groupbox20.Location = '6, 6'
	$groupbox20.Name = 'groupbox20'
	$groupbox20.Size = '497, 78'
	$groupbox20.TabIndex = 2
	$groupbox20.TabStop = $False
	$groupbox20.Text = 'Processes'
	#
	# button_cpuram
	#
	$button_cpuram.ForeColor = 'Black'
	#region Binary Data
	$button_cpuram.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAM1SURBVDhPldJ/TNRlHMDx68dqVm5troXl
mCzzuON+fg84OC6sEzx2gNwXOfU8OOLM1hBFi2xLQmttqYHgbLUluuk/TTet/sm54QFGxIWHCIrS
gRJRs2T89I5f03fPDq7+7tk+e/Z5/nh9fuxRAIqWlOXen+zP01sWh89TRN/ZBHzbN3EhmI/X52Z3
62dknWwk/uAPFLpLWWltZY3+PPrkL7xRoEn9OFMdTTA2TCDYI55+p7OzS9xjXA0ECfOQv0Q29BCu
dwW4NwrtHffR6I6wCCgVREJ9THxzAI/LyXz/BxSXyAzzNe6SLXw73c3RXwd4PxhBLvJw7FSY0OAU
iUmH/wMmrwUYPf427iKZR71VeIpl7vAVWzwuzj0IcPhGH3t/nsFZ6Gb/oQm6r98XQKyDRAXjbU2M
1b6Jy5kP1yrY6s4jRAOFm2XORK7wSW8f5c2z5G8sourjKdraR1BpYoD6MUYvfsfYp1txOuxwdQfy
phwGOESunMuJSAv7b9xie9Ms9pwCKj6c5uKlu6i1MSDpCf4+d5rxaie5620QLBGVbAxyAHteNscj
rbwnAM/lOWw2B2+9O83Z8yGSdJ8vApc1T3KvsYHxqhw2ZFrFCC5yHFaxg32st79B7cwVygVQ6J/D
as2mpPwBjaduo9XHAO1T/FF3kIndNl63mAWQR1aWWQCVZNoyqBOATwAO/zxm8zpcvjB19TfRGWOA
/mlGqiuZqLCQkSpBdxaZ64zcZSfpr5k5Ovsjnpu3sTXPYzRZ2Fgc5qOaHvRS7RJgWMbwLi+TuyTM
Bq34LRmkW9QMCSA5TYoC2wSQLgCNPpXs4gg793RhMP0LPMNQaS6TlWokjRJ6TCSnvspvVKCTtNQv
AVLzAmtVBjZ4I5Tu6ERKjgHGZxncnMbUXhUaZUIUMBhWRwGVVkn9XJsA+jG2LJCwJglH2QyubR1I
KUuA3/gc/fmJhPcZMKrXwq0MTCmv8CdV6Ew6vnz0C76BO1jaQakyIr+zgL2gVXRZtwg0qJfXdBS8
TGiPmvhVcYxcMpOw+kX8oTJWxa+kOnAM+cxp9Ef8vBD3EipHAG3a92KcypooIM4KEab/H4oV/wBx
dW8RUu1+OwAAAABJRU5ErkJggg==')
	#endregion
	$button_cpuram.Location = '350, 46'
	$button_cpuram.Name = 'button_cpuram'
	$button_cpuram.Size = '139, 23'
	$button_cpuram.TabIndex = 6
	$button_cpuram.Text = 'CPU+RAM Graph'
	$button_cpuram.TextImageRelation = 'ImageBeforeText'
	$button_cpuram.UseVisualStyleBackColor = $True
	$button_cpuram.add_Click($button_cpuram_Click)
	#
	# button_taskmanager
	#
	$button_taskmanager.ForeColor = 'Black'
	#region Binary Data
	$button_taskmanager.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAeFJREFU
OE9tk00rhFEUx5/PQd5lvExhMUmSSaax8DZRiCZ5bdKMRtLUEAqZWZgsWKCwsJAipBSSZCVZ2OEz
mPWsjvmdcZ8Z5db/nvPcc87/nnvOeSxJr1QqJS+vb3L/8Cjnl9dyenYhR8cnip29fYX5xoYfMSwL
BUN8MyFD/mHx9XdJR69HWjyNUueqUVQ6yxQNTS5pa/dIdGlJSZUANg4I2kgsSygyLt5OtxIgvV1Z
HWmI1+IJ+fj8EouUufXm7kpi2wsSWQ0qGYFI1dPBuWeQzM7Py+PTs1i8CQduzw3GyQRrBiaTXxkI
zWi9lMAYcm9BRi93xRf2/5vBHwLe5Gqut9mR4YO4TB1vKjgbXQ5lbGky/P8QUGEIuv2ZDoDw7aG0
TA/KSGxOsf5+o3aCK6pLswRsztoqaY9MSMdKUG8k7Z7FgJ0ZwXXdbhnYWlBATBHpoBLQ35LyAmV2
/AYgTf8JLnMU2cCX1msXYGE4CkvzbQcyyf02OoEQojN4TK/FxgQWFOepI9LohSXZM4L5RgImUQeJ
jYIYIwHGycDYeKIpIuP/nUxm/gXGkjrg+F8mRgemhfa/wEYxIMGgP1SfT+vS6nEr0DkbmxzXt3M7
xbcJWKRDPQCEFBfgaMDMIPHJLJEfUMo7g1CmSGAAAAAASUVORK5CYII=')
	#endregion
	$button_taskmanager.Location = '350, 17'
	$button_taskmanager.Name = 'button_taskmanager'
	$button_taskmanager.Size = '139, 23'
	$button_taskmanager.TabIndex = 10
	$button_taskmanager.Text = 'Taskmanager'
	$button_taskmanager.TextImageRelation = 'ImageBeforeText'
	$button_taskmanager.UseVisualStyleBackColor = $True
	$button_taskmanager.add_Click($button_taskmanager_Click)
	#
	# button_process_cmd
	#
	$button_process_cmd.ForeColor = 'Black'
	#region Binary Data
	$button_process_cmd.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHYSURBVDhPnZFPSJNhHMcfvdQ8JEiWHgQP
u3Ty0FEkzTkT2WaxMTHX/DMczDkQVwNdypx16VSUForgyZmHsObr69DIgxdBNw8S6hAtcWN7DUkh
L/n1+e0db3SYNb/w4fd74Pl+eOBhJc9CrHhITNwcnMMNwidT6BPS0P6H6zQHRRQNzSdKnocYK/aL
087gJsYihxgLSxjlvFuT8HY1iREFCcOcN5xXaz/wcv0n7MEoivzz7xkZZ7aOwdzLyPGtoPDFOm69
3kD5+DYMU7voCMaR65lBYOMIzPMRE19PIJWVYnL7Fwp8Ilh+/yy+7J3iwdQOWj7swf7pO5zCPnpC
B+hdjMO/lMSThTgep+leTMD1+RBh6QzX+gWwPO8sLhvqsqt9wdShqqoaFRV3UFl5FxqNFjU1tRdC
oa4i0GrvpSYJ6urqodMZoNc3ZITyl0Cna+Cv0Ci70WiGydSYEYos6JUFRpM5NfWG+zA3NuGh5RGa
LdaMUKjLrqQFra02WCwtsFrb0N7WAZvNfiEU6ioCh7MLjk4On51O1z+hpASqPvkb3W5PVlCoy/Ke
Ckh+iyISiWQFdajL8gfmuOs3DmKxrKAOdZmqJ7BEC9lU3v+D7lKHuoxHzbl9OZj6HPzNiwsq/Fta
AAAAAElFTkSuQmCC')
	#endregion
	$button_process_cmd.Location = '101, 17'
	$button_process_cmd.Name = 'button_process_cmd'
	$button_process_cmd.Size = '98, 23'
	$button_process_cmd.TabIndex = 5
	$button_process_cmd.Text = 'Commands'
	$button_process_cmd.TextImageRelation = 'ImageBeforeText'
	$button_process_cmd.UseVisualStyleBackColor = $True
	$button_process_cmd.add_Click($button_process_cmd_Click)
	#
	# button_process_grid
	#
	$button_process_grid.ForeColor = 'Black'
	#region Binary Data
	$button_process_grid.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJBSURBVDhPhZJNTxNxEMb35sGPwcm3ROMH
8GIUW0o08irRk0JpQATRixpPLmvpbkv9Dp48gAd7aRUMEW0TY3wrrwUDLFtpwXa3tF26fZzZbYiV
JjzJL/Pf2ezszPwfIRwO7yqKAlkOQA4QHP85h0MKfI9DaBtScP2ufEDHcBA3H76YFPhjlq4XGsK6
0ifZ8X9xESFAf2Itr6xiObWGlRr2mXKsS7efwaKo6SZOuXxIG/t2vm1IhiDLMjRNw+TkFKaYqdcO
tedMWkXzHRFa3sTFW09xxu3D8dMebO9Z6BxWnA4sq4qNDbUhqFpw941hLrWD2eUM5lZ38CGVReLX
H3TfDzkFKvsWVFXD5uYWwdE5cw5WBe0DElr7JXi8Y2glrvoktA2Oo2c0pB90sJ3JHiKTzVIHFXuE
Cs28rZexuJVDIpXBzOJv3BilDngHyeQC3kQih4gQSwtJu0CJ9qbuFvBjfQdzS2m8m9fQPVIbgZXT
DeTyeh15yrFcvWP4urSO2S8pRD4m8WrmO15Of6MRJpwC1SpgGAbdu15HgXLFYhFur4QW2oGrV6SF
imihPVwboB08qBVgmWYZ5VKpDtM07Xc8QiN1spF4B/F4HLFYDNFotI63lPuc+ITLZCTWhZ4nONHc
j2Mn3fZz+72aD44SF1BzZfzc0nHOM4D5tIE0ubKDC3AHR6nF+9w2El8dm+k9xfjarmMkURSnuYjf
7z9EYNyPiaAM76Og3kVX1jUSpKtzYA90DErTAqmJOH8EZxvkCKHpL5+bBuf9xfXTAAAAAElFTkSu
QmCC')
	#endregion
	$button_process_grid.Location = '101, 46'
	$button_process_grid.Name = 'button_process_grid'
	$button_process_grid.Size = '98, 23'
	$button_process_grid.TabIndex = 4
	$button_process_grid.Text = 'Gridview'
	$button_process_grid.TextImageRelation = 'ImageBeforeText'
	$button_process_grid.UseVisualStyleBackColor = $True
	$button_process_grid.add_Click($button_process_grid_Click)
	#
	# button_process_owner
	#
	$button_process_owner.ForeColor = 'Black'
	#region Binary Data
	$button_process_owner.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJRSURBVDhPnZLNSxRhHMfn6oLsJSvI3jTR
Vt3Vtd0dX2Zn9m1m3zd3HXfXfMtMrE51icBVsDp0qEMYHTwnEXToza1D0KVLf4EXoWv0YgQKQfJp
nlkLpIjwB995GJ7v58t35nmkxpuvNg7eqLJ/cZWG/5TwCkawUsNildmHG5x98LmmlS/2OvkPiX3B
CFaqn19lr1M//wLJUakF7HM6OXKokaZjx2lracXd0UmX9xQXfX5uyQHkoIoWDKGpKkpvn80IVnLM
V+2Xoxbc7elGDvShDWjEVJ2onuFuPAHRIGGzRNYsMlgw0aOGzewKONHUTMCCFTVCNJRGu58ksljg
SSoL8TD3zGFuF4cZGx0jnsrYzO4GLW14elX6tTRrskFi26q8bPIpGmepOMK2EeFb0mDLCBPOD9lM
nQio2wmw+mP1Zm0uxLvrGvFNleDzIvRHGJy+Alazx+kcL2M6eDttpK5inYLDeohpPdxF20cVzwcd
z2aEC3eKJN9bZrdK99McV99qVOQcff4EJ1u8NiNYyTFXC2jCjfJMJ7aSwfc9zERkBmNL5UdBxf1V
x7cRsxwqnSi2V4xgfzeQ2/3kQ3mylTyZ5SFmMrN0WOb8epTRS9OMZ6coGSNklRy9Ltlmag1+BfT4
SeppCtlhzhTGOW/O0o5MaWmSy6UZRssTmPkiqXiGgNdnMzsBtYvkdrWj9A9gWD8plzpNOVNGeR1m
yjxHeWiEwVyehJFAVaxPcrlsxj5G58Ler7JgpQPXHr1xLlTttD80t6O/7AlGsJI1zZZ69iap+Sdv
vWLTEaDnfwAAAABJRU5ErkJggg==')
	#endregion
	$button_process_owner.Location = '205, 46'
	$button_process_owner.Name = 'button_process_owner'
	$button_process_owner.Size = '139, 23'
	$button_process_owner.TabIndex = 3
	$button_process_owner.Text = 'Processes + Owner'
	$button_process_owner.TextImageRelation = 'ImageBeforeText'
	$button_process_owner.UseVisualStyleBackColor = $True
	$button_process_owner.add_Click($button_process_owner_Click)
	#
	# button_process_100
	#
	$button_process_100.ForeColor = 'Black'
	#region Binary Data
	$button_process_100.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHSSURBVDhPpZNfb9JgFMZfRoNXc/FuIW7D
luLSQmlZBigy1Llosnmj2eKVpi18g+1LbFxzwXR309t9Li6bEkD+PJ5zJmQXJDpt+mue9/T0ec85
easA/BdLg/dBOY5zk8/nYdv2H7EsawGvC4XCjeKPW60WwjBAEARoNpuyboYhAt+HT4SkOc56Duey
kRi82n+DWn0P1doLNF7vU10K9cZLlKvPsEvU9hoSu+x2UXleE7qkc7kclG1b8MMWjk8+UUvA5y++
JH/9diVrvq6//5DYeDLBh48nxDF+jsfIGgYb2Dg8eo/pdILBYICDt+8kud8foE47M3Hcl9hFuw3M
ZnRPcd6+uK2AhohKpYrtbQvD4RCOU5TkGSXaNg83L5pjnFcq7cDzSiiXK+D2led58pKJomih4zhe
qu/iuu6twdraI2haCqPRCMmkJi97vd4ikXUikcDq6kOsrGjU7hSp1AMUi1Qtu3CZum7IwAwjSyZJ
nJ6eSSLDWtOSMM2c5PBGW1sZateBYhfTfEoGWWxuPiEDGgztmsnoSKcfC6w5pusm1tfT6HQ62Nj4
bUCPiE3mcEXcFmvHKQis5zEeHB8gOoVsEJGxcomdf8Rd+oPch6XBvwfqF+YNEga2AC2XAAAAAElF
TkSuQmCC')
	#endregion
	$button_process_100.Location = '6, 46'
	$button_process_100.Name = 'button_process_100'
	$button_process_100.Size = '89, 23'
	$button_process_100.TabIndex = 2
	$button_process_100.Text = '>100 MB'
	$button_process_100.TextImageRelation = 'ImageBeforeText'
	$button_process_100.UseVisualStyleBackColor = $True
	$button_process_100.add_Click($button_process_100_Click)
	#
	# button_proclasthour
	#
	$button_proclasthour.ForeColor = 'Black'
	#region Binary Data
	$button_proclasthour.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMsSURBVDhPlZNfTJNXGMbfSy+93dUyL7za
zdhmYmwigpVSBKkrA1rAuYRtxo1lziwrBfknGmFhUXTV6TYoJMPZDrAg0tJN4yhFSkGrI0MXZMzO
uemk/BFF+e2czni/k/zyfu97nufJl/OdT+bP58rCgKVI8Xj5Qg4MG0/bbf1SWDggdrv/v6p6Pdf7
Wqf12jffbxEdUPQwZINZB1DOt031FLzZTa7lHJbtvcmqez3X+1qn9dqXDEh0Zz9+OvEuyxPvUbqz
E8feGD+Hl3j0B8/RvZ7rfa3Teu1L+LapN+g0waCFUvsZmj+7yeToCm0tC+w/kFDMU6eq+5sFJiNP
aW68mdRpvfbNfp8lMnPK4Hc79vHR7igjPyzScGiWyGAUFrtoqC/lScJL6McRDqqgkeCS0o3jdlSh
fXOnM0SvNXnmHrytt3Edvcfo8FWs+TbGwu0q5CKPHgRZmQsSHhzmZPMKXa0J8s0BtI/uTSIWU1C2
G3vxddymru6eOqifGI98h8VaosK8rDyMsPjgEnbXKhwdwvuuLPJSI7yRNi6W1JiIfWuv5Gd003b8
BjW1dzl1slqFXOPalV5ycu2MhnuI/drCa9XC9F+HcXqErLLNZB4VyVJIsdknhcYumg/FqK5RR851
xSQZmVbGo33q+RYT0x28XiX8Et/PlZlPqewUtjRKe/bnKsCe4ZOC9K6l8g9DVFXeIDo6pUya3xQz
ijiT8U7WqYBY3InrknB5ehc1Z4XMRvHINkNA0lNOHCsy+ynbFaLCOcXYmDb/icf7paqz+Id6WF8r
RON7cA0JJ4aF8O9WTA2CMJAmsa9T3i7b2kq+qZ+dxRf4eE+MyopbimmqnHfY/UkHGw8KkbvvcHxM
6JsyUK1ud/o+CcrcGZMsejYvc+cAH5hbKNh0jpK88+yw9Sv8vFVwEduOI6Q1qt/h7yK+mhAqAsJG
p/TpTyn33VvkH7eRufbUJ2cr1u5Nf9n1hW2Dd6nY4KF4g5eS9T4Ks+sxNglDCSvlQeHI4Rf1PXgp
Rx/i/bbkbXpVkaJYrXhB8cqz2XPS6iRQGxIMTgno3twkkgz4H2uNQofp+myJ/AtwYVJKIFClzwAA
AABJRU5ErkJggg==')
	#endregion
	$button_proclasthour.Location = '205, 17'
	$button_proclasthour.Name = 'button_proclasthour'
	$button_proclasthour.Size = '139, 23'
	$button_proclasthour.TabIndex = 1
	$button_proclasthour.Text = 'Started in Last Hour'
	$button_proclasthour.TextImageRelation = 'ImageBeforeText'
	$button_proclasthour.UseVisualStyleBackColor = $True
	$button_proclasthour.add_Click($button_proclasthour_Click)
	#
	# button_process
	#
	$button_process.ForeColor = 'Black'
	#region Binary Data
	$button_process.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJRSURBVDhPnZLNSxRhHMfn6oLsJSvI3jTR
Vt3Vtd0dX2Zn9m1m3zd3HXfXfMtMrE51icBVsDp0qEMYHTwnEXToza1D0KVLf4EXoWv0YgQKQfJp
nlkLpIjwB995GJ7v58t35nmkxpuvNg7eqLJ/cZWG/5TwCkawUsNildmHG5x98LmmlS/2OvkPiX3B
CFaqn19lr1M//wLJUakF7HM6OXKokaZjx2lracXd0UmX9xQXfX5uyQHkoIoWDKGpKkpvn80IVnLM
V+2Xoxbc7elGDvShDWjEVJ2onuFuPAHRIGGzRNYsMlgw0aOGzewKONHUTMCCFTVCNJRGu58ksljg
SSoL8TD3zGFuF4cZGx0jnsrYzO4GLW14elX6tTRrskFi26q8bPIpGmepOMK2EeFb0mDLCBPOD9lM
nQio2wmw+mP1Zm0uxLvrGvFNleDzIvRHGJy+Alazx+kcL2M6eDttpK5inYLDeohpPdxF20cVzwcd
z2aEC3eKJN9bZrdK99McV99qVOQcff4EJ1u8NiNYyTFXC2jCjfJMJ7aSwfc9zERkBmNL5UdBxf1V
x7cRsxwqnSi2V4xgfzeQ2/3kQ3mylTyZ5SFmMrN0WOb8epTRS9OMZ6coGSNklRy9Ltlmag1+BfT4
SeppCtlhzhTGOW/O0o5MaWmSy6UZRssTmPkiqXiGgNdnMzsBtYvkdrWj9A9gWD8plzpNOVNGeR1m
yjxHeWiEwVyehJFAVaxPcrlsxj5G58Ler7JgpQPXHr1xLlTttD80t6O/7AlGsJI1zZZ69iap+Sdv
vWLTEaDnfwAAAABJRU5ErkJggg==')
	#endregion
	$button_process.Location = '6, 17'
	$button_process.Name = 'button_process'
	$button_process.Size = '89, 23'
	$button_process.TabIndex = 0
	$button_process.Text = 'Processes'
	$button_process.TextImageRelation = 'ImageBeforeText'
	$button_process.UseVisualStyleBackColor = $True
	$button_process.add_Click($button_process_Click)
	#
	# tabpage5
	#
	$tabpage5.Controls.Add($groupbox8)
	$tabpage5.Controls.Add($groupbox4)
	$tabpage5.ImageIndex = 4
	$tabpage5.Location = '4, 22'
	$tabpage5.Name = 'tabpage5'
	$tabpage5.Padding = '3, 3, 3, 3'
	$tabpage5.Size = '1264, 91'
	$tabpage5.TabIndex = 4
	$tabpage5.Text = 'Services'
	$tabpage5.UseVisualStyleBackColor = $True
	#
	# groupbox8
	#
	$groupbox8.Controls.Add($button_servicesrunning)
	$groupbox8.Controls.Add($button_services)
	$groupbox8.Controls.Add($button_servicesauto)
	$groupbox8.Controls.Add($button_servicesautostop)
	$groupbox8.Controls.Add($button_servicesnonstandard)
	$groupbox8.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox8.ForeColor = '59, 59, 59'
	$groupbox8.Location = '3, 6'
	$groupbox8.Name = 'groupbox8'
	$groupbox8.Size = '419, 78'
	$groupbox8.TabIndex = 8
	$groupbox8.TabStop = $False
	$groupbox8.Text = 'Dienste'
	#
	# button_servicesrunning
	#
	$button_servicesrunning.ForeColor = 'Black'
	#region Binary Data
	$button_servicesrunning.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIsSURBVDhPdVJfT9JRGOau75Hdd+FNtXVb
XfU9TJE/KmMMEUkzQpCQrVLRal20ZmHQRJHAEMgaEzQSxIox21wzY30Bnt7nBL/Q6t3eved53ud5
f+f8ztH9LyZ9fni8U2BtUX8F0NFye7wRyXAL6ibcHhwefgNri9LdvjN5LJqlFvwzQESR8MsIFl+E
MXpz/Mg1dgv37s8gFk+oSix8k33qqKdPG+BwuuIPHz9BuVJFOpND/eArynv7SKbSKH0sK5zOZFWf
Ourp6zxC1/CIq/H02SI2sm8RW1nDciyuajvJsz88MtqgnqYT/8DucKKyV8XqWhKx1QR8d4PwTgUw
JXUpElV8RXZFXcvye4DTNabIQDCI/FYRqfUNMU3DYDI/v3Dx0nVWf2Ba8exTRz19aoBsCbX6ASrV
T0hnc8jkNtX1Xbl67bJ85AwrMXn2qaOePm2A1WbHg9kQNt/lVXIHFqttzmZ3nGUlbveoo14bINHN
HLRYsVXcwfv8FuKJJHz+AOTOVSUmzz51bU97gArzkKUZjcZQEFGhsI3i9gcticmzbxoY4i2o0AbI
No9nQwvY/1zDq+UV9QZKuxXslHZVJSbPPnWiVy9WG9CrN6RCC48wMzePvn5jQ28wYXzCjS+1uqrE
/UZzk2bqBL+mr/MIXT29+jc9N/pSsj4v2U3T0fcfykzMNJoHf4pmXdbnJE8+JAmS6oUx5KzyFgZ4
5k4Vh2ua0wNOh/pqK/8ZAHS/AKdS+Ww60QpOAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesrunning.Location = '5, 17'
	$button_servicesrunning.Margin = '2, 2, 2, 2'
	$button_servicesrunning.Name = 'button_servicesrunning'
	$button_servicesrunning.Size = '132, 23'
	$button_servicesrunning.TabIndex = 3
	$button_servicesrunning.Text = 'Running'
	$button_servicesrunning.TextImageRelation = 'ImageBeforeText'
	$button_servicesrunning.UseVisualStyleBackColor = $True
	$button_servicesrunning.add_Click($button_servicesrunning_Click)
	#
	# button_services
	#
	$button_services.ForeColor = 'Black'
	#region Binary Data
	$button_services.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAG6SURBVDhPpVHbSgJRFD1fE4ERRR8Vps6Y
mo7aeNccZ8x7l8cMI+itIiKiixVEPUQX0ZfMSCTqVQXpYbf3KYtIJWjDYp21z+x1NmsYAPwLLBqL
s3R2kaUyC00EqPEknYE09em+izlF637LmTS/iERV5guEjhVVA2w2iFEXqf8Xg1Z4LlZdyRc699Ua
PNUbQLyyWnjD/hbeNwca+IORB18gDHelCmzv7EIineNMmvqhiALBcJRlckssnkjz4R8GWDrrjOPi
+qYEqpbAVNgEMWmnW34hnV1Y5gPafOq3gVv2ViTXLBTPzmFtfQMiUYXzCWrqowng64841DNgZpfc
7WmrvR7Tkp29/UM4ODoFYly9aRItJUG0VLz+4KaixnsGTDWOGDEKYl2ctsKk3nBJrDeYyhhiGTO6
zecLzX4BM8klM8FsIbSnjEINzYaQqwaT+IzDV4MCRhNgTreH4YvdTXQzDieddYhRxLDV3jfgV9Jf
BmaLjcNml/hGHl+AzXp85UEB4w/43oCGiUlLLoLcN2BcvYP9J7xv9TGQObB6BmwUzHXqI8YGGhB6
BFwjTf3PR/5UPOCPI2fSWIy9A9wD+f2hDKCYAAAAAElFTkSuQmCC')
	#endregion
	$button_services.Location = '5, 44'
	$button_services.Margin = '2, 2, 2, 2'
	$button_services.Name = 'button_services'
	$button_services.Padding = '0, 0, 2, 0'
	$button_services.Size = '132, 23'
	$button_services.TabIndex = 1
	$button_services.Text = 'Services'
	$button_services.TextImageRelation = 'ImageBeforeText'
	$button_services.UseVisualStyleBackColor = $True
	$button_services.add_Click($button_services_Click)
	#
	# button_servicesauto
	#
	$button_servicesauto.ForeColor = 'Black'
	#region Binary Data
	$button_servicesauto.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALdSURBVDhPfVHLTlNRFN0jv8APUNCxMUYS
iULAGAgJISFq4sSJI+Rhy6MtpZS2tzxLoZQS3hYMMYDUKo2WQml5VqpAQCBtQQIIQglBJo5ZnnNo
ceZO1t173bPXuvvsS/Ums4DJ3CxQ19BITRYrNTZZwDh45jx+zhHXcIgHF7E8yuCsrTdRDDg6OgbP
nMf6Tln+EOv/Z8AaRp0fRzHy3gm9VH1iMNagvaML7nGvyJyz9+f8nPfx/ksD7qbVGcb73gwgFN7E
zFwAe/sHCEW24PPPYH0jJPjM3Lw45328n+s4iDkTi8TKKsPZ4PAIZue/wD02gc/ucZE5xsa8mJsP
Yvidk4mlM97PdULLxhOFRqtDOLIJz4QPbo8XzRYbzM2tsLS0weXyYMq3iJ2tE+h1JugNdULHQTqD
EVxstdmwuLwC/9QsE9kgk5U5kpKSs2UypaOjbQDJtQT1IOGJ8SYkXQskqQGSsY6oskqPnb19hDd/
YGY+gLnAAsxmG9JTM5PYqFfSUrLudrY4kMIMNvZLUD5EqHLkQtLaUK23Xhio1Bp0dvdiIbiIYHAJ
VksPcquv/kprIKTWEVJqCPcMzOBAj9nIU6gdhGfSbWQ08/UR3eEoVaiwvPId35ZWMD25hORqws8z
G9aPs7EWzcHqYTbC0Va0zxICu89R5SJkmmiI1BotsQmouExx7nK5sbq6gfDavvjicrQAnQt0ifYv
hA6Wu74Slg5fIINNSOUVlaRQqU+7e+3Y2t7BJ/cEdrdPcZ+N7Y8+gD1E6GOwbxB6Vi5gXyPoPYSH
WpokZXkF5Re+8vfa+9HV8xqFRfKzYrkGjw3XkFpPSGc7eMSQJhH6I8wsTNB5GdeQh109QRiwSMzL
L5zOe1ngZ/UtvpMSZvLnN6AsMoHzDGby9oCJfZfi6zl8idwgZnKDIZHXJWUqKi5VQi5XQSE3IstC
lMXuawwI8WRcLAz+E+LvxMAjXicIJoLoLwYrGRa+kko1AAAAAElFTkSuQmCC')
	#endregion
	$button_servicesauto.Location = '141, 17'
	$button_servicesauto.Margin = '2, 2, 2, 2'
	$button_servicesauto.Name = 'button_servicesauto'
	$button_servicesauto.Padding = '0, 0, 2, 0'
	$button_servicesauto.Size = '132, 23'
	$button_servicesauto.TabIndex = 4
	$button_servicesauto.Text = 'Auto'
	$button_servicesauto.TextImageRelation = 'ImageBeforeText'
	$button_servicesauto.UseVisualStyleBackColor = $True
	$button_servicesauto.add_Click($button_servicesauto_Click)
	#
	# button_servicesautostop
	#
	$button_servicesautostop.ForeColor = 'Black'
	#region Binary Data
	$button_servicesautostop.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIvSURBVDhPjVHdS5NxFH7/gUDoD2j/QHTh
nULsyroJyhC6iBKqjdmHBRF96drmR3MfTXM1bW5FXpTKsuV0frYvyrS5NZ2OgtzNoJtIdhNE8HTO
eV/XogwPPJzfOed5nvf8fq+yU7g9fdiG1vp/OFz3ggytVJxuD9byG+DMNc1qCJlqTiXsDlfw+egY
GHTe7HG64R8KIjI1LZlr6n+r4vxp0n7HOhp88hTv0xksxBLIbxSwks1hbj4mPa4XYnE5M4/5mrQS
OmtHV2lkLIRYIoWp6Cwik9MVcM19njOP+apMC1tnd01H112kV7KIzsxjgkT3vT54+rySQ+Nh6fOc
eZpMDXJkVzwcGMSbxSVZu/+BD1evXQ83Hm8ycB53nkVx+AhWX3QLb1sjBhZbJ9KZDwJe83U8SV/u
x6nTzSdovMd1vsHwOXAY+GoF52xqUrisEwOzxQaGP/AYydRbAW9w83b7MD2WPmevS34vXMI5gwmc
F3ubhM8QA4rafTqdvs1skSswojNzYvLMbsSXV41A6YoYcOZ6pPWAi3WqnMJoatlLXyy/DEewtJwW
LCdnUfAews+PZ4CiQTWgzHXBc3Br3Vn/+0/cuNWWHXg0JHcLT6h3XPM3o5w4Bnw6+Re4v9pTF9fk
inKx9XLIN+gHg1695DUbUQzogXUy0CAbVNU8py2OahaKztRyIcyg835yL/941wDk6PV3AM/zjvot
Va4G30nuRc7svisw/1/BL7wLKLW/AIvoBAk4ngJhAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesautostop.ImageAlign = 'MiddleRight'
	$button_servicesautostop.Location = '277, 17'
	$button_servicesautostop.Margin = '2, 2, 2, 2'
	$button_servicesautostop.Name = 'button_servicesautostop'
	$button_servicesautostop.Padding = '0, 0, 1, 0'
	$button_servicesautostop.Size = '132, 23'
	$button_servicesautostop.TabIndex = 5
	$button_servicesautostop.Text = 'Auto and stopped'
	$button_servicesautostop.TextImageRelation = 'ImageBeforeText'
	$button_servicesautostop.UseVisualStyleBackColor = $True
	$button_servicesautostop.add_Click($button_servicesautostop_Click)
	#
	# button_servicesnonstandard
	#
	$button_servicesnonstandard.ForeColor = 'Black'
	#region Binary Data
	$button_servicesnonstandard.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIVSURBVDhPjVPfa1JhGPYvyF11qzUoWNDN
dhvJoqt2U39AN+0iCHKR5kFNmHr0rInH4/FsTYY5deWsqRBLIx2CuxjuIgbdNCgIMvrBIoKx9Obp
fc/OhbYT7IOHh/d9nveB857vswCwDB5PWJm4Pxvv3gvEMENgds3KXU84OWFY9MNz+uxgAA2PeyMq
2p1dHPb6OPjT07nR7sAXTcEjJscNq3mAKyj33+19xKcv37G5/Rb1rR2duz/20dzqwB1M9A2reYA7
pODr/i+Uai0UNzbx7GWDuIlSvYWfvw/AumE1D/DNLWLq6hXcmLqGxytrKFEIM9fcZ92wmgc8jKUx
edmBC+fP4eLYGNZrbZ25nnQ4ECDdsJoHeCOpb9O3nbDZ7Bg5ZUWx2sCI1Qqb3Y6b03fAumE1D7h1
V4hIahaZQgXLuTKWss915pr7pEcNq3kAndMeUUVMyUBOZRFXn+g8n8hAoD7rR7b/BLhDieteUXkv
0LYjcwuQaGkisTsog/p7pF8yrMMBgpg845e0XrHSwM7uB6y8qPGlgSuY0Jlr7rPulxY+k//sUADf
stqbbazRf8+tbyBffoXVah1Pq6915pr7rNfJ9yCs0NhAQEheRrnchLqUJxSQSjNWB1DQ+4xKpXk8
IEDfqWk5PJpfRCyehkJL/BfcZ13T8rTQ5HCA0xdtCfSITgqnX2oNBdAZJfBLOylGjwJg+Qt+uCHV
V2k6OQAAAABJRU5ErkJggg==')
	#endregion
	$button_servicesnonstandard.Location = '141, 44'
	$button_servicesnonstandard.Margin = '2, 2, 2, 2'
	$button_servicesnonstandard.Name = 'button_servicesnonstandard'
	$button_servicesnonstandard.Padding = '0, 0, 1, 0'
	$button_servicesnonstandard.Size = '132, 23'
	$button_servicesnonstandard.TabIndex = 6
	$button_servicesnonstandard.Text = 'Non Standard User'
	$button_servicesnonstandard.TextImageRelation = 'ImageBeforeText'
	$button_servicesnonstandard.UseVisualStyleBackColor = $True
	$button_servicesnonstandard.add_Click($button_servicesnonstandard_Click)
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($button_servicesstop)
	$groupbox4.Controls.Add($button_servicesstart)
	$groupbox4.Controls.Add($button_servicesrestart)
	$groupbox4.Controls.Add($button_servicescheck)
	$groupbox4.Controls.Add($textbox_services)
	$groupbox4.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox4.ForeColor = '59, 59, 59'
	$groupbox4.Location = '428, 6'
	$groupbox4.Name = 'groupbox4'
	$groupbox4.Size = '219, 52'
	$groupbox4.TabIndex = 7
	$groupbox4.TabStop = $False
	$groupbox4.Text = 'QueryStartStop'
	#
	# button_servicesstop
	#
	$button_servicesstop.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesstop.ForeColor = 'Black'
	#region Binary Data
	$button_servicesstop.Image = [System.Convert]::FromBase64String('
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
AInBlkgn/ujMAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesstop.Location = '139, 20'
	$button_servicesstop.Name = 'button_servicesstop'
	$button_servicesstop.Size = '20, 20'
	$button_servicesstop.TabIndex = 4
	$button_servicesstop.UseVisualStyleBackColor = $True
	$button_servicesstop.add_Click($button_servicesstop_Click)
	#
	# button_servicesstart
	#
	$button_servicesstart.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesstart.ForeColor = 'Black'
	#region Binary Data
	$button_servicesstart.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_servicesstart.Location = '165, 20'
	$button_servicesstart.Name = 'button_servicesstart'
	$button_servicesstart.Size = '20, 20'
	$button_servicesstart.TabIndex = 3
	$button_servicesstart.UseVisualStyleBackColor = $True
	$button_servicesstart.add_Click($button_servicesstart_Click)
	#
	# button_servicesrestart
	#
	$button_servicesrestart.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesrestart.ForeColor = 'Black'
	#region Binary Data
	$button_servicesrestart.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_servicesrestart.Location = '191, 20'
	$button_servicesrestart.Name = 'button_servicesrestart'
	$button_servicesrestart.Size = '20, 20'
	$button_servicesrestart.TabIndex = 2
	$button_servicesrestart.UseVisualStyleBackColor = $True
	$button_servicesrestart.add_Click($button_servicesrestart_Click)
	#
	# button_servicescheck
	#
	$button_servicescheck.ForeColor = 'Black'
	#region Binary Data
	$button_servicescheck.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_servicescheck.Location = '113, 20'
	$button_servicescheck.Name = 'button_servicescheck'
	$button_servicescheck.Size = '20, 20'
	$button_servicescheck.TabIndex = 1
	$button_servicescheck.UseVisualStyleBackColor = $True
	$button_servicescheck.add_Click($button_servicescheck_Click)
	#
	# textbox_services
	#
	$textbox_services.Location = '7, 20'
	$textbox_services.Name = 'textbox_services'
	$textbox_services.Size = '100, 20'
	$textbox_services.TabIndex = 0
	$textbox_services.Text = '<Service>'
	$textbox_services.add_MouseClick($textbox_services_MouseClick)
	#
	# tabpage6
	#
	$tabpage6.Controls.Add($groupbox22)
	$tabpage6.ImageIndex = 5
	$tabpage6.Location = '4, 22'
	$tabpage6.Name = 'tabpage6'
	$tabpage6.Padding = '3, 3, 3, 3'
	$tabpage6.Size = '1264, 91'
	$tabpage6.TabIndex = 5
	$tabpage6.Text = 'Harddisk'
	$tabpage6.UseVisualStyleBackColor = $True
	#
	# groupbox22
	#
	$groupbox22.Controls.Add($button_diskusage)
	$groupbox22.Controls.Add($button_deleteoffline)
	$groupbox22.Controls.Add($button_volumes)
	$groupbox22.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox22.ForeColor = '59, 59, 59'
	$groupbox22.Location = '3, 6'
	$groupbox22.Name = 'groupbox22'
	$groupbox22.Size = '259, 81'
	$groupbox22.TabIndex = 6
	$groupbox22.TabStop = $False
	$groupbox22.Text = 'Harddisk'
	#
	# button_diskusage
	#
	$button_diskusage.ForeColor = 'Black'
	#region Binary Data
	$button_diskusage.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJaSURBVDhPfZJLT1NRFIWZ+wPUoUChBQai
caAxRgWJylN5JBArlQKV8n4LQVGQRBR0gMiAP2AEEmKclDQFUUlDooni4xcUBiZM1Dq593zufZGK
RDzJuo+911p333VOEpCkazkr49jLTM/TRY/7h4DILmhNe8pRrmocrV6WMz3t0cOZxPJP8r0yF/wX
oGYXpKY95ShXNQmDRXcatFRAUxkmWIq9B7SnHOU6mm2DiCsF3oZhbhozdRf7fg/2aPffkJr2mJ2G
d2EcTcIgzQXV5zATg5jQM/i4Ah9ew/tXW9DntRXMwgxmcgjqCnE0CQMJCG8O1rXzWIFL2O1VmH4/
jPfBvQ7MzevYXVexGsux6oucTCLu9D8GmrBOYNcVYDdXYPf4MIMNMNolJjcwwy3Y/bWOsR28LBPk
O7uSMJhJTX6xkXOczaJTxH0FWJ1euBOEsR54JFOMtGL1+oj7i9ksOcNG7glUkzB4nnJojtUQ3x6P
8rWjgXVvGetXyoj9xrq31HnXnnJYXcDRbBtE0mVLfHkweRvCs/AlCp8kyLU3W9BQP0stLJonw1C/
O0T3HiE+7JcQOzG3NMRqrKb/hpiHVVsopO0Qr2+FONaLGWrG7qvFaqvC+leISxkemUCOcKAY01qJ
6auBoUZ4oCHKFCNtmIF6jIbbLCfRf5GljB0G0ynJ49HsLGKFp4kH5AuDAfl6G0wMwJTkMtYNw43E
g+XESs4SPZKFahIGsva3HDzgnU93heTffmqoEZdLkOocWecuoWlvPi01pFzV7DTQtU+QLMgWHN0D
2lOOckVL0i9eOH6N5N3ztgAAAABJRU5ErkJggg==')
	#endregion
	$button_diskusage.Location = '6, 19'
	$button_diskusage.Name = 'button_diskusage'
	$button_diskusage.Size = '109, 23'
	$button_diskusage.TabIndex = 0
	$button_diskusage.Text = 'Disk Usage'
	$button_diskusage.TextImageRelation = 'ImageBeforeText'
	$button_diskusage.UseVisualStyleBackColor = $True
	$button_diskusage.add_Click($button_diskusage_Click)
	#
	# button_deleteoffline
	#
	$button_deleteoffline.ForeColor = 'Black'
	#region Binary Data
	$button_deleteoffline.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALWSURBVDhPjVNtT5JRGD6f+w0t11qtlw+l
5tByzlxvs/RDc9MPUs2t9cWtVcutP+BmH6zNtbIULZ0GKCICAr6CgAKPIPEiiiC+m6Si5gsiXp3z
uCmu2jrbtXPu+1z3/VznOuchX1o7SJ20PVUkkXfXiGWo+fYX0DzbZzzGTwQrrm6Uq2F0eOEJziOw
sIqJ+ZVDsJjl2T7jMf6xBrXiNth9U7CPToHzTsLm+RMsz/YZj/HrWxRHDZjE1c0YggsrlBAC5wnA
5j4Ci+2jIQTnl7G6FeOPdKxBraQNnfoh+GcWsRjZxPpOHGs7e4hsx7C2vcevlyJb8E//gM5gPVDA
imUqUt+mIkQklUPdP4guIwe9xYXBkXE4qNzxqTCcY7OwOCdg4DzoMduh1VshkrajTt5JalU9pEbd
z5sIrcGCvkEHjJRodU3Qwhn4JpfgmpgD5w7C5PBBb3NBR5vUyjvxWTtAvNlnifvmRUIqq0XKt58a
0KzQQUO/wHmCcPnnqIKf1P1F3rwusxOSLjPeNStR3tAqdeecJ87cFDKSl0ZIlaixdXkjSqX6INcY
IFP3QaEzQdU7hI5uM9p0RihMTuieP8VI1hnYcy5g+M5lDN9P+2DPF1APJHJoB6wIzC0hvLGNXzFg
YzeO9WicznQNIFBVgWBBBlBeCrx5AVQ8Q+Dhbb5JgonDMFhdGHIyE6f5Izj9C7AEwrAKTmL/VRFF
IeIvC7BfVgi8FsKWmwreRDW9RmaiifPyJn6n7o+FwnBTD6yhFdgykgBNE9WSMHRiWO8mg1R+FLV+
lSnR0WuiCtz8FXppYWB2Fb7pZdhnIrBnnsZeSRZ2H1/HjvAanTMRe3ID3L2rIHQkFT0qKX5f32Rh
frCHcvgT0bi6XQtNWSnG8lMQLRZgVyhAVJiO0QfpUN680nLwHAk5QXGOIvVfUGdfEnN5Atjy0sFR
KG8lt9D8KYr/Hoyc2JTGhPwGGBuwwDgyF9QAAAAASUVORK5CYII=')
	#endregion
	$button_deleteoffline.Location = '121, 48'
	$button_deleteoffline.Name = 'button_deleteoffline'
	$button_deleteoffline.Size = '131, 23'
	$button_deleteoffline.TabIndex = 3
	$button_deleteoffline.Text = 'Delete Offlinecache'
	$button_deleteoffline.TextImageRelation = 'ImageBeforeText'
	$button_deleteoffline.UseVisualStyleBackColor = $True
	$button_deleteoffline.add_Click($button_deleteoffline_Click)
	#
	# button_volumes
	#
	$button_volumes.ForeColor = 'Black'
	#region Binary Data
	$button_volumes.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJUSURBVDhPdVPbbhJRFOXdD/DdPzDGrzG+
mPgB/oHPJtaoT00AYyWmBcsloVOoCAhth+F+GxhgpnQogVIFaoHSFnG59yQdwMtJFmHOXmvN3uuc
sQCw8Hrn8j20O72bti3PxLrpxr/ANeYwlzWGln9o45nDKyCSLCJfa0HrDqF2BivgPa4xh7msMQ3I
GVlFN5CuNJFiyH+A9rh2y2ONacDtDSczHHUHKKknSMsaiQjlJdAz15gzvJwZI5kGNqcXgaiIYkNH
pz/CxfUcP65+4nw6M8D/L67m6AzGKDVaCMaTsDmXOrC7fNiNJLAXTyGSKOIgqyBDbStHPVS0HnKV
Y4i5OmKpEr4cZhGISbC7vAsDCgTBr0mExSziaRmJQh25qo6KegqleYaC0kKyqJJxBVGpgL39FIe4
MFhbt/tfrX+Awy1AoE7EnIJC7YQ6OENd/45SvQ2JTAP0ko+eAN5YHWCNafDW7tgejK+RyFchhA/h
2gnDE4zBHxKxE07AF4zjkxChMUUyUtCfXIM1pgFdDgRprrLWQm84wXgGjG5+GWEyRjdzY+/0/BKy
1jZGYM3CgAK5DTEqUYg0ghFicxFiIr8IcZdDXDbgQAJRCaGDDJHKZoiy2l0JcT8jU9A54xhXQuQH
ge4BF/kUpGIDeRJV6e21428oUqCpkmaeAo+7YvD8xdrLjW0/vJ9jZJI32i+rHTT0PrT2kMbo0hg6
IiT2heLYcPvBGtOA1t1HT54+fm19H6Q7PuV7bt3660tkTJnDXNYsG/C6Q7hHuE948B9wjTnMJS0s
vwEsTAjkI+DtQgAAAABJRU5ErkJggg==')
	#endregion
	$button_volumes.Location = '6, 48'
	$button_volumes.Name = 'button_volumes'
	$button_volumes.Size = '109, 23'
	$button_volumes.TabIndex = 2
	$button_volumes.Text = 'Drives'
	$button_volumes.TextImageRelation = 'ImageBeforeText'
	$button_volumes.UseVisualStyleBackColor = $True
	$button_volumes.add_Click($button_volumes_Click)
	#
	# tabpage8
	#
	$tabpage8.Controls.Add($groupbox23)
	$tabpage8.ImageIndex = 6
	$tabpage8.Location = '4, 22'
	$tabpage8.Name = 'tabpage8'
	$tabpage8.Padding = '3, 3, 3, 3'
	$tabpage8.Size = '1264, 91'
	$tabpage8.TabIndex = 7
	$tabpage8.Text = 'Eventlog'
	$tabpage8.UseVisualStyleBackColor = $True
	#
	# groupbox23
	#
	$groupbox23.Controls.Add($button_eventlogmmc)
	$groupbox23.Controls.Add($button_eventlog20)
	$groupbox23.Controls.Add($button_eventlognames)
	$groupbox23.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox23.ForeColor = '59, 59, 59'
	$groupbox23.Location = '3, 6'
	$groupbox23.Name = 'groupbox23'
	$groupbox23.Size = '228, 81'
	$groupbox23.TabIndex = 3
	$groupbox23.TabStop = $False
	$groupbox23.Text = 'Eventlog'
	#
	# button_eventlogmmc
	#
	$button_eventlogmmc.ForeColor = 'Black'
	#region Binary Data
	$button_eventlogmmc.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGTSURBVDhPpZPJTsJQGIX7IC6MqC/gCwhB
E9yAogtBlEGMCoIKgvoiuqOSkDg9hNM7aNwYdKe0LCxDGXq850pImjgQPcmX3Paec+7fplVKpVK1
WCxCVVUUCoWBoJcZZhUu/ipmFbZRT+VnlJ9fBoJeitl+wWvlDXpVF1Sh6bqkomkSTSefe/TQS9kK
Jp1ueH1+LAZCCEfjWE9sYSeTQ2Yvj0RyG7HVNQSCy5j1L8DpmpIZW4HZasGSK8CyLHS6XbQ7HQnX
XXGP+4ReylbgdLnhm/WLU0KIxOLYSKawm80J8thMpBEV9xYDS/DOzctpKVvBd+IETdOU8GSzZaLe
aMg9W4HLPY3AUgip9DZ2M1mshCPweGbQbrVRr9dQMwS1GgzDwLuA4jfx6wRAR2D2aIqX0ITV7k3A
ghO1IC/2zh8wsn+H8UM7Ywe3fUb3bzGcu0H29F5mVJHtFwxlrxE8e8HKxc/QQy/FrCj4fIT85SOG
8ze2E7+CHnopZv//LxwfHV1xwbbiyWBIr8gwqwg5BBN/Q3F8AIYjCyDDQLmEAAAAAElFTkSuQmCC')
	#endregion
	$button_eventlogmmc.Location = '6, 19'
	$button_eventlogmmc.Name = 'button_eventlogmmc'
	$button_eventlogmmc.Size = '109, 23'
	$button_eventlogmmc.TabIndex = 0
	$button_eventlogmmc.Text = 'Eventlog (MMC)'
	$button_eventlogmmc.TextImageRelation = 'ImageBeforeText'
	$button_eventlogmmc.UseVisualStyleBackColor = $True
	$button_eventlogmmc.add_Click($button_eventlogmmc_Click)
	#
	# button_eventlog20
	#
	$button_eventlog20.ForeColor = 'Black'
	#region Binary Data
	$button_eventlog20.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_eventlog20.Location = '6, 48'
	$button_eventlog20.Name = 'button_eventlog20'
	$button_eventlog20.Size = '109, 23'
	$button_eventlog20.TabIndex = 1
	$button_eventlog20.Text = 'Last20'
	$button_eventlog20.TextImageRelation = 'ImageBeforeText'
	$button_eventlog20.UseVisualStyleBackColor = $True
	$button_eventlog20.add_Click($button_eventlog20_Click)
	#
	# button_eventlognames
	#
	$button_eventlognames.ForeColor = 'Black'
	#region Binary Data
	$button_eventlognames.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJySURBVDhPnZPbTxNBFMb7ZqJ/golFMRof
fPKvMH2TXggVett2e1tqjU8GKbQSEl/URIWQaGJMNDHc2y1UWtsGCOCDyoMFCaUUsDcstUIQDeRz
ZnYbQsSY+CVfzs7ZOb85szujuNwdqZzvDEPpE3GmPXTESl8I5zpEXAyMlRR/Ey3+lyaXN1HnE1/K
JUdFV6YaWcxjlDj4WYrDxFQnvP0sxpdKFPJKLjsUbZUqslxCNF1CLL3JYmS5yPInbw5gd/+APdNO
LgTG+uVSSTVAcvUrJrNlTBHTmFwts7x3cB6nbg2RTgbYuM4fgVwqqQaYXd/C3EYF72rOfUdhj706
otNdyeMB73NVfMhX8ZF4vriN1Ldf4Cwc9PpmqFQqpH8Cdp4Hb7XCZDQeQmqAVGkbC7KXtn5ggxS4
XG6MBkO41qDBFpnjcgsIhcNoNpj+BKTLO8yZyi6+7B6g59kLcFYeBoMZj54+h5l0EwyK4B0uWDg7
DCaL9EdqgPzOHgrEm3v72CZjp8ON6ZlZPH7SC7VaB1EMQxC8mJqZQ09vH5pb5C5qgIFPOQwvFCCu
VGC38Wz1FqMZTfoWtD/oQzAkku0EwdnsMJmtMJo4CaKUAUOpHDlERUSyVTjsDqytrSO9kkEsGkVD
gxZieBzu1hvIkvxKJoO38Tj01w1QkNPFAIMEMLJYwLgMeEMKQ+Ex3PH5oNE0wkq6EjxeTERjLN/e
0SkBjrsLrS4nEskkg/gDATSqtSzv9XiQZPkY/He7pC1canudoBDaCb0XysAEdLfvo1UQYOMd4EwW
XBX8OHtvGrq2hyzP805YLDy0jU0J+h3ria/8nxX1vwFsOngCQXU3WAAAAABJRU5ErkJggg==')
	#endregion
	$button_eventlognames.Location = '121, 19'
	$button_eventlognames.Name = 'button_eventlognames'
	$button_eventlognames.Size = '98, 23'
	$button_eventlognames.TabIndex = 2
	$button_eventlognames.Text = 'LogNames'
	$button_eventlognames.TextImageRelation = 'ImageBeforeText'
	$button_eventlognames.UseVisualStyleBackColor = $True
	$button_eventlognames.add_Click($button_eventlognames_Click)
	#
	# tabpage10
	#
	$tabpage10.Controls.Add($groupbox18)
	$tabpage10.Controls.Add($groupbox17)
	$tabpage10.Font = 'Microsoft Sans Serif, 8.25pt'
	$tabpage10.ForeColor = 'ControlText'
	$tabpage10.ImageIndex = 7
	$tabpage10.Location = '4, 22'
	$tabpage10.Margin = '0, 0, 0, 0'
	$tabpage10.Name = 'tabpage10'
	$tabpage10.Padding = '3, 3, 3, 3'
	$tabpage10.Size = '1264, 91'
	$tabpage10.TabIndex = 9
	$tabpage10.Text = 'SCCM'
	$tabpage10.UseVisualStyleBackColor = $True
	#
	# groupbox18
	#
	$groupbox18.Controls.Add($buttonTSHanging)
	$groupbox18.Controls.Add($button_getsccmcache)
	$groupbox18.Controls.Add($button_getadvertisedsoftware)
	$groupbox18.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox18.ForeColor = '59, 59, 59'
	$groupbox18.Location = '410, 6'
	$groupbox18.Name = 'groupbox18'
	$groupbox18.Size = '237, 78'
	$groupbox18.TabIndex = 7
	$groupbox18.TabStop = $False
	$groupbox18.Text = 'SCCM Client'
	#
	# buttonTSHanging
	#
	$buttonTSHanging.ForeColor = 'Black'
	#region Binary Data
	$buttonTSHanging.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAItSURBVDhPnVNdaJJhFP4uutBuuozu/KuL
3YVSeRExkDXaLvIu6O9ixYp+KOomso1K/dRdFwW1BltzFGUE5YpRa7V0MdHUtelyNTdZbk0F80Y2
n8553dRIiHbg4XkP33mec97z8UrbrK+yWzpeYrPlxX+BNayV+LDRYK3Ebhwnu31QW33Q/ANcw7Uc
rK0YqK1+uGOrcE+toH+yPvgb13Atx18GA/ESXIE8XOM14Dzwi1AQ4Jo/DJRrBufcIWjtn7BDLmP7
GnSOAHSuMHRdE4LVcgBn3Z+FhrWS8mrZIJ9OYiUzD2RTKBGKmRQKyz+Qz+awOOhArseAtJc4k8XP
hZTQsLYywcXHEWjsY9R1DFrqfMkzhXAwiCHPQ8zdMlCFA0ni10/64PePC42CDeotcSAOaJ0hDL8Z
wWzPcSB1Ho0tpwR/6z6G5963QqPgK6wbaGw+sen2wSX0x0rQ0J2DfZ1YfrYfKFyGqfW04MWnTXh3
zyI0Sou3xoD+Lxtc+5BDbwzY5RrFjFMPJNuApXbsaz4jGLNtiFh3Co2ic6hqoLrpo/FXcTtaxINp
wHPDjOJoC/D9KImO0PiHy0x5YeQAsu4T2HT9Y9XA4k1ARXtQySEccvRi4Q51mTEDMcLXg9jTdEGw
yBNmpO8aYLLdR923MN9Fo0cbgelmIE5gTtAuavMJE0LOvZC2Xnk0vP4aFbyUjveYkxvwRd6NsM1Y
QcRePTOishGTLiMkCi1BvzFI+t98rs60RYT23gAAAABJRU5ErkJggg==')
	#endregion
	$buttonTSHanging.Location = '99, 48'
	$buttonTSHanging.Name = 'buttonTSHanging'
	$buttonTSHanging.Size = '132, 23'
	$buttonTSHanging.TabIndex = 4
	$buttonTSHanging.Text = 'TS Hanging'
	$buttonTSHanging.TextImageRelation = 'ImageBeforeText'
	$buttonTSHanging.UseVisualStyleBackColor = $True
	$buttonTSHanging.add_Click($buttonTSHanging_Click)
	#
	# button_getsccmcache
	#
	$button_getsccmcache.ForeColor = 'Black'
	#region Binary Data
	$button_getsccmcache.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGJSURBVDhPjZK7TgJBGIWtfRALC29rJSDg
pdJgT2zUQhZ8B1nAxCcwMXZAY2fslNn1hvGCiVYWNkaNJBKNrstCosLxnwGXmwt8ySQ7u/Odk5nZ
nm7RouPgozoVAA1Te1TFQWuLNL7AVscsq6sApjhp3QcSgX4Yx1P0XLBCOgaoXC5noTMnjJNZxAOD
MM/95H2K7bQNYIoL+L5DQh4g2Qfj1I/8xQLMy2Xy3toHqBH6WLyGrrpgpH2IyxLJizAzMvCTRaqy
BenfAKa4QXVIBIeEXGnmcpDO8N6S+dqWADXiAd73qdlN8lxdM8nFW5IdlsxpCBByboeah4VcaV4i
OQSYNyQ7G2SOCDhcn5bUqJcOOwld81SbR2uyfoZUuFXmiICDtUmUnzaRDDU1X63Qdo5sZY4VUHrY
QD5N9yyP1OTXPbCwy1bm/J2BxCJelB63UMjQPXM5t0uy+O9tZU79IUpM8aD8HAdetsGUzjKnPoAj
abEJaDEvgjN989V3bWkO4PBWPnrFrAMAen4B5nJpBq01bqoAAAAASUVORK5CYII=')
	#endregion
	$button_getsccmcache.Location = '6, 19'
	$button_getsccmcache.Name = 'button_getsccmcache'
	$button_getsccmcache.Size = '86, 23'
	$button_getsccmcache.TabIndex = 3
	$button_getsccmcache.Text = 'Cache Size'
	$button_getsccmcache.TextImageRelation = 'ImageBeforeText'
	$button_getsccmcache.UseVisualStyleBackColor = $True
	$button_getsccmcache.add_Click($button_getsccmcache_Click)
	#
	# button_getadvertisedsoftware
	#
	$button_getadvertisedsoftware.ForeColor = 'Black'
	#region Binary Data
	$button_getadvertisedsoftware.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGeSURBVDhPnZBNLwNBGMfnSCQ4eLm4+QgO
4tM4Cj6BEELiLA60M7s7m9ZLaEIr6FLqLdLQROKOm3CRCFttUf6eZ1qbFCH6JL/MbDK//8z+Rcdk
6r59Ygut4x5axpO0/k75jAd22BVttNHn95Bndwb1B5/n2GFXNI8l4V09odu5QI9mLv/gwpxlh13R
MLKJWoddUV8J2Eisw5YRaLVALAY4MgoVtiDDoYD1RNw47AYBWkVw+TCF05s+YgDZm0Fa+5G57kU+
D/i5JyKH11KJAkPGqQ6w5hHLNmEmJTBbgffTngDeQeK7kXmqA4bLATvbabj2EiI6TiQQ1WtmdZ0Y
bOVCSQUppWF7yzMOu6KuEuD7Pj31GcViiXgLKNB3ofiCfOGZKCJH/+P7D8ZhN3jBXnqfbpqDple4
9nIVmnCsBVhK0wsU0rs7xjEvqCrxsVxilku8HQz4LLNAZXIXP5dIt38t8VuZlZGhHwJOjjNwrUVE
nBVEnfgXVk3BttR0exiZo0PjmIDG0aT5qGXYFe1DsQPecNp/YIddQdNJdNWG6PwAnGzfM2eNDhIA
AAAASUVORK5CYII=')
	#endregion
	$button_getadvertisedsoftware.Location = '98, 19'
	$button_getadvertisedsoftware.Name = 'button_getadvertisedsoftware'
	$button_getadvertisedsoftware.Size = '132, 23'
	$button_getadvertisedsoftware.TabIndex = 2
	$button_getadvertisedsoftware.Text = 'Advertised Software'
	$button_getadvertisedsoftware.TextImageRelation = 'ImageBeforeText'
	$button_getadvertisedsoftware.UseVisualStyleBackColor = $True
	$button_getadvertisedsoftware.add_Click($button_getadvertisedsoftware_Click)
	#
	# groupbox17
	#
	$groupbox17.Controls.Add($button_sccm_start)
	$groupbox17.Controls.Add($combobox1)
	$groupbox17.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox17.ForeColor = '59, 59, 59'
	$groupbox17.Location = '3, 6'
	$groupbox17.Name = 'groupbox17'
	$groupbox17.Size = '401, 78'
	$groupbox17.TabIndex = 6
	$groupbox17.TabStop = $False
	$groupbox17.Text = 'SCCM Cycles'
	#
	# button_sccm_start
	#
	$button_sccm_start.ForeColor = 'Black'
	$button_sccm_start.Location = '319, 28'
	$button_sccm_start.Name = 'button_sccm_start'
	$button_sccm_start.Size = '75, 23'
	$button_sccm_start.TabIndex = 6
	$button_sccm_start.Text = 'Start'
	$button_sccm_start.UseVisualStyleBackColor = $True
	$button_sccm_start.add_Click($button_sccm_start_Click)
	#
	# combobox1
	#
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '6, 29'
	$combobox1.Name = 'combobox1'
	$combobox1.Size = '307, 21'
	$combobox1.TabIndex = 5
	#
	# tabpage11
	#
	$tabpage11.Controls.Add($button_search)
	$tabpage11.Controls.Add($textbox_search)
	$tabpage11.ImageIndex = 10
	$tabpage11.Location = '4, 22'
	$tabpage11.Name = 'tabpage11'
	$tabpage11.Padding = '3, 3, 3, 3'
	$tabpage11.Size = '1264, 91'
	$tabpage11.TabIndex = 12
	$tabpage11.Text = 'Search'
	$tabpage11.UseVisualStyleBackColor = $True
	#
	# button_search
	#
	$button_search.ForeColor = 'Black'
	#region Binary Data
	$button_search.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMBSURBVDhPjZFbTFRXFIaXSZsYIzbxrSZt
Y/ps04SYphVnmAYZvNvnGiUB24fGtl4evEVmAGHu58yVYQQxqVdKkehQtaaC1Ypo7G2sF6RTOgMS
FI1DJKKoX/emwWB9cSV/zt5rr/Xt868tkVh8iuolFt+dF47GDwdDUaZK5/RZJJZ4oef5Ihytk1Ck
7u14fYLff/uF/8cfKhcwQ+iaSKzuZUAoEsvzBUwejY5wZfAxnx3KsL41w6ZjWTYk++kZHmdsNIeu
0bXPAcFwTMxQVLx+s/lSdzepgXE2tuXIjkD6PpzNjHEgleOrk4MKMkZ31wV0re7RvWIEIxIww+L2
+OHJU75szbEyOJMFTuHrgyUk/4bG1AiOrrvUXrjHs0cPcbl9yk54olcCRkT8AQVwmRNey1vAViP0
D22iQEGaMxC58Rjjz1Gcl3PqkjF21bj1X4jfCImY/gYxfLvFcDdQvmcOVtVs3SVc7S/DUinsG4L9
d6DpFviuj/Pk4QOqqmtwewPiURCxGyJl3nwp88zH5hayQ1tZl5hNV98nLFQAq5ZDKD+8jL0DcP/O
MBWVNVS6TKl0KwvLAiJffDNL7F7BViuksutYE5/FqV4Lp9NWOvss/NT3IR8pO9fuQnvyBFWuIKno
B3IlbhFZ6pMjnze9QVljHmvqZ3Dur1VsPvgmn9ZNZ21ixoSdAqWKlsX0XPuHHTur+PVqmkvGfC5H
bSJL1M3ns4s40/cxP/YWcuLGQn64aaEjbVNPaKPQJdwbhO+THWzb7iR5/BQDww+4ne7gYsiKLPXK
yGKPUKwKC6uFoz3zWJ14nSJlp1jlV9fOw7HDx5ZtDoKxRhr2tXH97F4YbuO8qQAq3lfK17KrIX57
8y1KG15jiU8ocsrJyTOtdmcBnXs2wnfvkDle2vqzWYSsVK+gtUINU9vZ3zuT0qZpmqyb5q71vCdV
TkO2VrjVVvJbHHaaK0podpT8VzMJ0LI75YwaKsVO6dTA5eqZpwLaq4smIJO6GC3R+xfiXSV9qL+v
ECL/Ak6IIfRrg51ZAAAAAElFTkSuQmCC')
	#endregion
	$button_search.Location = '300, 30'
	$button_search.Name = 'button_search'
	$button_search.Size = '75, 24'
	$button_search.TabIndex = 10
	$button_search.Text = 'Search'
	$button_search.TextImageRelation = 'ImageBeforeText'
	$button_search.UseVisualStyleBackColor = $True
	$button_search.add_Click($button_search_Click)
	#
	# textbox_search
	#
	$textbox_search.Location = '8, 33'
	$textbox_search.Name = 'textbox_search'
	$textbox_search.Size = '286, 20'
	$textbox_search.TabIndex = 9
	$textbox_search.Text = 'Search'
	$textbox_search.add_Click($textbox_search_Click)
	$textbox_search.add_KeyPress($textbox_search_KeyPress)
	#
	# tabpage_debug
	#
	$tabpage_debug.Controls.Add($button_getvariablesfilter)
	$tabpage_debug.Controls.Add($button_listvariables)
	$tabpage_debug.Controls.Add($textbox_debug)
	$tabpage_debug.Controls.Add($button_debug)
	$tabpage_debug.ImageIndex = 8
	$tabpage_debug.Location = '4, 22'
	$tabpage_debug.Name = 'tabpage_debug'
	$tabpage_debug.Padding = '3, 3, 3, 3'
	$tabpage_debug.Size = '1264, 91'
	$tabpage_debug.TabIndex = 11
	$tabpage_debug.Text = 'Debug'
	$tabpage_debug.UseVisualStyleBackColor = $True
	#
	# button_getvariablesfilter
	#
	$button_getvariablesfilter.ForeColor = 'Black'
	#region Binary Data
	$button_getvariablesfilter.Image = [System.Convert]::FromBase64String('
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
kJA/exyhBPX6kMwAAAAASUVORK5CYII=')
	#endregion
	$button_getvariablesfilter.Location = '145, 35'
	$button_getvariablesfilter.Name = 'button_getvariablesfilter'
	$button_getvariablesfilter.Size = '150, 24'
	$button_getvariablesfilter.TabIndex = 4
	$button_getvariablesfilter.Text = 'Get Variables (Filtered)'
	$button_getvariablesfilter.TextImageRelation = 'ImageBeforeText'
	$button_getvariablesfilter.UseVisualStyleBackColor = $True
	$button_getvariablesfilter.add_Click($button_getvariablesfilter_Click)
	#
	# button_listvariables
	#
	$button_listvariables.ForeColor = 'Black'
	#region Binary Data
	$button_listvariables.Image = [System.Convert]::FromBase64String('
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
UgjHdwaX8gf2UIwhS7FQngAAAABJRU5ErkJggg==')
	#endregion
	$button_listvariables.Location = '9, 35'
	$button_listvariables.Name = 'button_listvariables'
	$button_listvariables.Size = '130, 24'
	$button_listvariables.TabIndex = 3
	$button_listvariables.Text = 'Get Variables'
	$button_listvariables.TextImageRelation = 'ImageBeforeText'
	$button_listvariables.UseVisualStyleBackColor = $True
	$button_listvariables.add_Click($button_listvariables_Click)
	#
	# textbox_debug
	#
	$textbox_debug.AcceptsReturn = $True
	$textbox_debug.AutoCompleteMode = 'SuggestAppend'
	$textbox_debug.AutoCompleteSource = 'CustomSource'
	$textbox_debug.BackColor = 'WindowText'
	$textbox_debug.Font = 'Lucida Console, 8.25pt'
	$textbox_debug.ForeColor = 'Info'
	$textbox_debug.Location = '9, 11'
	$textbox_debug.Name = 'textbox_debug'
	$textbox_debug.Size = '512, 18'
	$textbox_debug.TabIndex = 2
	$textbox_debug.Text = '<Enter PS Command>'
	$textbox_debug.add_Click($textbox_debug_Click)
	$textbox_debug.add_KeyPress($textbox_debug_KeyPress)
	#
	# button_debug
	#
	$button_debug.ForeColor = 'Black'
	#region Binary Data
	$button_debug.Image = [System.Convert]::FromBase64String('
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
sUhhiLcHpfwD8w947NiC0pEAAAAASUVORK5CYII=')
	#endregion
	$button_debug.Location = '527, 6'
	$button_debug.Name = 'button_debug'
	$button_debug.Size = '75, 24'
	$button_debug.TabIndex = 1
	$button_debug.Text = 'Run'
	$button_debug.TextImageRelation = 'ImageBeforeText'
	$button_debug.UseVisualStyleBackColor = $True
	$button_debug.add_Click($button_debug_Click)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 853'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Padding = '3, 0, 0, 0'
	$statusbar1.Size = '1272, 20'
	$statusbar1.TabIndex = 7
	$statusbar1.Text = 'statusbar1'
	#
	# toolstrip1
	#
	$toolstrip1.BackgroundImageLayout = 'None'
	$toolstrip1.GripMargin = '0, 0, 0, 0'
	$toolstrip1.GripStyle = 'Hidden'
	[void]$toolstrip1.Items.Add($textbox_computername)
	[void]$toolstrip1.Items.Add($toolstripseparator11)
	[void]$toolstrip1.Items.Add($button_Check)
	[void]$toolstrip1.Items.Add($toolstriplabel2)
	[void]$toolstrip1.Items.Add($toolstripseparator12)
	[void]$toolstrip1.Items.Add($textbox_username)
	[void]$toolstrip1.Items.Add($toolstripseparator10)
	[void]$toolstrip1.Items.Add($button_GetPC)
	[void]$toolstrip1.Items.Add($toolstripseparator4)
	[void]$toolstrip1.Items.Add($Toolstrip_os)
	[void]$toolstrip1.Items.Add($Toolstrip_OSStatus)
	[void]$toolstrip1.Items.Add($toolstripseparator2)
	[void]$toolstrip1.Items.Add($toolstrip_home)
	[void]$toolstrip1.Items.Add($toolstrip_home_status)
	[void]$toolstrip1.Items.Add($toolstripseparator1)
	[void]$toolstrip1.Items.Add($toolstrip_user)
	[void]$toolstrip1.Items.Add($toolstrip_user_status)
	$toolstrip1.Location = '0, 24'
	$toolstrip1.Name = 'toolstrip1'
	$toolstrip1.Padding = '5, 0, 5, 0'
	$toolstrip1.RenderMode = 'Professional'
	$toolstrip1.Size = '1272, 26'
	$toolstrip1.TabIndex = 6
	$toolstrip1.Text = 'toolstrip1'
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($FileToolStripMenuItem)
	[void]$menustrip1.Items.Add($toolstripmenuitem1)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Padding = '5, 2, 0, 2'
	$menustrip1.RenderMode = 'Professional'
	$menustrip1.Size = '1272, 24'
	$menustrip1.TabIndex = 0
	$menustrip1.Text = 'menustrip1'
	#
	# toolstriplabel2
	#
	$toolstriplabel2.Name = 'toolstriplabel2'
	$toolstriplabel2.Size = '0, 23'
	#
	# FileToolStripMenuItem
	#
	[void]$FileToolStripMenuItem.DropDownItems.Add($toolsToolStripMenuItem)
	[void]$FileToolStripMenuItem.DropDownItems.Add($optionsToolStripMenuItem)
	[void]$FileToolStripMenuItem.DropDownItems.Add($quitToolStripMenuItem)
	$FileToolStripMenuItem.Name = 'FileToolStripMenuItem'
	$FileToolStripMenuItem.Size = '37, 20'
	$FileToolStripMenuItem.Text = 'File'
	#
	# button_Check
	#
	$button_Check.BackColor = 'Transparent'
	$button_Check.BackgroundImageLayout = 'None'
	$button_Check.ForeColor = 'Desktop'
	#region Binary Data
	$button_Check.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAG0SURBVDhPxVJtK0NhGN6P8Q8kYdsh8xd8ky/4
QGos2WjvK4pIfJRpFMU2Lzsv28hstlrblCLCVpLVDGOW1w+X5znbULPxzVV3p3Oe+7rvc13PJfkX
2OatCIXCrsJrZTQaOcj1LGSk6vQC7Iuz2I9GoepTotBSHpQYuAaEC2AtDqycATU6N7SqHkquzneV
QZOJh+2cEAYdWDh8g8b3BKU3h+nYM+Tmrd+3yww8rJEMxmNArdqOsdAduvl7GH03oMMLbaWgh1I9
h6M9AfU6FiP+dEKz+4qGIScG3Eko2SSazWUGUM3WU2Dp6DFep3WJOhnyzbKdSnTxD2B0G2hfvUCL
RSgdQN0OpqlmO0YjwEQwnaBkclQtJc+pYAqtzltCFreXGsgYWDiJaUvH76LmYf8rBj2XCfpXJ0E3
GKMARX7zz+7LDRzmDl6g9b9gJpIlmh3o8eTQsRyPN5o+ieWvrt7gxmQ4B7V4XVkYd9JgtOto28wU
N1eGgySsloRERRzv9WTRyWXQy15BkXe8cmhotmk8acIYsxfN5CoVZq7odmUyhYsXAqp+MdtFnd/r
T6gi9efmL0gkHz/KK4p1BUlkAAAAAElFTkSuQmCC')
	#endregion
	$button_Check.ImageAlign = 'MiddleRight'
	$button_Check.ImageTransparentColor = 'White'
	$button_Check.Name = 'button_Check'
	$button_Check.Size = '60, 23'
	$button_Check.Text = 'Check'
	$button_Check.TextImageRelation = 'TextBeforeImage'
	$button_Check.add_Click($button_check_click)
	#
	# toolstripmenuitem1
	#
	[void]$toolstripmenuitem1.DropDownItems.Add($aboutToolStripMenuItem)
	$toolstripmenuitem1.Name = 'toolstripmenuitem1'
	$toolstripmenuitem1.Size = '24, 20'
	$toolstripmenuitem1.Text = '?'
	#
	# aboutToolStripMenuItem
	#
	$aboutToolStripMenuItem.Name = 'aboutToolStripMenuItem'
	$aboutToolStripMenuItem.Size = '152, 22'
	$aboutToolStripMenuItem.Text = 'About'
	$aboutToolStripMenuItem.add_Click($aboutToolStripMenuItem_Click)
	#
	# textbox_username
	#
	$textbox_username.Name = 'textbox_username'
	$textbox_username.Size = '100, 26'
	$textbox_username.Text = 'Username'
	$textbox_username.TextBoxTextAlign = 'Center'
	$textbox_username.add_KeyPress($textbox_username_KeyPress)
	$textbox_username.add_Click($textbox_username_Click)
	#
	# button_GetPC
	#
	$button_GetPC.DisplayStyle = 'Text'
	#region Binary Data
	$button_GetPC.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button_GetPC.ImageTransparentColor = 'Magenta'
	$button_GetPC.Name = 'button_GetPC'
	$button_GetPC.Size = '47, 23'
	$button_GetPC.Text = 'Get PC'
	$button_GetPC.add_Click($button_GetPC_Click)
	#
	# toolstripseparator10
	#
	$toolstripseparator10.Name = 'toolstripseparator10'
	$toolstripseparator10.Size = '6, 26'
	#
	# quitToolStripMenuItem
	#
	$quitToolStripMenuItem.Name = 'quitToolStripMenuItem'
	$quitToolStripMenuItem.Size = '152, 22'
	$quitToolStripMenuItem.Text = 'Beenden'
	$quitToolStripMenuItem.add_Click($quitToolStripMenuItem_Click)
	#
	# toolstripseparator4
	#
	$toolstripseparator4.Name = 'toolstripseparator4'
	$toolstripseparator4.Size = '6, 26'
	#
	# toolsToolStripMenuItem
	#
	[void]$toolsToolStripMenuItem.DropDownItems.Add($aDExplorerToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($nirLauncherToolStripMenuItem1)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($procexpToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($procmonToolStripMenuItem)
	#region Binary Data
	$toolsToolStripMenuItem.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKmSURBVDhPpZJZSJRRFIBvWmmmhr2YplAT
CCW0UikkURG+JVFptEAkJpGYiDMu45qmaWZoLhDVQ76UFEN7zjhaYpYNmgsY2Kg1Lo1jpWkiFvR1
f39UDB+CDnw/h3PP/bj33F8A/4X6kVF889bTlPwC9IVF6K9cXRi5pvTI3ifTm5SYEVy+Z1CSbf9C
odqrhiJ44SKq6mRa6yQwL5YsmU+trNU5C+plT4OkUfJKiI5ZgdlFMFheQrcuVhJHd2IcPUnx9CSr
9OrO050Qy82yCvTF5aSVVFASc049xYxgqLyYppXONHkI3q4QWLxdsfi6Y/Fxo9nLiRuHwqh5Y2F8
6id9Qw5evm4iu+DKb1XgJjBK1/NpHxha2zHJ3LhIrXedjiA+9zK2QTuGh4/JuVRIanYeWbn56lPU
uAr6z57AnniOPkXQ0oYjJRZ7ppah9Hi+aaPR5RXQ2WXlRX0jurQMHAf3qUNXBKalgpHrxXRpPDH7
ulLr54Y1YCU9AV7YNMsZ8BbcefyMLmsPLe/aiNMmo03NRJ+ZrZ5gWpCbRO/GVXza4odtqx8Dm30Y
DfTk8JmLZCcXYetsp7WtnY7O93z5Pob96wiJqenqDIxyiCPaSPp2+NMftAb7Tn8mtnhxPPoCLqVW
Xk1AzDMbNbdvEK1L4UxyBlkR4XNXMMoZjEaFMbRLw3DIOiaCVnMiJo9lpR9o+QHbK/vZ/2iMk1EZ
/Nq0gqlje7BGHpt7xhr5CpNHQxgP3cBE6HrYvRqna520TUJwpY0DD4YJvv+ZUwlF/N67lqkjwZjk
zzUrMHmIMUVilJjlaSyy7FHWwe4qB4ceONh79yPhR87TLOt18rpKr8ldjM0KZGyWzPvfl+cYq9cV
NRBY0ohXmqH673WJsmdWsFBoJDPNSr5ACPEHYgQRrGo3yQQAAAAASUVORK5CYII=')
	#endregion
	$toolsToolStripMenuItem.Name = 'toolsToolStripMenuItem'
	$toolsToolStripMenuItem.Size = '124, 22'
	$toolsToolStripMenuItem.Text = 'Tools'
	#
	# aDExplorerToolStripMenuItem
	#
	$aDExplorerToolStripMenuItem.Name = 'aDExplorerToolStripMenuItem'
	$aDExplorerToolStripMenuItem.Size = '139, 22'
	$aDExplorerToolStripMenuItem.Text = 'ADExplorer'
	$aDExplorerToolStripMenuItem.add_Click($aDExplorerToolStripMenuItem_Click)
	#
	# procexpToolStripMenuItem
	#
	$procexpToolStripMenuItem.Name = 'procexpToolStripMenuItem'
	$procexpToolStripMenuItem.Size = '139, 22'
	$procexpToolStripMenuItem.Text = 'Procexp'
	$procexpToolStripMenuItem.add_Click($procexpToolStripMenuItem_Click)
	#
	# procmonToolStripMenuItem
	#
	$procmonToolStripMenuItem.Name = 'procmonToolStripMenuItem'
	$procmonToolStripMenuItem.Size = '152, 22'
	$procmonToolStripMenuItem.Text = 'Procmon'
	$procmonToolStripMenuItem.add_Click($procmonToolStripMenuItem_Click)
	#
	# nirLauncherToolStripMenuItem1
	#
	$nirLauncherToolStripMenuItem1.Name = 'nirLauncherToolStripMenuItem1'
	$nirLauncherToolStripMenuItem1.Size = '139, 22'
	$nirLauncherToolStripMenuItem1.Text = 'NirLauncher'
	$nirLauncherToolStripMenuItem1.add_Click($nirLauncherToolStripMenuItem1_Click)
	#
	# optionsToolStripMenuItem
	#
	$optionsToolStripMenuItem.Name = 'optionsToolStripMenuItem'
	$optionsToolStripMenuItem.Size = '124, 22'
	$optionsToolStripMenuItem.Text = 'Optionen'
	$optionsToolStripMenuItem.add_Click($optionsToolStripMenuItem_Click)
	#
	# textbox_computername
	#
	$textbox_computername.AcceptsReturn = $True
	$textbox_computername.AcceptsTab = $True
	$textbox_computername.AutoCompleteMode = 'SuggestAppend'
	$textbox_computername.AutoCompleteSource = 'CustomSource'
	$textbox_computername.BackColor = '255, 203, 26'
	$textbox_computername.BorderStyle = 'FixedSingle'
	$textbox_computername.CharacterCasing = 'Upper'
	$textbox_computername.Font = 'Consolas, 12pt'
	$textbox_computername.Name = 'textbox_computername'
	$textbox_computername.Size = '150, 26'
	$textbox_computername.Text = 'LOCALHOST'
	$textbox_computername.TextBoxTextAlign = 'Center'
	$textbox_computername.ToolTipText = 'Geben Sie einen Computernamen ein'
	$textbox_computername.add_KeyPress($textbox_computername_KeyPress)
	$textbox_computername.add_Click($textbox_computername_Click)
	$textbox_computername.add_TextChanged($textbox_computername_TextChanged)
	#
	# Toolstrip_os
	#
	$Toolstrip_os.Font = 'Segoe UI, 9pt, style=Bold'
	$Toolstrip_os.Name = 'Toolstrip_os'
	$Toolstrip_os.Size = '0, 23'
	#
	# Toolstrip_OSStatus
	#
	$Toolstrip_OSStatus.Name = 'Toolstrip_OSStatus'
	$Toolstrip_OSStatus.Size = '0, 23'
	#
	# toolstrip_home
	#
	$toolstrip_home.Font = 'Segoe UI, 9pt, style=Bold'
	$toolstrip_home.Name = 'toolstrip_home'
	$toolstrip_home.Size = '0, 23'
	#
	# toolstrip_home_status
	#
	$toolstrip_home_status.Name = 'toolstrip_home_status'
	$toolstrip_home_status.Size = '0, 23'
	$toolstrip_home_status.add_Click($toolstrip_home_status_Click)
	#
	# toolstrip_user
	#
	$toolstrip_user.Font = 'Segoe UI, 9pt, style=Bold'
	$toolstrip_user.Name = 'toolstrip_user'
	$toolstrip_user.Size = '0, 23'
	#
	# toolstrip_user_status
	#
	$toolstrip_user_status.Name = 'toolstrip_user_status'
	$toolstrip_user_status.Size = '0, 23'
	$toolstrip_user_status.add_Click($toolstrip_user_status_Click)
	#
	# toolstripseparator2
	#
	$toolstripseparator2.Name = 'toolstripseparator2'
	$toolstripseparator2.Size = '6, 26'
	$toolstripseparator2.Visible = $False
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = 'toolstripseparator1'
	$toolstripseparator1.Size = '6, 26'
	$toolstripseparator1.Visible = $False
	#
	# toolstripseparator11
	#
	$toolstripseparator11.Name = 'toolstripseparator11'
	$toolstripseparator11.Size = '6, 26'
	#
	# toolstripseparator12
	#
	$toolstripseparator12.Name = 'toolstripseparator12'
	$toolstripseparator12.Size = '6, 26'
	#
	# imagelist1
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAACyFgAAAk1TRnQBSQFMAgEBCwEAAVABAQFQAQEBEAEAARABAAT/AQkBAAj/AUIBTQE2
AQQGAAE2AQQCAAEoAwABQAMAATADAAEBAQABCAYAAQwYAAGAAgABgAMAAoABAAGAAwABgAEAAYAB
AAKAAgADwAEAAcAB3AHAAQAB8AHKAaYBAAEzBQABMwEAATMBAAEzAQACMwIAAxYBAAMcAQADIgEA
AykBAANVAQADTQEAA0IBAAM5AQABgAF8Af8BAAJQAf8BAAGTAQAB1gEAAf8B7AHMAQABxgHWAe8B
AAHWAucBAAGQAakBrQIAAf8BMwMAAWYDAAGZAwABzAIAATMDAAIzAgABMwFmAgABMwGZAgABMwHM
AgABMwH/AgABZgMAAWYBMwIAAmYCAAFmAZkCAAFmAcwCAAFmAf8CAAGZAwABmQEzAgABmQFmAgAC
mQIAAZkBzAIAAZkB/wIAAcwDAAHMATMCAAHMAWYCAAHMAZkCAALMAgABzAH/AgAB/wFmAgAB/wGZ
AgAB/wHMAQABMwH/AgAB/wEAATMBAAEzAQABZgEAATMBAAGZAQABMwEAAcwBAAEzAQAB/wEAAf8B
MwIAAzMBAAIzAWYBAAIzAZkBAAIzAcwBAAIzAf8BAAEzAWYCAAEzAWYBMwEAATMCZgEAATMBZgGZ
AQABMwFmAcwBAAEzAWYB/wEAATMBmQIAATMBmQEzAQABMwGZAWYBAAEzApkBAAEzAZkBzAEAATMB
mQH/AQABMwHMAgABMwHMATMBAAEzAcwBZgEAATMBzAGZAQABMwLMAQABMwHMAf8BAAEzAf8BMwEA
ATMB/wFmAQABMwH/AZkBAAEzAf8BzAEAATMC/wEAAWYDAAFmAQABMwEAAWYBAAFmAQABZgEAAZkB
AAFmAQABzAEAAWYBAAH/AQABZgEzAgABZgIzAQABZgEzAWYBAAFmATMBmQEAAWYBMwHMAQABZgEz
Af8BAAJmAgACZgEzAQADZgEAAmYBmQEAAmYBzAEAAWYBmQIAAWYBmQEzAQABZgGZAWYBAAFmApkB
AAFmAZkBzAEAAWYBmQH/AQABZgHMAgABZgHMATMBAAFmAcwBmQEAAWYCzAEAAWYBzAH/AQABZgH/
AgABZgH/ATMBAAFmAf8BmQEAAWYB/wHMAQABzAEAAf8BAAH/AQABzAEAApkCAAGZATMBmQEAAZkB
AAGZAQABmQEAAcwBAAGZAwABmQIzAQABmQEAAWYBAAGZATMBzAEAAZkBAAH/AQABmQFmAgABmQFm
ATMBAAGZATMBZgEAAZkBZgGZAQABmQFmAcwBAAGZATMB/wEAApkBMwEAApkBZgEAA5kBAAKZAcwB
AAKZAf8BAAGZAcwCAAGZAcwBMwEAAWYBzAFmAQABmQHMAZkBAAGZAswBAAGZAcwB/wEAAZkB/wIA
AZkB/wEzAQABmQHMAWYBAAGZAf8BmQEAAZkB/wHMAQABmQL/AQABzAMAAZkBAAEzAQABzAEAAWYB
AAHMAQABmQEAAcwBAAHMAQABmQEzAgABzAIzAQABzAEzAWYBAAHMATMBmQEAAcwBMwHMAQABzAEz
Af8BAAHMAWYCAAHMAWYBMwEAAZkCZgEAAcwBZgGZAQABzAFmAcwBAAGZAWYB/wEAAcwBmQIAAcwB
mQEzAQABzAGZAWYBAAHMApkBAAHMAZkBzAEAAcwBmQH/AQACzAIAAswBMwEAAswBZgEAAswBmQEA
A8wBAALMAf8BAAHMAf8CAAHMAf8BMwEAAZkB/wFmAQABzAH/AZkBAAHMAf8BzAEAAcwC/wEAAcwB
AAEzAQAB/wEAAWYBAAH/AQABmQEAAcwBMwIAAf8CMwEAAf8BMwFmAQAB/wEzAZkBAAH/ATMBzAEA
Af8BMwH/AQAB/wFmAgAB/wFmATMBAAHMAmYBAAH/AWYBmQEAAf8BZgHMAQABzAFmAf8BAAH/AZkC
AAH/AZkBMwEAAf8BmQFmAQAB/wKZAQAB/wGZAcwBAAH/AZkB/wEAAf8BzAIAAf8BzAEzAQAB/wHM
AWYBAAH/AcwBmQEAAf8CzAEAAf8BzAH/AQAC/wEzAQABzAH/AWYBAAL/AZkBAAL/AcwBAAJmAf8B
AAFmAf8BZgEAAWYC/wEAAf8CZgEAAf8BZgH/AQAC/wFmAQABIQEAAaUBAANfAQADdwEAA4YBAAOW
AQADywEAA7IBAAPXAQAD3QEAA+MBAAPqAQAD8QEAA/gBAAHwAfsB/wEAAaQCoAEAA4ADAAH/AgAB
/wMAAv8BAAH/AwAB/wEAAf8BAAL/AgAD/wIAAfMLAAHzAwAB/w3zAf8DAAH0AfMB9BsAAesB/wIA
Af8B9AHzAfQB/wIAAf8B6wMAAbwBRgFMAQ8BWAEPAXkBDwGdAZEBswEPAqcBvAMAAXMBLgFzBgAD
8xIAAeoB8QH/AfMBvAFLASQBSwG8AfMB/wHxAeoDAAElAUYBTQERAVkBQwF+AUMBwQG6AdoBEQHm
AacBhgMAAS4BNgEvAfMB9AMAAfMBUQFLAVEB8xEAAhIB8wEqASQBKwEkASsCJAHzAhIDAAElAUwB
TQERAVkBQwF+AREBwQG6AdoBEQHOAc8BhgPzAS4BVwEvAS4BeAPzAVIBdAFTARoBUhEAAfEBSgEk
ATEBKgFSASQBUgEkASsBJAFKAfEDAAElARcBTQERAVkBQwF+AUMBwQG6AdoBEQHOAc8BhgEvAy4B
WAEvAi4BUALsAe0B9wGZAcMBUhIAASoBKwFSASsBUwEkAVMBKgFSAioEAAElAW8BTQFDAVkBFQF+
ARUBwQG6AdoBQwHOAc8BhgEuB1gBLgH0Ae8B7AHvAfMBGgFSEgABJAFMAXoBTAF6ASQBegFMAXoB
TAEkBAABJQFvAU0BFQFZARUBfgEVAcEBugHaARUBzgHPAYYBHAMvAXkBUAIvAi4BUAHxAewB8AFS
EQAB8wH0ASQBUgGaAVIBmgElAZoBUgGaAVIBJAH0AfMCAAElARYBTQEVAVkBFAF+ARQBwQG6AdoB
FQHmAbUBhgIAAi4BeQEvBFgBLgEZAe8B7BIAAesB9wEkAXUBmgJMASsCTAGaAXQBJAH3AesCAAEl
AZQBTQEUAXoBFAF+ARQBwQG6AdsBFAHmAbUBhgIAAVABLgF+AS8BeQMuAVAB3AH0AewSAAHxAW0B
JAIrAXQDegF0AUwBKwEkAW0B8QIAASUBlAHjARQBegETAX4BFAHBAboB2wEUAeYBtQGGAgAB7QFQ
Ai4BeQEuAuEC3AH/AewTAAH/ASQDegNTA3oBJAH/AwABJQEaAXUBEwF6ARIBnwETAcEBugHbARMB
5gEJAYYCAAHtAf8B1QEuAX4BLgEJA9wB/wHsEwABvAEjAUwHUgErASMBvAMAASUBGgF1ARIBegES
AZ8BEgHBAbsB2wETAdUBvAGGAgAB7AH/AdUCLgFQAQkD3AH2AewTAAISAUsBKgUrASoBSwISAwAB
JQG9AXUBEgF6ARIBnwESAcEBuwHbARIB1QHxAYYCAAEHAbwBGQHbAfQCGQEJAboBGQG8AQcTAAFt
AgABvAFLAiQBIwFLAbwCAAFtAwABJQEaAXUBEgF6ARIBnwESAcEBuwHbARIB1gHyAYYCAAH/Ae0B
/wEZArQCugEZAf8B7QH/EwAB6wMAARMB9wHsAeoBEQMAAesDAAElARoB9AG8AfYBvAH2AbwC/wH0
AbwB9AHdAYYDAAH/AZIBvAT/AbwB7QH/GAAB9wEUARUBQwH3BwABGwElAUwB6gFSAeoBVwHqAZ0B
kAGzARIBpwGGAfEEAAH/AbwE7QG8Af8dAAH/AbwB8AHyAQcB/wMAAf8B9AjzAfQB/wIAAfQO8wH0
AQABvAGLCoYBiwG8AfQIAAH/AfMB7AETAeoB7AHyAf8BAAH/AfAB7AEUBkMBFAHsAfAB/wEAAQcO
9wEHAbwBtAGuAc8BrgGLAa4CtAWLAbQBBwgAAbwB7AHqAuwBbQHsAQcBAAHvARUBEgHrAewB7QL3
Ae0B7AHrAeoBFQHvAQAB9w7/AfcBiwGuAYsBrgGGAYsCrgKLAbQEhgGLCAAB8wHqAewC9AHtAeoB
8gEAARUB6gFtAesB7AHtAZIB7QPsAesBbQEVAQAB9wH/AbQKrQG0Af8B9wOGBP8BtQX/AmYBhggA
AfIBEwHrAfMB9AHtARMB8QEAARUB6gFtAesC7AGSAe0C7ALrAW0BFQEAAfcB/wGtCrQBrQH/AfcB
hgJmAf8DiwGuBf8BhgFmAYYDAAH/AfMB8AH/AQABvAHsAeoC7AHqAewBBwEAAUMB6gFtAesC7AGS
Ae0C7AHrAm0BQwEAAfcB/wG0Cq0BtAH/AfcBhgJmAf8DiwGuBf8BZgKGAQAC9AH/Ae8BbQHzAf8B
8gH0AewBEwESAewB8wH/AQABQwFtAZIBBwHyBPEB8gG8AZIBbQFDAQAB9wz/AfYB/wH3A4YB/wGL
Av8BiwL/AfIC/wGLAa4BhgEAAfcBEgHsARIBQwLsAUMB8gG8AfIB8wEHAf8CAAHtAfABkgHsAm0C
6wJtAewBkgHwAe0BAAH3Af8BFAHqAusB6gETAf8F9AH/AZIBhgKLAf8EiwGuAYYBZgGLAYYCiwGG
AQAB8gETAUMBEwESARQBQwHsAf8HAAHsARUBEwFtAewB7QGSAe0C7AFtARIBFAHsAQAB9wz/AfQB
/wH3AYYCiwH/AYsC/wGLAa4D/wGGAs8BhgH0AfABEwHsAfIB9AEHARQB7AHzAv8FAAEVAm0B6wLs
AZIB7QLsAusBbQEVAQAB9wH/ARQBEgHqAm0C6wJtAeoBEgEUAf8B9wGGAq4B/wSLAWYD/wFmAc8B
tAGGAewBEgEUAQcB/wEAAfQB6gFDAesB8AH/BQABFQHqAW0B6wLsAZIB7QLsAesCbQFDAQAB9w7/
AfcBhgLPAf8BrQL/Ac8BtQP/Ac8BtAG1AYYBBwHsARQB9wH0Af8B8gISAe8B8wH/BQABQwHqAZIB
BwbxAQcBkgFtAUMBAAH3Af8BFAESAeoCbQPrAW0B6gESARQB/wH3AYYCzwH/Aa0DzwH/Aa4BiwG0
A7UBhgH/AfIBEwESAfcBBwHsARUB7AL/BgABQwHwAe8BkgbsAZIB7wHwAUMBAAH3Af8M8wH/AfcB
hgK0Af8BtAPPAf8FtQEJAYYBAAEHBhQBEgHzBwABQwzsAUMBAAH3Af8M8gH/AfcBiwK0AYsBhgG1
AfMC/wW1AQkBiwEAAfEBBwHyAewBEwG8AfIB9wH0BwABvAEUAesB7Ab3AewB6wEUAbwBAAH3Dv8B
9wG8AbsJtQO7AfABBwMAAf8BvAHsAfQLAAHzAZIBFAZDARQBkgHzAgAB7wL3CpIC9wHvAQAB8QGL
CoYBiwHxAwAB9ArzAfQFAAH/BPMB/wgADvMEAAHzAQAB8wH/AfMBAAHzAQAB8wEAAfMEAAHvAewB
7QbrAe0B7AHvBQABBwSRAQcG8wH0AQADEgITBFICEwMSAwAB9AF0AfMBdAHyAXQB8wF0AfMBdAHz
AXQB9AMAAewCBwEkBFIBJAIHAewCAAH0AvMBkQG1ArsBtQeRAfcBAAPsAusBUgKgAVIC6wPsAgAB
8wH3AeoJbQHqAfcB8wIAAewB9gH/ASQEUgEkAf8B9gHsAgAB7wSRAq4EkQH3AgcBvAGRBgABmgJS
AZoHAAF0AuoJEgLqAXQCAAHtAQgBvAEkAXQCUgF0ASQBvAEIAe0CAAGRAbsB/wb0Af8BuwGRAQcB
uwG8AZECAAH0BPMBbQEUBPMB9AMAAfMB6gFtCRIBbQHqAfMCAAHtAQgB8AEkAXkCKwF5ASQB8AEI
Ae0CAAGRAbsBswLUAtoC1AGzAQcBkQEHAbsBvAGRAgABBwrvAQcDAAF0AeoB6wESBBMEEgHrAeoB
dAIAAe0BGgHwASoBmQIrAZkBKgHwARoB7QIAAZEBvAGzBtQBswG8AZECCQHwAZECAAHvCv8B7wMA
AfIB6gHrARMB8QEHAf8BvAFtAxIB6wHqAfMBAAH0AZIBGwHwASoBmQIaAZkBKgHwARsBkgH0AQAB
kQHwArMB1AHaBNsBvAGRAi4BGQGRAgAB7wP/AW0C6wFtA/8B7wMAAXQB6gHsARMEFAETAhIBEwHs
AeoBdAEAAXQB9wHzAfABUgQqAVIB8AHzAfcBdAEAAZEB8gOzAdQD2wHVAfABkQI1AfMBkQIAAe8D
/wRtA/8B7wMAAfMB6gHsARQB8QK8AZIEEwHsAeoB8wEAASQBSwH/BxsB8AH/AUsBJAEAAZEB8wGs
BLMDtAHxAZECtQHzAZECAAHvAf8BbQESBOoBEgFtAf8B7wMAAXQB6gHtBhQDEwHtAeoBdAIAASoB
UQMbAccBpgMbAVEBKgIAAZEI9ALzAZECGQHzAZECAAHvAf8BFAETBBIBEwEUAf8B7wMAAfMB6gGS
ARQB8QG8Ae8CvAHwAhQBkgHqAfMCAAIqAVIB9AEbAq0BGwH0AVIBJAMAAQcG7QSRA7UB8wGRAgAB
7wH/AUMBFQQUARUBQwH/Ae8DAAF0AeoB9wkUAfcB6gF0AgABKgFSASoBUgH2AvQB/wFSASQB9woA
AZEB9AXxAfQBkQIAAe8B/wEQAUMBcwJDAXMBQwEQAf8B7wMAAfMB6gHvARUIFAHvAeoB8wIAAXkC
KwEqAVIC/wFSASoB8wGSCgABkQH0AQkCvAIJAfQBkQIAAe8B/wEPARABcwIQAXMBEAEPAf8B7wMA
AXQB6gHvAewH7QHsAe8B6gF0BgABKgJSASoB9wEbAZIKAAGRB/8BkQIAAe8B9Aj/AfQB7wQAAe8L
6gHvCAACKwEAAbwB9wG8CgABBweRAQcCAAG8Cu8BvAUAAVIBAAFSAQABUgEAAVIBAAFSAQABUgIA
AUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEBAAEBBQABgAEBFgAD/wEAAb8B+wGAAQAB4wH/AgAB
mAEzAYABAAHjAfECAAGAAQMBgAEAAuACAAGAAQMBgAUAAYABAwGABQABwAEHAYAFAAHAAQcBgAIA
AQEDAAEBAYABAAHAAQMDAAEBAYABAAHAAQMDAAEBAYABAAHAAQMCAAGAAQMBgAEAAcABAwIAAYAB
AwGAAQABwAEDAgABgAEDAYABAAHAAQMCAAGwARsBgAEAAcABAwIAAbgBOwGAAQAB4AEHAgAB+AE/
AYABAAHwAQ8CAAH/AYEBwAEDAgABgAEAAf8BAAGAAQEEAAH/AQABgAEBBAAB/wEAAYABAQQAAf8B
AAGAAQEEAAHhAQABgAEBBAABgAEAAYABAQQAAYABAQGAAQEEAAGAAT8BgAEBBQABDwGAAQEEAAEE
AQ8BgAEBBQABDwGAAQEFAAEfAYABAQQAAYABPwGAAQEEAAGAAT8BgAEBBAAB4QH/AcABAwIAAYAB
AQHAAQMB4AF/AYABAQHoAasBwAEDAeABAAGAAQEBwAEBAcABAwIAAYABAQGAAQABwAEDAgAB/AE/
AYABAAHAAQMCAAHAAQMBgAEAAcABAwIAAcABAwGAAQABwAEDAgABwAEDAYABAAGAAQECAAHAAQMB
gAEAAYABAQIAAcABAwGAAQABgAEBAgABwAEDAYABAAHAAQMCAAHAAQMBgAEAAcABBwIAAcABAwGA
AQABwAEHAf4BAAHAAQMBgAEAAcABBwH+AQABwAEDAYABAAH8AQcB/gEAAcABAwHAAQEB/gFHAf4B
AAHAAQMB6gGrCw=='))
	#endregion
	$imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist1.TransparentColor = 'Transparent'
	#
	# contextmenustrip1
	#
	$contextmenustrip1.Name = 'contextmenustrip1'
	$contextmenustrip1.Size = '61, 4'
	#
	# folderbrowserdialog1
	#
	$menustrip1.ResumeLayout()
	$toolstrip1.ResumeLayout()
	$tabpage_debug.ResumeLayout()
	$tabpage11.ResumeLayout()
	$groupbox17.ResumeLayout()
	$groupbox18.ResumeLayout()
	$tabpage10.ResumeLayout()
	$groupbox23.ResumeLayout()
	$tabpage8.ResumeLayout()
	$groupbox22.ResumeLayout()
	$tabpage6.ResumeLayout()
	$groupbox4.ResumeLayout()
	$groupbox8.ResumeLayout()
	$tabpage5.ResumeLayout()
	$groupbox20.ResumeLayout()
	$groupbox21.ResumeLayout()
	$chart1.EndInit()
	$tabpage4.ResumeLayout()
	$groupbox19.ResumeLayout()
	$tabpage3.ResumeLayout()
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox5.ResumeLayout()
	$groupbox6.ResumeLayout()
	$groupbox7.ResumeLayout()
	$groupbox16.ResumeLayout()
	$tabpage2.ResumeLayout()
	$groupbox9.ResumeLayout()
	$groupbox11.ResumeLayout()
	$groupbox12.ResumeLayout()
	$groupbox13.ResumeLayout()
	$groupbox14.ResumeLayout()
	$groupbox15.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol_Home.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	
	# Configuration	
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!C O N F I G U R A T I O N!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	
	# Snapins
	Add-PSSnapin Quest.ActiveRoles.ADManagement
	Import-module grouppolicy
	Import-Module CimCmdlets
	Import-Module ActiveDirectory
	
	# PowershellToolkit information
	$ApplicationName = "Powershell Toolkit"
	$ApplicationVersion = "3.0.0.1"
	$ApplicationLastUpdate = "17.11.2015"
	
	# Author Information
	$AuthorName = "Renato Bacchi"
	$AuthorEmail 		= "admin@renatobacchi.ch"
	$AuthorWWW			= "http://www.renatobacchi.ch"
	
	# Text to show in the Status Bar when the form load
	$StatusBarStartUp = "$ApplicationName - $ApplicationVersion - (c) Renato Bacchi - $AuthorWWW"
	
	# Title of the MainForm / Mainform Titel
	$domain = $env:userdomain.ToUpper()
	$MainFormTitle = "$ApplicationName $ApplicationVersion - Last Update: $ApplicationLastUpdate - $domain\$env:username"
	
	# Font Styles / Schrift Stile
	$bold = New-Object Drawing.Font("Lucida Console", 8, [Drawing.Fontstyle]::Bold)
	$norm = New-Object Drawing.Font("Lucida Console", 8, [Drawing.Fontstyle]::Regular)
	$log = New-Object Drawing.Font("Lucida Console", 1, [Drawing.Fontstyle]::Regular)
	[Drawing.Color]$gray = "Control"
	[Drawing.Color]$green = "Green"
	[Drawing.Color]$red = "Red"
	[Drawing.Color]$black = "Black"
	$global:Fillchar = 178
	$Newline = "`n"
	$Newline2 = "`n`n"
	
	## Environment Variables / Umgebungsvariablen
	if (Test-Path "C:\Program Files (x86)") { $global:Programfiles = "C:\Program Files (x86)" }
	else { $global:Programfiles = "C:\Program Files" }
	$cmd = "cmd.exe"
	
	# Folder / Ordner
	$global:Profilefolder = ""
	$global:Homefolder = ""
	$global:Outfile = $pwd
	$global:Confpath = $env:APPDATA += "\Powershell Toolkit\"
	
	# SCCM
	$global:SCCMEnabled = "true"
	$global:SiteName = ""
	$global:SCCMServer = ""
	$global:SCCMNameSpace = "root\sms\site_$SiteName"
	$global:CmRCViewer = "$global:Programfiles\ConfigMgr\bin\i386\CmRcViewer.exe"
	
	# External Tools
	$global:Nirlauncher = "$global:Programfiles\Nirsoft"
	$global:Sysinternals = "$global:Programfiles\Sysinternals"
	
	# Language / Sprache
	Import-LocalizedData -BindingVariable lang -FileName Language
	# Loading Lang-Variables because $lang.xyz does not work in AddRichtTextbox -Text if there
	# are multiple Variables, bc. those are not strings but hashtablekeys
	# Maybe these should be change to something like global:langfolder and so on, so the code would be more readable
	$global:ChangePasswordAtLogon = $lang.ChangePasswordAtLogon
	$global:CheckComputerGroups = $lang.CheckComputerGroups
	$global:CheckConn = $lang.CheckConn
	$global:ComputerNotFound = $lang.ComputerNotFound
	$global:ComputerOfflineOrWrong = $lang.ComputerOfflineOrWrong
	$global:Cycle1 = $lang.Cycle1
	$global:Cycle2 = $lang.Cycle2
	$global:Cycle3 = $lang.Cycle3
	$global:Cycle4 = $lang.Cycle4
	$global:Cycle5 = $lang.Cycle5
	$global:Cycle6 = $lang.Cycle6
	$global:Cycle7 = $lang.Cycle7
	$global:Cycle8 = $lang.Cycle8
	$global:Cycle9 = $lang.Cycle9
	$global:DestinationComputer = $lang.DestinationComputer
	$global:DnsConf = $lang.DnsConf
	$global:DoYouWantToTransfer = $lang.DoYouWantToTransfer
	$global:EnterCommand = $lang.EnterCommand
	$global:EnterDestinationComputer = $lang.EnterDestinationComputer
	$global:EnterPassword = $lang.EnterPassword
	$global:EnterSourceComputer = $lang.EnterSourceComputer
	$global:EnterUsername = $lang.EnterUsername
	$global:ErrorUnlocking = $lang.ErrorUnlocking
	$global:FolderPathInputBoxMsg = $lang.FolderPathInputBoxMsg
	$global:FolderPathInputBoxTitle = $lang.FolderPathInputBoxTitle
	$global:FollowingLocked = $lang.FollowingLocked
	$global:LockedUser = $lang.LockedUser
	$global:NetConf = $lang.NetConf
	$global:NoInputDetected = $lang.NoInputDetected
	$global:NoUserUnlocked = $lang.NoUserUnlocked
	$global:NoUsersLocked = $lang.NoUsersLocked
	$global:NotExistinginAD = $lang.NotExistinginAD
	$global:PSRnotEnabled = $lang.PSRnotEnabled
	$global:PasswordResetOK = $lang.PasswordResetOK
	$global:Please = $lang.Please
	$global:RegKeySet = $lang.RegKeySet
	$global:RemoteCommandSent = $lang.RemoteCommandSent
	$global:RunRemoteCMD = $lang.RunRemoteCMD
	$global:ShowFolderRights = $lang.ShowFolderRights
	$global:ShowLocalAdminsOf = $lang.ShowLocalAdminsOf
	$global:ShowingComputergroupsOf = $lang.ShowingComputergroupsOf
	$global:ShowingLastPC = $lang.ShowingLastPC
	$global:SourceComputer = $lang.SourceComputer
	$global:TransferComputerGroups = $lang.TransferComputerGroups
	$global:Transferring = $lang.Transferring
	$global:TwoIdenticalComputers = $lang.TwoIdenticalComputers
	$global:UnlockUser = $lang.UnlockUser
	$global:UnlockedOK = $lang.UnlockedOK
	$global:YouHaveEnteredTwoIdenticalComputers = $lang.YouHaveEnteredTwoIdenticalComputers
	$global:checkHomeRights = $lang.checkHomeRights
	$global:checkProfileRights = $lang.checkProfileRights
	$global:configFolderExisting = $lang.configFolderExisting
	$global:configFrom = $lang.configFrom
	$global:createConfigError = $lang.createConfigError
	$global:created = $lang.created
	$global:existing = $lang.existing
	$global:folder = $lang.folder
	$global:loaded = $lang.loaded
	$global:openPSRS = $lang.openPSRS
	$global:starting = $lang.starting
	# Languagefiles Language.psd1 in Folders, e.g. \de-DE\ with Variables and Strings
	
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion Configuration
	
	# Adder Functions
	
	#region Add-ListViewItem
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[int]$ImageIndex = -1,
			[string[]]$SubItems,
			[System.Windows.Forms.ListViewGroup]$Group,
			[switch]$Clear)
		
		if ($Clear)
		{
			$ListView.Items.Clear();
		}
		
		if ($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{
				$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if ($SubItems -ne $null)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if ($Group -ne $null)
				{
					$listitem.Group = $Group
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if ($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($Group -ne $null)
			{
				$listitem.Group = $Group
			}
		}
	}
	#endregion
	
	#region Add-RichTextBox
	# Function - Add Text to RichTextBox
	function Add-RichTextBox
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.AppendText($timestamp)
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#Set-Alias artb Add-RichTextBox -Description "Add content to the RichTextBox"
	#endregion
	
	#region Add-RichtextBoxOK
	function Add-RichTextBoxOK
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Green
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#endregion RichtextBoxOK
	
	#region Add-RichtextBoxTitle
	function Add-RichTextBoxTitle
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#endregion RichtextBoxWarn
	
	#region Add-RichtextBoxWarn
	function Add-RichTextBoxWarn
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Red
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
		
	}
	#endregion RichtextBoxWarn
	
	# Clearer Functions
	
	#region Clear-Chart
	function Clear-Chart
	{
	<#
		.SYNOPSIS
			This function clears the contents of the chart
	
		.DESCRIPTION
			Use the function to remove contents from the chart control
	
		.PARAMETER  ChartControl
			The Chart Control to clear
	
		.PARAMETER  LeaveSingleChart
			Leaves the first chart and removes all others from the control
		
		.LINK
			http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Position = 1, Mandatory = $true)]
			[System.Windows.Forms.DataVisualization.Charting.Chart]
			$ChartControl
			,
			[Parameter(Position = 2, Mandatory = $false)]
			[Switch]$LeaveSingleChart
		)
		
		$count = 0
		if ($LeaveSingleChart)
		{
			$count = 1
		}
		
		while ($ChartControl.Series.Count -gt $count)
		{
			$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
		}
		
		while ($ChartControl.ChartAreas.Count -gt $count)
		{
			$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
		}
		
		while ($ChartControl.Titles.Count -gt $count)
		{
			$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
		}
		
		if ($ChartControl.Series.Count -gt 0)
		{
			$ChartControl.Series[0].Points.Clear()
		}
	}
	#endregion Clear-Chart
	
	# Getter Functions
	
	#region Get-ComputerTxtBox
	function Get-ComputerTxtBox
	{ $global:ComputerName = $textbox_computername.Text }
	#endregion
	
	#region Get-DiskSpace
	
	function Get-DiskSpace
	{
		
		    <#
		        .Synopsis  
		            Gets the disk space for specified host
		            
		        .Description
		            Gets the disk space for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the diskspace from (Default is localhost.)
		            
		        .Example
		            Get-Diskspace
		            # Gets diskspace from local machine
		    
		        .Example
		            Get-Diskspace -ComputerName MyServer
		            Description
		            -----------
		            Gets diskspace from MyServer
		            
		        .Example
		            $Servers | Get-Diskspace
		            Description
		            -----------
		            Gets diskspace for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-DiskSpace 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Begin
		{
			Write-Verbose " [Get-DiskSpace] :: Start Begin"
			$Culture = New-Object System.Globalization.CultureInfo("en-US")
			Write-Verbose " [Get-DiskSpace] :: End Begin"
		}
		
		Process
		{
			Write-Verbose " [Get-DiskSpace] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
				
			}
			Write-Verbose " [Get-DiskSpace] :: `$ComputerName - $ComputerName"
			Write-Verbose " [Get-DiskSpace] :: Testing Connectivity"
			if (Test-Host $ComputerName -TCPPort 135)
			{
				Write-Verbose " [Get-DiskSpace] :: Connectivity Passed"
				try
				{
					Write-Verbose " [Get-DiskSpace] :: Getting Operating System Version using - Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version"
					$OSVersionInfo = Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version -ea STOP
					Write-Verbose " [Get-DiskSpace] :: Getting Operating System returned $($OSVersionInfo.Version)"
					if ($OSVersionInfo.Version -gt 5.2)
					{
						Write-Verbose " [Get-DiskSpace] :: Version high enough to use Win32_Volume"
						Write-Verbose " [Get-DiskSpace] :: Calling Get-WmiObject -class Win32_Volume -ComputerName $ComputerName -Property `"Name`",`"FreeSpace`",`"Capacity`" -filter `"DriveType=3`""
						$DiskInfos = Get-WmiObject -class Win32_Volume                          `
												   -ComputerName $ComputerName                  `
												   -Property "Name", "FreeSpace", "Capacity"      `
												   -filter "DriveType=3" -ea STOP
						Write-Verbose " [Get-DiskSpace] :: Win32_Volume returned $($DiskInfos.count) disks"
						foreach ($DiskInfo in $DiskInfos)
						{
							$myobj = @{ }
							$myobj.ComputerName = $ComputerName
							$myobj.OSVersion = $OSVersionInfo.Version
							$Myobj.Drive = $DiskInfo.Name
							$Myobj.CapacityGB = [float]($DiskInfo.Capacity/1GB).ToString("n2", $Culture)
							$Myobj.FreeSpaceGB = [float]($DiskInfo.FreeSpace/1GB).ToString("n2", $Culture)
							$Myobj.PercentFree = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.DiskSpace')
							$obj
						}
					}
					else
					{
						Write-Verbose " [Get-DiskSpace] :: Version not high enough to use Win32_Volume using Win32_LogicalDisk"
						$DiskInfos = Get-WmiObject -class Win32_LogicalDisk                       `
												   -ComputerName $ComputerName                       `
												   -Property SystemName, DeviceID, FreeSpace, Size   `
												   -filter "DriveType=3" -ea STOP
						foreach ($DiskInfo in $DiskInfos)
						{
							$myobj = @{ }
							$myobj.ComputerName = $ComputerName
							$myobj.OSVersion = $OSVersionInfo.Version
							$Myobj.Drive = "{0}\" -f $DiskInfo.DeviceID
							$Myobj.CapacityGB = [float]($DiskInfo.Capacity/1GB).ToString("n2", $Culture)
							$Myobj.FreeSpaceGB = [float]($DiskInfo.FreeSpace/1GB).ToString("n2", $Culture)
							$Myobj.PercentFree = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.DiskSpace')
							$obj
						}
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-DiskSpace] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-InstalledSoftware
	
	function Get-InstalledSoftware
	{
		
		    <#
		        .Synopsis
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Description
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Parameter ComputerName
		            Name of the Computer to get the installed software from (Default is localhost.)
		
		        .Example
		            Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software from local machine
		
		        .Example
		            Get-InstalledSoftware -ComputerName MyServer
		            Description
		            -----------
		            Gets installed software from MyServer
		
		        .Example
		            $Servers | Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software for each machine in the pipeline
		
		        .OUTPUTS
		            PSCustomObject
		
		        .Notes
		            NAME:      Get-InstalledSoftware
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		begin
		{
			
			Write-Verbose " [Get-InstalledPrograms] :: Start Begin"
			$Culture = New-Object System.Globalization.CultureInfo("en-US")
			Write-Verbose " [Get-InstalledPrograms] :: End Begin"
			
		}
		process
		{
			
			Write-Verbose " [Get-InstalledPrograms] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
				
			}
			Write-Verbose " [Get-InstalledPrograms] :: `$ComputerName - $ComputerName"
			Write-Verbose " [Get-InstalledPrograms] :: Testing Connectivity"
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					$RegKey = Get-RegistryKey -Path "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" -ComputerName $ComputerName
					foreach ($key in $RegKey.GetSubKeyNames())
					{
						$SubKey = $RegKey.OpenSubKey($key)
						if ($SubKey.GetValue("DisplayName"))
						{
							$myobj = @{
								Name = $SubKey.GetValue("DisplayName")
								Version = $SubKey.GetValue("DisplayVersion")
								Vendor = $SubKey.GetValue("Publisher")
								Install = $SubKey.GetValue("InstallDate")
								#Uninstall = $SubKey.GetValue("UninstallString")
							}
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.SoftwareInfo')
							$obj
						}
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-InstalledPrograms] :: End Process"
			
		}
	}
	
	#endregion 	
	
	#region Get-IP 
	
	function Get-IP
	{
		
		    <#
		        .Synopsis 
		            Get the IP of the specified host.
		            
		        .Description
		            Get the IP of the specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get IP (Default localhost.)
		                
		        .Example
		            Get-IP
		            Description
		            -----------
		            Get IP information the localhost
		            
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		        
		        .Notes
		            NAME:      Get-IP
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		Process
		{
			$NICs = Get-WmiObject Win32_NetworkAdapterConfiguration -Filter "IPEnabled='$True'" -ComputerName $ComputerName
			foreach ($Nic in $NICs)
			{
				$myobj = @{
					Name = $Nic.Description
					MacAddress = $Nic.MACAddress
					IP4 = $Nic.IPAddress | where{ $_ -match "\d+\.\d+\.\d+\.\d+" }
					IP6 = $Nic.IPAddress | where{ $_ -match "\:\:" }
					IP4Subnet = $Nic.IPSubnet | where{ $_ -match "\d+\.\d+\.\d+\.\d+" }
					DefaultGWY = $Nic.DefaultIPGateway | Select -First 1
					DNSServer = $Nic.DNSServerSearchOrder
					WINSPrimary = $Nic.WINSPrimaryServer
					WINSSecondary = $Nic.WINSSecondaryServer
				}
				$obj = New-Object PSObject -Property $myobj
				$obj.PSTypeNames.Clear()
				$obj.PSTypeNames.Add('BSonPosh.IPInfo')
				$obj
			}
		}
	}
	
	#endregion 
	
	#region Get-MemoryConfiguration 
	
	function Get-MemoryConfiguration
	{
		
		    <#
		        .Synopsis 
		            Gets the Memory Config for specified host.
		            
		        .Description
		            Gets the Memory Config for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Memory Config from (Default is localhost.)
		            
		        .Example
		            Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config from local machine
		    
		        .Example
		            Get-MemoryConfiguration -ComputerName MyServer
		            Description
		            -----------
		            Gets Memory Config from MyServer
		            
		        .Example
		            $Servers | Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-MemoryConfiguration 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			Write-Verbose " [Get-MemoryConfiguration] :: Begin Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				Write-Verbose " [Get-MemoryConfiguration] :: Processing $ComputerName"
				try
				{
					$MemorySlots = Get-WmiObject Win32_PhysicalMemory -ComputerName $ComputerName -ea STOP
					foreach ($Dimm in $MemorySlots)
					{
						$myobj = @{ }
						$myobj.ComputerName = $ComputerName
						$myobj.Description = $Dimm.Tag
						$myobj.Slot = $Dimm.DeviceLocator
						$myobj.Speed = $Dimm.Speed
						$myobj.SizeGB = $Dimm.Capacity/1gb
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.MemoryConfiguration')
						$obj
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-MemoryConfiguration] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-MotherBoard
	
	function Get-MotherBoard
	{
		
		    <#
		        .Synopsis 
		            Gets the Mother Board info for specified host.
		            
		        .Description
		            Gets the Mother Board info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Mother Board info from (Default is localhost.) 
		            
		        .Example
		            Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info from local machine
		    
		        .Example
		            Get-MotherBoard -ComputerName MyOtherDesktop
		            Description
		            -----------
		            Gets Mother Board info from MyOtherDesktop
		            
		        .Example
		            $Windows7Machines | Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-MotherBoard
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$MBInfo = Get-WmiObject Win32_BaseBoard -ComputerName $ComputerName -ea STOP
					$myobj = @{
						ComputerName = $ComputerName
						Name = $MBInfo.Product
						Manufacturer = $MBInfo.Manufacturer
						Version = $MBInfo.Version
						SerialNumber = $MBInfo.SerialNumber
					}
					
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.Computer.MotherBoard')
					$obj
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion # Get-MotherBoard
	
	#region Get-NicInfo 
	
	function Get-NICInfo
	{
		
		    <#
		        .Synopsis  
		            Gets the NIC info for specified host
		            
		        .Description
		            Gets the NIC info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the NIC info from (Default is localhost.)
		            
		        .Example
		            Get-NicInfo
		            # Gets NIC info from local machine
		    
		        .Example
		            Get-NicInfo -ComputerName MyServer
		            Description
		            -----------
		            Gets NIC info from MyServer
		            
		        .Example
		            $Servers | Get-NicInfo
		            Description
		            -----------
		            Gets NIC info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-NicInfo 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$NICS = Get-WmiObject -class Win32_NetworkAdapterConfiguration -ComputerName $ComputerName
					
					foreach ($NIC in $NICS)
					{
						$Query = "Select Name,NetConnectionID FROM Win32_NetworkAdapter WHERE Index='$($NIC.Index)'"
						$NetConnnectionID = Get-WmiObject -Query $Query -ComputerName $ComputerName
						
						$myobj = @{
							ComputerName = $ComputerName
							Name = $NetConnnectionID.Name
							NetID = $NetConnnectionID.NetConnectionID
							MacAddress = $NIC.MacAddress
							IP = $NIC.IPAddress | ?{ $_ -match "\d*\.\d*\.\d*\." }
							Subnet = $NIC.IPSubnet | ?{ $_ -match "\d*\.\d*\.\d*\." }
							Enabled = $NIC.IPEnabled
							Index = $NIC.Index
						}
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.NICInfo')
						$obj
					}
				}
				catch
				{
					Add-RichTextBoxWarn -text "Host $ComputerName Failed"
				}
			}
			else
			{
				Add-RichTextBoxWarn -text "Host $ComputerName Failed Connectivity Test"
			}
		}
	}
	
	#endregion 
	
	#region Get-Processor
	
	function Get-Processor
	{
		
		    <#
		        .Synopsis 
		            Gets the Computer Processor info for specified host.
		            
		        .Description
		            Gets the Computer Processor info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Computer Processor info from (Default is localhost.)
		            
		        .Example
		            Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info from local machine
		    
		        .Example
		            Get-Processor -ComputerName MyServer
		            Description
		            -----------
		            Gets Computer Processor info from MyServer
		            
		        .Example
		            $Servers | Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-Processor
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$CPUS = Get-WmiObject Win32_Processor -ComputerName $ComputerName -ea STOP
					foreach ($CPU in $CPUs)
					{
						$myobj = @{
							ComputerName = $ComputerName
							Name = $CPU.Name
							Manufacturer = $CPU.Manufacturer
							Speed = $CPU.MaxClockSpeed
							Cores = $CPU.NumberOfCores
							L2Cache = $CPU.L2CacheSize
							Stepping = $CPU.Stepping
						}
					}
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.Computer.Processor')
					$obj
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion
	
	#region Get-RegistryHive 
	
	function Get-RegistryHive
	{
		param ($HiveName)
		Switch -regex ($HiveName)
		{
			"^(HKCR|ClassesRoot|HKEY_CLASSES_ROOT)$"               { [Microsoft.Win32.RegistryHive]"ClassesRoot"; continue }
			"^(HKCU|CurrentUser|HKEY_CURRENTt_USER)$"              { [Microsoft.Win32.RegistryHive]"CurrentUser"; continue }
			"^(HKLM|LocalMachine|HKEY_LOCAL_MACHINE)$"          { [Microsoft.Win32.RegistryHive]"LocalMachine"; continue }
			"^(HKU|Users|HKEY_USERS)$"                          { [Microsoft.Win32.RegistryHive]"Users"; continue }
			"^(HKCC|CurrentConfig|HKEY_CURRENT_CONFIG)$"          { [Microsoft.Win32.RegistryHive]"CurrentConfig"; continue }
			"^(HKPD|PerformanceData|HKEY_PERFORMANCE_DATA)$"    { [Microsoft.Win32.RegistryHive]"PerformanceData"; continue }
			Default { 1; continue }
		}
	}
	
	#endregion 
	
	#region Get-RegistryKey 
	
	function Get-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Gets the registry key provide by Path.
		            
		        .Description
		            Gets the registry key provide by Path.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to get the registry key from.
		            
		        .Parameter Recurse 
		            Recursively returns registry keys starting from the Path.
		        
		        .Parameter ReadWrite
		            Returns the Registry key in Read Write mode.
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe on MyServer1
		        
		        .Example
		            Get-registrykey HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe and all child keys
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		        .Notes
		            NAME:      Get-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse,
			[Alias("RW")]
			[Parameter()]
			[switch]$ReadWrite
			
		)
		
		Begin
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Begin"
			Write-Verbose " [Get-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Get-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Get-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Get-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Get-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Process"
			Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
				
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
				
				if ($ReadWrite)
				{
					try
					{
						$Key = $BaseKey.OpenSubKey($KeyPath, $true)
						$Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
						$Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru
						$Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
						$Key.PSTypeNames.Clear()
						$Key.PSTypeNames.Add('BSonPosh.Registry.Key')
						$Key
					}
					catch
					{
						Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open Key:$KeyPath in $KeyPath with RW Access"
					}
					
				}
				else
				{
					try
					{
						$Key = $BaseKey.OpenSubKey("$KeyPath")
						if ($Key)
						{
							$Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
							$Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru
							$Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
							$Key.PSTypeNames.Clear()
							$Key.PSTypeNames.Add('BSonPosh.Registry.Key')
							$Key
						}
					}
					catch
					{
						Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open SubKey:$Name in $KeyPath"
					}
				}
				
				if ($Recurse)
				{
					Write-Verbose " [Get-RegistryKey] :: Recurse Passed: Processing Subkeys of [$($Key.Name)]"
					$Key
					$SubKeyNames = $Key.GetSubKeyNames()
					foreach ($Name in $SubKeyNames)
					{
						try
						{
							$SubKey = $Key.OpenSubKey($Name)
							if ($SubKey.GetSubKeyNames())
							{
								Write-Verbose " [Get-RegistryKey] :: Calling [Get-RegistryKey] for [$($SubKey.Name)]"
								Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name -Recurse
							}
							else
							{
								Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name
							}
						}
						catch
						{
							Write-Verbose " [Get-RegistryKey] ::  ERROR :: Write-Host Unable to Open SubKey:$Name in $($Key.Name)"
						}
					}
				}
			}
			Write-Verbose " [Get-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-RegistryValue 
	
	function Get-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Get the value for given the registry value.
		            
		        .Description
		            Get the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter ComputerName 
		            Computer to get value.
		            
		        .Parameter Recurse 
		            Recursively gets the Values on the given key.
		            
		        .Parameter Default 
		            Returns the default value for the Value.
		        
		        .Example
		            Get-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State 
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall.
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe.
		    
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Default
		            Description
		            -----------
		            Returns the default value for HKLM\SOFTWARE\Adobe.
		                    
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Test-RegistryValue
		            
		        .Notes    
		            NAME:      Get-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter()]
			[string]$Name,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse,
			[Parameter()]
			[switch]$Default
		)
		
		Process
		{
			
			Write-Verbose " [Get-RegistryValue] :: Begin Process"
			Write-Verbose " [Get-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			
			if ($Recurse)
			{
				$Keys = Get-RegistryKey -Path $path -ComputerName $ComputerName -Recurse
				foreach ($Key in $Keys)
				{
					if ($Name)
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
							$myobj = @{ } #| Select ComputerName,Name,Value,Type,Path
							$myobj.ComputerName = $ComputerName
							$myobj.Name = $Name
							$myobj.value = $Key.GetValue($Name)
							$myobj.Type = $Key.GetValueKind($Name)
							$myobj.path = $Key
							
							$obj = New-Object PSCustomObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
							$obj
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
						}
						
					}
					elseif ($Default)
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
							$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
							$myobj.ComputerName = $ComputerName
							$myobj.Name = "(Default)"
							$myobj.value = if ($Key.GetValue("")) { $Key.GetValue("") }
							else { "EMPTY" }
							$myobj.Type = if ($Key.GetValue("")) { $Key.GetValueKind("") }
							else { "N/A" }
							$myobj.path = $Key
							
							$obj = New-Object PSCustomObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
							$obj
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:(Default) in $($Key.Name)"
						}
					}
					else
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
							foreach ($ValueName in $Key.GetValueNames())
							{
								Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
								$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
								$myobj.ComputerName = $ComputerName
								$myobj.Name = if ($ValueName -match "^$") { "(Default)" }
								else { $ValueName }
								$myobj.value = $Key.GetValue($ValueName)
								$myobj.Type = $Key.GetValueKind($ValueName)
								$myobj.path = $Key
								
								$obj = New-Object PSCustomObject -Property $myobj
								$obj.PSTypeNames.Clear()
								$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
								$obj
							}
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$ValueName in $($Key.Name)"
						}
					}
				}
			}
			else
			{
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName
				Write-Verbose " [Get-RegistryValue] :: Get-RegistryKey returned $Key"
				if ($Name)
				{
					try
					{
						Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
						$myobj = @{ } # | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = $Name
						$myobj.value = $Key.GetValue($Name)
						$myobj.Type = $Key.GetValueKind($Name)
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
					catch
					{
						Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
					}
				}
				elseif ($Default)
				{
					try
					{
						Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
						$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = "(Default)"
						$myobj.value = if ($Key.GetValue("")) { $Key.GetValue("") }
						else { "EMPTY" }
						$myobj.Type = if ($Key.GetValue("")) { $Key.GetValueKind("") }
						else { "N/A" }
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
					catch
					{
						Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
					}
				}
				else
				{
					Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
					foreach ($ValueName in $Key.GetValueNames())
					{
						Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
						$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = if ($ValueName -match "^$") { "(Default)" }
						else { $ValueName }
						$myobj.value = $Key.GetValue($ValueName)
						$myobj.Type = $Key.GetValueKind($ValueName)
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
				}
			}
			
			Write-Verbose " [Get-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-Routetable 
	
	function Get-Routetable
	{
		
		    <#
		        .Synopsis 
		            Gets the route table for specified host.
		            
		        .Description
		            Gets the route table for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the route table from (Default is localhost.)
		            
		        .Example
		            Get-RouteTable
		            Description
		            -----------
		            Gets route table from local machine
		    
		        .Example
		            Get-RouteTable -ComputerName MyServer
		            Description
		            -----------
		            Gets route table from MyServer
		            
		        .Example
		            $Servers | Get-RouteTable
		            Description
		            -----------
		            Gets route table for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-RouteTable
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				$Routes = Get-WMIObject Win32_IP4RouteTable -ComputerName $ComputerName -Property Name, Mask, NextHop, Metric1, Type
				foreach ($Route in $Routes)
				{
					$myobj = @{ }
					$myobj.ComputerName = $ComputerName
					$myobj.Name = $Route.Name
					$myobj.NetworkMask = $Route.mask
					$myobj.Gateway = if ($Route.NextHop -eq "0.0.0.0") { "On-Link" }
					else { $Route.NextHop }
					$myobj.Metric = $Route.Metric1
					
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.RouteTable')
					$obj
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion 
	
	#region Get-SystemType 
	
	function Get-SystemType
	{
		
		    <#
		        .Synopsis 
		            Gets the system type for specified host
		            
		        .Description
		            Gets the system type info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the System Type from (Default is localhost.)
		            
		        .Example
		            Get-SystemType
		            Description
		            -----------
		            Gets System Type from local machine
		    
		        .Example
		            Get-SystemType -ComputerName MyServer
		            Description
		            -----------
		            Gets System Type from MyServer
		            
		        .Example
		            $Servers | Get-SystemType
		            Description
		            -----------
		            Gets System Type for each machine in the pipeline
		            
		        .OUTPUTS
		            PSObject
		            
		        .Notes
		            NAME:      Get-SystemType 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Begin
		{
			
			function ConvertTo-ChassisType($Type)
			{
				switch ($Type)
				{
					1    { "Other" }
					2    { "Unknown" }
					3    { "Desktop" }
					4    { "Low Profile Desktop" }
					5    { "Pizza Box" }
					6    { "Mini Tower" }
					7    { "Tower" }
					8    { "Portable" }
					9    { "Laptop" }
					10    { "Notebook" }
					11    { "Hand Held" }
					12    { "Docking Station" }
					13    { "All in One" }
					14    { "Sub Notebook" }
					15    { "Space-Saving" }
					16    { "Lunch Box" }
					17    { "Main System Chassis" }
					18    { "Expansion Chassis" }
					19    { "SubChassis" }
					20    { "Bus Expansion Chassis" }
					21    { "Peripheral Chassis" }
					22    { "Storage Chassis" }
					23    { "Rack Mount Chassis" }
					24    { "Sealed-Case PC" }
				}
			}
			function ConvertTo-SecurityStatus($Status)
			{
				switch ($Status)
				{
					1    { "Other" }
					2    { "Unknown" }
					3    { "None" }
					4    { "External Interface Locked Out" }
					5    { "External Interface Enabled" }
				}
			}
			
		}
		Process
		{
			
			Write-Verbose " [Get-SystemType] :: Process Start"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					Write-Verbose " [Get-SystemType] :: Getting System (Enclosure) Type info use WMI"
					$SystemInfo = Get-WmiObject Win32_SystemEnclosure -ComputerName $ComputerName
					$CSInfo = Get-WmiObject -Query "Select Model FROM Win32_ComputerSystem" -ComputerName $ComputerName
					
					Write-Verbose " [Get-SystemType] :: Creating Hash Table"
					$myobj = @{ }
					Write-Verbose " [Get-SystemType] :: Setting ComputerName   - $ComputerName"
					$myobj.ComputerName = $ComputerName
					
					Write-Verbose " [Get-SystemType] :: Setting Manufacturer   - $($SystemInfo.Manufacturer)"
					$myobj.Manufacturer = $SystemInfo.Manufacturer
					
					Write-Verbose " [Get-SystemType] :: Setting Module   - $($CSInfo.Model)"
					$myobj.Model = $CSInfo.Model
					
					Write-Verbose " [Get-SystemType] :: Setting SerialNumber   - $($SystemInfo.SerialNumber)"
					$myobj.SerialNumber = $SystemInfo.SerialNumber
					
					Write-Verbose " [Get-SystemType] :: Setting SecurityStatus - $($SystemInfo.SecurityStatus)"
					$myobj.SecurityStatus = ConvertTo-SecurityStatus $SystemInfo.SecurityStatus
					
					Write-Verbose " [Get-SystemType] :: Setting Type           - $($SystemInfo.ChassisTypes)"
					$myobj.Type = ConvertTo-ChassisType $SystemInfo.ChassisTypes
					
					Write-Verbose " [Get-SystemType] :: Creating Custom Object"
					$obj = New-Object PSCustomObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.SystemType')
					$obj
				}
				catch
				{
					Write-Verbose " [Get-SystemType] :: [$ComputerName] Failed with Error: $($Error[0])"
				}
			}
			
		}
		
	}
	
	#endregion 
	
	#region Get-USB
	
	function Get-USB
	{
		    <#
		    .Synopsis
		        Gets USB devices attached to the system
		    .Description
		        Uses WMI to get the USB Devices attached to the system
		    .Example
		        Get-USB
		    .Example
		        Get-USB | Group-Object Manufacturer  
		    .Parameter ComputerName
		        The name of the computer to get the USB devices from
		    #>
		param ($computerName = "localhost")
		Get-WmiObject Win32_USBControllerDevice -ComputerName $ComputerName `
					  -Impersonation Impersonate -Authentication PacketPrivacy |
		Foreach-Object { [Wmi]$_.Dependent }
	}
	#endregion
	
	#region Get-UserTxtBox
	function Get-UserTxtBox
	{ $global:UserName_Txt = $usertextbox.Text }
	#endregion
	
	#region Get-LocalAdmins
	function get-localadmins
	{
		[cmdletbinding()]
		Param (
			[string]$computerName
		)
		$group = get-wmiobject win32_group -ComputerName $computerName -Filter "LocalAccount=True AND SID='S-1-5-32-544'"
		$query = "GroupComponent = `"Win32_Group.Domain='$($group.domain)'`,Name='$($group.name)'`""
		$list = Get-WmiObject win32_groupuser -ComputerName $computerName -Filter $query
		$list | %{ $_.PartComponent } | % { $_.substring($_.lastindexof("Domain=") + 7).replace("`",Name=`"", "\") }
	}
	#endregion Get-LocalAdmins
	
	#region Get-ComputerStats
	function Get-ComputerStats
	{
		param (
			[Parameter(Mandatory = $true, Position = 0,
					   ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
			[ValidateNotNull()]
			[string[]]$ComputerNames
		)
		
		process
		{
			$avg = Get-WmiObject win32_processor -computername $computername |
			Measure-Object -property LoadPercentage -Average |
			Foreach { $_.Average }
			$mem = Get-WmiObject win32_operatingsystem -ComputerName $computername |
			Foreach { "{0:N2}" -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) * 100)/ $_.TotalVisibleMemorySize) }
			new-object psobject -prop @{
				# Work on PowerShell V2 and below
				# [pscustomobject] [ordered] @{ # Only if on PowerShell V3
				AverageCpuLoad = $avg
				MemoryUsagePercent = $mem
			}
		}
	}
	#endregion Get-ComputerStats
	
	# New Functions
	
	#region New-RegistryKey 
	
	function New-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Creates a new key in the provide by Path.
		            
		        .Description
		            Creates a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to create the key in.
		            
		        .Parameter ComputerName 
		            Computer to the create registry key on.
		            
		        .Parameter Name 
		            Name of the Key to create
		        
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		            
		        NAME:      New-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [New-RegistryKey] :: Start Begin"
			$ReadWrite = [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree
			
			Write-Verbose " [New-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [New-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [New-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [New-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [New-RegistryKey] :: End Begin"
			
		}
		Process
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Process"
			Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
				$Key = $BaseKey.OpenSubKey($KeyPath, $True)
				if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Key [$Name] under $Path"))
				{
					$Key.CreateSubKey($Name, $ReadWrite)
				}
			}
			Write-Verbose " [Get-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region New-RegistryValue 
	
	function New-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Create a value under the registry key.
		            
		        .Description
		            Create a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to create.
		            
		        .Parameter Value 
		            Value to for the new Value.
		            
		        .Parameter Type
		            Type for the new Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, a
		    nd Qword
		            
		        .Parameter ComputerName 
		            Computer to create the Value on.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Creates the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            
		        NAME:      Test-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[Parameter()]
			[string]$Type,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [New-RegistryValue] :: Start Begin"
			Write-Verbose " [New-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [New-RegistryValue] :: `$Name = $Name"
			Write-Verbose " [New-RegistryValue] :: `$Value = $Value"
			
			Switch ($Type)
			{
				"Unknown"       { $ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown; continue }
				"String"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
				"ExpandString"  { $ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString; continue }
				"Binary"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::Binary; continue }
				"DWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::DWord; continue }
				"MultiString"   { $ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString; continue }
				"QWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::QWord; continue }
				default { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
			}
			Write-Verbose " [New-RegistryValue] :: `$Type = $Type"
			Write-Verbose " [New-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			if (Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
			{
				"Registry value already exist"
			}
			else
			{
				Write-Verbose " [New-RegistryValue] :: Start Process"
				Write-Verbose " [New-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
				Write-Verbose " [New-RegistryValue] :: Get-RegistryKey returned $Key"
				Write-Verbose " [New-RegistryValue] :: Setting Value for [$Name]"
				if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Value [$Name] under $Path with value [$Value]"))
				{
					if ($Value)
					{
						$Key.SetValue($Name, $Value, $ValueType)
					}
					else
					{
						$Key.SetValue($Name, $ValueType)
					}
					Write-Verbose " [New-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
					Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
				}
			}
			Write-Verbose " [New-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Load Functions
	
	#region Load-ComboBox
	function Load-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion Load-Combobox
	
	#region Load-Chart
	function Load-Chart
	{
	<#
		.SYNOPSIS
			This functions helps you plot points on a chart
	
		.DESCRIPTION
			Use the function to plot points on a chart or add more charts to a chart control
	
		.PARAMETER  ChartControl
			The Chart Control you when to add points to
	
		.PARAMETER  XPoints
			Set the X Axis Points. These can be strings or numerical values.
	
		.PARAMETER  YPoints
			Set the Y Axis Points. These can be strings or numerical values.
		
		.PARAMETER  XTitle
			Set the Title for the X Axis.
	
		.PARAMETER  YTitle
			Set the Title for the Y Axis.
		
		.PARAMETER  Title
			Set the Title for the chart.
		
		.PARAMETER  ChartType
			Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum
	
		.PARAMETER SeriesIndex
			Set the settings of a particular Series and corresponding ChartArea
	
		.PARAMETER TitleIndex
			Set the settings of a particular Title
		
		.PARAMETER SeriesName
			Set the settings of a particular Series using its name and corresponding ChartArea. 
			The Series will be created if not found.
			If SeriesIndex is set, it will replace the Series' name if the Series does not exist
		
		.PARAMETER Enable3D
			The chart will be rendered in 3D.
		
		.PARAMETER Disable3D
			The chart will be rendered in 2D.	
		
		.PARAMETER Append
			When this switch is used, a new ChartArea is added to Chart Control.
	
		.LINK
			http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
		
	#>
		Param (#$XPoints, $YPoints, $XTitle, $YTitle, $Title, $ChartStyle)
			[ValidateNotNull()]
			[Parameter(Position = 1, Mandatory = $true)]
			[System.Windows.Forms.DataVisualization.Charting.Chart]
			$ChartControl
			,
			[ValidateNotNull()]
			[Parameter(Position = 2, Mandatory = $true)]
			$XPoints
			,
			[Parameter(Position = 3, Mandatory = $true)]
			$YPoints
			,
			[Parameter(Position = 4, Mandatory = $false)]
			[string]$XTitle
			,
			[Parameter(Position = 5, Mandatory = $false)]
			[string]$YTitle
			,
			[Parameter(Position = 6, Mandatory = $false)]
			[string]$Title
			,
			[Parameter(Position = 7, Mandatory = $false)]
			[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]
			$ChartType
			,
			[Parameter(Position = 8, Mandatory = $false)]
			$SeriesIndex = -1
			,
			[Parameter(Position = 9, Mandatory = $false)]
			$TitleIndex = 0,
			[Parameter(Mandatory = $false)]
			[string]$SeriesName = $null,
			[switch]$Enable3D,
			[switch]$Disable3D,
			[switch]$Append)
		
		$ChartAreaIndex = 0
		if ($Append)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			$ChartArea = $ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			
			$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
			$Series = $ChartControl.Series.Add($name)
			$SeriesIndex = $ChartControl.Series.Count - 1
			
			$Series.ChartArea = $ChartArea.Name
			
			if ($Title)
			{
				$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
		}
		else
		{
			if ($ChartControl.ChartAreas.Count -eq 0)
			{
				$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
				[void]$ChartControl.ChartAreas.Add($name)
				$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			}
			
			if ($ChartControl.Series.Count -eq 0)
			{
				if (-not $SeriesName)
				{
					$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
				}
				
				$Series = $ChartControl.Series.Add($SeriesName)
				$SeriesIndex = $ChartControl.Series.Count - 1
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			elseif ($SeriesName)
			{
				$Series = $ChartControl.Series.FindByName($SeriesName)
				
				if ($Series -eq $null)
				{
					if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
					{
						$Series = $ChartControl.Series[$SeriesIndex]
						$Series.Name = $SeriesName
					}
					else
					{
						$Series = $ChartControl.Series.Add($SeriesName)
						$SeriesIndex = $ChartControl.Series.Count - 1
					}
					
					$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
				}
				else
				{
					$SeriesIndex = $ChartControl.Series.IndexOf($Series)
					$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
				}
			}
		}
		
		if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
		{
			$SeriesIndex = 0
		}
		
		$Series = $ChartControl.Series[$SeriesIndex]
		$Series.Points.Clear()
		$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
		
		if ($Enable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $true
		}
		elseif ($Disable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $false
		}
		
		if ($Title)
		{
			if ($ChartControl.Titles.Count -eq 0)
			{
				#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
			
			$ChartControl.Titles[$TitleIndex].Text = $Title
		}
		
		if ($ChartType)
		{
			$Series.ChartType = $ChartType
		}
		
		if ($XTitle)
		{
			$ChartArea.AxisX.Title = $XTitle
		}
		
		if ($YTitle)
		{
			$ChartArea.AxisY.Title = $YTitle
		}
		
		if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($XPoints)
			$XPoints = $array
		}
		
		if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($YPoints)
			$YPoints = $array
		}
		
		$Series.Points.DataBindXY($XPoints, $YPoints)
		
	}
	#endregion Load-Chart
	
	#region Load-ListBox
	function Load-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion Load-ListBo
	
	# Remove Functions
	
	#region Remove-RegistryKey 
	
	function Remove-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Removes a new key in the provide by Path.
		            
		        .Description
		            Removes a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to remove the registry key from.
		            
		        .Parameter ComputerName 
		            Computer to remove the registry key from.
		            
		        .Parameter Name 
		            Name of the registry key to remove.
		            
		        .Parameter Recurse 
		            Recursively removes registry key and all children from path.
		        
		        .Example
		            Remove-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Removes the registry key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1 and all child keys.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            New-RegistryKey
		            Test-RegistryKey
		            
		        .Notes
		        NAME:      Remove-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse
		)
		Begin
		{
			
			Write-Verbose " [Remove-RegistryKey] :: Start Begin"
			
			Write-Verbose " [Remove-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Remove-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Remove-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Remove-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Remove-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Remove-RegistryKey] :: Start Process"
			Write-Verbose " [Remove-RegistryKey] :: `$ComputerName = $ComputerName"
			
			if (Test-RegistryKey -Path $path\$name -ComputerName $ComputerName)
			{
				$RegHive = Get-RegistryHive $hive
				
				if ($RegHive -eq 1)
				{
					Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
				}
				else
				{
					Write-Verbose " [Remove-RegistryKey] :: `$RegHive = $RegHive"
					$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
					Write-Verbose " [Remove-RegistryKey] :: `$BaseKey = $BaseKey"
					
					$Key = $BaseKey.OpenSubKey($KeyPath, $True)
					
					if ($PSCmdlet.ShouldProcess($ComputerName, "Deleteing Key [$Name]"))
					{
						if ($Recurse)
						{
							Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKeyTree($Name)"
							$Key.DeleteSubKeyTree($Name)
						}
						else
						{
							Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKey($Name)"
							$Key.DeleteSubKey($Name)
						}
					}
				}
			}
			else
			{
				"Key [$path\$name] does not exist"
			}
			Write-Verbose " [Remove-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Remove-RegistryValue 
	
	function Remove-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Removes the value.
		            
		        .Description
		            Removes the value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to Remove.
		    
		        .Parameter ComputerName 
		            Computer to remove value from.
		            
		        .Example
		            Remove-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Remove-RegistryValue HKLM\Software\Adobe\MyKey -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Test-RegistryValue
		            Get-RegistryValue
		            Set-RegistryValue
		            
		        NAME:      Remove-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [Remove-RegistryValue] :: Start Begin"
			
			Write-Verbose " [Remove-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [Remove-RegistryValue] :: `$Name = $Name"
			
			Write-Verbose " [Remove-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			if (Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
			{
				Write-Verbose " [Remove-RegistryValue] :: Start Process"
				Write-Verbose " [Remove-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
				Write-Verbose " [Remove-RegistryValue] :: Get-RegistryKey returned $Key"
				Write-Verbose " [Remove-RegistryValue] :: Setting Value for [$Name]"
				if ($PSCmdlet.ShouldProcess($ComputerName, "Deleting Value [$Name] under $Path"))
				{
					$Key.DeleteValue($Name)
				}
			}
			else
			{
				"Registry Value is already gone"
			}
			
			Write-Verbose " [Remove-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Runner Functions
	
	#region Run-RemoteCMD
	#http://gallery.technet.microsoft.com/scriptcenter/56962f03-0243-4c83-8cdd-88c37898ccc4
	function Run-RemoteCMD
	{
		param (
			[Parameter(Mandatory = $true, valuefrompipeline = $true)]
			[string]$ComputerName,
			[string]$Command)
		begin
		{
			
			[string]$cmd = "CMD.EXE /C " + $command
		}
		process
		{
			$newproc = Invoke-WmiMethod -class Win32_process -name Create -ArgumentList ($cmd) -ComputerName $ComputerName
			if ($newproc.ReturnValue -eq 0)
			{ Add-RichTextBoxOK "Command $($command) invoked Sucessfully on $($ComputerName)" }
			# if command is sucessfully invoked it doesn't mean that it did what its supposed to do 
			#it means that the command only sucessfully ran on the cmd.exe of the server 
			#syntax errors can occur due to user input  
		}
		End { Write-Output "Script ...END" }
	}
	#endregion
	
	# Searcher Functions
	
	#region Search-Registry 
	
	function Search-Registry
	{
		
		    <#
		        .Synopsis 
		            Searchs the Registry.
		            
		        .Description
		            Searchs the Registry.
		                        
		        .Parameter Filter 
		            The RegEx filter you want to search for.
		            
		        .Parameter Name 
		            Name of the Key or Value you want to search for.
		        
		        .Parameter Value
		            Value to search for (Registry Values only.)
		            
		        .Parameter Path
		            Base of the Search. Should be in this format: "Software\Microsoft\..." See the Examples for specific exampl
		    es.
		            
		        .Parameter Hive
		            The Base Hive to search in (Default to LocalMachine.)
		            
		        .Parameter ComputerName 
		            Computer to search.
		            
		        .Parameter KeyOnly
		            Only returns Registry Keys. Not valid with -value parameter.
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients" -computername MyServer1
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients" on MyServer1
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry keys and values with name 'Powershell' in "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients" -KeyOnly
		            Description
		            -----------
		            Searchs the Registry keys with name 'Powershell' in "SOFTWARE\Clients"
		        
		        .Example
		            Search-Registry -Hive HKLM -Value "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry Values with Value of 'Powershell' in "SOFTWARE\Clients"
		            
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Get-RegistryValue
		            Test-RegistryKey
		        
		        .Notes
		            NAME:      Search-Registry
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(DefaultParameterSetName = "ByFilter")]
		Param (
			[Parameter(ParameterSetName = "ByFilter", Position = 0)]
			[string]$Filter = ".*",
			[Parameter(ParameterSetName = "ByName", Position = 0)]
			[string]$Name,
			[Parameter(ParameterSetName = "ByValue", Position = 0)]
			[string]$Value,
			[Parameter()]
			[string]$Path,
			[Parameter()]
			[string]$Hive = "LocalMachine",
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME,
			[Parameter()]
			[switch]$KeyOnly
		)
		Begin
		{
			
			Write-Verbose " [Search-Registry] :: Start Begin"
			
			Write-Verbose " [Search-Registry] :: Active Parameter Set $($PSCmdlet.ParameterSetName)"
			switch ($PSCmdlet.ParameterSetName)
			{
				"ByFilter"    { Write-Verbose " [Search-Registry] :: `$Filter = $Filter" }
				"ByName"    { Write-Verbose " [Search-Registry] :: `$Name = $Name" }
				"ByValue"    { Write-Verbose " [Search-Registry] :: `$Value = $Value" }
			}
			$RegHive = Get-RegistryHive $Hive
			Write-Verbose " [Search-Registry] :: `$Hive = $RegHive"
			Write-Verbose " [Search-Registry] :: `$KeyOnly = $KeyOnly"
			
			Write-Verbose " [Search-Registry] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Search-Registry] :: Start Process"
			
			Write-Verbose " [Search-Registry] :: `$ComputerName = $ComputerName"
			switch ($PSCmdlet.ParameterSetName)
			{
				"ByFilter"    {
					if ($KeyOnly)
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
					else
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
							Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
									Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
				}
				"ByName"    {
					if ($KeyOnly)
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							$NameFilter = "^.*\\{0}$" -f $Name
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									$NameFilter = "^.*\\{0}$" -f $Name
									Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
					else
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							$NameFilter = "^.*\\{0}$" -f $Name
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
							Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -eq $Name }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									$NameFilter = "^.*\\{0}$" -f $Name
									Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
									Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -eq $Name }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
				}
				"ByValue"    {
					if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
					{
						Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Value -eq $Value }
					}
					else
					{
						$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
						foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
						{
							try
							{
								$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
								Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Value -eq $Value }
							}
							catch
							{
								Write-Host "Access Error on Key [$SubKeyName]... skipping."
							}
						}
					}
				}
			}
			
			Write-Verbose " [Search-Registry] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Sender Functions
	
	#region Send-WOL
	function Send-WOL
	{
	<#  
	  .SYNOPSIS   
	    Send a WOL packet to a broadcast address 
	  .PARAMETER mac 
	   The MAC address of the device that need to wake up 
	  .PARAMETER ip 
	   The IP address where the WOL packet will be sent to 
	  .EXAMPLE  
	   Send-WOL -mac 00:11:32:21:2D:11 -ip 192.168.8.255  
	#>	
		
		param (
			[string]$mac,
			[string]$ip,
			[int]$port = 9
		)
		$broadcast = [Net.IPAddress]::Parse($ip)
		
		$mac = (($mac.replace(":", "")).replace("-", "")).replace(".", "")
		$target = 0, 2, 4, 6, 8, 10 | % { [convert]::ToByte($mac.substring($_, 2), 16) }
		$packet = (, [byte]255 * 6) + ($target * 16)
		
		$UDPclient = new-Object System.Net.Sockets.UdpClient
		$UDPclient.Connect($broadcast, $port)
		[void]$UDPclient.Send($packet, 102)
		
	}
	#endregion Send-WOL
	
	# Setter Functions
	
	#region Set-RegistryValue 
	
	function Set-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Sets a value under the registry key.
		            
		        .Description
		            Sets a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to Set.
		            
		        .Parameter Value 
		            New Value.
		            
		        .Parameter Type
		            Type for the Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, and Q
		    word
		            
		        .Parameter ComputerName 
		            Computer to set the Value on.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Sets the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            Test-RegistryValue
		        
		        .Notes
		            NAME:      Set-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[Parameter()]
			[string]$Type,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		
		Begin
		{
			
			Write-Verbose " [Set-RegistryValue] :: Start Begin"
			
			Write-Verbose " [Set-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [Set-RegistryValue] :: `$Name = $Name"
			Write-Verbose " [Set-RegistryValue] :: `$Value = $Value"
			
			Switch ($Type)
			{
				"Unknown"       { $ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown; continue }
				"String"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
				"ExpandString"  { $ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString; continue }
				"Binary"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::Binary; continue }
				"DWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::DWord; continue }
				"MultiString"   { $ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString; continue }
				"QWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::QWord; continue }
				default { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
			}
			Write-Verbose " [Set-RegistryValue] :: `$Type = $Type"
			
			Write-Verbose " [Set-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Set-RegistryValue] :: Start Process"
			
			Write-Verbose " [Set-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
			Write-Verbose " [Set-RegistryValue] :: Get-RegistryKey returned $Key"
			Write-Verbose " [Set-RegistryValue] :: Setting Value for [$Name]"
			if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Value [$Name] under $Path with value [$Value]"))
			{
				if ($Value)
				{
					$Key.SetValue($Name, $Value, $ValueType)
				}
				else
				{
					$Key.SetValue($Name, $ValueType)
				}
				Write-Verbose " [Set-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
				Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
			}
			Write-Verbose " [Set-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Show Functions
	
	#region Show-MsgBox
		<# 
		            .SYNOPSIS  
		            Shows a graphical message box, with various prompt types available. 
		 
		            .DESCRIPTION 
		            Emulates the Visual Basic MsgBox function.  It takes four parameters, of which only the prompt is mandatory 
		 
		            .INPUTS 
		            The parameters are:- 
		             
		            Prompt (mandatory):  
		                Text string that you wish to display 
		                 
		            Title (optional): 
		                The title that appears on the message box 
		                 
		            Icon (optional).  Available options are: 
		                Information, Question, Critical, Exclamation (not case sensitive) 
		                
		            BoxType (optional). Available options are: 
		                OKOnly, OkCancel, AbortRetryIgnore, YesNoCancel, YesNo, RetryCancel (not case sensitive) 
		                 
		            DefaultButton (optional). Available options are: 
		                1, 2, 3 
		 
		            .OUTPUTS 
		            Microsoft.VisualBasic.MsgBoxResult 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox Hello 
		            Shows a popup message with the text "Hello", and the default box, icon and defaultbutton settings. 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox -Prompt "This is the prompt" -Title "This Is The Title" -Icon Critical -BoxType YesNo -DefaultButton 2 
		            Shows a popup with the parameter as supplied. 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxresult.aspx 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxstyle.aspx 
		            #>
	# By BigTeddy August 24, 2011 
	# http://social.technet.microsoft.com/profile/bigteddy/. 
	
	function Show-MsgBox
	{
		
		[CmdletBinding()]
		param (
			[Parameter(Position = 0, Mandatory = $true)]
			[string]$Prompt,
			[Parameter(Position = 1, Mandatory = $false)]
			[string]$Title = "",
			[Parameter(Position = 2, Mandatory = $false)]
			[ValidateSet("Information", "Question", "Critical", "Exclamation")]
			[string]$Icon = "Information",
			[Parameter(Position = 3, Mandatory = $false)]
			[ValidateSet("OKOnly", "OKCancel", "AbortRetryIgnore", "YesNoCancel", "YesNo", "RetryCancel")]
			[string]$BoxType = "OkOnly",
			[Parameter(Position = 4, Mandatory = $false)]
			[ValidateSet(1, 2, 3)]
			[int]$DefaultButton = 1
		)
		[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.VisualBasic") | Out-Null
		switch ($Icon)
		{
			"Question" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Question }
			"Critical" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Critical }
			"Exclamation" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Exclamation }
			"Information" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Information }
		}
		switch ($BoxType)
		{
			"OKOnly" { $vb_box = [microsoft.visualbasic.msgboxstyle]::OKOnly }
			"OKCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::OkCancel }
			"AbortRetryIgnore" { $vb_box = [microsoft.visualbasic.msgboxstyle]::AbortRetryIgnore }
			"YesNoCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::YesNoCancel }
			"YesNo" { $vb_box = [microsoft.visualbasic.msgboxstyle]::YesNo }
			"RetryCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::RetryCancel }
		}
		switch ($Defaultbutton)
		{
			1 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton1 }
			2 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton2 }
			3 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton3 }
		}
		$popuptype = $vb_icon -bor $vb_box -bor $vb_defaultbutton
		$ans = [Microsoft.VisualBasic.Interaction]::MsgBox($prompt, $popuptype, $title)
		return $ans
	} #end
	#endregion
	
	#region Show-InputBox
	#http://www.sapien.com/forums/scriptinganswers/forum_posts.asp?TID=2890
	#$c=Show-Inputbox -message "Enter a computername" -title "Computername" -default $env:Computername
	#
	#if ($c.Trim()) {
	#  Get-WmiObject win32_computersystem -computer $c
	#  }
	Function Show-InputBox
	{
		Param ([string]$message = $(Throw "You must enter a prompt message"),
			[string]$title = "Input",
			[string]$default
		)
		
		[reflection.assembly]::loadwithpartialname("microsoft.visualbasic") | Out-Null
		[microsoft.visualbasic.interaction]::InputBox($message, $title, $default)
		
	}
	#endregion
	
	# Sort Functions
	
	#region Sort-ListViewColumn
	function Sort-ListViewColumn
	{
		<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
	
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
	
		.PARAMETER ListView
			The ListView control to sort.
	
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
			
		.PARAMETER  SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
	#>
		param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[Parameter(Mandatory = $true)]
			[int]$ColumnIndex,
			[System.Windows.Forms.SortOrder]$SortOrder = 'None')
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			$local:type = [ListViewItemComparer]
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($Sort -eq [System.Windows.Forms.SortOrder]::None)
			{
				$Sort = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	#endregion
	
	# Tester Functions
	
	#region Test-Host 
	
	function Test-Host
	{
		
		    <#
		        .Synopsis 
		            Test a host for connectivity using either WMI ping or TCP port
		            
		        .Description
		            Allows you to test a host for connectivity before further processing
		            
		        .Parameter Server
		            Name of the Server to Process.
		            
		        .Parameter TCPPort
		            TCP Port to connect to. (default 135)
		            
		        .Parameter Timeout
		            Timeout for the TCP connection (default 1 sec)
		            
		        .Parameter Property
		            Name of the Property that contains the value to test.
		            
		        .Example
		            cat ServerFile.txt | Test-Host | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts.
		            
		        .Example
		            cat ServerFile.txt | Test-Host -tcp 80 | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts against port 80.
		            
		        .Example
		            Get-ADComputer | Test-Host -property dnsHostname | Invoke-DoSomething
		            Description
		            -----------
		            To test the output of Get-ADComputer using the dnshostname property
		            
		            
		        .OUTPUTS
		            System.Object
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Port
		            
		        NAME:      Test-Host
		        AUTHOR:    YetiCentral\bshell
		        Website:   www.bsonposh.com
		        LASTEDIT:  02/04/2009 18:25:15
		        #Requires -Version 2.0
		    #>
		
		[CmdletBinding()]
		Param (
			
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true, Mandatory = $True)]
			[string]$ComputerName,
			[Parameter()]
			[int]$TCPPort = 80,
			[Parameter()]
			[int]$timeout = 3000,
			[Parameter()]
			[string]$property
			
		)
		Begin
		{
			
			function PingServer
			{
				Param ($MyHost)
				$ErrorActionPreference = "SilentlyContinue"
				Write-Verbose " [PingServer] :: Pinging [$MyHost]"
				try
				{
					$pingresult = Get-WmiObject win32_pingstatus -f "address='$MyHost'"
					$ResultCode = $pingresult.statuscode
					Write-Verbose " [PingServer] :: Ping returned $ResultCode"
					if ($ResultCode -eq 0) { $true }
					else { $false }
				}
				catch
				{
					Write-Verbose " [PingServer] :: Ping Failed with Error: ${error[0]}"
					$false
				}
			}
			
		}
		
		Process
		{
			
			Write-Verbose " [Test-Host] :: Begin Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			Write-Verbose " [Test-Host] :: ComputerName   : $ComputerName"
			if ($TCPPort)
			{
				Write-Verbose " [Test-Host] :: Timeout  : $timeout"
				Write-Verbose " [Test-Host] :: Port     : $TCPPort"
				if ($property)
				{
					Write-Verbose " [Test-Host] :: Property : $Property"
					$Result = Test-Port $_.$property -tcp $TCPPort -timeout $timeout
					if ($Result)
					{
						if ($_) { $_ }
						else { $ComputerName }
					}
				}
				else
				{
					Write-Verbose " [Test-Host] :: Running - 'Test-Port $ComputerName -tcp $TCPPort -timeout $timeout'"
					$Result = Test-Port $ComputerName -tcp $TCPPort -timeout $timeout
					if ($Result)
					{
						if ($_) { $_ }
						else { $ComputerName }
					}
				}
			}
			else
			{
				if ($property)
				{
					Write-Verbose " [Test-Host] :: Property : $Property"
					try
					{
						if (PingServer $_.$property)
						{
							if ($_) { $_ }
							else { $ComputerName }
						}
					}
					catch
					{
						Write-Verbose " [Test-Host] :: $($_.$property) Failed Ping"
					}
				}
				else
				{
					Write-Verbose " [Test-Host] :: Simple Ping"
					try
					{
						if (PingServer $ComputerName) { $ComputerName }
					}
					catch
					{
						Write-Verbose " [Test-Host] :: $ComputerName Failed Ping"
					}
				}
			}
			Write-Verbose " [Test-Host] :: End Process"
			
		}
		
	}
	
	#endregion 
	
	#region Test-Port 
	
	function Test-Port
	{
		
		    <#
		        .Synopsis 
		            Test a host to see if the specified port is open.
		            
		        .Description
		            Test a host to see if the specified port is open.
		                        
		        .Parameter TCPPort 
		            Port to test (Default 135.)
		            
		        .Parameter Timeout 
		            How long to wait (in milliseconds) for the TCP connection (Default 3000.)
		            
		        .Parameter ComputerName 
		            Computer to test the port against (Default in localhost.)
		            
		        .Example
		            Test-Port -tcp 3389
		            Description
		            -----------
		            Returns $True if the localhost is listening on 3389
		            
		        .Example
		            Test-Port -tcp 3389 -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if MyServer1 is listening on 3389
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Host
		            Wait-Port
		            
		        .Notes
		            NAME:      Test-Port
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter()]
			[int]$TCPport = 135,
			[Parameter()]
			[int]$TimeOut = 3000,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[String]$ComputerName = $env:COMPUTERNAME
		)
		Begin
		{
			Write-Verbose " [Test-Port] :: Start Script"
			Write-Verbose " [Test-Port] :: Setting Error state = 0"
		}
		
		Process
		{
			
			Write-Verbose " [Test-Port] :: Creating [system.Net.Sockets.TcpClient] instance"
			$tcpclient = New-Object system.Net.Sockets.TcpClient
			
			Write-Verbose " [Test-Port] :: Calling BeginConnect($ComputerName,$TCPport,$null,$null)"
			try
			{
				$iar = $tcpclient.BeginConnect($ComputerName, $TCPport, $null, $null)
				Write-Verbose " [Test-Port] :: Waiting for timeout [$timeout]"
				$wait = $iar.AsyncWaitHandle.WaitOne($TimeOut, $false)
			}
			catch [System.Net.Sockets.SocketException]
			{
				Write-Verbose " [Test-Port] :: Exception: $($_.exception.message)"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			catch
			{
				Write-Verbose " [Test-Port] :: General Exception"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			
			if (!$wait)
			{
				$tcpclient.Close()
				Write-Verbose " [Test-Port] :: Connection Timeout"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			else
			{
				Write-Verbose " [Test-Port] :: Closing TCP Socket"
				try
				{
					$tcpclient.EndConnect($iar) | out-Null
					$tcpclient.Close()
				}
				catch
				{
					Write-Verbose " [Test-Port] :: Unable to Close TCP Socket"
				}
				$true
			}
		}
		End
		{
			Write-Verbose " [Test-Port] :: End Script"
		}
	}
	#endregion 
	
	#region Test-PSRemoting
	
	function Test-PSRemoting
	{
		Param (
			[alias('dnsHostName')]
			[Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName
		)
		Process
		{
			Write-Verbose " [Test-PSRemoting] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			
			try
			{
				
				$result = Invoke-Command -ComputerName $computername { 1 } -ErrorAction SilentlyContinue
				
				if ($result -eq 1)
				{
					return $True
				}
				else
				{
					return $False
				}
			}
			catch
			{
				return $False
			}
		}
	}
	
	#endregion
	
	#region Test-RegistryKey 
	
	function Test-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Test for given the registry key.
		            
		        .Description
		            Test for given the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to test the registry key on.
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Get-RegistryKey
		        
		        .Notes
		            NAME:      Test-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			
			[Parameter(ValueFromPipelineByPropertyName = $True, mandatory = $true)]
			[string]$Path,
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Begin
		{
			
			Write-Verbose " [Test-RegistryKey] :: Start Begin"
			
			Write-Verbose " [Test-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Test-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Test-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Test-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Test-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Test-RegistryKey] :: Start Process"
			
			Write-Verbose " [Test-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Test-RegistryKey] :: `$RegHive = $RegHive"
				
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Test-RegistryKey] :: `$BaseKey = $BaseKey"
				
				Try
				{
					$Key = $BaseKey.OpenSubKey($KeyPath)
					if ($Key)
					{
						$true
					}
					else
					{
						$false
					}
				}
				catch
				{
					$false
				}
			}
			Write-Verbose " [Test-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Test-RegistryValue 
	
	function Test-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Test the value for given the registry value.
		            
		        .Description
		            Test the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter Value 
		            Value to check for.
		            
		        .Parameter ComputerName 
		            Computer to test.
		            
		        .Example
		            Test-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State -Value 0
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0
		            
		        .Example
		            Test-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0 on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		        
		        .Notes    
		            NAME:      Test-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Process
		{
			
			Write-Verbose " [Test-RegistryValue] :: Begin Process"
			Write-Verbose " [Test-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName
			Write-Verbose " [Test-RegistryValue] :: Get-RegistryKey returned $Key"
			if ($Value)
			{
				try
				{
					$CurrentValue = $Key.GetValue($Name)
					$Value -eq $CurrentValue
				}
				catch
				{
					$false
				}
			}
			else
			{
				try
				{
					$CurrentValue = $Key.GetValue($Name)
					if ($CurrentValue) { $True }
					else { $false }
				}
				catch
				{
					$false
				}
			}
			Write-Verbose " [Test-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Test-TcpPort
	function Test-TcpPort ($ComputerName, [int]$port = 80)
	{
		$socket = new-object Net.Sockets.TcpClient
		$socket.Connect($ComputerName, $port)
		if ($socket.Connected)
		{
			$status = "Open"
			$socket.Close()
		}
		else
		{
			$status = "Closed / Filtered"
		}
		$socket = $null
		Add-RichTextBox "ComputerName:$ComputerName`nPort:$port`nStatus:$status"
	}
	#endregion
	
	# Taskmanager Functions
	#region initialize-stuff
	function initialize-stuff
	{
		### Basically just an initialization routine for the hashes and the drawing objects.
		$server = $things["machine"];
		update-Status-Label "Initializing server information...";
		$label3.update();
		$available = load-os-info $server;
		update-Status-Label "Initializing processes...";
		
		$ysize = 0;
		$procs = return-win32_perfrawdata_perfproc_process $server;
		foreach ($proc in $procs)
		{
			if ($proc.IDProcess -eq 0)
			{
				$beforeprocs[0] = $proc.percentprocessortime;
			}
			else
			{
				$beforeprocs.Add($proc.IDProcess, $proc.percentprocessortime);
			}
		}
		
		update-Status-Label "Initializing CPU...";
		$t1 = return-win32_PerfRawData_PerfOS_processor $server;
		$ch = new-object system.drawing.drawing2d.HatchBrush([system.drawing.drawing2d.hatchstyle]::LargeGrid, $things["colors"][1], $things["colors"][2]);
		
		update-Status-Label "Initializing graphics...";
		$orderarray = New-Object -TypeName System.Collections.ArrayList;
		foreach ($cpu in $t1) { $orderarray.add($cpu.name); }
		$y = 100;
		$x = -550;
		$counter = 0;
		for ($j = 0; $j -lt $orderarray.count; $j++)
		{
			$t = "";
			$key = $orderarray[$j];
			foreach ($bob in $t1) { if ($bob.Name -eq $key) { $t = $bob; } }
			if (($counter % 8) -eq 0)
			{
				$y = 100;
				$x += 600;
				$xstrpt = $x - 50;
			}
			$keyhash.Add($key, @($t.percentprocessortime, $t.timestamp_sys100ns));
			$pointhash.Add($key, @());
			$ysize += 105;
			$rect = new-object system.drawing.rectangle(($x + 1), ($y - 100), 500, 99);
			$point = new-object system.drawing.pointf(($x - 50), ($y - 15));
			$point2 = new-object system.drawing.pointf(($x - 50), ($y - 50));
			$parms.Add($key, @($x, $y, 0.0, $rect, $ch, $point, $point2));
			$points = @(new-object system.drawing.point($x, $y));
			$hash.Add($key, @());
			$y = $y + 100;
			$counter++;
		}
		$keyhash.Add("Memory", @(0.0, 0.0));
		$pointhash.Add("Memory", @());
		$hash.Add("Memory", @());
		$xsize = [int32]((($counter/8) + 1) * 575);
		if ($ysize -gt 500) { $ysize = 500; }
		
		#### Memory
		if ((($counter % 8) -eq 0) -OR (($y + 300) -gt 900))
		{
			$y = 100;
			$x += 600;
			$xstrpt = $x - 50;
		}
		else { $ysize += 300; }
		$rect = new-object system.drawing.rectangle(($x + 1), $y, 500, 199);
		$y += 200;
		$ystrpt = $y - 15;
		$point = new-object system.drawing.pointf(($x - 50), ($y - 15));
		$xstrpt = $x - 50;
		$ystrpt = $y - 50;
		$point2 = new-object system.drawing.pointf(($x - 50), ($y - 50));
		$point3 = new-object system.drawing.pointf(($x - 50), ($y - 70));
		$parms.Add("Memory", @($x, $y, 0.0, $rect, $ch, $point, $point2, 0.0, $point3));
		
		update-Status-Label "Updating CPU...";
		
		get-allCPU;
		$parms.Add("Bitmap", @($xsize, $ysize));
		#$picturebox1.AutoScrollMargin = new-object System.Drawing.Size($xsize, $ysize);
		update-Status-Label "";
	}
	#endregion initialize-stuff
	
	#region update-serverdatetime
	function update-serverdatetime
	{
		param ($server);
	}
	#endregion update-serverdatetime
	
	#region load-os-info
	function load-os-info
	{
		param ($server);
		### This was an afterthought sort of like the services tab. It occurred to me that it might be nice to know some of the details
		### about the machine and the OS running on it. All this does is create a bunch of labels on $Tab4 and fill in the information.
		### The only one that's different is the label that shows the localdatetime. That is created in BuildTheForm() so it can be
		### updated every time we refresh the processes.
		while ($Tab4.Controls.count -gt 1) { foreach ($item in $Tab4.Controls) { if ($item.name -ne "ServerTime_Label") { $item.dispose(); } } }
		$tm = 0;
		$cs = CIM-Stuff win32_computersystem;
		$prcsrs = CIM-Stuff win32_processor;
		$srv = CIM-Stuff Win32_OperatingSystem;
		$mem = CIM-Stuff CIM_PhysicalMemory;
		$mem | % { $tm += $_.capacity; }
		$caption = $srv.caption;
		$y = 20;
		$x = 20;
		
		
		$arch = "32-bit";
		if (($srv.OSArchitecture).length -gt 0) { $arch = $srv.OSArchitecture; }
		elseif ($srv.caption -match "x64") { $arch = "64-bit"; }
		foreach ($m in $mem)
		{
			$l = $m.tag + " (" + $m.devicelocator.trimend() + ") | " + (dsize $m.capacity);
			if ($m.speed -gt $null) { $l += " | Speed = " + $m.speed.tostring() + " ns"; }
			$st = "OK";
			if ($m.status -gt $null) { $st = $m.status; }
			$l += " | Status = " + $st;
		}
		
		foreach ($p in $prcsrs)
		{
			$noc = "";
			if ($p.numberofcores -ne $null) { $noc = " -- " + $p.numberofcores + " Cores"; }
		}
		
		
		### If this is an older OS, we need to use Win32_LogicalDisk to get the list of disks. If it's running a later OS, we can use
		### Win32_Volume which will also list the mount points (if any).
		$vlen = 20;
		if ($caption -match "2000")
		{
			$hds = CIM-Stuff Win32_LogicalDisk "DriveType=3" |
			select-object -property @{ expression = { $_.deviceid }; name = "VolumeName" }, @{ expression = { $_.size }; name = "Capacity" },
						  FreeSpace, @{ expression = { $_.volumename }; name = "Label" };
		}
		else
		{
			$hds = CIM-Stuff Win32_Volume "DriveType=3" |
			select-object -property @{ expression = { $_.name }; name = "VolumeName" }, Capacity, FreeSpace, Label;
		}
		
		$hds = $hds | sort-object -property VolumeName;
		foreach ($d in $hds) { if ($d.VolumeName.length -gt $vlen) { $vlen = $d.VolumeName.length; } }
		
		$x = ($vlen * 9);
		$cs.totalphysicalmemory;
	}
	#endregion load-os-info
	
	#region display-myMessageBox
	function display-myMessageBox
	{
		param ($msg);
		$myMessageBox = new-object System.Windows.Forms.Form;
		$myMB_TextBox = new-object System.Windows.Forms.TextBox;
		$myMessageBox.cancelbutton = $Cancel_Button;
		$myMB_TextBox.Anchor = "Left, Top, Right, Bottom";
		$myMB_TextBox.Location = new-object system.drawing.point(0, 0);
		$myMB_TextBox.font = $fonts["cn8"];
		$myMB_TextBox.Name = "myMB_TextBox";
		$myMB_TextBox.multiline = $true;
		$myMB_TextBox.Text = "";
		$myMessageBox.Controls.Add($myMB_TextBox);
		$array = $msg.split("`n");
		$count = $array.count;
		$w = 0;
		foreach ($line in $array) { if ($line.length -gt $w) { $w = $line.length; } }
		$height = $count * 14.0;
		$width = $w * 8.25;
		$myMessageBox.ClientSize = new-object System.Drawing.Size($width, $height);
		$myMB_TextBox.ClientSize = new-object System.Drawing.Size($width, $height);
		$myMB_TextBox.text = $msg;
		$IFWS = new-object System.Windows.Forms.FormWindowState;
		$IFWS = $myMessageBox.WindowState;
		$myMessageBox.TopMost = $true;
		$myMessageBox.Refresh();
		$myMessageBox.BringToFront();
		$myMessageBox.add_Load($OnLoadForm_StateCorrection);
		$myMessageBox.Show() | Out-Null;
	}
	#endregion display-myMessageBox
	
	#region get-services
	function get-services
	{
		### Simply loads the services on the Services tab ($Tab3).
		$server = $things["machine"];
		$listview2.Items.Clear();
		foreach ($s in (return-win32_Service $server))
		{
			$lvi = new-object system.windows.forms.ListViewItem($s.displayname);
			if ($s.description -eq $null) { $s.description = ""; }
			foreach ($c in (1..($listview2.columns.count - 1)))
			{
				$name = $listview2.columns[$c].name;
				$lvi.subitems.add($s.$name);
			}
			
			$listview2.Items.Add($lvi);
		}
		
		$error.clear;
	}
	#endregion get-services
	
	#region get-processes
	function get-processes
	{
		param ($update);
		### Loads and updates the $listview1 listview on $Tab1.
		$server = $things["machine"];
		$procs = return-win32_perfrawdata_perfproc_process $server;
		$idle = $cpu = $totalcpu = $totalcpuUsed = 0;
		$procs | % { if ($_.name -eq "_Total") { $totalcpu = [long]$_.percentprocessortime - [long]$beforeprocs[$_.IDProcess]; } };
		if ($update -eq $false)
		{
			$listview1.items.clear();
			$users = @{ };
			foreach ($proc in (CIM-Stuff win32_process))
			{
				$users.add($proc.ProcessID, ($proc |
				Invoke-CimMethod -CimSession $things["session"] -MethodName GetOwner).user);
			}
		}
		
		drop-dead-procs $procs;
		foreach ($proc in $procs)
		{
			$idproc = $proc.IDProcess;
			if ($proc.Name -eq "Idle")
			{
				$idle = kbytes $proc.WorkingSet;
				if ($update -eq $false) { make-listviewitem $proc $null; }
			}
			elseif ($proc.Name -ne "_Total")
			{
				if ($update -eq $false)
				{
					$cpu = pcnt-cpu $proc.percentprocessortime $beforeprocs[$idproc] $totalcpu;
					$totalcpuUsed += $cpu;
					make-listviewitem $proc $users[$idproc];
				}
				elseif ($beforeprocs[$idproc] -eq $null)
				{
					### If this is a new process, create a ListViewItem for it.
					$beforeprocs.Add($idproc, $proc.percentprocessortime);
					$cpu = 0;
					make-listviewitem $proc (CIM-Method win32_process ("ProcessID='" + $idproc + "'") GetOwner).user;
				}
				else
				{
					### Otherwise, just calculate the CPU for it.
					$cpu = pcnt-cpu $proc.percentprocessortime $beforeprocs[$idproc] $totalcpu;
					$totalcpuUsed += $cpu;
				}
				
				### Update the memory and CPU for the process in its ListView entry
				$lvi = $listview1.FindItemWithText($idproc)
				if ($lvi.SubItems[3].Text -ne [int32]($cpu)) { $lvi.SubItems[3].Text = [int32]($cpu); }
				if ($lvi.SubItems[4].Text -ne (kbytes $proc.WorkingSet)) { $lvi.SubItems[4].Text = kbytes $proc.WorkingSet; }
			}
			
			$beforeprocs[$idproc] = $proc.percentprocessortime;
		}
		
		$indx = $listview1.FindItemWithText("Idle").index;
		$cpu = [int32](100 - $totalcpuUsed);
		$listview1.Items[$indx].SubItems[3].Text = [int32]($cpu);
		$listview1.Items[$indx].SubItems[4].Text = $idle;
		$listview1.refresh();
		$things["procs"] = ($procs.count - 1);
		$things["cpu"] = [int32]$totalcpuUsed;
		update-Procs-Label;
		update-serverdatetime $server;
		if ($things["LVCols"] -ne $null)
		{
			if (($things["LVCols"] -eq 0) -OR ($things["LVCols"] -eq 2))
			{
				$listview1.ListViewItemSorter = new-object ListViewItemComparer($things["LVCols"], $listview1.Sorting);
			}
			else
			{
				$listview1.ListViewItemSorter = new-object ListViewItemIntComparer($things["LVCols"], $listview1.Sorting);
			}
		}
		
	}
	#endregion get-processes
	
	#region make-listviewitem
	function make-listviewitem
	{
		param ($proc,
			$user);
		$idproc = $proc.IDProcess;
		$lvi = new-object system.windows.forms.ListViewItem($proc.Name);
		$lvi.SubItems.Add($idproc);
		if ($user -eq $null) { $user = "SYSTEM"; }
		$lvi.SubItems.Add($user);
		$lvi.SubItems.Add(0);
		$mem = kbytes $proc.WorkingSet;
		$lvi.SubItems.Add($mem);
		$listview1.Items.Add($lvi);
	}
	#endregion make-listviewitem
	
	#region drop-dead-procs
	function drop-dead-procs
	{
		param ($procs);
		$temp = @{ };
		$currp = @();
		foreach ($proc in $procs) { $currp += $proc.IDProcess; }
		foreach ($idproc in $beforeprocs.Keys) { if ($currp -notcontains $idproc) { $temp.Add($idproc, 0); } }
		foreach ($procid in $temp.Keys)
		{
			$indx = $listview1.FindItemWithText($procid).index;
			$listview1.Items[$indx].Remove();
			$beforeprocs.Remove($procid);
		}
		
		$temp.clear()
	}
	#endregion drop-dead-procs
	
	#region set-context-menu
	function set-context-menu
	{
		foreach ($si in $listview2.SelectedItems)
		{
			if ($si.subitems[($listview2.columns["state"].index)].text -eq "Running")
			{
				$start_svc.enabled = $false;
				$stop_svc.enabled = $true;
				$cycle_svc.enabled = $true;
			}
			elseif ($si.subitems[($listview2.columns["state"].index)].text -eq "Stopped")
			{
				$start_svc.enabled = $true;
				$stop_svc.enabled = $false;
				$cycle_svc.enabled = $false;
			}
		}
	}
	#endregion set-context-menu
	
	#region stop-related-services
	function stop-related-services
	{
		param ($sname,
			$dependencies);
		if ($dependencies.count -gt 0)
		{
			foreach ($d in $dependencies) { stop-start-service $d.name "Stop"; }
		}
		
		stop-start-service $sname "Stop";
	}
	#endregion stop-related-services
	
	#region start-related-services
	function start-related-services
	{
		param ($sname,
			$dependencies);
		stop-start-service $sname "Start";
		if ($dependencies.count -gt 0)
		{
			foreach ($d in $dependencies) { stop-start-service $d.name "Start"; }
		}
	}
	#endregion start-related-services
	
	#region stop-start-service
	function stop-start-service
	{
		param ($sname,
			$whattodo);
		$vars = @{
			"Stop" = @("Stopped", "Stopping", "1", { $svc.Stop() }, { $svc.StopService() });
			"Start" = @("Running", "Starting", "4", { $svc.Start() }, { $svc.StartService() });
		};
		
		$svc = CIM-Stuff win32_service ("name = '" + $sname + "'");
		if (($svc.state -eq $vars[$whattodo][0]) -OR ($svc.state -eq $null)) { return; }
		if ($svc.StartMode -eq "Disabled")
		{
			[system.windows.forms.messagebox]::Show("Cannot start or stop a disabled service, and I'm not enabling it just for you.");
			return;
		}
		
		if ($things["adsi"])
		{
			$cmd = "[ADSI](""WinNT://" + $things["machine"] + "/" + $sname + ",service"")";
			$svc = invoke-expression $cmd;
			if ($svc.status -ne $vars[$whattodo][2]) { &$vars[$whattodo][3]; }
		}
		else
		{
			$svc = CIM-Stuff win32_Service "Name='$sname'";
			if ($svc.state -ne $vars[$whattodo][0])
			{
				$r = &$vars[$whattodo][4];
				if ($r.returnvalue -ne 0)
				{
					[system.windows.forms.messagebox]::Show("Unable to $whattodo the $sname service.");
					return;
				}
			}
		}
		
		if ((GetStatus $sname $vars[$whattodo][0]) -eq 1)
		{
			### Update the status of the service
			($listview2.items[($listview2.FindItemWithText($sname).index)]).subitems[($listview2.columns["state"].index)].text = $vars[$whattodo][0];
			set-context-menu;
		}
	}
	#endregion stop-start-service
	
	#region reset-iis
	function reset-iis
	{
		$server = $things["machine"];
		$test = iisreset $server;
		$outcome = "Failed";
		if ($test -match "successfully restarted") { $outcome = "Succeeded"; }
	}
	#endregion reset-iis
	
	#region pcnt-cpu
	### CPU percentage calculation. I picked this up from an article on SQL server long ago. It seems to be the
	### same one used for the OS.
	function pcnt-cpu
	{
		(([long]$args[0] - [long]$args[1]) / [system.double]$args[2]) * 100;
	}
	#endregion pcnt-cpu
	
	#region kbytes
	function kbytes
	{
		param ($dsize);
		[Math]::round($dsize / 1kb, 2);
	}
	#endregion  
	
	#region dsize
	function dsize
	{
		param ($dsize);
		$size = "";
		if ($dsize -ge 1gb) { $size = [Math]::round($dsize / 1gb, 2).tostring() + " GB"; }
		elseif ($dsize -ge 1mb) { $size = [Math]::round($dsize / 1mb, 2).tostring() + " MB"; }
		elseif ($dsize -ge 1kb) { $size = [Math]::round($dsize / 1kb, 2).tostring() + " KB"; }
		else { $size = $dsize.tostring() + " B"; }
		$size;
	}
	#endregion
	
	#region return-Win32_PerfFormattedDAte_PerfProc_Process
	### These two functions get their data depending on how new the OS is. In the most recent version of Task Manager,
	### it uses WorkingSetPrivate (that's the default) for the memory, but that isn't a property on older versions.
	### Whether it's available or not is determined during initialization.
	function return-Win32_PerfFormattedData_PerfProc_Process
	{
		param ($server);
		if ($things["wsp"])
		{
			(CIM-Stuff Win32_PerfFormattedData_PerfProc_Process) |
			select-object -property idprocess, name, @{ expression = { $_.workingsetprivate }; name = "workingset" }, percentprocessortime;
		}
		else
		{
			(CIM-Stuff Win32_PerfFormattedData_PerfProc_Process) | select-object -property idprocess, name, workingset, percentprocessortime;
		}
	}
	#endregion
	
	#region return-win32_perfrawdata_perfproc_process
	function return-win32_perfrawdata_perfproc_process
	{
		param ($server);
		if ($things["wsp"])
		{
			(CIM-Stuff win32_perfrawdata_perfproc_process) |
			select-object -property idprocess, name, @{ expression = { $_.workingsetprivate }; name = "workingset" }, percentprocessortime;
		}
		else
		{
			(CIM-Stuff win32_perfrawdata_perfproc_process) | select-object -property idprocess, name, workingset, percentprocessortime;
		}
	}
	#endregion
	
	#region return-win32_service
	function return-win32_Service
	{
		CIM-Stuff win32_Service | select-object -property name, displayname, processid, description, state, startmode, startname | Sort-Object -property displayname;
	}
	
	#endregion
	
	#region return-win32_PerfRawData_PerfOS_processor
	function return-win32_PerfRawData_PerfOS_processor
	{
		CIM-Stuff win32_PerfRawData_PerfOS_processor | select-object -property name, percentprocessortime, timestamp_sys100ns;
	}
	#endregion
	
	#region CIM-Stuff
	function CIM-Stuff
	{
		param ($class,
			$filter);
		if ($filter -eq $null)
		{
			Get-CimInstance -class $class -CimSession $things["session"];
		}
		else
		{
			Get-CimInstance -class $class -filter $filter -CimSession $things["session"];
		}
	}
	#endregion
	
	#region CIM-Method
	function CIM-Method
	{
		param ($class,
			$filter,
			$method);
		CIM-Stuff $class $filter | Invoke-CimMethod -CimSession $things["session"] -MethodName $method;
	}
	#endregion
	
	#region get-allCPU
	function get-allCPU
	{
		### This calculates the CPU for the individual processors and adds them into $hash.
		$server = $things["machine"];
		$p2 = return-win32_PerfRawData_PerfOS_processor $server;
		for ($i = 0; $i -lt $p2.length; $i++)
		{
			$key = $p2[$i].Name;
			$cpu = 100.0 - (pcnt-cpu $p2[$i].percentprocessortime $keyhash[$key][0] ([system.double]$p2[$i].timestamp_sys100ns - [system.double]$keyhash[$key][1]));
			$count = $hash[$key].count;
			if ($cpu -lt 0.0) { $cpu = 0.0; }
			$x = ($count * 5) + $parms[$key][0];
			$y = $parms[$key][1] - $cpu;
			$parms[$key][2] = $cpu;
			$point = new-object system.drawing.point($x, $y);
			$pointhash[$key] += $y;
			$hash[$key] += $point;
			$keyhash[$key] = @([system.double]$p2[$i].percentprocessortime, [system.double]$p2[$i].timestamp_sys100ns);
		}
		
		##### Memory
		$tpm = (CIM-Stuff win32_computersystem).totalphysicalmemory;
		$avb = (CIM-Stuff Win32_PerfRawData_PerfOS_Memory).availablebytes;
		$newy = (1 - ([system.double]$avb / [system.double]$tpm)) * 200;
		$count = $hash["Memory"].count;
		$x = ($count * 5) + $parms["Memory"][0];
		$y = $parms["Memory"][1] - $newy;
		$parms["Memory"][2] = $newy / 2;
		$parms["Memory"][7] = [system.double]$tpm - [system.double]$avb;
		$point = new-object system.drawing.point($x, $y);
		$pointhash["Memory"] += $y;
		$hash["Memory"] += $point;
	}
	#endregion
	
	#region Plot
	function Plot
	{
		### Draw the pretty pictures of CPU and Memory usage
		param ($old_btmp);
		if ($old_btmp -ne $null) { $old_btmp.Dispose(); }
		$btmp = new-object system.drawing.bitmap($parms["Bitmap"][0], $parms["Bitmap"][1]);
		$grfx = [system.drawing.graphics]::fromimage($btmp);
		
		### Coordinates drawing the graphs for the CPU and memory.
		$orderarray = build-order;
		build-axes $grfx;
		for ($i = 0; $i -lt $orderarray.count; $i++)
		{
			$key = $orderarray[$i];
			$ptarray = $hash[$key];
			for ($j = 1; $j -lt $ptarray.count; $j++)
			{
				$grfx.DrawLine($things["plotpens"][$j - 1], $ptarray[$j - 1], $ptarray[$j]);
			}
		}
		
		$Picturebox1.image = $btmp;
		$grfx.Dispose();
		$pointhash = shift-arrays $pointhash;
		reload-points;
		$error.clear();
		$btmp;
	}
	#endregion
	
	#region reload-points
	function reload-points
	{
		### This may seem like a lot of trouble for nothing, but if you go ahead and turn everything into drawing points and
		### store them in an array to pass into DrawLines, it works much more smoothly than passing the coordinates into
		### DrawLine one at a time and having it do the conversion. Take my word for it, watching it draw a bunch of line
		### segments one at a time is entertaining as hell, but this gives better performance.
		$pts = @{ };
		foreach ($key in $keyhash.Keys) { $points = @(new-object system.drawing.point($parms[$key][0], $pointhash[$key][0])); $pts.Add($key, $points); }
		for ($i = 1; $i -lt $pointhash["_Total"].count; $i++)
		{
			$x = ($i * 5);
			foreach ($key in $keyhash.Keys)
			{
				$pts[$key] += new-object system.drawing.point(($x + $parms[$key][0]), $pointhash[$key][$i]);
			}
		}
		
		foreach ($key in $keyhash.Keys) { $hash[$key] = $pts[$key]; }
		$pts = $null;
	}
	#endregion
	
	#region shift-arrays
	### We only maintain 100 sets of data for each CPU and the memory. When the array gets to 100, we
	### pop off the top one and the new one gets added to the end.
	function shift-arrays ($myhash)
	{
		if ($myhash["_Total"].length -ge 100)
		{
			$null, $things["plotpens"] = $things["plotpens"];
			foreach ($key in $keyhash.Keys)
			{
				$null, $myhash[$key] = $myhash[$key];
			}
		}
		
		$myhash;
	}
	#endregion
	
	#region build-order
	### Probably not needed, but I want to make sure that the CPUs are ordered numerically. It just makes things neater.
	function build-order
	{
		$count = $keyhash.count;
		$count = $count - 1;
		$orderarray = @(0..$count);
		for ($i = 0; $i -lt $count - 1; $i++) { $orderarray[$i] = [system.string]$i; }
		$orderarray[$count - 1] = "_Total";
		$orderarray[$count] = "Memory";
		$orderarray;
	}
	#endregion
	
	#region build-axes
	function build-axes
	{
		param ($grfx);
		### The various drawing surfaces for each processor and memory are stored in the $parms hash. That
		### way we don't have to keep recalculating them for each refresh.
		$orderarray = build-order;
		$mypen = $pens["white"];
		$mypen.Width = 2;
		$font = $fonts["verdana8"];
		$brush = $brushes["red"];
		$y = $add = 100;
		$x = -550;
		$xstrpt = $x - 50;
		for ($i = 0; $i -lt $orderarray.count; $i++)
		{
			$key = $orderarray[$i];
			$x = $parms[$key][0];
			$y = $parms[$key][1];
			if ($key -eq "Memory") { $add = 200; }
			$grfx.FillRectangle($parms[$key][4], $parms[$key][3]);
			$grfx.Drawline($mypen, $x, $y, $x, $y - $add);
			$grfx.Drawline($mypen, $x, $y, $x + 500, $y);
			$grfx.DrawString($key, $font, $brush, $parms[$key][5]);
			$pct = "{0:#.##}%" -f $parms[$key][2];
			$grfx.DrawString($pct, $font, $brush, $parms[$key][6]);
		}
		
		$newgb = "{0:#.##}GB" -f ($parms["Memory"][7] / 1gb);
		$grfx.DrawString($newgb, $font, $brush, $parms["Memory"][8]);
		
	}
	#endregion
	
	#region update-procs-label
	function update-Procs-Label
	{
		$label2.Text = "Updating every " + $things["timer"].interval.ToString() + " ms -- Processes: " +
		($things["procs"]).ToString() + "  |  CPU Usage: " + ($things["cpu"]).ToString() + "%";
	}
	#endregion
	
	#region update-status-label
	function update-Status-Label
	{
		$label3.Text = $args[0];
		$label3.update();
	}
	#endregion
	
	#region restart-timer
	### Called when the "Pause"/"Restart" button is pushed.
	function Restart-timer
	{
		$button2.Text = "Pause";
		$button2.add_click({ Stop-timer; });
		$things["timer"].Enabled = $true;
		$things["timer"].Start();
	}
	#endregion
	
	#region stop-timer
	function Stop-timer
	{
		$things["timer"].Enabled = $false;
		$things["timer"].Stop();
		$button2.Text = "Restart";
		$button2.add_click({ Restart-timer; });
	}
	#endregion
	
	#region Stop-stuff
	### Try to shut down in an orderly fashion. Called when the "Quit" button is pressed.
	function Stop-stuff
	{
		Stop-timer;
		$things["timer"].Dispose();
		if ($things["session"] -ne $null) { remove-cimsession -cimsession $things["session"] }
		$things["session"].Close();
		$things["session"].Dispose();
	}
	#endregion
	
	#region getStatus
	function GetStatus
	{
		param ($service,
			$check_status)
		### This is supposed to sit and wait until a service has been stopped or started. It tests the
		### service status until it matches what we want it to be. If it hasn't done what we requested
		### after 30 seconds, we flag an error and go on.
		$server = $things["machine"];
		$counter = 0;
		$results = 1;
		$test_status = (CIM-Stuff win32_service ("name='" + $service + "'")).State;
		### The thinking behind this is that if it can't kill the service withing 30 seconds, it isn't going to die. So
		### we won't leave ourself hanging out in here. We'll just flag an error and go on with this tedium we call life.
		while (($check_status -ne $test_status) -AND ($counter -lt 60))
		{
			start-sleep -m 500;
			$test_status = (CIM-Stuff win32_service ("name='" + $service + "'")).State;
			$counter++;
			waitingtodie $counter "-";
			if ($counter -eq 60) { $results = 0; };
		}
		
		$results;
	}
	#endregion
	
	#region initialize-the-hashes
	function initialize-the-hashes
	{
		$things["timer"].Dispose();
		if ($things["session"] -ne $null)
		{
			remove-cimsession -cimsession $things["session"];
			$things["session"].Close();
			$things["session"].Dispose();
		}
		
		$keyhash.clear();
		$hash.clear();
		$pointhash.clear();
		$parms.clear();
		$beforeprocs.clear();
		$things.clear();
		initialize-things;
	}
	#endregion
	
	#region initialize-things
	function initialize-things
	{
		$things.add("wsp", $false);
		$things.add("adsi", $true);
		$things.add("LVCols", $null);
		$things.add("SDGCols", $null);
		$things.add("colors", (.{$args} red darkgreen black lightgreen white blue));
		$things.add("timer", (new-object System.Windows.Forms.timer));
		$things.add("machine", $textbox1.text);
		$things.add("plotpens", @((new-object system.drawing.pen("lightgreen")), (new-object system.drawing.pen("lightgreen"))));
		$things.add("procs", 0);
		$things.add("cpu", 0);
		$things.add("session", $null);
		$things.add("response", $null);
		if ($things["machine"] -gt "")
		{
			$things["session"] = New-CimSession -ComputerName $things["machine"] -SessionOption (New-CimSessionOption -Protocol Dcom);
		}
	}
	#endregion
	
	#region test-interval
	function test-interval
	{
		param ($span)
		if ($span -gt $things["timer"].interval) { $things["plotpens"] += $pens["red"]; }
		else { $things["plotpens"] += $pens["lightgreen"] };
	}
	#endregion
	
	#region do-it-to-it
	function do-it-to-it
	{
		### Test the status of the telephony service on the remote machine. We don't really care what the status
		### is, we just want to know that we can get to it. Through playing around with some of this stuff, I've
		### found that this is a way to test that a server is available without generating a bunch of errors.
		$server = $textbox1.text;
		#   if ((new-object system.serviceprocess.servicecontroller("telephony", $server)).status -eq $null) {
		#     $rtrn = [system.windows.forms.messagebox]::Show("Cannot find the $server machine. Make sure it exists and you have permissions to it.");
		#    $main.Cursor = [System.Windows.Forms.Cursors]::Default;
		#   return;
		#}
		
		initialize-the-hashes;
		
		try
		{
			$props = CIM-Stuff win32_perfrawdata_perfproc_process;
			if ($props[0].__property_count -gt 36) { $things["wsp"] = $true; }
		}
		catch
		{
			$rtrn = [system.windows.forms.messagebox]::Show("It looks as though the $server machine does not allow remote WMI calls. We won't be able to monitor it.");
			return;
		}
		
		### Start initializing things.
		initialize-stuff;
		get-services;
		get-allCPU;
		$btmp = new-object system.drawing.bitmap($parms["Bitmap"][0], $parms["Bitmap"][1]);
		get-processes $false;
		$btmp = Plot $btmp;
		
		### The $handler is a list of what to do when the timer fires off.
		### Notice that timer is stopped until the remote machine responds and is then restarted. This prevents
		### putting more stress on a remote box that's already overloaded.
		$handler = {
			$things["timer"].Stop();
			$tmthen = get-date;
			get-allCPU;
			get-processes $true;
			$tmspn = [math]::round((new-timespan -start $tmthen).totalmilliseconds, 0);
			test-interval $tmspn;
			$btmp = Plot $btmp;
			$things["timer"].Start();
		}
		
		
		### This is how I've implemented the update interval. The regular TaskManager refreshes about once a
		### second, but this can run into problems if you try that, particularly if you're going for a machine that
		### is pretty busy. If things are pegged on a machine, it may not have the resources to get back to you every
		### second, so after we've initialized everything, we take a reading of how long it takes to run through the
		### three things it's going to have to do each time the timer fires off. It may take a long time to
		### get through with the initial stuff, but seems to work pretty well after that. To be honest, I haven't run
		### into many cases where the machine resources have slowed things down. It seems mostly limited by
		### the network. You can probably hardcode this to run once a second and it will do great 99 times out of
		### a 100, but that one time when you really need it will be the one that messes up.
		$et = [System.Diagnostics.Stopwatch]::StartNew();
		invoke-command -scriptblock $handler;
		$et.Stop();
		$intrvl = [Math]::round($et.Elapsed.TotalMilliseconds, 0);
		if ($intrvl -lt 1000) { $intrvl = 1000; }
		$things["timer"].interval = $intrvl;
		$trackbar1.value = $intrvl;
		$things["timer"].add_tick($handler);
		$things["timer"].Start();
	}
	#endregion
	
	#endregion Source: Globals.ps1

#region Source: About.psf
function Call-About_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
TR0AAB+LCAAAAAAABADVWW2P2jgQ/l7p/oMVne4TBQKbBfYgEtCudFrudgW09FvlOAP4cOLINi/p
rz+HQGELPZywoCIkRJIZP555Hg/2pNkHwhcg4g9YYaR/SMrDllWx3N/eIdR8FnRCQ8weKYN/cABu
2+NzVYzkuFk6eJZ6eP8CUUjFEbSsQSwVBMURDX2+lMVHLoL0u4COPSqgz5sJ3BXLyaeAunOm5gJa
IcyVwKyAXuYeo+QJ4iGfQdjyajXsEOfeblTvoFxvWCjUU2lZYz2ebSEypcwX2s7q8lAJzmQamJ7o
i+ARCBVvHNqEQKQ6c6V4uLXRVn0Yg/YnsDHz1gbPTxYqbQcqbUf6ychdRiFUA/oNLLdq1wuoel87
6ZTko8OFD2KgYqY9H+kK/A8UMz456fw3XtFA43X4SjtiJuG0Cw2zuiScW+460SdtBwoL9cIlVTRJ
b1cnREdGBEB40ncIK2Wlwju0/bjQQ20Mexz7mwl9TX43S+unW9PTyuxTMk3QdBIuLlChsZTG8vjq
f3V6mI8eJzhNo10tILtaOcjKz7jaxzRw6gP2n0MWW+5QzA/1cITltcYrjWRajTsDhyH2/gp9WCWh
mJgnSkCrgD3ICBN9IxIgQSw06HCKw5lEij+8exQ4JJTL91/wgoJAXazQ+z8m6k+0XC6LDH+Ll7ps
+QENi4QHh5IqpUIxl02PhrMe9oBdXDRMI7EEqZJbMk45KUDGktkhGvNvO/cFVDHic0e/yfDafKB4
ZCzHtHD83p6rKRcfA0zZMadXFURHq8s1mYG/H/rXvfs/FJVbEEv++pKIpW5eX3aIlxWLyfBniWU0
GuWTiv2mUrmOTBKUWm6J3DV0sS875hpZw5nro5ZdH/UMdEeRztE6lh6W6lPkY3Vk5/MrU1fPTV0l
B3Mmud0wVy5nZs5EFylzCVvoFumy8/NVzVaMU7SL8mUinpSvEXh6839jXDln/XE6jWxcmSQzf1E0
2fIdFsVNPm+LtvtzVlhW1kzyeo0FdpNM3Z3DVJZTzBrsokwZn1/dJE5MjvQyfmWmzjtwGp3u96jK
cNjMUQqNzpr7x4Hk1m3RdWZLKeMm46ILy+iwl7YI12Q9vAFTaRv44lTtmslZyGqHRIdpuR2uvYMC
6tPJ9LCaHPqlzeM+SD1by31+MnDZ6aJStXXFzdBr3MZmrI2ak1kaZWNpGM3jk4TPVM4xW7fcO5jM
upwlmT7aQnilqtcXbSkh0AoAubXd3IndQBIuGPXeQEXN0vdRf0RJdXsNjDdfG6cRkzdV1wESeEnD
SR6scnXsjGtj2/adMq7i01hfAnadmKjQMuUiHoBYUAK5KMscXZcLuEp4m6j0UtWhXSC275fp2m6W
9l+fuv8BB0Qo+00dAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$linklabel2 = New-Object 'System.Windows.Forms.LinkLabel'
	$linklabel1 = New-Object 'System.Windows.Forms.LinkLabel'
	$label7 = New-Object 'System.Windows.Forms.Label'
	$label8 = New-Object 'System.Windows.Forms.Label'
	$label18 = New-Object 'System.Windows.Forms.Label'
	$label5 = New-Object 'System.Windows.Forms.Label'
	$label6 = New-Object 'System.Windows.Forms.Label'
	$label4 = New-Object 'System.Windows.Forms.Label'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$form1_Load={
		if(Test-Path "C:\Program Files (x86)\Sysinternals" -ErrorAction 'SilentlyContinue') {
			$label13.Text = "Installed"
			$label13.ForeColor = "Green"
		}
		else {
			$label13.Text = "Not Installed"
			$label13.ForeColor = "Red"
		}	
		
		if(Test-Path "C:\Program Files\Nirsoft\NirLauncher.exe" -ErrorAction 'SilentlyContinue') {
			$label16.Text = "Installed"
			$label16.ForeColor = "Green"
		}
		else {
			$label16.Text = "Not Installed"
			$label16.ForeColor = "Red"			
		}
	}
	
	$linklabel1_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	[System.Diagnostics.Process]::Start("$AuthorWWW")
		
	}
	
	$linklabel2_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	[System.Diagnostics.Process]::Start("mailto:$authoremail?subject=$AuthorEmail")
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:About_richtextbox1 = $richtextbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabel2.remove_LinkClicked($linklabel2_LinkClicked)
			$linklabel1.remove_LinkClicked($linklabel1_LinkClicked)
			$form1.remove_Load($form1_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	#
	# form1
	#
	$form1.Controls.Add($richtextbox1)
	$form1.Controls.Add($linklabel2)
	$form1.Controls.Add($linklabel1)
	$form1.Controls.Add($label7)
	$form1.Controls.Add($label8)
	$form1.Controls.Add($label18)
	$form1.Controls.Add($label5)
	$form1.Controls.Add($label6)
	$form1.Controls.Add($label4)
	$form1.Controls.Add($label2)
	$form1.Controls.Add($label1)
	$form1.Controls.Add($buttonOK)
	$form1.AcceptButton = $buttonOK
	$form1.ClientSize = '318, 367'
	$form1.FormBorderStyle = 'FixedDialog'
	$form1.MaximizeBox = $False
	$form1.MinimizeBox = $False
	$form1.Name = 'form1'
	$form1.StartPosition = 'CenterScreen'
	$form1.Text = 'About'
	$form1.add_Load($form1_Load)
	#
	# richtextbox1
	#
	$richtextbox1.Location = '13, 132'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.ReadOnly = $True
	$richtextbox1.Size = '293, 194'
	$richtextbox1.TabIndex = 13
	$richtextbox1.Text = 'Thanks to:
Francios-Xavier Cat -> www.lazywinadmin.com'
	#
	# linklabel2
	#
	$linklabel2.Location = '150, 36'
	$linklabel2.Name = 'linklabel2'
	$linklabel2.Size = '156, 23'
	$linklabel2.TabIndex = 12
	$linklabel2.TabStop = $True
	$linklabel2.Text = "$AuthorEmail"
	$linklabel2.add_LinkClicked($linklabel2_LinkClicked)
	#
	# linklabel1
	#
	$linklabel1.Location = '150, 82'
	$linklabel1.Name = 'linklabel1'
	$linklabel1.Size = '156, 23'
	$linklabel1.TabIndex = 11
	$linklabel1.TabStop = $True
	$linklabel1.Text = "$AuthorWWW"
	$linklabel1.add_LinkClicked($linklabel1_LinkClicked)
	#
	# label7
	#
	$label7.Location = '149, 105'
	$label7.Name = 'label7'
	$label7.Size = '176, 23'
	$label7.TabIndex = 8
	$label7.Text = "$ApplicationLastUpdate"
	#
	# label8
	#
	$label8.Location = '12, 105'
	$label8.Name = 'label8'
	$label8.Size = '100, 23'
	$label8.TabIndex = 7
	$label8.Text = 'Last Update'
	#
	# label18
	#
	$label18.Location = '13, 82'
	$label18.Name = 'label18'
	$label18.Size = '100, 23'
	$label18.TabIndex = 5
	$label18.Text = 'Website'
	#
	# label5
	#
	$label5.Location = '150, 59'
	$label5.Name = 'label5'
	$label5.Size = '176, 23'
	$label5.TabIndex = 6
	$label5.Text = "$ApplicationVersion"
	#
	# label6
	#
	$label6.Location = '13, 59'
	$label6.Name = 'label6'
	$label6.Size = '100, 23'
	$label6.TabIndex = 5
	$label6.Text = 'Version'
	#
	# label4
	#
	$label4.Location = '13, 36'
	$label4.Name = 'label4'
	$label4.Size = '100, 23'
	$label4.TabIndex = 3
	$label4.Text = 'Contact'
	#
	# label2
	#
	$label2.Location = '150, 13'
	$label2.Name = 'label2'
	$label2.Size = '176, 23'
	$label2.TabIndex = 2
	$label2.Text = "$Authorname"
	#
	# label1
	#
	$label1.Location = '13, 13'
	$label1.Name = 'label1'
	$label1.Size = '100, 23'
	$label1.TabIndex = 1
	$label1.Text = 'Author:'
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '231, 332'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = 'OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: About.psf

#region Source: Options.psf
function Call-Options_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
9HT7LvL5hU4P/wXwcsEA32kAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form_options = New-Object 'System.Windows.Forms.Form'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$button2 = New-Object 'System.Windows.Forms.Button'
	$button1 = New-Object 'System.Windows.Forms.Button'
	$textbox8 = New-Object 'System.Windows.Forms.TextBox'
	$textbox9 = New-Object 'System.Windows.Forms.TextBox'
	$label_nirlauncher = New-Object 'System.Windows.Forms.Label'
	$label_sysinternals = New-Object 'System.Windows.Forms.Label'
	$button_OK = New-Object 'System.Windows.Forms.Button'
	$button_Export = New-Object 'System.Windows.Forms.Button'
	$button_import = New-Object 'System.Windows.Forms.Button'
	$button_save = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$button3 = New-Object 'System.Windows.Forms.Button'
	$textbox10 = New-Object 'System.Windows.Forms.TextBox'
	$label_cmrcviewer = New-Object 'System.Windows.Forms.Label'
	$textbox6 = New-Object 'System.Windows.Forms.TextBox'
	$label_sccmnamespace = New-Object 'System.Windows.Forms.Label'
	$checkbox1 = New-Object 'System.Windows.Forms.CheckBox'
	$textbox4 = New-Object 'System.Windows.Forms.TextBox'
	$textbox5 = New-Object 'System.Windows.Forms.TextBox'
	$label_site = New-Object 'System.Windows.Forms.Label'
	$label_sccm = New-Object 'System.Windows.Forms.Label'
	$label_sccmserver = New-Object 'System.Windows.Forms.Label'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$button6 = New-Object 'System.Windows.Forms.Button'
	$button5 = New-Object 'System.Windows.Forms.Button'
	$button4 = New-Object 'System.Windows.Forms.Button'
	$textbox0 = New-Object 'System.Windows.Forms.TextBox'
	$label_configpath = New-Object 'System.Windows.Forms.Label'
	$textbox3 = New-Object 'System.Windows.Forms.TextBox'
	$label_logpath = New-Object 'System.Windows.Forms.Label'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$label_homepath = New-Object 'System.Windows.Forms.Label'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$label_profilepath = New-Object 'System.Windows.Forms.Label'
	$button_abort = New-Object 'System.Windows.Forms.Button'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$FormEvent_Load = {
		#Load Variables into textboxes
		$textbox0.Text = $global:Confpath
		$textbox1.Text = $global:Profilefolder
		$textbox2.Text = $global:Homefolder
		$textbox3.Text = $global:Outfile
		if ($global:SCCMEnabled -eq $true)
		{
			$checkbox1.Checked = $global:SCCMEnabled
			$textbox4.Text = $global:SiteName
			$textbox5.Text = $global:SCCMServer
			$textbox6.Text = $global:SCCMNameSpace
			$textbox10.Text = $global:CmRCViewer
		}
		else
		{
			$checkbox1.Checked = $false
			$textbox4.enabled = $false
			$textbox5.enabled = $false
			$textbox6.enabled = $false
			$textbox10.enabled = $false
		}
		$textbox8.Text = $global:Nirlauncher
		$textbox9.Text = $global:Sysinternals
	}
	############################################################################################
	$checkbox1_CheckedChanged = {
		if ($checkbox1.Checked -eq $true)
		{
			$textbox4.Text = $global:SiteName
			$textbox5.Text = $global:SCCMServer
			$textbox6.Text = $global:SCCMNameSpace
			$textbox10.Text = $global:CmRCViewer
			$textbox4.enabled = $true
			$textbox5.enabled = $true
			$textbox6.enabled = $true
			$textbox10.enabled = $true
		}
		else
		{
			$textbox4.enabled = $false
			$textbox5.enabled = $false
			$textbox6.enabled = $false
			$textbox10.enabled = $false
		}
	}
	
	############################################################################################
	$button_save_Click = {
		if ($textbox1.Text.Length -ne 0)
		{
			if ($textbox2.Text.Length -ne 0)
			{
				if ($textbox3.Text.Length -ne 0)
				{
					if ($checkbox1.Checked -eq $true)
					{
						if ($textbox4.Text.Length -ne 0)
						{
							if ($textbox5.Text.Length -ne 0)
							{
								if ($textbox6.Text.Length -ne 0)
								{
									Save-Config
								}
								else
								{
									Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
								}
							}
							else
							{
								Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
							}
						}
						else
						{
							Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
						}
					}
					else
					{
						Save-Config
					}
				}
				else
				{
					Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
				}
			}
			else
			{
				Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
			}
		}
		else
		{
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
		}
	}
	############################################################################################
	$button_OK_Click = {
		if ($textbox1.Text.Length -ne 0)
		{
			if ($textbox2.Text.Length -ne 0)
			{
				if ($textbox3.Text.Length -ne 0)
				{
					if ($checkbox1.Checked -eq $true)
					{
						if ($textbox4.Text.Length -ne 0)
						{
							if ($textbox5.Text.Length -ne 0)
							{
								if ($textbox6.Text.Length -ne 0)
								{
									Save-Config
									$form_options.DialogResult = 'OK'
								}
								else
								{
									Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
								}
							}
							else
							{
								Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
							}
						}
						else
						{
							Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
						}
					}
					else
					{
						Save-Config
						$form_options.DialogResult = 'OK'
					}
				}
				else
				{
					Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
				}
			}
			else
			{
				Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
			}
		}
		else
		{
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
		}
	}
	############################################################################################
	$button_Export_Click = {
		$folderbrowserdialog1.ShowDialog()
		$save = $folderbrowserdialog1.SelectedPath += "/config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = $SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $save -NoTypeInformation -Force
	}
	############################################################################################
	$button_abort_Click = { $Options.Close() }
	############################################################################################
	$button_import_Click = {
		$openfiledialog1.ShowDialog()
		$load = $openfiledialog1.FileNames
		$Import = Import-Csv -Path $load
		Add-RichTextBox -text $Import
		foreach ($Line in $Import)
		{
			$global:Profilefolder = $($Line."global:Profilefolder")
			$global:Homefolder = $($Line."global:Homefolder")
			$global:Outfile = $($Line."global:Outfile")
			$global:SiteName = $($Line."global:SiteName")
			$global:SCCMServer = $($Line."global:SCCMServer")
			$global:SCCMNameSpace = $($Line."global:SCCMNameSpace")
			$global:SCCMEnabled = $($Line."global:SCCMEnabled")
			$global:Nirlauncher = $($Line."global:Nirlauncher")
			$global:Sysinternals = $($Line."global:Sysinternals")
			$global:CmRCViewer = $($Line."global:CmRCViewer")
		}
		# Saving the imported Config
		Save-Config
	}
	############################################################################################
	
	$button1_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox8.Text = $folderbrowserdialog1.SelectedPath
		$global:Nirlauncher = $textbox8.Text
	}
	
	$button2_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox9.Text = $folderbrowserdialog1.SelectedPath
		$global:Sysinternals = $textbox9.Text
	}
	
	$button3_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox10.Text = $folderbrowserdialog1.SelectedPath
		$global:CmRCViewer = $textbox9.Text
	}
	
	$button4_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox3.Text = $folderbrowserdialog1.SelectedPath
		$global:logpath = $textbox3.Text
	}
	
	$button5_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox1.Text = $folderbrowserdialog1.SelectedPath
		$global:profilepath = $textbox1.Text
	}
	
	$button6_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox2.Text = $folderbrowserdialog1.SelectedPath
		$global:outfile = $textbox2.Text
	}
	
	$form_options_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		$Options.Close()
	}
	############################################################################################
	#region Save-Config
	function Save-Config
	{
		$global:Profilefolder = $textbox1.Text
		$global:Homefolder = $textbox2.Text
		$global:Outfile = $textbox3.Text
		$global:SiteName = $textbox4.Text
		$global:SCCMServer = $textbox5.Text
		$global:SCCMNameSpace = $textbox6.Text
		$global:SCCMEnabled = [bool]$checkbox1.Checked
		$global:Nirlauncher = $textbox8.Text
		$global:Sysinternals = $textbox9.Text
		$global:CmRCViewer = $textbox10.Text
		$Exportpath = $Confpath + "/Config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = $SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $Exportpath -NoTypeInformation
	}
	#endregion 
	############################################################################################
	
	
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form_options.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Options_textbox8 = $textbox8.Text
		$script:Options_textbox9 = $textbox9.Text
		$script:Options_textbox10 = $textbox10.Text
		$script:Options_textbox6 = $textbox6.Text
		$script:Options_checkbox1 = $checkbox1.Checked
		$script:Options_textbox4 = $textbox4.Text
		$script:Options_textbox5 = $textbox5.Text
		$script:Options_textbox0 = $textbox0.Text
		$script:Options_textbox3 = $textbox3.Text
		$script:Options_textbox2 = $textbox2.Text
		$script:Options_textbox1 = $textbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$button2.remove_Click($button2_Click)
			$button1.remove_Click($button1_Click)
			$button_OK.remove_Click($button_OK_Click)
			$button_Export.remove_Click($button_Export_Click)
			$button_import.remove_Click($button_import_Click)
			$button_save.remove_Click($button_save_Click)
			$button3.remove_Click($button3_Click)
			$checkbox1.remove_CheckedChanged($checkbox1_CheckedChanged)
			$button6.remove_Click($button6_Click)
			$button5.remove_Click($button5_Click)
			$button4.remove_Click($button4_Click)
			$button_abort.remove_Click($button_abort_Click)
			$form_options.remove_FormClosed($form_options_FormClosed)
			$form_options.remove_Load($FormEvent_Load)
			$form_options.remove_Load($Form_StateCorrection_Load)
			$form_options.remove_Closing($Form_StoreValues_Closing)
			$form_options.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form_options.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# form_options
	#
	$form_options.Controls.Add($groupbox3)
	$form_options.Controls.Add($button_OK)
	$form_options.Controls.Add($button_Export)
	$form_options.Controls.Add($button_import)
	$form_options.Controls.Add($button_save)
	$form_options.Controls.Add($groupbox2)
	$form_options.Controls.Add($groupbox1)
	$form_options.Controls.Add($button_abort)
	$form_options.AcceptButton = $button_OK
	$form_options.CancelButton = $button_abort
	$form_options.ClientSize = '484, 489'
	$form_options.FormBorderStyle = 'FixedDialog'
	$form_options.MaximizeBox = $False
	$form_options.MinimizeBox = $False
	$form_options.Name = 'form_options'
	$form_options.StartPosition = 'CenterScreen'
	$form_options.Text = 'Options'
	$form_options.add_FormClosed($form_options_FormClosed)
	$form_options.add_Load($FormEvent_Load)
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($button2)
	$groupbox3.Controls.Add($button1)
	$groupbox3.Controls.Add($textbox8)
	$groupbox3.Controls.Add($textbox9)
	$groupbox3.Controls.Add($label_nirlauncher)
	$groupbox3.Controls.Add($label_sysinternals)
	$groupbox3.Location = '12, 357'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '460, 87'
	$groupbox3.TabIndex = 24
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'External Tools (optional)'
	#
	# button2
	#
	$button2.BackColor = 'Transparent'
	#region Binary Data
	$button2.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button2.BackgroundImageLayout = 'Center'
	$button2.FlatStyle = 'Flat'
	$button2.ForeColor = 'Control'
	$button2.Location = '419, 42'
	$button2.Name = 'button2'
	$button2.Size = '30, 26'
	$button2.TabIndex = 16
	$button2.UseVisualStyleBackColor = $False
	$button2.add_Click($button2_Click)
	#
	# button1
	#
	$button1.BackColor = 'Transparent'
	#region Binary Data
	$button1.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button1.BackgroundImageLayout = 'Center'
	$button1.FlatStyle = 'Flat'
	$button1.ForeColor = 'Control'
	$button1.Location = '419, 15'
	$button1.Name = 'button1'
	$button1.Size = '30, 26'
	$button1.TabIndex = 14
	$button1.UseVisualStyleBackColor = $False
	$button1.add_Click($button1_Click)
	#
	# textbox8
	#
	$textbox8.Location = '76, 19'
	$textbox8.Name = 'textbox8'
	$textbox8.Size = '337, 20'
	$textbox8.TabIndex = 13
	#
	# textbox9
	#
	$textbox9.Location = '76, 46'
	$textbox9.Name = 'textbox9'
	$textbox9.Size = '337, 20'
	$textbox9.TabIndex = 15
	#
	# label_nirlauncher
	#
	$label_nirlauncher.Location = '7, 21'
	$label_nirlauncher.Name = 'label_nirlauncher'
	$label_nirlauncher.Size = '100, 23'
	$label_nirlauncher.TabIndex = 2
	$label_nirlauncher.Text = 'Nirlauncher:'
	#
	# label_sysinternals
	#
	$label_sysinternals.Location = '7, 48'
	$label_sysinternals.Name = 'label_sysinternals'
	$label_sysinternals.Size = '100, 23'
	$label_sysinternals.TabIndex = 4
	$label_sysinternals.Text = 'Sysinternals:'
	#
	# button_OK
	#
	$button_OK.Anchor = 'Bottom, Right'
	$button_OK.Location = '73, 454'
	$button_OK.Name = 'button_OK'
	$button_OK.Size = '75, 23'
	$button_OK.TabIndex = 17
	$button_OK.Text = 'OK'
	$button_OK.UseVisualStyleBackColor = $True
	$button_OK.add_Click($button_OK_Click)
	#
	# button_Export
	#
	$button_Export.Anchor = 'Bottom, Right'
	$button_Export.Location = '154, 454'
	$button_Export.Name = 'button_Export'
	$button_Export.Size = '75, 23'
	$button_Export.TabIndex = 18
	$button_Export.Text = 'Export'
	$button_Export.UseVisualStyleBackColor = $True
	$button_Export.add_Click($button_Export_Click)
	#
	# button_import
	#
	$button_import.Anchor = 'Bottom, Right'
	$button_import.DialogResult = 'OK'
	$button_import.Location = '235, 454'
	$button_import.Name = 'button_import'
	$button_import.Size = '75, 23'
	$button_import.TabIndex = 19
	$button_import.Text = 'Import'
	$button_import.UseVisualStyleBackColor = $True
	$button_import.add_Click($button_import_Click)
	#
	# button_save
	#
	$button_save.Anchor = 'Bottom, Right'
	$button_save.Location = '316, 454'
	$button_save.Name = 'button_save'
	$button_save.Size = '75, 23'
	$button_save.TabIndex = 20
	$button_save.Text = 'Speichern'
	$button_save.UseVisualStyleBackColor = $True
	$button_save.add_Click($button_save_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($button3)
	$groupbox2.Controls.Add($textbox10)
	$groupbox2.Controls.Add($label_cmrcviewer)
	$groupbox2.Controls.Add($textbox6)
	$groupbox2.Controls.Add($label_sccmnamespace)
	$groupbox2.Controls.Add($checkbox1)
	$groupbox2.Controls.Add($textbox4)
	$groupbox2.Controls.Add($textbox5)
	$groupbox2.Controls.Add($label_site)
	$groupbox2.Controls.Add($label_sccm)
	$groupbox2.Controls.Add($label_sccmserver)
	$groupbox2.Location = '13, 183'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '459, 168'
	$groupbox2.TabIndex = 23
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'SCCM'
	#
	# button3
	#
	$button3.BackColor = 'Transparent'
	#region Binary Data
	$button3.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button3.BackgroundImageLayout = 'Center'
	$button3.FlatStyle = 'Flat'
	$button3.ForeColor = 'Control'
	$button3.Location = '418, 123'
	$button3.Name = 'button3'
	$button3.Size = '30, 26'
	$button3.TabIndex = 12
	$button3.UseVisualStyleBackColor = $False
	$button3.add_Click($button3_Click)
	#
	# textbox10
	#
	$textbox10.Location = '76, 126'
	$textbox10.Name = 'textbox10'
	$textbox10.Size = '337, 20'
	$textbox10.TabIndex = 11
	#
	# label_cmrcviewer
	#
	$label_cmrcviewer.Location = '6, 128'
	$label_cmrcviewer.Name = 'label_cmrcviewer'
	$label_cmrcviewer.Size = '100, 23'
	$label_cmrcviewer.TabIndex = 9
	$label_cmrcviewer.Text = 'CmRCViewer:'
	#
	# textbox6
	#
	$textbox6.Location = '76, 100'
	$textbox6.Name = 'textbox6'
	$textbox6.Size = '337, 20'
	$textbox6.TabIndex = 10
	#
	# label_sccmnamespace
	#
	$label_sccmnamespace.Location = '6, 102'
	$label_sccmnamespace.Name = 'label_sccmnamespace'
	$label_sccmnamespace.Size = '100, 23'
	$label_sccmnamespace.TabIndex = 7
	$label_sccmnamespace.Text = 'Namespace:'
	#
	# checkbox1
	#
	$checkbox1.Checked = $True
	$checkbox1.CheckState = 'Checked'
	$checkbox1.Location = '76, 19'
	$checkbox1.Name = 'checkbox1'
	$checkbox1.Size = '15, 24'
	$checkbox1.TabIndex = 7
	$checkbox1.UseVisualStyleBackColor = $True
	$checkbox1.add_CheckedChanged($checkbox1_CheckedChanged)
	#
	# textbox4
	#
	$textbox4.Location = '76, 47'
	$textbox4.Name = 'textbox4'
	$textbox4.Size = '337, 20'
	$textbox4.TabIndex = 8
	#
	# textbox5
	#
	$textbox5.Location = '76, 74'
	$textbox5.Name = 'textbox5'
	$textbox5.Size = '337, 20'
	$textbox5.TabIndex = 9
	#
	# label_site
	#
	$label_site.Location = '7, 49'
	$label_site.Name = 'label_site'
	$label_site.Size = '100, 23'
	$label_site.TabIndex = 2
	$label_site.Text = 'Site:'
	#
	# label_sccm
	#
	$label_sccm.Location = '6, 22'
	$label_sccm.Name = 'label_sccm'
	$label_sccm.Size = '100, 23'
	$label_sccm.TabIndex = 0
	$label_sccm.Text = 'SCCM:'
	#
	# label_sccmserver
	#
	$label_sccmserver.Location = '7, 76'
	$label_sccmserver.Name = 'label_sccmserver'
	$label_sccmserver.Size = '100, 23'
	$label_sccmserver.TabIndex = 4
	$label_sccmserver.Text = 'Server:'
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($button6)
	$groupbox1.Controls.Add($button5)
	$groupbox1.Controls.Add($button4)
	$groupbox1.Controls.Add($textbox0)
	$groupbox1.Controls.Add($label_configpath)
	$groupbox1.Controls.Add($textbox3)
	$groupbox1.Controls.Add($label_logpath)
	$groupbox1.Controls.Add($textbox2)
	$groupbox1.Controls.Add($label_homepath)
	$groupbox1.Controls.Add($textbox1)
	$groupbox1.Controls.Add($label_profilepath)
	$groupbox1.Location = '13, 13'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '459, 164'
	$groupbox1.TabIndex = 22
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'General'
	#
	# button6
	#
	$button6.BackColor = 'Transparent'
	#region Binary Data
	$button6.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button6.BackgroundImageLayout = 'Center'
	$button6.FlatStyle = 'Flat'
	$button6.ForeColor = 'Control'
	$button6.Location = '418, 66'
	$button6.Name = 'button6'
	$button6.Size = '30, 26'
	$button6.TabIndex = 4
	$button6.UseVisualStyleBackColor = $False
	$button6.add_Click($button6_Click)
	#
	# button5
	#
	$button5.BackColor = 'Transparent'
	#region Binary Data
	$button5.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button5.BackgroundImageLayout = 'Center'
	$button5.FlatStyle = 'Flat'
	$button5.ForeColor = 'Control'
	$button5.Location = '418, 41'
	$button5.Name = 'button5'
	$button5.Size = '30, 26'
	$button5.TabIndex = 2
	$button5.UseVisualStyleBackColor = $False
	$button5.add_Click($button5_Click)
	#
	# button4
	#
	$button4.BackColor = 'Transparent'
	#region Binary Data
	$button4.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button4.BackgroundImageLayout = 'Center'
	$button4.FlatStyle = 'Flat'
	$button4.ForeColor = 'Control'
	$button4.Location = '418, 93'
	$button4.Name = 'button4'
	$button4.Size = '30, 26'
	$button4.TabIndex = 6
	$button4.UseVisualStyleBackColor = $False
	$button4.add_Click($button4_Click)
	#
	# textbox0
	#
	$textbox0.Location = '76, 18'
	$textbox0.Name = 'textbox0'
	$textbox0.ReadOnly = $True
	$textbox0.Size = '337, 20'
	$textbox0.TabIndex = 0
	#
	# label_configpath
	#
	$label_configpath.Location = '8, 20'
	$label_configpath.Name = 'label_configpath'
	$label_configpath.Size = '100, 23'
	$label_configpath.TabIndex = 8
	$label_configpath.Text = 'Configpath:'
	#
	# textbox3
	#
	$textbox3.Location = '76, 98'
	$textbox3.Name = 'textbox3'
	$textbox3.Size = '337, 20'
	$textbox3.TabIndex = 5
	#
	# label_logpath
	#
	$label_logpath.Location = '7, 100'
	$label_logpath.Name = 'label_logpath'
	$label_logpath.Size = '100, 23'
	$label_logpath.TabIndex = 4
	$label_logpath.Text = 'Logpath:'
	#
	# textbox2
	#
	$textbox2.Location = '76, 70'
	$textbox2.Name = 'textbox2'
	$textbox2.Size = '337, 20'
	$textbox2.TabIndex = 3
	#
	# label_homepath
	#
	$label_homepath.Location = '7, 72'
	$label_homepath.Name = 'label_homepath'
	$label_homepath.Size = '100, 23'
	$label_homepath.TabIndex = 2
	$label_homepath.Text = 'Homepath:'
	#
	# textbox1
	#
	$textbox1.Location = '76, 44'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '337, 20'
	$textbox1.TabIndex = 1
	#
	# label_profilepath
	#
	$label_profilepath.Location = '7, 46'
	$label_profilepath.Name = 'label_profilepath'
	$label_profilepath.Size = '100, 23'
	$label_profilepath.TabIndex = 0
	$label_profilepath.Text = 'Profilepath:'
	#
	# button_abort
	#
	$button_abort.Anchor = 'Bottom, Right'
	$button_abort.DialogResult = 'Cancel'
	$button_abort.Location = '397, 454'
	$button_abort.Name = 'button_abort'
	$button_abort.Size = '75, 23'
	$button_abort.TabIndex = 21
	$button_abort.Text = 'Abbrechen'
	$button_abort.UseVisualStyleBackColor = $True
	$button_abort.add_Click($button_abort_Click)
	#
	# folderbrowserdialog1
	#
	#
	# openfiledialog1
	#
	$openfiledialog1.FileName = 'openfiledialog1'
	$openfiledialog1.Filter = 'CSV-Dateien|*.csv'
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$form_options.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form_options.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form_options.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form_options.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form_options.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form_options.ShowDialog()

}
#endregion Source: Options.psf

#region Source: Taskmanager.psf
function Call-Taskmanager_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$listbox1 = New-Object 'System.Windows.Forms.ListBox'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$listview2 = New-Object 'System.Windows.Forms.ListView'
	$toolstrip1 = New-Object 'System.Windows.Forms.ToolStrip'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$trackbar1 = New-Object 'System.Windows.Forms.TrackBar'
	$label3 = New-Object 'System.Windows.Forms.Label'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$Image_Name = New-Object 'System.Windows.Forms.ColumnHeader'
	$PID = New-Object 'System.Windows.Forms.ColumnHeader'
	$User_Name = New-Object 'System.Windows.Forms.ColumnHeader'
	$CPU = New-Object 'System.Windows.Forms.ColumnHeader'
	$Memory_Usage = New-Object 'System.Windows.Forms.ColumnHeader'
	$toolstriplabel1 = New-Object 'System.Windows.Forms.ToolStripLabel'
	$textbox1 = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$button1 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button2 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button3 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button4 = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator2 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator3 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$form1_Load={
		Get-ComputerTxtBox
		$textbox1.Text = $ComputerName
	}
	
	   ### This sets up the context menu for a selected item on the services page.
	   $row_click = { set-context-menu };
	
	   ### $listview2(the listview that shows the services)
	   $listview2.AllowColumnReorder = "True";
	   $listview2.Dock = "Fill";
	   $listview2.Name = "SDGCols";
	   $listview2.FullRowSelect = "True";
	   $listview2.View = "Details";
	   $listview2.MultiSelect = $false;
	   $listview2.Columns.Add("displayname", "Display Name", 100).tag = [System.String];
	   $listview2.Columns.Add("name", "Service Name", 100).tag = [System.String];
	   $listview2.Columns.Add("processid", "PID", 50).tag = [System.Int32];
	   $listview2.Columns.Add("description", "Description", 80).tag = [System.String];
	   $listview2.Columns.Add("state", "Status", 60).tag = [System.String];
	   $listview2.Columns.Add("startmode", "Startup Type", 80).tag = [System.String];
	   $listview2.Columns.Add("startname", "Log On As", 100).tag = [System.String];
	   $listview2.Parent = $Tab3;
	   $listview2.FullRowSelect = $true;
	   $listview2.Add_ColumnClick($columnClick);
	   $listview2.Add_ItemSelectionChanged($row_click);
	
	   ### Build the context menu for the processes tab
	   $svcs_CM = new-object System.Windows.Forms.ContextMenuStrip;
	   ### The menu options
	   $start_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Start";
	   $stop_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Stop";
	   $cycle_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Recycle";
	   $svc_props = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Properties";
	
	   $svcs_CM.Items.Add($start_svc) | out-null; # Add options to the context menu 
	   $svcs_CM.Items.Add($stop_svc) | out-null;
	   $svcs_CM.Items.Add($cycle_svc) | out-null;
	   $svcs_CM.Items.Add($svc_props) | out-null;
	
	   ### This sets up sorting for a clicked column. The first IF determines if this is the  
	   ### same column that was clicked last time. If not, it sets the order to descending so  
	   ### that the next IF will reset it to ascending (the default for a new column click).  
	   ### The last IF determines if we're sorting strings or numbers.    
		$columnClick = {  
	      $cn = $_.Column;  
	      $obj = $args[0];   ### Which listview  
	      $typ = $obj.Columns[$cn].tag.tostring()  
	         if ($things[$obj.name] -ne $cn) {  
	         $things[$obj.name] = $cn;  
	         if ($typ -eq "System.String") {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	         } else {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	         }  
	      }  
	      if ($obj.Sorting -eq [System.Windows.Forms.SortOrder]::Descending) {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	      } else {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	      }  
	      if ($typ -eq "System.String") {  
	         $obj.ListViewItemSorter = new-object ListViewItemComparer($cn, $obj.Sorting);  
	      } else {  
	         $obj.ListViewItemSorter = new-object ListViewItemIntComparer($cn, $obj.Sorting);  
	      }  
	   }  
	   ### Set the actions for when each of the options is selected
	   $start_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).servicesdependedon;
	         start-related-services $sname $d;
	      }
	   }
	
	   $stop_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).dependentservices;
	         $confirm = "Yes";
	         if ($d.count -gt 0) {
	            $warning = "The following services are dependent upon $sname running. Do you want to kill them, also?`n`n";
	            foreach ($dependent in $d) { $warning += $dependent.name + "`n"; }
	            $confirm = [System.Windows.Forms.MessageBox]::Show($warning, "No kidding?", "YesNo");
	         }
	
	         if ($confirm -eq "Yes") { stop-related-services $sname $d; }
	      }
	   }
	
	   $cycle_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).dependentservices;
	         $confirm = "Yes";
	         if ($d.count -gt 0) {
	            $warning = "The following services are dependent upon $sname running and will be cycled, also. Do you want to continue?`n";
	            foreach ($dependent in $d) { $warning += $dependent.name + "`n"; }
	            $confirm = [System.Windows.Forms.MessageBox]::Show($warning, "No kidding?", "YesNo");
	         }
	
	         if ($confirm -eq "Yes") {
	            stop-related-services $sname $d;
	            start-related-services $sname $d;
	         }
	      }
	   }
	
	   $svc_props_click = {
	      $ps = @{};
	      foreach ($si in $listview2.SelectedItems) {
	         $svc = CIM-Stuff win32_service ("name='" + $si.subitems[$listview2.columns["name"].index].Text + "'");
	         $svc | gm -membertype property | % { $p = $_.name; $ps.add($p, $svc.$p) };
	         $props = $ps | ft -auto | out-string;
	      }
	
	      display-myMessageBox $props;
	   }
	
	   $start_svc.Add_Click($start_svc_click);
	   $stop_svc.Add_Click($stop_svc_click);
	   $cycle_svc.Add_Click($cycle_svc_click);
	   $svc_props.Add_Click($svc_props_click);
	
	   $listview2.ContextMenuStrip = $svcs_CM;
	
	   ### Build the context menu for the processes tab
	   $procs_CM = new-object System.Windows.Forms.ContextMenuStrip;
	
	   $end_proc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "End Process";
	   $proc_props = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Properties";
	
	   $procs_CM.Items.Add($end_proc) | out-null; # Add option to context menu 
	   $procs_CM.Items.Add($proc_props) | out-null;
	   $end_proc_click = ({
	   	  $pi = $listview1.columns["PID"].index;
	   	  $in = $listview1.columns["Image_Name"].index;
	      foreach ($si in $listview1.SelectedItems) {
	         $label1.text = "Killing process " + $si.subitems[$pi].text + " (" + $si.subitems[$in].text + ") ...";
	         CIM-Method win32_process ("handle='" + $si.subitems[$pi].Text + "'") terminate;
	         $label1.text += " Stopped";
	      }
	   })
	
	   $proc_props_click = ({
	      $props = "";
	   	  $pi = $listview1.columns["PID"].index;
	      foreach ($si in $listview1.SelectedItems) {
	      	$props = Get-WmiObject win32_process -computer $ComputerName -filter ("handle='" + $si.subitems[1].Text + "'") | out-string;
	        #$props = CIM-Stuff Win32_PerfFormattedData_PerfProc_Process ("idprocess='" + $si.subitems[$pi].Text + "'") | out-string;
	        #$props = (CIM-Stuff win32_process ("handle='" + $si.subitems[$pi].Text + "'")).ciminstanceproperties | sort -property name | select-object -property name,value | ft -auto | out-string;
	        #$props = CIM-Stuff win32_process ("handle='" + $si.subitems[$pi].Text + "'") | select-object -property * | out-string;
	      }
	
	      display-myMessageBox $props;
	   })
	
	   $end_proc.Add_Click($end_proc_click);
	   $proc_props.Add_Click($proc_props_click);
	
	   $listview1.ContextMenuStrip = $procs_CM;
	
	   $pcs = {
	      if ($_.scrollorientation -eq "HorizontalScroll") {
	        $picturebox1.horizontalscroll.value = $_.newvalue;
	      } else {
	        $picturebox1.verticalscroll.value = $_.newvalue;
	      }
	   }
	
	   ### After about 15 days of screwing around, I finally figured out that in order to get this to work
	   ### correctly with the picturebox, we can't set anything on AutoScrollMargin right here. We HAVE to
	   ### wait until we figure out how big the bitmap will be and then set it. I don't really care how big it is
	   ### just as long as it's big enough to display everything, so when we do get around to setting the size,
	   ### it's actually much bigger than it needs to be. Maybe someday I'll get around to sizing it correctly,
	   ### but probably not. It works, and that's what I care about.
	#  $picturebox1.AutoScroll = $true;
	#  $picturebox1.AutoScrollPosition = new-object system.drawing.point(0, 0);
	   $picturebox1.Anchor = "Left, Top, Right, Bottom";
	   $picturebox1.BackColor = "black";
	   $picturebox1.BorderStyle = "Fixed3D";
	#  $picturebox1.add_scroll($pcs);
	   $picturebox1.Controls.Add($listbox1);
	
	   ### $listbox1
	   ### I don't remember where I found out about this. It seems that you can't get a scrollbar to just appear
	   ### on a panel device. There are only certain things that will allow a scrollbar to be added. A listbox is
	   ### one of those things. This does nothing except activate the scrollbar on $picturebox1.
	   $listbox1.Location = new-object system.drawing.point(210, 203);
	   $listbox1.Size = new-object System.Drawing.Size(0, 0);
	
	### Make a popup window to display properties for either a process or a service. I tried using a PropertyGrid, but
	### it never displayed the services satisfactorily.
	### Return a formatted datetime MM/DD/YYYY hh:mm:ss
	filter return-datetime {
	   ([datetime] ($_.substring(4,2) + "/" + $_.substring(6,2) + "/" + $_.substring(0, 4) + " " +
	       $_.substring(8,2) + ":" + $_.substring(10,2) + ":" + $_.substring(12,2))).tostring().trimend();
	}
	
	### A bit about all these hashes. I don't remember how I figured out that hashes are global, and I'm not
	### sure why they are. It may have something to do with $error being a hash and the need to have it
	### available everywhere, but that's just speculation. At any rate, I had all this data that needed to be
	### used in multiple functions, and this seemed like the easiest way at the time. I don't know what impact,
	### if any, it has on performance. It probably could have been done passing parameters as normal, but
	### this works well, it makes it very easy to re-initialize things to start over with a new machine, and
	### it hasn't brought any host machine to its knees (yet).
	$keyhash = @{};
	$hash = @{};
	$pointhash = @{};
	$parms = @{};
	$beforeprocs = @{};
	$pens = @{};
	$brushes = @{};
	$things = @{};
	$fonts = @{};
	$fonts.add("mss8",  (new-object System.Drawing.Font("Microsoft Sans Serif", 8.25, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("mssnb",  (new-object System.Drawing.Font("Microsoft Sans Serif", 8.25)));
	$fonts.add("cn9", (new-object System.Drawing.Font("Courier New", 9, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("cn8", (new-object System.Drawing.Font("Courier New", 8.25, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("verdana6", (new-object system.Drawing.Font("Verdana", 6)));
	$fonts.add("verdana8", (new-object system.Drawing.Font("Verdana", 8.25)));
	initialize-things;
	foreach ($clr in ($things["colors"])) {
	   $pens.add($clr, (new-object system.drawing.pen($clr)));
	   $brushes.add($clr, (new-object system.drawing.solidbrush($clr)));
	};
	
	$pens["red"].width = 4;
	
	################################
	### This is a string for the custom comparer class that I copied from a MS article
	### at http://msdn.microsoft.com/en-us/library/ms996467.aspx. I had read that you
	### could do this, and you can imagine my surprise at how well it works.
	$ccs = @"
using System;
using System.Collections;
using System.Windows.Forms;

public class ListViewItemComparer : IComparer {
  private int col;
  private SortOrder order;
  public ListViewItemComparer() {
      col=0;
      order = SortOrder.Ascending;
  }
  public ListViewItemComparer(int column, SortOrder order) 
  {
      col=column;
      this.order = order;
  }
  public int Compare(object x, object y) 
  {
      int returnVal= -1;
      returnVal = String.Compare(((ListViewItem)x).SubItems[col].Text, ((ListViewItem)y).SubItems[col].Text);
      if (order == SortOrder.Descending)
          returnVal *= -1;
      return returnVal;
  }
}
"@;
	
	### A similar class to use for comparing columns of integers so they don't get compared as strings.
	$cci = @"
using System;
using System.Collections;
using System.Windows.Forms;

public class ListViewItemIntComparer : IComparer {
  private int col;
  private SortOrder order;
  public ListViewItemIntComparer() {
      col = 0;
      order = SortOrder.Ascending;
  }
  public ListViewItemIntComparer(int column, SortOrder order) 
  {
      col = column;
      this.order = order;
  }
  public int Compare(object x, object y) 
  {
      int returnVal = -1;
      int ix = int.Parse(((ListViewItem)x).SubItems[col].Text);
      int iy = int.Parse(((ListViewItem)y).SubItems[col].Text);
      returnVal = ix.CompareTo(iy);
      if (order == SortOrder.Descending)
         returnVal *= -1;
      return returnVal;
  }
}
"@;
	
	### This is the C# code to make a double-buffered listview. Atually, it's an OPTIMIZED double-buffered
	### listiview. The ControlStyles.DoubleBuffer control doesn't seem to do anything different than what we
	### see in a regular listview. At http://msdn.microsoft.com/en-us/library/system.windows.forms.controlstyles(v=vs.110).aspx,
	### it states that:
	###               If you set this property to true, you should also set the AllPaintingInWmPaint to true.
	### So I did. Of course it also states that for DoubleBuffer, you should set AllPaintingInWmPaint and UserPaint.
	### The problem is that if you set UserPaint, nothing shows up in the listview whether you use DoubleBuffer or
	### OptimizedDoubleBuffer. There may be a way to get it to work, but I quickly got bored with the whole thing.
	$dblv = @"
using System;
using System.Windows.Forms;

public class DoubleBufferedListView : System.Windows.Forms.ListView
{
    public DoubleBufferedListView()
    {
        this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
    }
}
"@;
	
	### Add the comparer class
	Add-Type $ccs -ReferencedAssemblies ('System.Windows.Forms');
	Add-Type $cci -ReferencedAssemblies ('System.Windows.Forms');
	Add-Type -WarningAction SilentlyContinue $dblv -ReferencedAssemblies ('System.Windows.Forms');
	
	$listview1_ColumnClick=[System.Windows.Forms.ColumnClickEventHandler]{
	 $cn = $_.Column;  
	      $obj = $args[0];   ### Which listview  
	      $typ = $obj.Columns[$cn].tag.tostring()  
	         if ($things[$obj.name] -ne $cn) {  
	         $things[$obj.name] = $cn;  
	         if ($typ -eq "System.String") {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	         } else {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	         }  
	      }  
	      if ($obj.Sorting -eq [System.Windows.Forms.SortOrder]::Descending) {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	      } else {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	      }  
	      if ($typ -eq "System.String") {  
	         $obj.ListViewItemSorter = new-object ListViewItemComparer($cn, $obj.Sorting);  
	      } else {  
	         $obj.ListViewItemSorter = new-object ListViewItemIntComparer($cn, $obj.Sorting);  
	      }  
	}
	
	$button1_Click={
		do-it-to-it
	}
	$Textbox1.Add_KeyDown({if ($_.KeyCode -eq "Enter") { do-it-to-it; }});  
	
	$trackbar1_ValueChanged={
	  Stop-timer;
	  if ($trackbar1.value -lt 500) { $trackbar1.value = 500 };   ### Don't let it fire off faster than twice a second... that would just be silly
	  $things["timer"].interval = $trackbar1.value;
	  update-Procs-Label;
	  Restart-timer;
	}
	
	$button2_Click={
		Stop-timer
	}
	
	$button3_Click={
		Stop-stuff
	}
	
	$button4_Click={
		get-services
	}
	
	$form1_FormClosing=[System.Windows.Forms.FormClosingEventHandler]{
	   Stop-timer;
	   $things["timer"].Dispose();
	   if ($things["session"] -ne $null) { remove-cimsession -cimsession $things["session"] }
	   $things["session"].Close();
	   $things["session"].Dispose();
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Taskmanager_listview1 = $listview1.SelectedItems
		$script:Taskmanager_listbox1 = $listbox1.SelectedItems
		$script:Taskmanager_listview2 = $listview2.SelectedItems
		$script:Taskmanager_trackbar1 = $trackbar1.Value
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$listview1.remove_ColumnClick($listview1_ColumnClick)
			$trackbar1.remove_ValueChanged($trackbar1_ValueChanged)
			$form1.remove_FormClosing($form1_FormClosing)
			$form1.remove_Load($form1_Load)
			$button1.remove_Click($button1_Click)
			$button2.remove_Click($button2_Click)
			$button3.remove_Click($button3_Click)
			$button4.remove_Click($button4_Click)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage1.SuspendLayout()
	$tabpage2.SuspendLayout()
	$tabpage3.SuspendLayout()
	$toolstrip1.SuspendLayout()
	$panel1.SuspendLayout()
	$trackbar1.BeginInit()
	#
	# form1
	#
	$form1.Controls.Add($tabcontrol1)
	$form1.Controls.Add($toolstrip1)
	$form1.Controls.Add($panel1)
	$form1.ClientSize = '801, 826'
	$form1.MinimumSize = '817, 788'
	$form1.Name = 'form1'
	$form1.SizeGripStyle = 'Show'
	$form1.Text = 'Form'
	$form1.add_FormClosing($form1_FormClosing)
	$form1.add_Load($form1_Load)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Controls.Add($tabpage3)
	$tabcontrol1.Dock = 'Fill'
	$tabcontrol1.Location = '0, 31'
	$tabcontrol1.Name = 'tabcontrol1'
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '801, 741'
	$tabcontrol1.TabIndex = 6
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($listview1)
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '793, 715'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'Processes'
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# listview1
	#
	$listview1.AllowColumnReorder = $True
	[void]$listview1.Columns.Add($Image_Name)
	[void]$listview1.Columns.Add($PID)
	[void]$listview1.Columns.Add($User_Name)
	[void]$listview1.Columns.Add($CPU)
	[void]$listview1.Columns.Add($Memory_Usage)
	$listview1.Dock = 'Fill'
	$listview1.FullRowSelect = $True
	$listview1.Location = '3, 3'
	$listview1.MultiSelect = $False
	$listview1.Name = 'listview1'
	$listview1.Size = '787, 709'
	$listview1.TabIndex = 0
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	$listview1.add_ColumnClick($listview1_ColumnClick)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($listbox1)
	$tabpage2.Controls.Add($picturebox1)
	$tabpage2.BackColor = 'Control'
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '793, 715'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Performance'
	#
	# listbox1
	#
	$listbox1.FormattingEnabled = $True
	$listbox1.Location = '3, 666'
	$listbox1.Name = 'listbox1'
	$listbox1.Size = '10, 4'
	$listbox1.TabIndex = 1
	#
	# picturebox1
	#
	$picturebox1.BackColor = 'Desktop'
	$picturebox1.Dock = 'Fill'
	$picturebox1.Location = '3, 3'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '787, 709'
	$picturebox1.TabIndex = 0
	$picturebox1.TabStop = $False
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($listview2)
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '793, 715'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'Services'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# listview2
	#
	$listview2.Dock = 'Fill'
	$listview2.FullRowSelect = $True
	$listview2.Location = '3, 3'
	$listview2.Name = 'listview2'
	$listview2.Size = '787, 709'
	$listview2.TabIndex = 0
	$listview2.UseCompatibleStateImageBehavior = $False
	$listview2.View = 'Details'
	#
	# toolstrip1
	#
	$toolstrip1.GripStyle = 'Hidden'
	[void]$toolstrip1.Items.Add($toolstriplabel1)
	[void]$toolstrip1.Items.Add($textbox1)
	[void]$toolstrip1.Items.Add($button1)
	[void]$toolstrip1.Items.Add($toolstripseparator1)
	[void]$toolstrip1.Items.Add($button2)
	[void]$toolstrip1.Items.Add($toolstripseparator2)
	[void]$toolstrip1.Items.Add($button3)
	[void]$toolstrip1.Items.Add($toolstripseparator3)
	[void]$toolstrip1.Items.Add($button4)
	$toolstrip1.Location = '0, 0'
	$toolstrip1.Name = 'toolstrip1'
	$toolstrip1.Padding = '4, 4, 4, 4'
	$toolstrip1.Size = '801, 31'
	$toolstrip1.TabIndex = 10
	$toolstrip1.Text = 'toolstrip1'
	#
	# panel1
	#
	$panel1.Controls.Add($label1)
	$panel1.Controls.Add($trackbar1)
	$panel1.Controls.Add($label3)
	$panel1.Controls.Add($label2)
	$panel1.Dock = 'Bottom'
	$panel1.Location = '0, 772'
	$panel1.Name = 'panel1'
	$panel1.Size = '801, 54'
	$panel1.TabIndex = 11
	#
	# label1
	#
	$label1.Location = '703, 30'
	$label1.Name = 'label1'
	$label1.Size = '76, 23'
	$label1.TabIndex = 10
	$label1.Text = 'reload speed'
	$label1.TextAlign = 'MiddleCenter'
	#
	# trackbar1
	#
	$trackbar1.BackColor = 'Control'
	$trackbar1.Cursor = 'Default'
	$trackbar1.LargeChange = 100
	$trackbar1.Location = '703, 2'
	$trackbar1.Maximum = 8000
	$trackbar1.Name = 'trackbar1'
	$trackbar1.Size = '76, 45'
	$trackbar1.TabIndex = 8
	$trackbar1.TickFrequency = 1000
	$trackbar1.Value = 1000
	$trackbar1.add_ValueChanged($trackbar1_ValueChanged)
	#
	# label3
	#
	$label3.Location = '7, 7'
	$label3.Name = 'label3'
	$label3.Size = '399, 23'
	$label3.TabIndex = 9
	#
	# label2
	#
	$label2.Location = '7, 30'
	$label2.Name = 'label2'
	$label2.Size = '399, 23'
	$label2.TabIndex = 7
	#
	# Image_Name
	#
	$Image_Name.Text = 'Image Name'
	$Image_Name.Width = 230
	#
	# PID
	#
	$PID.Text = 'PID'
	#
	# User_Name
	#
	$User_Name.Text = 'User Name'
	$User_Name.Width = 233
	#
	# CPU
	#
	$CPU.Text = 'CPU'
	#
	# Memory_Usage
	#
	$Memory_Usage.Text = 'Memory Usage'
	$Memory_Usage.Width = 111
	#
	# toolstriplabel1
	#
	$toolstriplabel1.Name = 'toolstriplabel1'
	$toolstriplabel1.Size = '94, 20'
	$toolstriplabel1.Text = 'Computername:'
	#
	# textbox1
	#
	$textbox1.Font = 'Segoe UI, 9pt, style=Bold'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '200, 23'
	#
	# button1
	#
	$button1.DisplayStyle = 'Text'
	#region Binary Data
	$button1.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button1.ImageTransparentColor = 'Magenta'
	$button1.Name = 'button1'
	$button1.Size = '64, 20'
	$button1.Text = 'Get Status'
	$button1.add_Click($button1_Click)
	#
	# button2
	#
	$button2.DisplayStyle = 'Text'
	#region Binary Data
	$button2.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button2.ImageTransparentColor = 'Magenta'
	$button2.Name = 'button2'
	$button2.Size = '42, 20'
	$button2.Text = 'Pause'
	$button2.add_Click($button2_Click)
	#
	# button3
	#
	$button3.DisplayStyle = 'Text'
	#region Binary Data
	$button3.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button3.ImageTransparentColor = 'Magenta'
	$button3.Name = 'button3'
	$button3.Size = '34, 20'
	$button3.Text = 'Quit'
	$button3.add_Click($button3_Click)
	#
	# button4
	#
	$button4.DisplayStyle = 'Text'
	#region Binary Data
	$button4.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button4.ImageTransparentColor = 'Magenta'
	$button4.Name = 'button4'
	$button4.Size = '95, 20'
	$button4.Text = 'Refresh Services'
	$button4.add_Click($button4_Click)
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = 'toolstripseparator1'
	$toolstripseparator1.Size = '6, 23'
	#
	# toolstripseparator2
	#
	$toolstripseparator2.Name = 'toolstripseparator2'
	$toolstripseparator2.Size = '6, 23'
	#
	# toolstripseparator3
	#
	$toolstripseparator3.Name = 'toolstripseparator3'
	$toolstripseparator3.Size = '6, 23'
	$trackbar1.EndInit()
	$panel1.ResumeLayout()
	$toolstrip1.ResumeLayout()
	$tabpage3.ResumeLayout()
	$tabpage2.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol1.ResumeLayout()
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: Taskmanager.psf

#Start the application
Main ($CommandLine)
