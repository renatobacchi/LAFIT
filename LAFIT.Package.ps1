#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: cfba2739-092a-48d5-9ae9-9fc3160d1664
# Source File: C:\GIT\LAFIT\LAFIT.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
dQQAAB+LCAAAAAAABACllNtugkAQhu9NfAfCPSJqbUlwE+uhNbHaKPaqSTPCYGiXXbILTX37rhwM
panB9PKff+ab2d0BZ4Me/0RxnEICpN3SNOdZ8Hf0kkwo+YJChpwRq2M5ZikKbx5SXEyJF+yhd9u3
ja7dA2Nw598YNqBt2IHXt4Zd3xoOB45ZJBelRRf3GCPpOmZVlnBOfdWukOcA8dGYzhQuV3UXmTFb
/emq2snjpdrdtuaWUlbPXB1KSW2DAQpkHq4gwpGua/dpSP2R3tXJNgGRpHEnljK/gsulE6DUeIKQ
zbmI3mIZVFllXMGCxrAHyvdAFcqqoLQJjyJg/uwrQXZ60ZHuihR1kmdL1cFq3GG852lSnzULXjXo
Ok7UILIOKsJXoVyQH+p4cEBRx1WspshzuaXny/e6BHZIFUIR/Eb3VEVkG/o/RLbG/55it72AyEW+
6OfPM1drER5CBvSUcAKT5Xi+cBUiVlmO+ctutxzzx2/mG8fYmzN1BAAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.120
     Generated on:       13.06.2016 12:05
     Generated by:        
     Organization:        
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
YgMAAB+LCAAAAAAABAC9k01LA0EMhu9C/8PQ87If3a5rYXZBWnopqFhRr9lttgzOR0lmLPvvbatU
0YMgsuSSNyF5CEnkPbbuFalfgAdxcFg5W40n43p0IYS8JbVVFvRSabwBg/XaA/mwi3fMMvmRPdVc
M6NptEI+6c9IXxtuHWnVROLxgzSN06NFYh60D4SVxeAJdCTuwqFHu8L+wb2grZqyhKItLrNZPsX0
aiaTc9fvlHXPHs0QjPhJ2Y3bc7x0ZHgQ4nFPw4AI9spu/8JK867oyi7LNkUKOfzOejZ6kJnmjvD/
QWf5fvIy+fpT9RvJGdnIYgMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms.DataVisualization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$richtextbox_output = New-Object 'System.Windows.Forms.RichTextBox'
	$tabcontrol_Home = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox15 = New-Object 'System.Windows.Forms.GroupBox'
	$button_deleteGPO = New-Object 'System.Windows.Forms.Button'
	$button_gpresult = New-Object 'System.Windows.Forms.Button'
	$Button_gpupdate = New-Object 'System.Windows.Forms.Button'
	$groupbox14 = New-Object 'System.Windows.Forms.GroupBox'
	$button_export = New-Object 'System.Windows.Forms.Button'
	$button_clear = New-Object 'System.Windows.Forms.Button'
	$groupbox13 = New-Object 'System.Windows.Forms.GroupBox'
	$button_nbbattery = New-Object 'System.Windows.Forms.Button'
	$buttonFixWMI = New-Object 'System.Windows.Forms.Button'
	$button_shutdown = New-Object 'System.Windows.Forms.Button'
	$button_C = New-Object 'System.Windows.Forms.Button'
	$button_WOL = New-Object 'System.Windows.Forms.Button'
	$groupbox12 = New-Object 'System.Windows.Forms.GroupBox'
	$button_logoff_user = New-Object 'System.Windows.Forms.Button'
	$button_get_session = New-Object 'System.Windows.Forms.Button'
	$button_Userunlock = New-Object 'System.Windows.Forms.Button'
	$button_ResetPWD = New-Object 'System.Windows.Forms.Button'
	$groupbox11 = New-Object 'System.Windows.Forms.GroupBox'
	$button_DNScheck = New-Object 'System.Windows.Forms.Button'
	$button_ping4 = New-Object 'System.Windows.Forms.Button'
	$button_ipconfig = New-Object 'System.Windows.Forms.Button'
	$groupbox9 = New-Object 'System.Windows.Forms.GroupBox'
	$button_regedit = New-Object 'System.Windows.Forms.Button'
	$button_cmd = New-Object 'System.Windows.Forms.Button'
	$button_psremote = New-Object 'System.Windows.Forms.Button'
	$button_MSRA = New-Object 'System.Windows.Forms.Button'
	$button_Remotecontrol = New-Object 'System.Windows.Forms.Button'
	$button_rdp = New-Object 'System.Windows.Forms.Button'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox16 = New-Object 'System.Windows.Forms.GroupBox'
	$button_hotfix = New-Object 'System.Windows.Forms.Button'
	$groupbox7 = New-Object 'System.Windows.Forms.GroupBox'
	$button_MMCServices = New-Object 'System.Windows.Forms.Button'
	$button_compmgmt = New-Object 'System.Windows.Forms.Button'
	$groupbox6 = New-Object 'System.Windows.Forms.GroupBox'
	$button_localadmins = New-Object 'System.Windows.Forms.Button'
	$button_folderrights = New-Object 'System.Windows.Forms.Button'
	$button_profilerights = New-Object 'System.Windows.Forms.Button'
	$button_homerights = New-Object 'System.Windows.Forms.Button'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$button_PCGroups = New-Object 'System.Windows.Forms.Button'
	$button_ComputerGroups = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$button_autostart = New-Object 'System.Windows.Forms.Button'
	$button_installedSoftware = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$button_printer = New-Object 'System.Windows.Forms.Button'
	$button_USBDevice = New-Object 'System.Windows.Forms.Button'
	$button_systemtype = New-Object 'System.Windows.Forms.Button'
	$button_memory = New-Object 'System.Windows.Forms.Button'
	$button_processor = New-Object 'System.Windows.Forms.Button'
	$button_mainboard = New-Object 'System.Windows.Forms.Button'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox19 = New-Object 'System.Windows.Forms.GroupBox'
	$button_ipconfig2 = New-Object 'System.Windows.Forms.Button'
	$button_testport = New-Object 'System.Windows.Forms.Button'
	$button_hosts = New-Object 'System.Windows.Forms.Button'
	$button_routetable = New-Object 'System.Windows.Forms.Button'
	$button_checkWLAN = New-Object 'System.Windows.Forms.Button'
	$tabpage4 = New-Object 'System.Windows.Forms.TabPage'
	$chart1 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Chart'
	$groupbox21 = New-Object 'System.Windows.Forms.GroupBox'
	$labelPleaseEnterFileExten = New-Object 'System.Windows.Forms.Label'
	$button_process_stop = New-Object 'System.Windows.Forms.Button'
	$button_process_start = New-Object 'System.Windows.Forms.Button'
	$textbox_Process = New-Object 'System.Windows.Forms.TextBox'
	$groupbox20 = New-Object 'System.Windows.Forms.GroupBox'
	$button_cpuram = New-Object 'System.Windows.Forms.Button'
	$button_taskmanager = New-Object 'System.Windows.Forms.Button'
	$button_process_cmd = New-Object 'System.Windows.Forms.Button'
	$button_process_grid = New-Object 'System.Windows.Forms.Button'
	$button_process_owner = New-Object 'System.Windows.Forms.Button'
	$button_process_100 = New-Object 'System.Windows.Forms.Button'
	$button_proclasthour = New-Object 'System.Windows.Forms.Button'
	$button_process = New-Object 'System.Windows.Forms.Button'
	$tabpage5 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox8 = New-Object 'System.Windows.Forms.GroupBox'
	$button_servicesrunning = New-Object 'System.Windows.Forms.Button'
	$button_services = New-Object 'System.Windows.Forms.Button'
	$button_servicesauto = New-Object 'System.Windows.Forms.Button'
	$button_servicesautostop = New-Object 'System.Windows.Forms.Button'
	$button_servicesnonstandard = New-Object 'System.Windows.Forms.Button'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$button_servicesstop = New-Object 'System.Windows.Forms.Button'
	$button_servicesstart = New-Object 'System.Windows.Forms.Button'
	$button_servicesrestart = New-Object 'System.Windows.Forms.Button'
	$button_servicescheck = New-Object 'System.Windows.Forms.Button'
	$textbox_services = New-Object 'System.Windows.Forms.TextBox'
	$tabpage6 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox22 = New-Object 'System.Windows.Forms.GroupBox'
	$button_diskusage = New-Object 'System.Windows.Forms.Button'
	$button_deleteoffline = New-Object 'System.Windows.Forms.Button'
	$button_volumes = New-Object 'System.Windows.Forms.Button'
	$tabpage8 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox23 = New-Object 'System.Windows.Forms.GroupBox'
	$button_eventlogmmc = New-Object 'System.Windows.Forms.Button'
	$button_eventlog20 = New-Object 'System.Windows.Forms.Button'
	$button_eventlognames = New-Object 'System.Windows.Forms.Button'
	$tabpage10 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox18 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonTSHanging = New-Object 'System.Windows.Forms.Button'
	$button_getsccmcache = New-Object 'System.Windows.Forms.Button'
	$button_getadvertisedsoftware = New-Object 'System.Windows.Forms.Button'
	$groupbox17 = New-Object 'System.Windows.Forms.GroupBox'
	$button_sccm_start = New-Object 'System.Windows.Forms.Button'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$tabpage11 = New-Object 'System.Windows.Forms.TabPage'
	$button_search = New-Object 'System.Windows.Forms.Button'
	$textbox_search = New-Object 'System.Windows.Forms.TextBox'
	$tabpage_debug = New-Object 'System.Windows.Forms.TabPage'
	$button_getvariablesfilter = New-Object 'System.Windows.Forms.Button'
	$button_listvariables = New-Object 'System.Windows.Forms.Button'
	$textbox_debug = New-Object 'System.Windows.Forms.TextBox'
	$button_debug = New-Object 'System.Windows.Forms.Button'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$toolstrip1 = New-Object 'System.Windows.Forms.ToolStrip'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$toolstriplabel2 = New-Object 'System.Windows.Forms.ToolStripLabel'
	$FileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$button_Check = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripmenuitem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$textbox_username = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$button_GetPC = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripseparator10 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$quitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator4 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aDExplorerToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$procexpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$procmonToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$nirLauncherToolStripMenuItem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$optionsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$textbox_computername = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$Toolstrip_os = New-Object 'System.Windows.Forms.ToolStripLabel'
	$Toolstrip_OSStatus = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_home = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_home_status = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_user = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_user_status = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstripseparator2 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator11 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator12 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Lazy AfI Toolkit!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!O P E N I N G    A C T I O N S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$OnLoadFormEvent = {
		# Add 1 New Line in Richtextbox an the Date/Time	
		$Date = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
		Add-RichTextBoxTitle -text "$Date"
		
		# Get List of all PoSH-Functions for debugging
		$debugger = (Get-Command -CommandType 'Cmdlet', 'Function', 'Workflow').name
		$textbox_debug.AutoCompleteCustomSource.AddRange($debugger)
		
		#region Load Config
		# # # Load Config # # #	
		
		# # # # Checking if Configfolder exisits # # # #
		$Folderexisting = Test-Path $global:Confpath
		if ($Folderexisting -eq $true)
		{
			Add-RichTextBoxOK -text "$folder $global:Confpath $existing"
		}
		if ($Folderexisting -eq $false)
		{
			New-Item -ItemType directory -Path $global:Confpath
			$Folderexisting = Test-Path $global:Confpath
			if ($Folderexisting -eq $true)
			{
				$created = $lang.created
				Add-RichTextBoxOK -text "$folder $global:Confpath $created"
				if ($Folderexisting -eq $false)
				{
					Add-RichTextBoxWarn -text "$configerror $global:Confpath"
				}
			}
		}
		
		# # # # Checking if Configfile exists # # # #
		$loadconfig = $Confpath + "/Config.csv"
		if (Test-Path $loadconfig -PathType Leaf)
		{
			$load = Import-Csv -Path $loadconfig
			foreach ($Line in $Load)
			{
				$global:Profilefolder = $($Line."global:Profilefolder")
				$global:Homefolder = $($Line."global:Homefolder")
				$global:Outfile = $($Line."global:Outfile")
				$global:SiteName = $($Line."global:SiteName")
				$global:SCCMServer = $($Line."global:SCCMServer")
				$global:SCCMNameSpace = $($Line."global:SCCMNameSpace")
				$global:SCCMEnabled = $($Line."global:SCCMEnabled")
				$global:Nirlauncher = $($Line."global:Nirlauncher")
				$global:Sysinternals = $($Line."global:Sysinternals")
				$global:CmRCViewer = $($Line."global:CmRCViewer")
				Add-RichTextBoxOK -text "$configfrom $global:Confpath $loaded"
			}
		}
		else
		{
			Add-RichTextBox -text $lang.noConfigFound
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure the shown options"
			Call-Options_psf
		}
		
		# Loading Combobox	
		Load-ComboBox $combobox1 $Cycle1, $Cycle2, $Cycle3, $Cycle4, $Cycle7, $Cycle8, $Cycle9
	
		# # # # Deactivating SCCM based functions if SCCM is unchecked # # # #
		if ($global:SCCMEnabled -eq $false)
		{
			$button_GetPC.Enabled = $false
			$tabpage10.Enabled = $false
			$textbox_username.Enabled = $false
		}
		#endregion
		
		# # # Some Settings # # #
		
		# Set the status bar name
		$statusbar1.Text = $StatusBarStartUp
		
		# Set the Form Title
		$MainForm.Text = $MainFormTitle
		
		# Set Variable for Computername		
		$textbox_computername.Text = $env:COMPUTERNAME
		
		# Language		
		$Culture = Get-Culture
		$CultureOK = Test-Path -Path $PWD/$culture
		# Set English as Culture if Culture is not found
		if ($CultureOK -eq $false)
		{
			Set-Culture -CultureInfo de-CH
		}
		
		Import-LocalizedData -BindingVariable lang -FileName Language.psd1 -BaseDirectory ($PWD)
		
		# Change the text of some buttons / menus / groupboxes to the used language	
		$button_folderrights.Text = $lang.button_folderrights
		$button_homerights.Text = $lang.button_homerights
		$button_PCGroups.Text = $lang.button_PCGroups
		$button_profilerights.Text = $lang.button_profilerights
		$FileToolStripMenuItem.Text = $lang.FileToolStripMenuItem
		$groupbox11.Text = $lang.groupbox11
		$groupbox12.Text = $lang.groupbox12
		$groupbox5.Text = $lang.groupbox5
		$groupbox6.Text = $lang.groupbox6
		$optionsToolStripMenuItem.Text = $lang.OptionsToolStripMenuItem
		$quitToolStripMenuItem.Text = $lang.QuitToolStripMenuItem
		$tabpage3.Text = $lang.tabpage3
		$tabpage4.Text = $lang.tabpage4
		
		## Verify External Tools are presents
		
		# SystemInfo.exe
		if (Test-Path "$env:systemroot/system32/systeminfo.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Systeminfo.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Systeminfo.exe not found"
		}
		
		# MSInfo32.exe
		if (Test-Path "$env:programfiles\Common Files\Microsoft Shared\MSInfo\msinfo32.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - msinfo32.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - msinfo32.exe not found"
		}
		
		# DriverQuery.exe
		if (Test-Path "$env:systemroot/system32/driverquery.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Driverquery.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Driverquery.exe not found"
		}
		
		# Sysinternals
		if (Test-Path "$global:Sysinternals" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Sysinternals found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Sysinternals not found - Buttons ADExplorer, procexp, Procmon, PSExec, Disabled"
			$button_cmd.Enabled = $false
			$aDExplorerToolStripMenuItem.Enabled = $false
			$procexpToolStripMenuItem.Enabled = $false
			$procmonToolStripMenuItem.Enabled = $false
		}
		
		## Verify Quest.ActiveRoles.ADManagement Snapin is present			
		$QuestSnapin = Get-PSSnapin -Name Quest.ActiveRoles.ADManagement
		if (!$QuestSnapin)
		{
			Add-RichTextBoxWarn -text "External Tools check - Quest.ActiveRoles.ADManagement not found.`nPlease download it on https://software.dell.com/register/71110/"
		}
		else
		{
			# Get List of all AD-Computers for AutoComplete in $ComputerTxtBox
			# Disabled because it needs about 20-30 secs in our Domain (too slow)
			#$PCList = (Get-QADComputer -SizeLimit 5000).name
			#$textbox_computername.AutoCompleteCustomSource.AddRange($PCList)
		}
		Add-RichTextBox -text ""
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion load
	#------------------------------------------------------------------------------------------#
	#region Code
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!C O D E!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#region Buttons
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!!B U T T O N S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	############################################################################################
	$button_autostart_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Startup Commands"
		$result = Get-WmiObject Win32_StartupCommand –ComputerName $ComputerName | Sort-Object Caption | Format-Table Caption, User, Command -auto | out-string -Width $richtextbox_output.Width
		Add-richtextbox $result
		Add-RichTextBox -text "$ComputerName - Startup Commands - Done."
	}
	############################################################################################
	$button_C_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Open C$ Drive"
		$PathToCDrive = "\\$ComputerName\c$"
		Explorer.exe $PathToCDrive
	}
	############################################################################################
	$button_check_Click = {
		$MainForm.Cursor = 'WaitCursor'
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $Checkconn"
		if (Test-Connection $ComputerName -Count 1 -Quiet -TimeToLive 4)
		{
			$button_Check.Text = "Online"; $button_Check.ForeColor = "green"
			# Base64 Code of the "green" cable icon
			$button_Check.Image = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAg9JREFUeNqkU99LU2EYfr6zQ13sJvwLmpgIYQitMJo/aUNTDAlWN
0oXXgTexBS60UbSRTdeFF0EBUYoCqITdFuj7WKOM1s67KKurK1QCBW3icyp53hevy/cwXRTqBfOOXB4nud9n+d7P0ZE+K/6F4H374YoOhebEVz5LHD9Ux/pOkG00WBC76UVWCoqMTIy3HKj+vrpE9
S6vRRZI/rwi2jqB9H4EtG1JwHq7+kWpKuCKxUjNwz4qavjNlyDHqxvqYgt56D8zKLzTi3CF9oFJC5eRQU0HdhPZ3DP2Y5Xw9MoObeDPU1DaisLE6kGTirU2eb20etbDG+mo9CzG8nG5lZMzYRhlra
Rzu5BYigsIDx33m9Ct7Mu0RXQEB1osXpDMYtZzyQv1zTis7KAdE7lAuzkMYq0lXUe0uMJej5P9HIulajjgiIsG/++UFbJ6dkg+zP/n395rnRUaG0TcD1og2diEquq2WK7WZXkUy28dciYDC4i9W0e
H/uarfkARRl7QGDc3y6SXKTjrh2jHi+q6h2W8sqKxMPQUmnY3WQ9hMaP2jYmEEuyuaNB1XV8zwAOew2+RkLYPV9SKksGMX48dEOgt2wZY14FKjNhn7tcycm4Um3F7y+fEOwzup8oOb/bF/l6OhaHM
DsrQSYNjHFTTEKw/2/PBS+Tzx+I9Lge5dM9/px+EQ+PsewscDGBAwEGAIugAWGn5gy5AAAAAElFTkSuQmCC')
			Add-RichTextBoxOK -text "$Computername is online"
			
			# Get OS
			$OSWin32_OS = Get-WmiObject -Query "SELECT * FROM Win32_OperatingSystem" -ComputerName $ComputerName
			$OSCaption = ($OSWin32_OS | Select-Object caption).Caption
			$OSVersion = $OSWin32_OS.Version
			#2003/xp+
			$OSOther = $OSWin32_OS.OtherTypeDescription
			$OSSP = $OSWin32_OS.CSDVersion
			#2008/win7+
			$OSArchi = $OSWin32_OS.OSArchitecture
			$OSFullCaption = "$OSCaption $OSOther $OSArchi $OSSP"
			if ($OSFullCaption -contains "64")
			{
				$OSFullCaption = "$OSCaption $OSOther x86 $OSSP"
			}
			$Toolstrip_Os.Text = "OS:"
			$toolstrip_OSStatus.Text = $OSFullCaption.Replace('  ', ' ')
			$toolstrip_OSStatus.ForeColor = "blue"
			
			# Get the uptime
			# Uptime incorrect in Windows 8.1 / 10 if fast reboot is enabled (default)
			$LBTime = $OSWin32_OS.ConvertToDateTime($OSWin32_OS.Lastbootuptime)
			[TimeSpan]$uptime = New-TimeSpan $LBTime $(get-date)
			$OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
			
			# Get the User
			$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
			$textbox_username.Text = $Username
			if ($OS -lt "6.3.9600")
			{
				$Profilepath = "$Profilefolder$username.v2"
				# Deactivate functions that do not work with OS < Windows 8.1"
				$Button_gpupdate.Enabled = $false
			}
			else
			{
				$Profilepath = "$Profilefolder$username.v4"
				# Activate functions that only work with Windows 8.1 and 10"
				$Button_gpupdate.Enabled = $true
			}
			
			$toolstrip_User.Text = "User:"
			$toolstrip_user_status.Text = "$Profilepath"
			$toolstrip_user_status.ForeColor = "blue"
			$toolstrip_user_status.islink = $true
			
			# Get Home Drive
			$Homepath = "$Homefolder$Username"
			$toolstrip_home.Text = "Home:"
			$toolstrip_home_status.Text = "$Homepath"
			$toolstrip_home_status.ForeColor = "blue"
			$toolstrip_home_status.IsLink = $true
			$toolstripseparator1.Visible = $true
			$toolstripseparator2.Visible = $true
			
			# Activate Buttons Rights Home and Rights Profile
			$button_homerights.Enabled = $true
			$button_profilerights.Enabled = $true
			# Output
			Add-RichTextBox -text "Username: `t$Username`nWindows: `t$OS`nProfile: `t$Profilepath `nHome: `t`t$Homepath`nUptime: `t$($uptime.days) Days $($uptime.hours) Hours $($uptime.minutes) Minutes $($uptime.seconds) Seconds"
		}
		else
		{
			# Base64 Code of the "red" cable icon
			$button_Check.Image = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZ
Wdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxID
Y0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjp
EZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIg
eG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNS4xIFdpbmRvd3MiIHhtc
E1NOkluc3RhbmNlSUQ9InhtcC5paWQ6Q0M1NzBEQTQ3RjBEMTFFNUE5QjdGMkUwMzJFNTYyQTAiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6Q0M1NzBEQTU3RjBEMTFFNUE5QjdGMkUwMzJFNT
YyQTAiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpDQzU3MERBMjdGMEQxMUU1QTlCN0YyRTAzMkU1NjJBMCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDp
DQzU3MERBMzdGMEQxMUU1QTlCN0YyRTAzMkU1NjJBMCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PogXkCcAAACuUExURczM
zL8zM7QxMcU1NcQ1Ncc2Nr0zM7IwMNx+fuenp+KTk9lwcOCMjMI0NOqystdqasE0NOy3t+7AwN2Bge29vbwzM+28vOahoeemproyMuOWluGOjuekpNt4eLkyMu/ExOWenvLQ0OWbm9zc3Nt5edx8f
Npzc7YxMa8vL9+GhvPS0vTX1+aiouu0tNhubtdra8uurtx7e7cxMeKRkemtrfX19fDHx+irq96EhP///4XRHlAAAAA6dFJOU/////////////////////////////////////////////////////
///////////////////////wA3wP8KAAAAoElEQVR42kTPRRLDMAwFUMkUbpjLzEy+/8XqtImrlfXGkuaD7MpDFMeRhK7HyTNKSqKBhUav3vSZBrQKUpnuHyDd34bmhbbgZxLEdIE+/4HTW6s/ojp
xaMDDgjQOTPUSdnjISvXwEwlf9rZGbgVqymi3B1FIbButFXRwt/NrbDJ9H8f12xVL3kUAJ3Xj+YDqTPAilFJ+1qFhBk09NHwEGABOxiQDxhPG6wAAAABJRU5ErkJggg==')
			$textbox_username.Text = ""
			$button_Check.Text = "Offline"; $button_Check.ForeColor = "red"
			Add-RichTextBoxWarn -text "$Computername is offline!"
			$Toolstrip_Os.Text = ""
			$toolstrip_OSStatus.Text = ""
			$toolstrip_User.Text = ""
			$toolstrip_user_status.Text = ""
			$toolstrip_home.Text = ""
			$toolstrip_home_status.Text = ""
			$toolstripseparator1.Visible = $false
			$toolstripseparator2.Visible = $false
		}
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_checkWLAN_Click = {
		# This only works with Centrino NICs ATM, it must be filled with more nic types
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Checking Wireless-Adapter"
		$NicInfo = Get-NICInfo -ComputerName $ComputerName | Where { $_.Name -like "*Centrino*" } | Out-String
		if ($NicInfo -eq "")
		{
			Add-RichTextBoxWarn -text "No WLAN-Hardware found"
		}
		else
		{
			Add-RichTextBox -text "$NicInfo"
		}
	}
	############################################################################################
	$button_clear_Click = {
		$richtextbox_output.Text = ""
		$Date = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
		Add-RichTextBox -text ""
		Add-RichTextBoxTitle -text "$Date"
	}
	############################################################################################
	$button_cmd_Click = {
	Get-ComputerTxtBox
	Add-RichTextBoxTitle -text "$ComputerName - $RunRemoteCMD"
	if (Test-Connection $ComputerName -Count 1 -Quiet)
	{
		$RemoteCommand = Show-Inputbox -message "$EnterCommand" -title "$Computername - Run-RemoteCMD" -default "ipconfig /all"
		if ($RemoteCommand -ne "")
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command $RemoteCommand
			Add-RichTextBox -text "$ComputerName - $RemoteCommandSent"
		}
	}
	else
	{
		Add-RichTextBoxWarn -text "$ComputerOfflineOrWrong"
		Show-MsgBox -Prompt "$ComputerOfflineOrWrong" -BoxType "OKOnly" -Title "Computer offline!" -Icon "Exclamation"
	}
	}
	############################################################################################
	$button_compmgmt_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Compmgmt $Computername"
		$command = "compmgmt.msc"
		$arguments = "/computer:$ComputerName"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_ComputerGroups_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$CheckComputerGroups $Computername"
		$ComputerGroups = Get-QADComputer $ComputerName -Properties Memberof | Select-Object -Expand memberof | Out-String
		$ComputerGroups = $ComputerGroups -split ',*CN=*,'
		$ComputerGroups = $ComputerGroups -replace ('CN=', '') -replace (',OU.*', '')
		Add-RichTextBox -text "$ComputerGroups"
	}
	############################################################################################
	$button_cpuram_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Performance of $Computername"
		$Perf = Get-ComputerStats -ComputerName $ComputerName | fl | Out-String
		Add-RichTextBox -text $Perf
		$cpu = Get-WmiObject win32_processor -computername $computername |
		Measure-Object -property LoadPercentage -Average |
		Foreach { $_.Average }
		$ram = Get-WmiObject win32_operatingsystem -ComputerName $computername |
		Foreach { "{0:N2}" -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) * 100)/ $_.TotalVisibleMemorySize) }
		Load-Chart $chart1 -XPoints ("RAM $ram%" -f $ram), ("CPU $cpu%" -f $cpu) -YPoints $ram, $cpu -ChartType 'Bar'
	}
	############################################################################################
	$button_debug_Click = {
		$Command_debug = $textbox_debug.Text
		Get-ComputerTxtBox
		Add-RichTextBox -text "$command_debug"
		try
		{
			$result = Invoke-Expression $Command_debug | Out-String -Width $richtextbox_output.Width
			Add-RichTextBox -text "$result"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_deleteGPO_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Deleting local gpo of the computer $Computername"
		Remove-Item "\\$ComputerName\c$\windows\system32\Grouppolicy" -Force -Recurse
		Remove-Item "\\$ComputerName\c$\windows\system32\grouppolicyusers" -Force -Recurse
		Add-RichTextBox -text "Deleted folder grouppolicy and grouppolicyusers."
	}
	############################################################################################
	$button_deleteoffline_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$Computername - Reset Offline Files"
		New-RegistryValue HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\CSC\Parameters -Name FormatDatabase -Value 1 -Type Dword -ComputerName $ComputerName
		Add-RichTextBox -text "$RegKeySet"
	}
	############################################################################################
	$button_diskusage_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Hard Drive - DiskSpace"
		$result = Get-DiskSpace -ComputerName $ComputerName | Out-String
		Add-RichTextBox -text $result
	}
	############################################################################################
	$button_DNScheck_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $DnsConf"
		#		
		$DNS = Resolve-DnsName $ComputerName
		Add-RichTextBox -text "$DNS"
	}
	############################################################################################
	$button_eventlog20_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - EventLog - Last 20"
		if ($ComputerName -like "localhost")
		{
			$Events_Last20Sytem = Get-EventLog -Newest 20 | Select-Object Index, EventID, Source, Message, MachineName, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20Sytem
		}
		else
		{
			$Events_Last20Sytem = Get-EventLog -Newest 20 -ComputerName $ComputerName | Select-Object Index, EventID, Source, Message, MachineName, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20Sytem
		}
	}
	############################################################################################
	$button_eventlogmmc_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Event Viewer MMC (eventvwr $Computername)"
		$command = "eventvwr"
		$arguments = "$ComputerName"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_eventlognames_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - EventLog - LogNames list"
		if ($ComputerName -eq "localhost")
		{
			$EventsLog = Get-EventLog -list | Format-List | Out-String
			Add-RichTextBox $EventsLog
		}
		else
		{
			$EventsLog = Get-EventLog -list -ComputerName $ComputerName | Format-List | Out-String
			Add-RichTextBox $EventsLog
		}
	}
	############################################################################################
	$button_export_Click = {
		$timestamp = Get-Date -Format "dd-MM-yyyy HH-mm"
		$Filepath = "$Outfile" + "\log-$timestamp"
		($richtextbox_output.Text | Out-String) -replace "`n", "`r`n" | Out-File -FilePath "$Filepath.log"
		Add-RichTextBoxOK -text "Saved in $Filepath.log."
	}
	############################################################################################
	$buttonFixWMI_Click = {
		#not sure if this is working when WMI actually needs a fix! 
		Get-ComputerTxtBox
		Invoke-Command -ComputerName $ComputerName -ScriptBlock {
			WinMgmt /standalonehost
			WinMgmt /resetrepository
		}
		Add-RichTextBox -text "WMI on Computer $ComputerName reset. Please reboot."
	}
	############################################################################################
	$button_folderrights_Click = {
		$Folderpath = Show-InputBox -title "$FolderPathInputBoxTitle" -message "$FolderPathInputBoxMsg"
		Add-RichTextBoxTitle -text "$ShowFolderRights $Folderpath"
		Try
		{
			$Folderrights = Get-Acl "$Folderpath" | Format-List | Out-String
			Add-RichTextBox -text "$Folderrights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_getadvertisedsoftware_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Software of $Computername"
		$MainForm.Cursor = 'WaitCursor'
		$Applications = Get-WmiObject -Query "Select * From CCM_Application" -Namespace "Root\ccm\ClientSDK" -ComputerName $ComputerName | Sort-Object -Property Fullname | Select-Object -Property Fullname, @{ label = "Installed"; Expression = { $_.convertToDateTime($_.LastInstallTime) } }, InstallState | format-table | Out-String
		Add-RichTextBoxWarn $_.Exception.Message
		Add-RichTextBox $Applications
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_GetPC_Click = {
		# This only Works with SCCM!
		$MainForm.Cursor = 'WaitCursor'
		Get-UserTxtBox
		$SamAccountName = $textbox_username.Text
		Add-RichTextBoxTitle -text "$ShowingLastPC"
		Get-QADUser -Identity $SamAccountName
		try
		{
			$User_Computer = Get-WmiObject -namespace $SCCMNameSpace -computer $SCCMServer -query "select SMS_R_System.Name, SMS_R_System.SystemOUName from  SMS_R_System where SMS_R_System.LastLogonUserName = ""$SamAccountName""" | Select-Object -ExpandProperty Name
			Add-RichTextBox -text "User: $SamAccountName Computer: $User_Computer"
			$textbox_computername.Text = "$User_Computer"
			$button_Check.PerformClick()
		}
		catch [Exception]{
			Add-RichTextBoxWarn -text "Error checking Computer of $SamAccountname. User maybe not existing."
		}
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_getsccmcache_Click = {
		Get-ComputerTxtBox
		$CacheSize = (Get-WmiObject -Namespace 'Root\ccm\SoftMgmtAgent' -Class CacheConfig -ComputerName $ComputerName).size
		Add-RichTextBoxTitle -text "Cache Size of $Computername"
		Add-RichTextBox -text "Cache $CacheSize MB"
	}
	############################################################################################
	$button_get_session_Click = {
		Get-ComputerTxtBox
		$Result = Invoke-Command -ComputerName $ComputerName -ScriptBlock { qwinsta } | Out-String
		Add-RichTextBoxTitle -text "Getting Sessions on $Computername"
		Add-RichTextBox -text "$Result"
	}
	############################################################################################
	$button_getvariablesfilter_Click = {
		$Variables = Get-Variable -Exclude button*, textbox*, label*, toolstrip*, *menu*, tab* | Out-String
		Add-RichTextBox -text "$Variables"
	}
	############################################################################################
	$Button_gpupdate_Click = {
		#Not sure if this stuff is working....
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - GPUpdate (Remotely via WMI)"
		$Force = Show-MsgBox -Title "Force?" -BoxType 'YesNo' -Icon 'Question' -Prompt "Force?"
		if ($Force -eq "YES")
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command "gpupdate /force"
		}
		else
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command "gpupdate"
		}
	}
	############################################################################################
	$button_gpresult_Click = {
		# maybe polish this so that you can select only possible users? maybe like in the default 
		# gpresult.
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Get GPResult of $Computername"
		$GPUser = Show-InputBox -title "Enter Username" -message "Enter Username"
		$folderbrowserdialog1.ShowDialog()
		$folder = $folderbrowserdialog1.SelectedPath
		$timestamp = Get-Date -Format "dd-MM-yyyy HH-mm"
		$Filepath = "$Folder" + "\report-$timestamp.htm"
		Get-GPResultantSetOfPolicy -Computer $ComputerName -User $GPUser -ReportType html -path $Filepath
		Add-RichTextBox -text "GPResult of User $GPUser on Computer $Computername saved in $Filepath"
	}
	############################################################################################
	$button_homerights_Click = {
		$Username = $textbox_username.Text
		Add-RichTextBoxTitle -text "$checkHomeRights $Username"
		$Homepath = $toolstrip_home_status.Text
		try
		{
			$Homerights = Get-Acl -Path "$Homepath" | format-list | Out-String
			Add-RichTextBox -text "$Homerights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_hosts_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Showing hostsfile of $Computername"
		$Hostsfile = Get-Content "\\$computername\c$\windows\system32\drivers\etc\hosts" | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $Hostsfile
	}
	############################################################################################
	$button_hotfix_Click = {
		$MainForm.Cursor = 'WaitCursor'
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Get the Windows Updates Installed"
		$result = Get-HotFix -ComputerName $ComputerName | Sort-Object InstalledOn | Format-Table __SERVER, Description, HotFixID, InstalledBy, InstalledOn, Caption -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox $result
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_installedSoftware_Click = {
		Get-ComputerTxtBox
		$result = Get-InstalledSoftware -ComputerName $ComputerName | Sort-Object -Property Name | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBoxTitle -text "$ComputerName - Installed Softwares List"
		Add-RichTextBox $result
	}
	############################################################################################
	$button_ipconfig_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $NetConf"
		$result = Get-IP -ComputerName $ComputerName | Format-List Name, IP4, IP4Subnet, DefaultGWY, MacAddress, DNSServer | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "$result`n"
	}
	############################################################################################
	$button_ipconfig2_Click = {
		$button_ipconfig.PerformClick()
	}
	############################################################################################
	$button_localadmins_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ShowLocalAdminsOf $Computername"
		$LocalAdmins = Get-LocalAdmins $ComputerName | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $LocalAdmins
	}
	############################################################################################
	$button_logoff_user_Click = {
		#this could be polished, get session ids and just let you select them maybe?
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Logoff User Session"
		$Session_Logoff = Show-InputBox -title "Enter Session to logoff" -message "Please enter the Session-ID that will be logged of"
		Add-RichTextBox -text "$ComputerName - Session to Logoff $Session_Logoff"
		Run-RemoteCMD -ComputerName $ComputerName -Command "rwinsta $Session_Logoff /server:$Computername"
		Add-RichTextBox -text "Session logged off!"
	}
	############################################################################################
	$button_listvariables_click = {
		$Variables = Get-Variable | Out-String
		Add-RichTextBox -text "$Variables"
	}
	############################################################################################
	$button_mainboard_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - MotherBoard"
		$result = Get-MotherBoard -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "$result"
	}
	############################################################################################
	$button_memory_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Memory Configuration"
		$result = Get-MemoryConfiguration -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_MMCServices_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services MMC (services.msc /computer:$ComputerName)"
		$command = "services.msc"
		$arguments = "/computer:$computername"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_MSRA_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Remote Assistance"
		MSRA.exe /OfferRA $ComputerName
	}
	############################################################################################
	$button_nbbattery_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Getting batterystate of $Computername ..."
		$OnBattery = Get-WmiObject Win32_Battery -ComputerName $ComputerName | Select-Object -ExpandProperty BatteryStatus
		if ($OnBattery -eq 1)
		{
			$CableConnected = "false"
			$BatteryConnected = "true"
		}
		if ($OnBattery -eq 2)
		{
			$CableConnected = "true"
			$BatteryConnected = "false"
		}
		$BatteryState = Get-WmiObject Win32_Battery -ComputerName $ComputerName | Select-Object @{ N = 'Remaining Charge %'; E = { $_.EstimatedChargeRemaining } }, Status | fl | Out-String
		Add-RichTextBox -text "On cable: $Cableconnected`nOn battery: $BatteryConnected `n$BatteryState"
	}
	############################################################################################
	$button_openc_Click = {
		explorer.exe \\$ComputerName\c$
	}
	############################################################################################
	$button_PCGroups_Click = {
		Add-RichTextBoxTitle -text "Transfer Computer Groups"
		$ComputerOLD = Show-InputBox -title "Enter Source Computer" -message "Please enter Source Computer"
		$TestComputerOLD = Get-QADComputer $ComputerOLD
		if ($TestComputerOLD -eq $null)
		{
			Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "ComputerNotFound" -Icon "Exclamation"
			Add-RichTextBoxWarn -text "Computer Not Found!"
		}
		else
		{
			Add-RichTextBox -text "Source Computer = $ComputerOLD"
			$ComputerNEW = Show-InputBox -title "Enter Destination Computer" -message "Enter Destination Computer"
			$TestComputerNEW = Get-QADObject $ComputerNEW
			if ($TestComputerNEW -eq $NULL)
			{
				Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "Computer Not Found" -Icon "Exclamation"
				Add-RichTextBoxWarn -text "Computer Not Found"
			}
			else
			{
				if ($ComputerNEW -eq $ComputerOLD)
				{
					Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "You Have Entered Two Identical Computers" -Icon "Exclamation"
					Add-RichTextBoxWarn -text "Two Identical Computers"
				}
				else
				{
					Add-RichTextBox -text "Destination Computer $ComputerNew"
					$CheckOK = Show-MsgBox -Title "Transferring" -Prompt "Do You Want To Transfer `nSourceComputer : $ComputerOLD `nDestinationComputer : $ComputerNEW" -BoxType "YESNO" -Icon "Exclamation"
					if ($CheckOK -eq "YES")
					{
						#Move AD Groups von OLD to New
						Add-RichTextBox -text "Transferring computergroups..."
						#Auslesen der Computergruppen
						#$ComputerGroups = Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | Out-String
						Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | ForEach-Object { Add-QADGroupMember -Identity $ComputerNEW -Members $_.Memberof }
						Add-RichTextBox -text "Showing computer Groups of $ComputerOLD`n$Computergroups"
						#Add-QADGroupMember "Group" -Member "Computer"
						$ComputerOLD = $ComputerOLD + "$"
						$ComputerNEW2 = $ComputerNEW + "$"
						$Groups = get-QADMemberOf $ComputerOLD
						$Groups | foreach{
							if ($_.name -ne "Domain Computers")
							{
								Add-RichTextBox -text "$ComputerNew adding to group $_ ..."
								try
								{
									Add-QADGroupMember $_ -Member $ComputerNEW2
									Add-RichTextBoxOK "Finished!"
								}
								catch [Exception]{
									Add-RichTextBoxWarn $_.Exception.Message
								}
							}
						}
					}
					if ($CheckOK -eq "NO")
					{
						Add-RichTextBoxWarn -text "Aborted."
					}
				}
			}
		}
	}
	############################################################################################
	$button_ping_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Ping Test"
		$result = Test-Connection $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "Ping`n$result"
	}
	############################################################################################
	$button_printer_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - Printers"
		$result = Get-WmiObject Win32_Printer -ComputerName $ComputerName | Format-table SystemName, Name, Comment, PortName, Location, DriverName -AutoSize | Out-String -Width $richtextbox_output.Width
		if ($result -ne $null)
		{
			Add-RichTextBox $result
		}
		else { Add-RichTextBox "$ComputerName - No Printer detected" }
	}
	############################################################################################
	$button_process_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - All Processes"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$ProcessALL = get-process -ComputerName $ComputerName | out-string
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_process_100_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processes >100MB"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$Processes_Over100MB = Get-Process -ComputerName $ComputerName | Where-Object { $_.WorkingSet -gt 100mb } | Select-Object Handles, NPM, PM, WS, VM, CPU, ID, ProcessName, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } } | sort ws | ft -AutoSize | Out-String
		Add-RichTextBox $Processes_Over100MB
	}
	############################################################################################
	$button_process_cmd_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Get the CommandLine Argument for each process"
		#Get-WmiObject Win32_Process -Filter "Name like '%powershell%'" | select-Object CommandLine
		$result = Get-WmiObject Win32_Process -ComputerName $ComputerName | select-Object Name, ProcessID, CommandLine | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox $result
	}
	############################################################################################
	$button_process_grid_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - All Processes - GridView"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Select @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, * | Out-GridView
	}
	############################################################################################
	$button_process_owner_Click = {
		Add-RichTextBoxTitle -text "$ComputerName - Processes with owners"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Select ProcessName, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, CPU, WorkingSet, Handles, Id | ft -AutoSize | out-string
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_process_start_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Start Process"
		$Process_query = $textbox_Process.text
		Add-RichTextBox -text "$ComputerName - Process to Start: $Process_query"
		Run-RemoteCMD -ComputerName $ComputerName -Command $Process_query
		Add-RichTextBox -text "Process $Process_query started"
	}
	############################################################################################
	$button_process_stop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Terminate Process"
		$Process_query = $textbox_Process.text
		Add-RichTextBox -text "$ComputerName - Process to Terminate: $Process_query"
		Run-RemoteCMD -ComputerName $ComputerName -Command "taskkill /IM $Process_query /F"
		Add-RichTextBox -text "Process $Process_query stopped"
	}
	############################################################################################
	$button_processor_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processor Information"
		$result = Get-Processor -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_proclasthour_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processes - Processes started in last hour"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Where-Object { trap { continue }  (New-Timespan $_.StartTime).TotalMinutes -le 10 } | Select ProcessName, @{ l = "StartTime"; e = { $_.StartTime } }, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, CPU, WorkingSet, Handles, Id | fl | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_profilerights_Click = {
		$Username = $textbox_username.Text
		Add-RichTextBoxTitle -text "$checkProfileRights $Username"
		$Profilepath = $toolstrip_user_status.Text
		Try
		{
			$Profilerights = Get-Acl "$Profilepath" | format-list | Out-String
			Add-RichTextBox -text "$Profilerights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_psremote_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $openPSRS"
		if (Test-PSRemoting -ComputerName $ComputerName)
		{
			Add-RichTextBox -text "$ComputerName - $starting $openPSRS"
			Start-Process powershell.exe -ArgumentList "-noexit -command Enter-PSSession -ComputerName $ComputerName"
		}
		else
		{
			Add-RichTextBoxWarn -text "$ComputerName - $PSRnotEnabled"
		}
	}
	############################################################################################
	$button_rdp_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - RDP"
		$command = "mstsc"
		$argument = "/v:$computername /admin"
		Start-Process $command $argument
	}
	############################################################################################
	$button_regedit_Click = {
		Start-Process regedit.exe
	}
	############################################################################################
	$button_Remotecontrol_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Starting Remotecontrol $Computername"
		& $global:CmRCviewer $ComputerName
	}
	############################################################################################
	$button_ResetPWD_Click = {
		Add-RichTextBoxTitle -text "User Passwort Reset"
		$PWUser = Show-InputBox -message "$EnterUsername" -title "$EnterUsername"
		if ($PWUser -ne $null)
		{
			$PWUserExists = Get-ADUser -identity $PWUser
			if ($PWUserExists -ne $null)
			{
				$PWPW = Show-InputBox -message "$EnterPassword" -title "$EnterPassword"
				$PWSecure = $PWPW | ConvertTo-SecureString -AsPlainText -Force
				Set-ADAccountPassword $PWUser -NewPassword $PWSecure -Reset -PassThru | Set-AdUser -ChangePasswordAtLogon $True
				Add-RichTextBox -text "Password: $PWPW User: $PWUser. `n$ChangePasswordAtLogon."
				Show-MsgBox -Prompt "Password: $PWPW User: $PWUser. `n$ChangePasswordAtLogon." -Title "$PasswordResetOK" -Icon Information -BoxType OKOnly
			}
			else
			{
				Add-RichTextBoxWarn -text "User $PWUser $NotExistinginAD."
				Show-MsgBox -Prompt "User $PWUser $NotExistinginAD." -Title "$NotExistinginAD" -Icon Information -BoxType OKOnly
			}
		}
		else
		{
			Add-RichTextBoxWarn -text "$NoInputDetected"
			Show-MsgBox -Prompt "$NoInputDetected" -Title "$NoInputDetected" -Icon Information -BoxType OKOnly
		}
	}
	############################################################################################
	$button_routetable_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Route table"
		$result = Get-Routetable -ComputerName $ComputerName | ft -auto | Out-String
		Add-RichTextBox $result
	}
	############################################################################################
	$button_sccm_start_Click = {
		Get-ComputerTxtBox
		$action = $combobox1.SelectedItem
		switch ($action)
		{
			"Auswertungszyklus für Softwareupdatebereitstellung" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000108}"
				}
			}
			"Benutzerrichtlinienabruf und Auswertungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000027}"
				}
			}
			"Computerrichtlininenabruf und Auswertungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000021}"
				}
			}
			"Dateisammlungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000010}"
				}
			}
			"Hardwareinventurzyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000001}"
				}
			}
			"Softwareinventurzyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000002}"
				}
			}
			"Überprüfungszyklus für Softwareupdates"{
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-0000000000113}"
				}
			}
			"Software Metering Usage Report Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000108}"
				}
			}
			"User Policy Retrieval & Evaluation Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000027}"
				}
			}
			"Machine Policy Retrieval & Evaluation Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000021}"
				}
			}
			"File Collection Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000010}"
				}
			}
			"Hardware Inventory Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000001}"
				}
			}
			"Software Inventory Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000002}"
				}
			}
			"Software Updates Deployment Evaluation Cycle"{
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-0000000000113}"
				}
			}
		}
		
		Add-RichTextBoxTitle -text "Action $action started on Computer $Computername"
	}
	############################################################################################
	$button_search_Click = {
		#on first search set global:run to 1 for "search next". Always adding +1 to the result
		#so the search starts one char later
		if ($global:run -ne 1)
		{
			$global:run = 1
			$Search = $textbox_search.Text
			$Result = $richtextbox_output.Find($Search)
			$global:Start = $Result + 1
		}
		else
		{
			$Search = $textbox_search.Text
			$Result = $richtextbox_output.Find($Search, $global:Start, 'None')
			$global:Start = $Result + 1
		}
	}
	############################################################################################
	$button_services_Click = {
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - All Services + Owners"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName | select Name, ProcessID, StartMode, State, @{ Name = "Owner"; Expression = { $_.StartName } } | ft -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicesauto_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - StartMode:Automatic"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='auto'" | Select-Object DisplayName, Name, ProcessID, StartMode, State | Format-Table -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicesautostop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Services with StartMode: Automatic and Status: NOT Running"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='auto' AND state!='running'" | Select-Object DisplayName, Name, StartMode, State | ft -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicescheck_Click = {
		Get-ComputerTxtBox
		$a = new-object -comobject wscript.shell
		Add-RichTextBoxTitle "$COMPUTERNAME - Query Service"
		#$Service_query = Read-Host "Enter the Service Name to Query `n"
		$Service_query = $textbox_services.text
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Query Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			Add-RichTextBox "$COMPUTERNAME - Checking Service $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox "$COMPUTERNAME - Command Sent! Service $Service_query"
			Add-RichTextBox $Service_query_return
			Add-RichTextBox -Text "$ComputerName - Query Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				Add-RichTextBox "$COMPUTERNAME - Checking the Service $Service_query ..."
				$Service_query_return = Get-WmiObject -computername $ComputerName Win32_Service -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox "$COMPUTERNAME - Command Sent! Service $Service_query"
				Add-RichTextBox $Service_query_return
				Add-RichTextBox -Text "$ComputerName - Query Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesnonstandard_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Non-Standard Windows Service Accounts"
		$NormalAccount1 = "LocalSystem"
		$NormalAccount2 = "NT Authority\\LocalService"
		$NormalAccount3 = "NT Authority\\NetworkService"
		$wql = 'Select Name, DisplayName, StartName, __Server From Win32_Service WHERE ((StartName != "LocalSystem") and (StartName != "NT Authority\\LocalService") and (StartName != "NT Authority\\NetworkService"))'
		$query = Get-WmiObject -Query $wql -ComputerName $ComputerName -ErrorAction Stop | Select-Object __SERVER, StartName, Name, DisplayName | Format-Table -AutoSize | Out-String
		if ($query -eq $null) { Add-RichTextBox "$Computername - All the services use Standard Windows Service Accounts" }
		else { Add-RichTextBox $query }
		
	}
	############################################################################################
	$button_servicesrestart_Click = {
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Restart Service"
		#Add-RichTextBox "# SERVICES - RESTART SERVICE - COMPUTERNAME: $ComputerName `n`n"
		#$Service_query = Read-Host "Enter the Service Name to Start `n"
		$Service_query = $textbox_services.text
		add-richtextbox -text "$ComputerName - Service to Restart: $Service_query"
		#Add-RichTextBox "SERVICE: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Start Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
			add-richtextbox -Text "$ComputerName - Restarting the Service $Service_query ..."
			#Add-RichTextBox "Starting Service: $Service_query...`r"
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
				add-richtextbox -Text "$ComputerName - Restarting the Service $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesrunning_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Status: Running"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_running = Get-Service -ComputerName $ComputerName | Where-Object { $_.Status -eq "Running" } | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $Services_running
	}
	############################################################################################
	$button_servicesstart_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Start Service"
		$Service_query = $textbox_services.text
		add-richtextbox -text "$ComputerName - Service to start: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Start Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Starting Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Starting Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesstop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Stop Service"
		$Service_query = $textbox_services.text
		Add-richtextbox -text "$ComputerName - Service to Stop: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Stop Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_shutdown_Click = {
		Start-Process shutdown.exe -ArgumentList /i
	}
	############################################################################################
	$button_systemtype_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - System Type"
		$result = get-systemtype -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_taskmanager_Click = { Call-Taskmanager_psf }
	############################################################################################
	$button_testport_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Network - Test-Port"
		$port = Show-Inputbox -message "Enter a port to test" -title "$ComputerName - Test-Port" -default "80"
		if ($port -ne "")
		{
			$result = Test-TcpPort $ComputerName $port
			Add-RichTextBox $result
		}
	}
	############################################################################################
	$buttonTSHanging_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -Text "Remove hanging tasksequence"
		$Out = Get-WmiObject -computername "$ComputerName" -Namespace root\ccm\SoftMgmtAgent -Class CCM_TSExecutionRequest -Filter "State = 'Completed' And CompletionState = 'Failure'"
		$Out.delete()
		Add-RichTextBox -text "Done."
	}
	############################################################################################
	$button_USBDevice_Click = {
		$button_USBDevice.Enabled = $false
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - USB Devices"
		$MainForm.Cursor = 'WaitCursor'
		$result = Get-USB -computerName $ComputerName | Select-Object SystemName, Manufacturer, Name | Sort-Object Manufacturer | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $result
		$button_USBDevice.Enabled = $true
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_Userunlock_Click = {
		$Locked_User = Get-QADUser -Locked | Select-Object -expand samaccountname
		if ($Locked_User -ne $null)
		{
			Show-MsgBox -Prompt "$FollowingLocked `n $Locked_user" -Title "$LockedUser" -Icon Information -BoxType OKOnly
			$Confirmation_User = Show-MsgBox -Prompt "$UnlockUser" -Title "$UnlockUser" -Icon Information -BoxType YesNo
			if ($Confirmation_User -eq "YES")
			{
				$Unlock_User = $Locked_User
				Unlock-QADUser $Unlock_User
				$Locked_User_2 = Get-QADUser -Locked | Select-Object -expand samaccountname
				if ($Locked_User_2 -eq $Locked_User)
				{
					$Locked_Error = Show-MsgBox -Prompt "$ErrorUnlocking $Unlock_User" -Title "$ErrorUnlocking" -Icon Critical -BoxType OKOnly
					Add-RichTextBoxWarn -text "$ErrorUnlocking $Unlock_User"
				}
				else
				{
					Show-MsgBox -Prompt "$Unlock_User $UnlockedOK" -Title "$UnlockedOK" -Icon Information -BoxType OKOnly
				}
			}
			else
			{
				Show-MsgBox -BoxType "OKOnly" -Title "$UnlockUser" -Prompt "$NoUserUnlocked" -Icon "Information"
			}
		}
		else
		{
			Show-MsgBox -Prompt "$NoUsersLocked" -Icon Information -BoxType OKOnly
		}
	}
	############################################################################################
	$button_volumes_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Hard Drive - Physical Disk"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Disks_Physical = Get-WmiObject Win32_DiskDrive -ComputerName $ComputerName | Select DeviceID, `
																							 Model,`
																							 Manufacturer,`
																							 @{ Name = "SizeGB"; Expression = { $_.Size/1GB } }, `
																							 Caption, `
																							 Partitions, `
																							 SystemName,`
																							 Status,`
																							 InterfaceType,`
																							 MediaType,`
																							 SerialNumber,`
																							 SCSIBus, SCSILogicalUnit, SCSIPort, SCSITargetId | fl | Out-String
		Add-RichTextBox $Disks_Physical
	}
	############################################################################################
	$button_WOL_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "WOL PC $Computername"
		$ComputerMAC = Get-IP -ComputerName $ComputerName | Select-Object -ExpandProperty MACAddress
		Add-RichTextBox -text "Mac-Address - $ComputerMAC"
		$ComputerIP = Get-IP -Computername $ComputerName | Select-Object -ExpandProperty IP4
		Add-RichTextBox "Computer IP - $ComputerIP"
		Send-WOL -mac $ComputerMAC -ip $ComputerIP -port 7
		Add-RichTextBox "WOL sent to $Computername with MAC $ComputerMAC"
	}
	#endregion buttons
	#region Textboxes
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!T E X T B O X E S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$textbox_computername_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_Check.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_computername.CharacterCasing = 'Upper'
	############################################################################################
	$textbox_computername_TextChanged = {
		$toolstrip_OSStatus.Text = ""
		if ($textbox_computername.Text -eq "")
		{
			$textbox_computername.BackColor = [System.Drawing.Color]::FromArgb(255, 128, 128);
			Add-RichTextBoxTitle -text "Please Enter a ComputerName"
		}
		if ($textbox_computername.Text -ne "")
		{
			$textbox_computername.BackColor = [System.Drawing.Color]::FromArgb(255, 203, 26)
		}
	}
	############################################################################################
	$textbox_services_MouseClick = [System.Windows.Forms.MouseEventHandler]{
		$textbox_services.Text = ""
	}
	############################################################################################
	$textbox_username_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		Get-ComputerTxtBox
		If ($_.KeyChar -eq 13)
		{
			$button_GetPC.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_debug_Click = {
		$textbox_debug.Text = ""
	}
	############################################################################################
	$textbox_debug_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_debug.performClick()
		}
	}
	############################################################################################
	$textbox_Process_Click = {
		$textbox_Process.Text = ""
	}
	############################################################################################
	$textbox_Process_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_process_start.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_search_Click = {
		$textbox_search.Text = ""
		$global:run = 0
	}
	############################################################################################
	$textbox_search_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_search.PerformClick()
		}
	}
	############################################################################################
	#endregion textboxes
	#region Richtextbox
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!R I C H T E X T B O X !!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$richtextbox_output_TextChanged = {
		#Scroll to Bottom when text is changed
		$richtextbox_output.SelectionStart = $richtextbox_output.Text.Length
		$richtextbox_output.ScrollToCaret()
	}
	#endregion richtextbox
	#region Toolstrips
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!T O O L S T R I P S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$toolstrip_user_status_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Profile folder"
		# Getting OS Version
		$OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
		$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
		Add-RichTextBox -text $Splitversion
		# this needs some polishing!! maybe do some switch-stuff!	
		if ($OS -gt "10.0")
		{
			$Profilepath = "$Profilefolder$username.v5"
		}
		else
		{
			if ($OS -gt "6.3")
			{
				$Profilepath = "$Profilefolder$username.v4"
			}
			else
			{
				if ($OS -gt "6.2")
				{
					$Profilepath = "$Profilefolder$username.v3"
				}
				else
				{
					if ($OS -gt "6.1")
					{
						$Profilepath = "$Profilefolder$username.v2"
					}
					else
					{
						$Profile = "$Profilefolder$username"
					}
				}
			}
		}
		Add-RichTextBox -text $Profilepath
		Explorer $Profilepath
	}
	############################################################################################
	$toolstrip_home_status_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Home folder"
		$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
		Add-RichTextBox -text $Splitversion
		$Homepath = "$Homefolder$Username"
		Add-RichTextBox -text $Homepath
		Explorer $Homepath
	}
	############################################################################################
	#endregion toolstrips
	#region MenuItems
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!M E N U I T E M S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	
	$aboutToolStripMenuItem_Click = { Call-About_psf }
	############################################################################################
	$quitToolStripMenuItem_Click = { $MainForm.Close() }
	############################################################################################
	$optionsToolStripMenuItem_Click = { Call-Options_psf }
	############################################################################################
	$aDExplorerToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\AdExplorer.exe"
	}
	############################################################################################
	$procexpToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\procexp.exe"
	}
	############################################################################################
	$procmonToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\Procmon.exe"
	}
	############################################################################################
	$nirLauncherToolStripMenuItem1_Click = {
		Start-Process "$global:Nirlauncher\NirLauncher.exe"
	}
	#endregion MenuItems
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion code
	#------------------------------------------------------------------------------------------#
	#region Mainform
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! F O R M   C L O S I N G !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$MainForm_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		#Writing the config back but only if there already is a config. If there is no config you
		#need to save or klick atleast ok in the options.
		$Exportpath = $Confpath + "/Config.csv"
		if (Test-Path $Exportpath -PathType Leaf)
		{
			New-Object -TypeName PSCustomObject -Property @{
				"global:Language" = $Language
				"global:Profilefolder" = $Profilefolder
				"global:Homefolder" = $Homefolder
				"global:Outfile" = $Outfile
				"global:SiteName" = $SiteName
				"global:SCCMServer" = $SCCMServer
				"global:SCCMNameSpace" = $SCCMNameSpace
				"global:SCCMEnabled" = $SCCMEnabled
				"global:Nirlauncher" = $Nirlauncher
				"global:Sysinternals" = $Sysinternals
				"global:CmRCViewer" = $CmRCViewer
			} | Export-Csv -Path $Exportpath -NoTypeInformation
		}
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!! F O R M   S I Z E   C H A N G E D !!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$MainForm_SizeChanged = {
		# Change the Richtextbox_output width according to the window size.
		$Newsize = $richtextbox_output.width / 7.1
		$Newsize = [System.Math]::Truncate($Newsize)
		$Newsize = $Newsize - 2
		$global:Fillchar = $Newsize
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion Mainform
	#------------------------------------------------------------------------------------------#
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_richtextbox_output = $richtextbox_output.Text
		$script:MainForm_textbox_Process = $textbox_Process.Text
		$script:MainForm_textbox_services = $textbox_services.Text
		$script:MainForm_combobox1 = $combobox1.Text
		$script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItem
		$script:MainForm_textbox_search = $textbox_search.Text
		$script:MainForm_textbox_debug = $textbox_debug.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$richtextbox_output.remove_TextChanged($richtextbox_output_TextChanged)
			$button_deleteGPO.remove_Click($button_deleteGPO_Click)
			$button_gpresult.remove_Click($button_gpresult_Click)
			$Button_gpupdate.remove_Click($Button_gpupdate_Click)
			$button_export.remove_Click($button_export_Click)
			$button_clear.remove_Click($button_clear_Click)
			$buttonFixWMI.remove_Click($buttonFixWMI_Click)
			$button_shutdown.remove_Click($button_shutdown_Click)
			$button_C.remove_Click($button_C_Click)
			$button_WOL.remove_Click($button_WOL_Click)
			$button_logoff_user.remove_Click($button_logoff_user_Click)
			$button_get_session.remove_Click($button_get_session_Click)
			$button_Userunlock.remove_Click($button_Userunlock_Click)
			$button_ResetPWD.remove_Click($button_ResetPWD_Click)
			$button_DNScheck.remove_Click($button_DNScheck_Click)
			$button_ping4.remove_Click($button_ping_Click)
			$button_ipconfig.remove_Click($button_ipconfig_Click)
			$button_regedit.remove_Click($button_regedit_Click)
			$button_cmd.remove_Click($button_cmd_Click)
			$button_psremote.remove_Click($button_psremote_Click)
			$button_MSRA.remove_Click($button_MSRA_Click)
			$button_Remotecontrol.remove_Click($button_Remotecontrol_Click)
			$button_rdp.remove_Click($button_rdp_Click)
			$button_hotfix.remove_Click($button_hotfix_Click)
			$button_MMCServices.remove_Click($button_MMCServices_Click)
			$button_compmgmt.remove_Click($button_compmgmt_Click)
			$button_localadmins.remove_Click($button_localadmins_Click)
			$button_folderrights.remove_Click($button_folderrights_Click)
			$button_profilerights.remove_Click($button_profilerights_Click)
			$button_homerights.remove_Click($button_homerights_Click)
			$button_PCGroups.remove_Click($button_PCGroups_Click)
			$button_ComputerGroups.remove_Click($button_ComputerGroups_Click)
			$button_autostart.remove_Click($button_autostart_Click)
			$button_installedSoftware.remove_Click($button_installedSoftware_Click)
			$button_printer.remove_Click($button_printer_Click)
			$button_USBDevice.remove_Click($button_USBDevice_Click)
			$button_systemtype.remove_Click($button_systemtype_Click)
			$button_memory.remove_Click($button_memory_Click)
			$button_processor.remove_Click($button_processor_Click)
			$button_mainboard.remove_Click($button_mainboard_Click)
			$button_ipconfig2.remove_Click($button_ipconfig2_Click)
			$button_testport.remove_Click($button_testport_Click)
			$button_hosts.remove_Click($button_hosts_Click)
			$button_routetable.remove_Click($button_routetable_Click)
			$button_checkWLAN.remove_Click($button_checkWLAN_Click)
			$button_process_stop.remove_Click($button_process_stop_Click)
			$button_process_start.remove_Click($button_process_start_Click)
			$textbox_Process.remove_Click($textbox_Process_Click)
			$textbox_Process.remove_KeyPress($textbox_Process_KeyPress)
			$button_cpuram.remove_Click($button_cpuram_Click)
			$button_taskmanager.remove_Click($button_taskmanager_Click)
			$button_process_cmd.remove_Click($button_process_cmd_Click)
			$button_process_grid.remove_Click($button_process_grid_Click)
			$button_process_owner.remove_Click($button_process_owner_Click)
			$button_process_100.remove_Click($button_process_100_Click)
			$button_proclasthour.remove_Click($button_proclasthour_Click)
			$button_process.remove_Click($button_process_Click)
			$button_servicesrunning.remove_Click($button_servicesrunning_Click)
			$button_services.remove_Click($button_services_Click)
			$button_servicesauto.remove_Click($button_servicesauto_Click)
			$button_servicesautostop.remove_Click($button_servicesautostop_Click)
			$button_servicesnonstandard.remove_Click($button_servicesnonstandard_Click)
			$button_servicesstop.remove_Click($button_servicesstop_Click)
			$button_servicesstart.remove_Click($button_servicesstart_Click)
			$button_servicesrestart.remove_Click($button_servicesrestart_Click)
			$button_servicescheck.remove_Click($button_servicescheck_Click)
			$textbox_services.remove_MouseClick($textbox_services_MouseClick)
			$button_diskusage.remove_Click($button_diskusage_Click)
			$button_deleteoffline.remove_Click($button_deleteoffline_Click)
			$button_volumes.remove_Click($button_volumes_Click)
			$button_eventlogmmc.remove_Click($button_eventlogmmc_Click)
			$button_eventlog20.remove_Click($button_eventlog20_Click)
			$button_eventlognames.remove_Click($button_eventlognames_Click)
			$buttonTSHanging.remove_Click($buttonTSHanging_Click)
			$button_getsccmcache.remove_Click($button_getsccmcache_Click)
			$button_getadvertisedsoftware.remove_Click($button_getadvertisedsoftware_Click)
			$button_sccm_start.remove_Click($button_sccm_start_Click)
			$button_search.remove_Click($button_search_Click)
			$textbox_search.remove_Click($textbox_search_Click)
			$textbox_search.remove_KeyPress($textbox_search_KeyPress)
			$button_getvariablesfilter.remove_Click($button_getvariablesfilter_Click)
			$button_listvariables.remove_Click($button_listvariables_Click)
			$textbox_debug.remove_Click($textbox_debug_Click)
			$textbox_debug.remove_KeyPress($textbox_debug_KeyPress)
			$button_debug.remove_Click($button_debug_Click)
			$MainForm.remove_AutoSizeChanged($MainForm_SizeChanged)
			$MainForm.remove_FormClosed($MainForm_FormClosed)
			$MainForm.remove_Load($OnLoadFormEvent)
			$MainForm.remove_SizeChanged($MainForm_SizeChanged)
			$MainForm.remove_Resize($MainForm_SizeChanged)
			$button_Check.remove_Click($button_check_click)
			$aboutToolStripMenuItem.remove_Click($aboutToolStripMenuItem_Click)
			$textbox_username.remove_KeyPress($textbox_username_KeyPress)
			$button_GetPC.remove_Click($button_GetPC_Click)
			$quitToolStripMenuItem.remove_Click($quitToolStripMenuItem_Click)
			$aDExplorerToolStripMenuItem.remove_Click($aDExplorerToolStripMenuItem_Click)
			$procexpToolStripMenuItem.remove_Click($procexpToolStripMenuItem_Click)
			$procmonToolStripMenuItem.remove_Click($procmonToolStripMenuItem_Click)
			$nirLauncherToolStripMenuItem1.remove_Click($nirLauncherToolStripMenuItem1_Click)
			$optionsToolStripMenuItem.remove_Click($optionsToolStripMenuItem_Click)
			$textbox_computername.remove_KeyPress($textbox_computername_KeyPress)
			$textbox_computername.remove_TextChanged($textbox_computername_TextChanged)
			$toolstrip_home_status.remove_Click($toolstrip_home_status_Click)
			$toolstrip_user_status.remove_Click($toolstrip_user_status_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$tabcontrol_Home.SuspendLayout()
	$tabpage1.SuspendLayout()
	$groupbox15.SuspendLayout()
	$groupbox14.SuspendLayout()
	$groupbox13.SuspendLayout()
	$groupbox12.SuspendLayout()
	$groupbox11.SuspendLayout()
	$groupbox9.SuspendLayout()
	$tabpage2.SuspendLayout()
	$groupbox16.SuspendLayout()
	$groupbox7.SuspendLayout()
	$groupbox6.SuspendLayout()
	$groupbox5.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	$tabpage3.SuspendLayout()
	$groupbox19.SuspendLayout()
	$tabpage4.SuspendLayout()
	$chart1.BeginInit()
	$groupbox21.SuspendLayout()
	$groupbox20.SuspendLayout()
	$tabpage5.SuspendLayout()
	$groupbox8.SuspendLayout()
	$groupbox4.SuspendLayout()
	$tabpage6.SuspendLayout()
	$groupbox22.SuspendLayout()
	$tabpage8.SuspendLayout()
	$groupbox23.SuspendLayout()
	$tabpage10.SuspendLayout()
	$groupbox18.SuspendLayout()
	$groupbox17.SuspendLayout()
	$tabpage11.SuspendLayout()
	$tabpage_debug.SuspendLayout()
	$toolstrip1.SuspendLayout()
	$menustrip1.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($richtextbox_output)
	$MainForm.Controls.Add($tabcontrol_Home)
	$MainForm.Controls.Add($statusbar1)
	$MainForm.Controls.Add($toolstrip1)
	$MainForm.Controls.Add($menustrip1)
	$MainForm.AutoSize = $True
	$MainForm.BackColor = 'Control'
	$MainForm.ClientSize = '1272, 873'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
AAABAAIAICAAAAAAIACoEAAAJgAAACgoAAAAACAAaBoAAM4QAAAoAAAAIAAAAEAAAAABACAAAAAA
AAAgAAAAAAAAAAAAAAAAAAAAAAAAA9T+/wTV//8D1f7/A9T+/wPU/v8E1P7/A9T+/wPU/v8E1P3/
BNT9/wTU/f8E0/z/BdP7/wXT+v8G0vj/B9D2/wfO9v8G0vj/BNT7/wTU/f8D1P7/A9X+/wPV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wPV//8D1v//A9b//wPW
//8D1v//A9f//wPX//8D1///A9j//wPY//8D2f7/BM3r/wqnv/8OkKj/D4yk/wuguP8GxuL/A9r9
/wPX//8D1v//A9b//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9X//wXI6f8WX23/HSsx/xs9RP8a
Qkn/Hisw/xhPWv8Hv9z/A9f//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8C3f//EXyO
/x4lKf8PjZ7/EniG/xRwfP8Mobf/HDY9/xdVYf8D2f7/BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV+v8cNDv/FGh3/wTO8/8bMzz/HC4y/wTP7P8QhJP/Hiov/wXN8v8E1v//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNb6/xs/SP8VZHL/C6K6/xtES/8cOT//DJ+0/xF8i/8dMTf/
BND1/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//EIqe/xwzOf8bQEf/Gz1D/xw0
Of8aQEf/HDU7/xRpd/8D2v3/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPd//8TcH//
Gzk+/xdXYP8dLjP/HiQp/xdYYP8bP0P/F1Re/wPV/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//At7//xVicP8dMTf/FHF+/x4nLP8eISX/FWh0/xpAR/8aPUb/A9f+/wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8D2f//C6jE/x4mK/8bOkD/IB4i/x8eIv8eKS7/Hx8i/w+Kn/8C
3P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8FyOf/HDc+/xs8Qf8eJSn/Hx8i
/x0wNv8cMDb/Br/j/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNb//we83f8d
KS7/HDI4/x4qL/8fISb/HDg+/x4qL/8HvN3/BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8D3P//DZau/yAbHv8eKCz/Higs/x0rL/8cNjz/IRga/xF+kP8C3f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//A9j//wbF4/8bOT//IBod/x4nLf8eJyz/HTE3/x00O/8gGh3/HS4z/wfB
3/8D2P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wPX//8GxuL/Fllk/yAYHP8gHCD/Higt/x4nLP8cMzn/
HDY7/yAbH/8gGRz/GFNd/wfA3P8D1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1f//BNH0/xRqeP8fGh3/Hx8i/x4i
J/8eJyz/Higt/x0tMv8cNz3/Hx8j/x8fI/8gGx3/FWFu/wXO7/8D1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8D1f//A9X+/wPX+/8Jscf/
HS81/x4oLf8Olab/FHB8/xlMVP8eKC3/Hx8k/xpGTf8UbXr/EIua/x4mK/8eJyz/C6W+/wPW/P8D
1f//A9X//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//A9X//wTM
7v8LpMH/DJ61/xRre/8fIyf/F1xm/xNxf/8cO0D/GE9W/x8eI/8fHSH/Gz9F/xw2O/8VYWz/FWdw
/x4mKv8TbX7/DJ63/wqpxf8EzvD/A9X//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//
BNX//wPV//8E0PX/D4ue/xpDSv8ZRUv/Gzo//x4nK/8bQkj/HTI2/x0wNP8dKi7/Hx4i/x8eIv8e
Jir/HSwx/x0vNf8aRkz/HSou/xs7Qf8aP0b/G0RL/w+Po/8E0PP/A9X//wTV//8E1f//BNX//wTV
//8D1P7/BNX//wTV//8E1f//A9X//wTQ9P8PkKP/G0NJ/xpBSP8bPkX/Hx0h/x8eIv8fHiL/Hx4i
/x8dIf8gHiL/IB4i/x8dIf8fHiL/Hx4i/x8eIv8fHSH/HDM4/xw3PP8dNDn/FHOB/wXL7P8D1f//
BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wPa//8EzvH/CLjS/xtAR/8f
HCD/HyIm/x8fI/8eJCr/Hiov/x4nLP8eJyv/Hiku/x4kKP8fHyP/IB4h/yAbHv8cNz7/CLTR/wbF
5/8D1fv/A9b//wTU//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX/
/wPa+v8UbX3/IBYY/xlGT/8MobT/DJmt/wiyy/8Iudb/CLTP/wizzf8IttH/Ca3G/w2Wqv8NlKT/
GkNM/yEYGv8Tb3//At39/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E
1f//BNX//wTV//8D2P//B8Di/x8jJ/8eKCz/DJuw/wLZ/P8D2P//A9j//wPX//8D1///A9f//wPX
//8D2P//A9j//wLZ/P8NmK7/Hics/x8mKv8GweL/A9f//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wPU/v8E1f//BNX//wTV//8E1f//BNX//wPa//8KqsP/IBYY/xZYZv8EzO3/A9X//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A9b//wXJ6f8XUV3/IBMU/w2Uq/8C2///BNX//wTV//8E
1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//A9r//wqnwP8hFRf/EneL/wTW
/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNP7/xNsfv8hEhT/D42j
/wLb//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8D2P//
B77f/x8hJP8TcIL/A9X7/wPV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPV//8D
1Pr/FGt8/x8fIf8JuNb/Atj//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV
//8E1f//BNX//wTV//8D1/r/FGt6/xs7Q/8It9P/A9b+/wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//A9b+/wi51f8bO0P/FGV0/wPY+/8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wPV//8Fy+n/F1Zg/xdSXf8E0PD/BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E0PD/GFRf/xlHUf8GyeX/A9b//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPW//8GxOD/GUxU
/w2Wrf8C2///BNX//wTV//8E1f//BNX//wTV//8E1f//Atv//wyZs/8aQ0v/B73Z/wPX//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wPZ//8MoLX/D5Cl/wLc//8E1f//BNX//wTV//8E1f//BNX//wTV//8C3P//DZKp/w2X
qv8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX/
/wTV//8D1v//A9f//wPX//8D1///A9j//wXM7v8Fy+3/A9f//wPW//8D1///A9f//wPX//8D1///
A9f//wPZ//8Gxuj/Bcfp/wLY//8D1///A9f//wPY//8D2P//A9j//wPV//8E1f//BNX//wTV//8D
1P7/A9T+/wPU/v8D1P7/A9X+/wPV/v8E1f7/BNT9/wTV/f8E1f3/BNX+/wPV/v8D1f7/A9X+/wTV
/v8E1f7/BNX+/wTV/f8E1P3/BNX9/wTV/f8E1f3/BNX9/wTV/v8D1f7/BNX9/wTW/f8D1v7/A9X+
/wPU/v8D1P7/A9T+/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACgAAABQAAAAAQAgAAAAAAAAMgAAAAAAAAAA
AAAAAAAAAAAAAATV//8E1f//BNX//wTV/v8F1P7/BNT+/wXU/v8F1P7/BNT+/wXU/v8F1P7/BdT9
/wXU/f8F1P3/BdP8/wbT/P8G0vv/B9H5/wjR+P8I0Pf/Cc/3/wjR+P8G0vr/BdP8/wXU/v8F1P7/
BNX+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8D2P//A9j//wPY//8D2P//A9j//wPZ//8D2f//A9n//wPZ//8D2v//A9r//wPa
//8D2///A97//wLk//8D3P//BdH2/wbO8v8E2P//AuL//wPf//8D2///A9r//wPZ//8D2P//BNf/
/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9n//wXT9f8U
doX/HTQ6/yAhJP8hHSD/Hi4z/xhYZP8IxeL/A93//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9j//wXQ8/8bR0//IwoK/yAiJv8YVV//
F11o/x4wNf8jCQr/HjI3/wfD4P8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wLh//8Rg5X/JAcH/xhVXv8HyuT/FHSC/xZncv8G0u//EYSV
/yMND/8ZUVz/A9v+/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8E1vv/HDg//x8nK/8F0PL/Bc71/yAcIP8hGBn/B8Hi/wLn//8bRE3/Hycr/wbN
8v8E2P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1///
BdL4/x4sMv8cPkb/A93//wbK7P8fKzD/HyUo/wfD4f8B5///FG5//yAiJP8GzPD/BNj//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPf//8WZXL/Hi0z
/xZmc/8aSlH/Gk5V/x05P/8aS1T/GFZe/xtCSv8cO0T/BNb8/wTW//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//CrfT/x8oK/8eMDX/HTc9/x40
Of8eMDX/HTQ5/xxBRv8hHR//D5ao/wPe//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A+D//xRxgP8dNDj/GkhQ/xZqdP8fJir/IRgc/xVvef8b
QUf/G0NI/xlQWv8E1f7/BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wLh//8WZnT/Iw0P/xR1gv8TfYv/IB0h/yEZHP8WZXD/EYiW/yAgI/8cOkP/
BNf+/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8D3f//DKzH/yIXGf8eLjP/Gz9F/yEYHP8gHSD/Hisw/x8nK/8iDxH/EnyN/wLg//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNf//wTW+v8b
QEj/ICAk/xlRWP8hGx7/IB0g/x4vNP8gIib/HTI4/wXO8v8E2P//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3v//GVBc/yIUFv8YU1v/
HyIm/yEbHv8cQ0r/ICAj/xtASf8E1v//BNf//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E2P//Bc70/x0yOP8hFhr/G0JJ/x8oLf8gHSH/GkxT
/yEbH/8eMjf/BdD0/wTY//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//A97//wq00f8gHB//IRsf/x0xNv8fKCz/HyYq/xpJUP8hGh7/IhcZ/w6Y
rv8C4P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNb//wPd//8YWGL/IRYZ/yAcIP8eLzX/HyYr/x4uM/8bRk//IRod/yEXGv8bQUn/BNv//wTX//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wLj//8Pl63/IhUX
/yAeIv8gHCD/HjE2/x8mK/8eMTb/G0VK/yEaHf8gHyP/IRcZ/xCOof8C5P//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPf//8Norf/IB8h/yEbH/8gHSH/IBwg/x4w
Nf8fJiv/HTI3/xpKUf8hGRz/IB0h/yEbH/8hGx3/D5Oo/wPg//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wPb//8Iwd//ICUo/yEWGf8gHyL/Hiwx/yEXGv8dMzn/Hygt/x8oLf8Z
TFT/IRYZ/x8nLP8gICT/IRkb/yAeIP8KtdD/A9z//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNb/
/wTY//8C4///FW16/yIQEv8fJSn/D5an/w+Uo/8aSFD/GktT/x8lKv8gGx//GktS/xxARv8Plaf/
EYyb/yAhJf8iEhT/GVFc/wPe//8E2P//BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9z//wTU/P8Gy+z/B8Xl/x4x
N/8iERP/F2Ft/wymvf8fKi7/Fmhz/xhZYP8hGBz/IRkd/xxBR/8YWmT/Hiov/xCMnP8Vb3r/IhAS
/x00Ov8Gyuz/Bc/y/wTY//8D3P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A9z//w2iuf8aS1T/GFpg/xtESv8hGh7/HDtB/xZtdv8d
Njv/ICIl/xpMUf8eKS7/IB0h/yAeIv8fJSn/G0BG/yAiJv8dMjj/FHZ//xtITv8hGh7/G0BH/xhU
XP8ZUlz/DKrE/wPc//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//A9v//wm31v8bSEv/HTc7/xw5P/8ZUFb/ICIn/x8jJ/8eLzT/HjI3/x4xNv8eLjP/
IB0h/yAfI/8gHyP/IB0h/x8pLf8eLzT/HTA1/x4uNP8fJCn/HyIn/xlWXP8dMjj/HjM3/xpPVP8K
tM//A9r//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPY
//8Hx+f/E3eF/xw+RP8bQEf/GVRc/yAdIf8gHiL/IBwg/yAcIP8gHCD/IB0g/yAeIv8gHyP/IB8j
/yAeIv8gHiH/IBwg/yAcIP8gHCD/IB4i/yAdIP8cP0X/HTc8/x4xNv8aTVX/CrPO/wPa//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNj//wPe//8G
yu7/Bszp/xdjbf8hGBv/IBwg/yIVF/8iFBb/IRYZ/yIUFv8hHSD/IRYY/yIWGP8hHB//IhMV/yEW
GP8iFBf/IhMW/yEcH/8hGBv/GVJb/wbJ6f8Iv+L/BdP6/wPb//8E1P//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//AuL//w2ivP8iFRf/
IRgb/x02PP8RiJf/FWp2/w2cs/8PkaX/CrHO/w6ZsP8Ol63/C67J/xCFl/8Ol63/FmRx/xRxff8e
MDT/IRod/yEZHP8Nobr/AuP//wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNf//wXQ9P8dOD7/IRcZ/yAeIP8MqsT/Aeb/
/wLh//8C3///AuD//wPc//8C3///At///wPc//8C4f//At///wPg//8B6P//DKfC/yEaHP8hFhn/
HD9G/wTX/P8E1v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wPc//8Ks9L/IRwf/yITFf8WZXL/AuL//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPg//8WYm7/IhQW/yEcH/8KsM3/A9z/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8D3///DaG4/yIUFv8fJSn/CMDf/wPb//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8D3f//CbXT/yAeIf8iERL/EIWZ/wLh//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9//
/w2etf8iEBH/Gz5G/wTW/v8E1v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNj//wbN9P8dMTf/Ig4P/xJ+kf8C4f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPc//8KsM7/IhQV/xtC
S/8E2f//BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTW//8E1f3/HDtC/yMREv8No7z/At7//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E2P//Bc/y/x4xNv8gJCj/B8fn/wPb//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//B8Pk/yAe
If8dMjf/BdL2/wTX//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wPe//8No7r/Iw8P/xlOWP8D2/7/BNf//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1///BNz+/xhXYf8jDQ7/Dpiv/wPe//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//A97//xCOof8jDAz/FWp5/wPe//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1v//A93+/xRxgP8kBQX/E3iI/wPh//8E1v//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8C4f//EI+j/yIVFf8Lrsn/A9z//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//A9z//wqxz/8iExP/E3uM/wPf//8E1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNb//wLk//8XYGz/En+R/wLh//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wLf//8P
jKH/GFNd/wLk//8E1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3f//DKW7
/wq31v8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D2///C6zJ/w+Spf8C3///
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNf//wPZ//8D2f//A9n//wPZ//8D2f//A9n//wTX//8D2f//A9j//wPY
//8D2f//A9n//wPZ//8D2f//A9n//wPZ//8D2f//A9r//wPZ//8E1v7/A9r//wPZ//8D2f//A9n/
/wPa//8D2v//A9v//wPb//8D1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1P7/BdT+/wXT/f8F0/3/BdT9/wXU/v8F1P7/BNT+/wTU/v8E1P7/BNT+/wXU/v8F
1P7/BdT+/wXU/f8F0/3/BdP9/wXU/f8F1P3/BdT9/wXU/f8F1P3/BdT+/wTU/v8E1P7/BdT9/wXU
/f8E1P7/BNX//wTV//8E1f//BNX//wTV//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AA==')
	#endregion
	$MainForm.MainMenuStrip = $menustrip1
	$MainForm.MinimumSize = '1288, 858'
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'Main Form'
	$MainForm.add_AutoSizeChanged($MainForm_SizeChanged)
	$MainForm.add_FormClosed($MainForm_FormClosed)
	$MainForm.add_Load($OnLoadFormEvent)
	$MainForm.add_SizeChanged($MainForm_SizeChanged)
	$MainForm.add_Resize($MainForm_SizeChanged)
	#
	# richtextbox_output
	#
	$richtextbox_output.BackColor = 'Control'
	$richtextbox_output.BorderStyle = 'FixedSingle'
	$richtextbox_output.DetectUrls = $False
	$richtextbox_output.Dock = 'Fill'
	$richtextbox_output.Font = 'Lucida Console, 9pt'
	$richtextbox_output.HideSelection = $False
	$richtextbox_output.Location = '0, 167'
	$richtextbox_output.Name = 'richtextbox_output'
	$richtextbox_output.ReadOnly = $True
	$richtextbox_output.ScrollBars = 'ForcedVertical'
	$richtextbox_output.Size = '1272, 686'
	$richtextbox_output.TabIndex = 1
	$richtextbox_output.Text = ''
	$richtextbox_output.add_TextChanged($richtextbox_output_TextChanged)
	#
	# tabcontrol_Home
	#
	$tabcontrol_Home.Controls.Add($tabpage1)
	$tabcontrol_Home.Controls.Add($tabpage2)
	$tabcontrol_Home.Controls.Add($tabpage3)
	$tabcontrol_Home.Controls.Add($tabpage4)
	$tabcontrol_Home.Controls.Add($tabpage5)
	$tabcontrol_Home.Controls.Add($tabpage6)
	$tabcontrol_Home.Controls.Add($tabpage8)
	$tabcontrol_Home.Controls.Add($tabpage10)
	$tabcontrol_Home.Controls.Add($tabpage11)
	$tabcontrol_Home.Controls.Add($tabpage_debug)
	$tabcontrol_Home.Dock = 'Top'
	$tabcontrol_Home.HotTrack = $True
	$tabcontrol_Home.ImageList = $imagelist1
	$tabcontrol_Home.ImeMode = 'Off'
	$tabcontrol_Home.Location = '0, 50'
	$tabcontrol_Home.Name = 'tabcontrol_Home'
	$tabcontrol_Home.SelectedIndex = 0
	$tabcontrol_Home.Size = '1272, 117'
	$tabcontrol_Home.TabIndex = 5
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($groupbox15)
	$tabpage1.Controls.Add($groupbox14)
	$tabpage1.Controls.Add($groupbox13)
	$tabpage1.Controls.Add($groupbox12)
	$tabpage1.Controls.Add($groupbox11)
	$tabpage1.Controls.Add($groupbox9)
	$tabpage1.BackColor = 'ControlLightLight'
	$tabpage1.BackgroundImageLayout = 'Stretch'
	$tabpage1.ImageIndex = 0
	$tabpage1.Location = '4, 23'
	$tabpage1.Margin = '0, 0, 0, 0'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '1264, 90'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'Home'
	#
	# groupbox15
	#
	$groupbox15.Controls.Add($button_deleteGPO)
	$groupbox15.Controls.Add($button_gpresult)
	$groupbox15.Controls.Add($Button_gpupdate)
	$groupbox15.ForeColor = '59, 59, 59'
	$groupbox15.Location = '918, 6'
	$groupbox15.Name = 'groupbox15'
	$groupbox15.Size = '227, 78'
	$groupbox15.TabIndex = 22
	$groupbox15.TabStop = $False
	$groupbox15.Text = 'GPO'
	#
	# button_deleteGPO
	#
	$button_deleteGPO.ForeColor = 'Black'
	#region Binary Data
	$button_deleteGPO.Image = [System.Convert]::FromBase64String('
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
ou7ubJTub2nfg3L6encDAAAAAElFTkSuQmCC')
	#endregion
	$button_deleteGPO.Location = '97, 19'
	$button_deleteGPO.Name = 'button_deleteGPO'
	$button_deleteGPO.Size = '124, 24'
	$button_deleteGPO.TabIndex = 8
	$button_deleteGPO.Text = 'Delete Local GPO'
	$button_deleteGPO.TextImageRelation = 'ImageBeforeText'
	$button_deleteGPO.UseVisualStyleBackColor = $True
	$button_deleteGPO.add_Click($button_deleteGPO_Click)
	#
	# button_gpresult
	#
	$button_gpresult.ForeColor = 'Black'
	#region Binary Data
	$button_gpresult.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH1SURBVDhPlVPPTxNBGN3ERPTilTTxQvwH
MJw4cCA9edD/Bm1ROLQleijG1cSjIP3BzG53A7SUQCKliXA2UUsDCf0BhouxCVIidHef3zfbVtDW
hJe8ffPNvHn5ZrKjBWLrjTvTedx+muvyFnPS18vz7GO/dhk8eR2wv73VByczvpwCkeWvKDVp/BP4
TGTlmud5ncH+9lYfnYDoSgkv8mU8z5Uxk91FLFtSyjXP8zpjoF9A9QKIr9dQp3HF9VklHlI9u1FD
taVsuDG52jsgTqYlfRTWmyAMPQhTH4etj2Hp9ShW9BG8/MDRgPZk7WoA3zTjO9GK3wd2HgLbj4CP
D/Ap/wrCzEFKC2JxETKdhC3TsAyBjGnCtu1Gt4O3m3VYkUEYsSGI6BBk9C7SRlat9YNJId0O6Lh4
VzxSysd1iKmUoC+wf1BBpVZH7fBIKdcMKeWfgPnNMhLFfbzf2sNcYQ/zxQOkkgm4nodvx8eYmHiM
UCislGsXnh/QOQIjWdhtj3wkEwtwHAc/Gg00z87w6/xcKdeu6/oB//sTBXdAxtNmE6FwGM+mppRy
7VFnKiAQWTvpvIXOG7hJ1EJ5LNONMy5aLTgU5NGYlWuGCiAME0d6cdWSytgPhmFc/Sf+RmphrmCS
SQjxD3lzJpM5aVv74h6xZ3c+teHfVSynIPQd5DgAAAAASUVORK5CYII=')
	#endregion
	$button_gpresult.Location = '6, 19'
	$button_gpresult.Name = 'button_gpresult'
	$button_gpresult.Size = '85, 24'
	$button_gpresult.TabIndex = 0
	$button_gpresult.Text = 'GPResult'
	$button_gpresult.TextImageRelation = 'ImageBeforeText'
	$button_gpresult.UseVisualStyleBackColor = $True
	$button_gpresult.add_Click($button_gpresult_Click)
	#
	# Button_gpupdate
	#
	$Button_gpupdate.Enabled = $False
	$Button_gpupdate.Font = 'Microsoft Sans Serif, 8.25pt'
	$Button_gpupdate.ForeColor = 'Black'
	#region Binary Data
	$Button_gpupdate.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKwSURBVDhPhZPvS1NhFMdvRUYJ9ao3hRmV
/QHWG0EZ266/VjAqKQJpSGUmiWSGiWRt80flrzDENHVlKLKNINfcnVdrlk4G6iq1UinLcqEkaWRo
vvh2nnvv1HxRXzhcnuec83nOOc9zOQDc/8QXtiPxhgi1SRD5QvcBZVsWA8QViUt8gZsFQGUUpG8s
JSkhnMbsRtvwNKo6x5B02wNaWxWXDCBFplt8c3Z/AK2DU3hCwWqzsAxg8KS6flxzjsJJvjO1XmgK
3FWSM9iCvqwTac2vEFXSjevOEakKyUGKK2pHbNlz8Hd8ON7wEtaBr9CXdILaCZcARDMWOd4gpXkI
2kof6nu/QEunKvlcePQxfUz2g6a44g7o7vYjw/4O5W46xOiyygCTa6Gy6xN0tX4klHZBa3aOrp4B
aRNZWHSWpelQZS/0DYOoevFZrlICUL9mcQJHLcNIKHmGrTsjIqnsBTl3RaHbw3YnlnpwomkExZ5J
0MEyQEuAS45xnGoZg5Ztctz6kNBtB+U0WfHF4gb6rNOY2nDaPo4cgdoMAngCGGzjyHZNwFDjZcPZ
yIKlTEVU0TxVutlQ7UWuGEC6YxK8OQgoEJBie49zjyeQYxui3lzlSt6y2FCTq3t+m1rfIrU1gLOP
PrIKFiWAKrfFffL+a6Q5Aqjtm8GRCnosJqGCBrlXTuc4gsI+Mg+LfxYXhGkkNw4hKvNejQTYxxti
2F1nCFO46plB3cB3XLQP022svAW1sQ353T9g6p5FJgHib3Yw3w4JQAqJufzQepiuMKvjG4w9c6gf
XJCnrEhL/eb7FpHn/YXSvnmcb/TPSQ4FwLRLdaVF1N16ilT7B+T1/PyrgthCN61d0FAlDMyeN1W9
tBrAtGe/LjVZlWfzscGyJGWfif2Fay1yLYBpC1kEWTDoH+K4PxJHyEw1ZC2AAAAAAElFTkSuQmCC')
	#endregion
	$Button_gpupdate.Location = '6, 49'
	$Button_gpupdate.Name = 'Button_gpupdate'
	$Button_gpupdate.Size = '85, 24'
	$Button_gpupdate.TabIndex = 7
	$Button_gpupdate.Text = 'GPUpdate'
	$Button_gpupdate.TextImageRelation = 'ImageBeforeText'
	$Button_gpupdate.UseVisualStyleBackColor = $True
	$Button_gpupdate.add_Click($Button_gpupdate_Click)
	#
	# groupbox14
	#
	$groupbox14.Controls.Add($button_export)
	$groupbox14.Controls.Add($button_clear)
	$groupbox14.ForeColor = '59, 59, 59'
	$groupbox14.Location = '1170, 6'
	$groupbox14.Name = 'groupbox14'
	$groupbox14.Size = '88, 78'
	$groupbox14.TabIndex = 21
	$groupbox14.TabStop = $False
	$groupbox14.Text = 'Log'
	#
	# button_export
	#
	$button_export.ForeColor = 'Black'
	#region Binary Data
	$button_export.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIGSURBVDhPfZPLTxNhFMUb/xA27lwRVF4G
VBYWWkATVsalS3ThwoAmBJKpZQeEhsSFJsTQloROZ2o1RhqImQSJstAEXBgTRXm0Ux59OTC0lMN3
L0Of1pOcfGfuzP19j5mxAWCHwuGErKoIBIOYK1jmUVYUBFU1bqsQ9RUA9ND/pOs6wX1WL0uUiwCa
mfTz17rwb8vrXHvl9fIYi0YRUBS/1V8OoKWS/mxsYmNzi02ZNOPzIZvLcaaViO0EqgGyTPexLWaJ
xmLsreg21z6vrDDkfCW03ZoAXY8jHt8p2DAOuF4qVX1dG7Czu4/dvX0kEikYmUMcGcfIGvmCSZG3
i7UBiWQSyVQK5kEWI/4hNA40oGnwivBVdsuTJtwcboPTbZ+lvipAOp3B34wBiDOj5oVvE3i/Oob5
1QlE1ibFOA7t+xQcLjs9Xg2gPZuHR5xpxvAXifO09hB3py5wfvNVQqd0i2I1wDRN5LJnr6x5sBH+
T4/gXx7g65daP48zyw8EoHIF1ndwnM/j5ISj2G8zXizdR7+3TjQ9PisKPdfuoUvqpFgE0H9QqWtP
W+HR+qyrojzaHXEGDopFgBIKpekDOf953oXnxWlfx+RSL0YXO+CKtEOKtMG9cAOej7fR43aWA4Tq
hS+XumO4/Uf3MwecLifPSKbc4+5G15D9QyXgX7okXAYt8UUAtlMVDs/zLJvPSgAAAABJRU5ErkJg
gg==')
	#endregion
	$button_export.Location = '6, 49'
	$button_export.Name = 'button_export'
	$button_export.Size = '75, 24'
	$button_export.TabIndex = 1
	$button_export.Text = 'Export'
	$button_export.TextImageRelation = 'ImageBeforeText'
	$button_export.UseVisualStyleBackColor = $True
	$button_export.add_Click($button_export_Click)
	#
	# button_clear
	#
	$button_clear.ForeColor = 'Black'
	#region Binary Data
	$button_clear.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALPSURBVDhPpZJJTBNAFIbfiRgPHjQmyCI3
E02ACEQ0xsQqi+xLWMq+iCJYpYstUErBtiIFCRjCVqAspSwVEFoqSWMJi0QWsSKLGKJ4McrJswf9
nZZEMQgXX/Jn3hy+781MhgzVXHpal0kTvWXUr46jIdb3V8SSqY5LosJSFjkNqiOpRxlO7fJgsj2M
I1tVgltTohfmVZGmgwUSGQlZDBXh6CoPRXtpcNSyOr64Kd4TE9IgSDne2FdgrOWSQFxCfGERPs+K
sWouQEfZNTRn+eGVKsoB5109lfRPQd+DGBqp4RJPIMXUzBry7oixZS2AbTgXbbIrqIjzQ3Wsj46I
Dv8tqGSC2gzSK6MPPVEnflp/xnPA45Yl5N2VYHMsF0v6TGgKL6EozTO7QXSBmCCRhhlk1cuptyLG
3VCd+tiiFeKtWYwV021smvMd8PDoS+TzC/HekI4FbTIa+OfQZBewY28NPkpZsnRLMWlQY9FYjpVx
IWZ1OXgzIsTKUC5WB9IdcO/ANHiCYmzouGjk+6FZdJ7ouU7688vHOWzMNGLdIoa1lQtrxy2smQsx
r8/CjDYLy305WO3hgieUokM3Ab6kDOz+vg5BjSCozdyQAnN9NAzqRLwelTGYj0lNMqbabsLWl4vJ
Bi6Wu1MxXR0AUZHcAbeKfKnFLmDlUi/gfJ/QSfBhsoxNzUC/IgLzvQVY7E6DUR0NW3c2TIoAlIYc
+2qHxfJKapf4k0Zykb0B+1kcH/cQzT0OukrDMKUvwjujEAudadBJA2HruQ7j/UDIwlzssKcqyplU
kc6kjHQhRZTbjoCVU07oaV59nj9M6nC8aEmAVsKBjT2kUbELjjlJqlgW++roPXYEnbIQu+TIxTPH
w6vSPbfLk85iTnsDY8pAlISe2P4De+zJb4FGdNkucWLxyuG4lihiPH7II1y/2WHlrol7BPvUURYf
Fm/H7qAC8B8B/QJreuGdId4vfwAAAABJRU5ErkJggg==')
	#endregion
	$button_clear.Location = '6, 19'
	$button_clear.Name = 'button_clear'
	$button_clear.Size = '75, 24'
	$button_clear.TabIndex = 0
	$button_clear.Text = 'Clear'
	$button_clear.TextImageRelation = 'ImageBeforeText'
	$button_clear.UseVisualStyleBackColor = $True
	$button_clear.add_Click($button_clear_Click)
	#
	# groupbox13
	#
	$groupbox13.Controls.Add($button_nbbattery)
	$groupbox13.Controls.Add($buttonFixWMI)
	$groupbox13.Controls.Add($button_shutdown)
	$groupbox13.Controls.Add($button_C)
	$groupbox13.Controls.Add($button_WOL)
	$groupbox13.ForeColor = '59, 59, 59'
	$groupbox13.Location = '641, 6'
	$groupbox13.Name = 'groupbox13'
	$groupbox13.Size = '271, 78'
	$groupbox13.TabIndex = 20
	$groupbox13.TabStop = $False
	$groupbox13.Text = 'PC'
	#
	# button_nbbattery
	#
	$button_nbbattery.ForeColor = 'Black'
	#region Binary Data
	$button_nbbattery.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJMSURBVDhPfZJdS1RRFIb3bYTeddNV/YAo
kCC8iTAQSyEpFUlGJZsKsZFIzGo+zjmTpTN+DDrmMW9MhtLxM0tNo0zNRGQklMkcCxNFC/HCfsDT
GopwgpkFi80++13PXnu9RwH/cn8Ee/tpaW3jsfmE/sEhymy3Dvw9iq2J2UhoWrVuv6evhhbC7O7u
sbW9QzD4gqo7zoihP9QTAnTtEcMTHuYjHkZHZ5n9sEqg8zUPjGamFryMTnoxRLO/JgbgctQws5lN
79IhzBlFm2T7rKySnR8PMjKfieaqEWkcgNNew/dfJqEfpXzb8xPZNVn+abK0YTKxaCO83obLmRBQ
y+JOJYGwIvhV8fSTdCBd+N8qavsUM58r0Zy1Io0DcNk9cruV7lVFbpZG17K0vqBISy2lcVjxfvGa
PMEj0jgAzeFlbusSfeuKgty7DMja/UVx7qwV/xvFWCgH3eUVaVxAHdObpymxuLlSXEFBfhk52Vc5
n3GZ1JMXGZo7Iy7UizQuoIHxteMMbCisJVUUFd8gL89CRno+re8UXZMnBNAg0jgA3eHj5coR+tYU
JYV2igpLyc0pJD2tAP+4omPsKG7NJ9I4AEMAPeFkemSIrsYs8nNucyHzOtbyUzSNKFqGknHriQAu
H8+WxMKIYjA6wBVFIGrltML3StHQq+SvTABwG17qTAuB+SQGZQ7PxcaOkMKcUjT2JFFdb6HancAF
iRTbzYp25/26bcPRhOFoxnA2y7ubEIe2y20V7VFNTE3M5k8cljwmmfJfRr9Fz/bVoH4Doa6IqPMH
NU4AAAAASUVORK5CYII=')
	#endregion
	$button_nbbattery.ImageAlign = 'MiddleRight'
	$button_nbbattery.Location = '177, 19'
	$button_nbbattery.Name = 'button_nbbattery'
	$button_nbbattery.Size = '88, 24'
	$button_nbbattery.TabIndex = 16
	$button_nbbattery.Text = 'NB Battery'
	$button_nbbattery.TextImageRelation = 'ImageBeforeText'
	$button_nbbattery.UseVisualStyleBackColor = $True
	#
	# buttonFixWMI
	#
	$buttonFixWMI.Font = 'Microsoft Sans Serif, 8.25pt'
	$buttonFixWMI.ForeColor = 'Black'
	#region Binary Data
	$buttonFixWMI.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH4SURBVDhPhZLPS9NxHMbXrUOCW9HBAimp
S4cIE4qCoFOX/oRO1n1hP1Zmm7NWk5Figykux9qvpsMIrDa3oV1cm9PmNjLdLDdwkItNipjs8uoz
xYVO/T7wnN7P84L3+/ORAbL9ZLU7my02x4rbM8r7Dz4c7hFeO1xxm/NN00Z3P4DZYr02LIoLi4sU
C2us5n+xvJwlEJhgyGoTVQmA0TRQTiSSpFJLvH03ht3ppn/wFf3mIUyDZmmAobePTDaL1+dnfDxA
T5+xEm7esiRApzewnMkQ+hwhHImiN7zYFpYEdGi6/nxbSBGNzhKeniESnuaJTo/26TN0z7tFVQJw
r72rEIslmAqFmYsnyYsjFotF0uk0jx5r1vYE5LV1wxPqi/z4+ZdQJIbd5UbZdpdusUJ7hxrl7bao
iJ3dFZDrlLvWvedh7gYFbyujvimUdx6siFH1eMKnhWtvkNPIXaWPV+DLTXCKf2I5yqS6hXq5olKq
0TZArlPhKgUvw2wr+FsE4BTl3iN8f3jQL8YHNkI7VAXktIc9v0fESjOi/OkSeM6wbmwgrqr3idzJ
zXitqoD8y0aI3YLwVRg7R9l0jHlVXaV8YjO6u/4DjALw9ToEL1AaaGT+/iHJckVVQFKlmMz3HGfV
0EBCJQ+KmWS5oipAqEl464n23HmnANk/QeJ+bQT7sMEAAAAASUVORK5CYII=')
	#endregion
	$buttonFixWMI.Location = '91, 49'
	$buttonFixWMI.Name = 'buttonFixWMI'
	$buttonFixWMI.Size = '80, 24'
	$buttonFixWMI.TabIndex = 15
	$buttonFixWMI.Text = 'Fix WMI'
	$buttonFixWMI.TextImageRelation = 'ImageBeforeText'
	$buttonFixWMI.UseVisualStyleBackColor = $True
	$buttonFixWMI.add_Click($buttonFixWMI_Click)
	#
	# button_shutdown
	#
	$button_shutdown.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_shutdown.ForeColor = 'Black'
	#region Binary Data
	$button_shutdown.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFKSURBVDhPnZHPSgJxFEZ9lFa9QI9URAUV
SFRQDQljuHFRhEFJLbRWIeJrjDqZf1MzU7MyK0sHS8SvuUKX39VF5MBZXL4zZ0AdXq/XtMEEmAAc
FMBgMPg39B4H+v0+gucXKN9X/oQ88kXgu9dD6a7M7B8cYnZunqFb3ckXgW73C8XbErOwuIS4mWDo
VnfyRcCyLOQLRWZ5ZRXpTJahW93JF4HPdhu5mzzjdK7BMAyGbnUnXwRarQ9ksjlmfWMT18kUQ7e6
ky8Cr2/vSKWzzNb2DqrVGkO3upMvAi/Npv2lNLPrcqHTsRi61Z18EXhuNHCVSDJu9x4uQ2GGbnUn
XwTqj0/ib/P5jnDsP2MCgaDYyReB2kMdJ/5TRGPmkFA4MsbvRh75IlCxfyiVWNwcY9ThgKZpETpU
PB7PGKOOruvRYcB+pmxmJmAagOMHFX4HMETwr9UAAAAASUVORK5CYII=')
	#endregion
	$button_shutdown.Location = '6, 19'
	$button_shutdown.Name = 'button_shutdown'
	$button_shutdown.Size = '80, 24'
	$button_shutdown.TabIndex = 8
	$button_shutdown.Text = 'Boot?'
	$button_shutdown.TextImageRelation = 'ImageBeforeText'
	$button_shutdown.UseVisualStyleBackColor = $True
	$button_shutdown.add_Click($button_shutdown_Click)
	#
	# button_C
	#
	$button_C.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_C.ForeColor = 'Black'
	#region Binary Data
	$button_C.Image = [System.Convert]::FromBase64String('
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
AABJRU5ErkJggg==')
	#endregion
	$button_C.Location = '91, 19'
	$button_C.Name = 'button_C'
	$button_C.Size = '80, 24'
	$button_C.TabIndex = 6
	$button_C.Text = "C$"
	$button_C.TextImageRelation = 'ImageBeforeText'
	$button_C.UseVisualStyleBackColor = $True
	$button_C.add_Click($button_C_Click)
	#
	# button_WOL
	#
	$button_WOL.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_WOL.ForeColor = 'Black'
	#region Binary Data
	$button_WOL.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAL4SURBVDhPjZJrTJNnGIa/X/7XzBij2Yw4
yaI7KGyIViillkOsHFWomVJRDi2ieOiqhdAWD9E0slltQaOT4IE5SYiJifLDGFTURBI0UWEYEDmJ
gIdoWTm0194X+WHYknkn15t8z3PfT773zaPsr6ytc3prcXyC3VNL6X9g91zGMYnMyKxiP/Enr0b9
DAYDvAGGBC/HofPvIO2+wAQdwwG6/AH6RsfpHxvj5Yifbp8P+4lLKCXuP+j1jzJNUZj9xUxC5oWQ
rgmjuzKWZ+6YCTq9Gp66taSlrMeQYSAjLZ1nb95TcqwGpdhdQ8eHEWZNn8H3337HTz+qKMuJY/Ca
kfFBNyPPy+k8pcNWaGTLVjOmPDNbNmXxeOAdtmMXUWy/XeDp0DDz585leUQkUTHxXLAl8v5+Km8f
pNLi0XLWYWBjnoXCHRZ27dxNfk4uTd1D2H49j7JPHE09b/lmwQKio2LQxqdwx6UTD1HAQMMGHh2N
ps2jpv/3KCz7nBQXl1JUuJ3G9gH2ygHW8mpui48fFi9Cp4tDn2yg77SKrpoEhlu3weti/A+zOW+N
ISJSTfjScL7+ah432/qxHq0WA8RR/6SXiCVL0CfqSUs3kGtYzaF8HX1X1+Jvzqf6FzVqbRKa2DhW
LlexODSU6497Pg6wuM5S19TJsrBwYjVa1OpY1KuSqNqjwnc/m3PWaOL1mSQkJrNKG4cqcgWLFoZO
ZCyuKpTdR85Q3dDCmoQEklbrWZeewboMI80HvuSKU4sxpwjj5jw2/ZxF5vpMUpNTiNdoOHerBZlV
dh0+TcW1ZrFEQV4LhoJBXgWgdwx6RhGLE2BgPCAW7WNPeqRXZmRWMZWU39xx8BTb9ldSUFZBgbMC
syDf7iWv1IPJ7sHs8E7UZE96pFdmZFYRChGEfUqmyeayHL/sq6q/R6rFg9VT6zOYba6pPoHM/lvb
D57kRnMrja0vuPtXFw2P2pC1yfb/a2ORs8rs9GJyiCsIzGVeZG2y/VmaI5j6u7I2RYryD8V+McUJ
9WYhAAAAAElFTkSuQmCC')
	#endregion
	$button_WOL.Location = '6, 49'
	$button_WOL.Name = 'button_WOL'
	$button_WOL.Size = '80, 24'
	$button_WOL.TabIndex = 14
	$button_WOL.Text = 'WOL'
	$button_WOL.TextImageRelation = 'ImageBeforeText'
	$button_WOL.UseVisualStyleBackColor = $True
	$button_WOL.add_Click($button_WOL_Click)
	#
	# groupbox12
	#
	$groupbox12.Controls.Add($button_logoff_user)
	$groupbox12.Controls.Add($button_get_session)
	$groupbox12.Controls.Add($button_Userunlock)
	$groupbox12.Controls.Add($button_ResetPWD)
	$groupbox12.ForeColor = '59, 59, 59'
	$groupbox12.Location = '430, 6'
	$groupbox12.Name = 'groupbox12'
	$groupbox12.Size = '205, 78'
	$groupbox12.TabIndex = 19
	$groupbox12.TabStop = $False
	$groupbox12.Text = 'User'
	#
	# button_logoff_user
	#
	$button_logoff_user.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_logoff_user.ForeColor = 'Black'
	#region Binary Data
	$button_logoff_user.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJkSURBVDhPjZFfSFNxGIZHVJSVMS8qC41N
LCM1mREaLiWjoigwLbTSOcsU0zRyKaIMujAREiFLU2EUtTnbnH8qSrOSlCSJirTypskoEstKCzVH
ezqba5oL8oGX3znn/b6HczgiQPSHM1Fiv9wd4sHS+NWci/EmJ9JrULVd7Oes3XDszhSckot79Xn+
tJZEoC+IQLVHStoWca+zdsNNoNrphakohPtl+zGoY8jbG4RSJp4emIWbIDvSk3KllOaSOPpaCnlQ
k0ZSsOfcBambF8K4iYn+y3zsLmagQ82RgAVzFyQFirRYqhl8UszbO3m8aMhCETyv0lm74SbYECAJ
6DQW8q41n+c3M6grT7GX3lOtO38Jdl0c0B2r/0bb43buXkmmqiCa0ooK0prGia4d1jqGZuESRJa8
HNJ0fuL1Z/ja30LX1USuq+U0atT0WUGTnsNt/yWYNq7EuMmHRpnE8VkuQcKlVzwz/6Do4RjmEbDZ
4PvYOF0fJqjKLKAnaj2cz4QyFZSepntfmEPiEuwufkp9zzAnjUNkm4awTY4xMvqF9FYrTT7zIT8e
8uKx5cY5TgoVGIN9hFWnIPTsIy7cGyRRYyah1szBajNxtRZitCPckgi/tq3OPjxNuwFD0Br71ZRg
haKJw5VvyNJZyNQKuWEhQ/eelIZR2tZ5wPFIrEo5P5O2Os5fJ6IxhvhOC5bKc7OXxeqsHgd02LNY
yKJYPaJDzaRGHaU7QopVEYZNGc5kcjgd2wKoCfY1uAQCy4XIhIT+K9cCV+kbZBKMMinGUKmwvNYg
PLe/gkvwP3yFzJTa74VdRL8BYsK9r5BPFgMAAAAASUVORK5CYII=')
	#endregion
	$button_logoff_user.Location = '108, 49'
	$button_logoff_user.Name = 'button_logoff_user'
	$button_logoff_user.Size = '90, 24'
	$button_logoff_user.TabIndex = 13
	$button_logoff_user.Text = 'Logoff User'
	$button_logoff_user.TextImageRelation = 'ImageBeforeText'
	$button_logoff_user.UseVisualStyleBackColor = $True
	$button_logoff_user.add_Click($button_logoff_user_Click)
	#
	# button_get_session
	#
	$button_get_session.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_get_session.ForeColor = 'Black'
	#region Binary Data
	$button_get_session.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH9SURBVDhPlYxbSJNxGIdHUFCU8nlR2FUp
wYSSUOlqsk50hMAOkMk0i1DKtSjXYjgGXdgwKilrZcIKyqm1LRPCtIOVkhhiBysNassuGtvCWWpS
sKfvw0/Z/2JlLzzw/vgdNMA0U3dstZRevl4KVu1ezMm8VI7oU4LmtVK6aosdQah3OFfqb7Qso82h
o9Gqw7wljZJVUr9qix1BqGfekILPtpIHZ7dx256HZesKirOk6YDQEYR6Jn0S1cVp3HXs5G1LBY+u
llCYmTTzgQM5c+Cnj4kPl/jafYrAEzsF2tkzHyhcrqlnqJbg80oG7ll46TVSlDnLqdpiRxDqZWiX
ajs9FXxqO0HfrYM0VO9TzNRJ9x8DGy8E3PuborQ/e0jrlb1ctq7jdM15Sr3f2VwTaPjrgN7xKuTq
DPMuAsODLXRdN3DDrqO5zspgFK51hVlT9ToU3xEG8i++odc/iu3xOP4RiMXgx+gY3R8j2J9O0Pd5
jBxbjxxNMLCpsoemF9845Alh8oWI/RpnJBrBdCdEmTeMp3eYjKMdcjTBQPbxDs7cD2Jw+cmv87Or
dhLlN7gCnGsLsqS0VY4mGFhY1Mwe53uM7iHK6mVuqsi/0f2FAucAi+RMfEcYmJ9bblqww/173nY3
CnNVprTiKZn4jjAgX7JMlkx2AhQvWejEi/8HzR9B2Vmp/hZrHwAAAABJRU5ErkJggg==')
	#endregion
	$button_get_session.Location = '108, 19'
	$button_get_session.Name = 'button_get_session'
	$button_get_session.Size = '90, 24'
	$button_get_session.TabIndex = 11
	$button_get_session.Text = 'Get Session'
	$button_get_session.TextImageRelation = 'ImageBeforeText'
	$button_get_session.UseVisualStyleBackColor = $True
	$button_get_session.add_Click($button_get_session_Click)
	#
	# button_Userunlock
	#
	$button_Userunlock.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_Userunlock.ForeColor = 'Black'
	#region Binary Data
	$button_Userunlock.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMQSURBVDhPhZF5SNNhGMcfiAQlj82s1DzW
DteymVseMUWbZqJdloIWpYaRZHnklVJIBRVFEZQdYyRdDkuzkii1k/xDOojADsv22+HspykpGhkd
395tESlCL3x4X3je5/M8z/tSuVbooDReIC5LFPCHM/2wL80XxXFCvlwrEFcksDijWCugPK0nDSYo
yJYgJ0t8CJljpEQ7l3o7KIwVdDVUStF2KAYN1RqUJ4uwNVLQlR8tpDxGVpQXjSwLpY8J88n6r6A6
1YeqUnyoPEmI5j2LcPfYKjTWpKEidSFywgXIiZhJGRHeNJoUSnyignpZ8gRBZRJrkVEU54HjufNw
82A6XrXsxn3dVmQp3ZGxWEijyxTEM3oTndUnCEo106goxo22LHYBvjZjvPsU+joPwPioBmvkLhhj
M/ezth3JUwlSLoxT9RKiTaFUD4sOPEt+c3sXnl4vwUa1e+2gVl7KHg0s2YnjLN//V7DyjJVS9MM0
Xy6SdzTthrGtCs+uFeLc2RJYYiVmW5wM7PJU8E7Byfe0/ITJkHdlGO2P7+GOLhcn965A/eoI9EWJ
YNWIYdSI+4lIbadNFVRrjpXBQYx0P8UfejlQ1zGA14PA5+4WdFzMRt3hFHBKX1hVc2FeqYFN7Q9L
pOg8pxYxB/m2hgXWmpZIYIqWgDJru/CcG8OeB1/AjQA/ATAXrBIv2BTeuGv+Bd3qzfio8ocpIriB
C3NKTJFi2KHkA89w5ekQCpp4FDUP4OePb+CZpTfIFX1SD1x6Mgz3vRxehAiumsODwIWLLjOIU4lg
h9QVD3G0lcfGOg5Zeg7r9GakXh6GRTYTvNgLLVVHQFXvwKoGdir8bxmVwTAqg/qcezBoVvYNrD/9
BjsMFmyvt2CbwYq8xiHU59fgk9gDA2yUghWVsMl87K0HdysCBj8sCISdVomvnmbElhW5Zxi+u601
wI4rY3p6I2hDO+6HhqFXMhsW6RxwMn/0hAT85a107hAT+tmtngwVw/FNk3kQ4K0ziv3QI2GCP7QG
zNazmJJ1wbb/L3uVyWJHZSKi3/SRxkDQBynyAAAAAElFTkSuQmCC')
	#endregion
	$button_Userunlock.Location = '6, 19'
	$button_Userunlock.Name = 'button_Userunlock'
	$button_Userunlock.Size = '96, 24'
	$button_Userunlock.TabIndex = 9
	$button_Userunlock.Text = 'User Unlock'
	$button_Userunlock.TextImageRelation = 'ImageBeforeText'
	$button_Userunlock.UseVisualStyleBackColor = $True
	$button_Userunlock.add_Click($button_Userunlock_Click)
	#
	# button_ResetPWD
	#
	$button_ResetPWD.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ResetPWD.ForeColor = 'Black'
	#region Binary Data
	$button_ResetPWD.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJySURBVDhPfZPLT1NBFIfnDzC6NpGF7Fwo
AoVIQZ4RE6Tgghg2xoQoxmBosNBCQOhLfMRogtFaIIIbook7BGkpIPKwUSivNKUoBAlCd7qRgJR8
zr2Uxgf1JL/MnXvP7ztn5s6I/0W/LdPqNmfiNmfhtmTRb81iwJ5tjXwWQORpn3A3Zaz5nAVs+K7C
p0pY1LM1d42ZZ0V4bNnrSk5MgDRbfc5z0ljFzrye795yJuV8qlXHD58CKcYjO4kJ6Ks/xeacnnDQ
wM6CgQlHgZKZrGiqTcd2wKAuJybAY9bK6tWE502wUMekoxD3TW2cqyE9ztdaBMsm3E2nYwPcTeng
18vqDfC5ifBUHYH2C/jbSticNkKwir7GjNiAN7Wp8PEyLNlltbsctwpudAnsL4/B1wdsv70o/8x/
AIO1abKDGnhXJjuwkyIBs1+MKsTWfoTAwzN0Vmic+wKG6tOWK24dILlZkCyNKRZBqlngX7UwHCyl
+pWg3HZwR6Ye/gfQV6tZWWwrJOWOYOnbE2ZDOmbXi5lZ0xEIPcIxIhhdvkR9tyD7vnjxB6DXlLQy
/TgPfFfQ2AWToUqcXhGV473gqRxbPwgm1srIv6ecowigx5i4MtGSyc/xEhgrRSPbHwzl0BkQqjr8
gvbpXXXMCSwuQV6jGFABvcbEkK8lnY1hecqGCuXGnee65RC5skK+XEr+bUGuTfA8KGHzArNHkNMg
XLJuvAroqUkg7C1mc0TH1mgR3mYtYzVapTf15Ck6K0Fdq9I8GDUfldq9C73GBF4bTtBtUMaTuExJ
e+ZoFMhu7OOqeUBOVbMSe3sQrfSb/o699/HqLBKA+AVNXLmpaNymFAAAAABJRU5ErkJggg==')
	#endregion
	$button_ResetPWD.Location = '6, 49'
	$button_ResetPWD.Name = 'button_ResetPWD'
	$button_ResetPWD.Size = '96, 24'
	$button_ResetPWD.TabIndex = 10
	$button_ResetPWD.Text = 'Reset PWD'
	$button_ResetPWD.TextImageRelation = 'ImageBeforeText'
	$button_ResetPWD.UseVisualStyleBackColor = $True
	$button_ResetPWD.add_Click($button_ResetPWD_Click)
	#
	# groupbox11
	#
	$groupbox11.Controls.Add($button_DNScheck)
	$groupbox11.Controls.Add($button_ping4)
	$groupbox11.Controls.Add($button_ipconfig)
	$groupbox11.ForeColor = '59, 59, 59'
	$groupbox11.Location = '257, 6'
	$groupbox11.Name = 'groupbox11'
	$groupbox11.Size = '167, 78'
	$groupbox11.TabIndex = 18
	$groupbox11.TabStop = $False
	$groupbox11.Text = 'Network'
	#
	# button_DNScheck
	#
	$button_DNScheck.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_DNScheck.ForeColor = 'Black'
	#region Binary Data
	$button_DNScheck.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHgSURBVDhPpZPfS1NhGMef/6NuxJuuAvUy
dpXocMqqQf9AXoT4a+w9P3aGR9Oi0uZG0/mLTY9uzhWVF91EXXQTBMEsjC4KzQ5C2TIXZuFFfHuf
I8Zmmwq+8Dnvw/P5PrzwvhwCcCJoYOLB4rX4ffSN3kPfSPYf3JPOYir7h4tkxjL4+nsb+Z0CNn9t
yX0LGz8LsH8U0HM341DJm7EFkBFNYe1bHqf1NzgXW4HPsnElbWPZXocRSSEoqeijaZAetrC0soaz
kY+oz27ClfmOmvg6Xrz9AHbaIT44PAtSh6bx5NU7nBnfQFV2F1WP/uBUPI/HL5fBThlMVvSa9CTk
x3qWw9KqjdfyJIbr5NMc2B3lqc2MPvffnELXjYkiJuG/lUCrPphuDQ6l/bcTTs9x1/cyPMOzJFe1
pK4cmqqi2d0oH7u8l1STEp4jUUKK/OF56g7oJPQeNHm8aHR7KBBZcFxxlmdJUdQShNCoM2BQYe48
XQ30w9Xgw/Z8A3WJEAlF+y9PimaUILQQtQuTPk+7rU+JZtjJFnyZcVvtotdxB/Okh0wG+2hGLzrU
fqyOuYCdAQeuuceuOCshunjhEoN9vF4f6j2X8T5Wi9ydOgeuuceuOCuR97i3yt3wcaCyv+jxAf0F
JH9G0480278AAAAASUVORK5CYII=')
	#endregion
	$button_DNScheck.Location = '6, 19'
	$button_DNScheck.Name = 'button_DNScheck'
	$button_DNScheck.Size = '73, 24'
	$button_DNScheck.TabIndex = 13
	$button_DNScheck.Text = 'DNS'
	$button_DNScheck.TextImageRelation = 'ImageBeforeText'
	$button_DNScheck.UseVisualStyleBackColor = $True
	$button_DNScheck.add_Click($button_DNScheck_Click)
	#
	# button_ping4
	#
	$button_ping4.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ping4.ForeColor = 'Black'
	#region Binary Data
	$button_ping4.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKnSURBVDhPpZDZS1RhGMbnD+giRCpFpQUz
dVJspf2iRUMyLWdcRnNGW8gxW8YiaSqERp0ZNVdKCCWCLsKiCKOcxmaOOkbZvlmUVmqlo11EUFDw
6/uOodfWgeech/O9z+99v1dTUVHhstvtlJeXT0kyI7Maab4MjzDiH1XlH/uKf3Rs3P/9Do/4J86l
l/VSMquRtE+fhwkLCcNkzCNyQRQxC2MxmwtZuWIVa9eso6joKBs3bCJ+YwLFxVbVDw59USdRJxj8
9JmI8AgK8vexNG4Rq5ct57DlCIkJiSRtTaakxMb2VB36VD02WzlbErfycWBwfAL5ev9hgOjIaMx7
8mka8HNhcIzObz/R6zPQiVBZmQNDpoEsQ7YIVZCSvI2+/g+TgLfv+omJ0lJz8RInPT6mJSSwuvUm
pVeuY0jPxOE8jdGYizHHJBZXhU6Xxpu3fZOAV71viI3W0vUb5omOQYYsIkRX++g3cjOzqHRWUXDQ
wvHaMziqa9UdvBSZCcCTZy/YrEunpX+IAHHX0LydRIvCFa23aO68z/nLVyn5/ov9ni66fsGS2Die
Pn85Cei5/xBLYzNF11qZmZWtArRV1QQbTay/0UbK815m5OYxPTmFUx3d7Cop5UHP43GAw2HH5+vG
6ekmqfEcQWLkkFwTMbUNzDYXELbXjFZMEyoA8iy+8jSVHffo9t1FZgXAgeJRaPkB2mNWgsWm5QQx
dQ3MOXCIuRYLsfVnCd21m+DsHURYT9DUN4Ti7RAAxzjA7fZQ9+gVQcXHCNCnEbgjh3DRdVZBIUGF
B5hfU0eguE5ARgbBViv1j1+rGRXgdDpxue7ganPjue1BuaOgtHvxigLF7VWlevFPaVfUGtctt8i0
I7Mam83WK42kTUUyI7Ma8UQKLf5HRWqA/xCaPwjpfGnrltfSAAAAAElFTkSuQmCC')
	#endregion
	$button_ping4.Location = '6, 49'
	$button_ping4.Name = 'button_ping4'
	$button_ping4.Size = '73, 24'
	$button_ping4.TabIndex = 2
	$button_ping4.Text = 'Ping v4'
	$button_ping4.TextImageRelation = 'ImageBeforeText'
	$button_ping4.UseVisualStyleBackColor = $True
	$button_ping4.add_Click($button_ping_Click)
	#
	# button_ipconfig
	#
	$button_ipconfig.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ipconfig.ForeColor = 'Black'
	#region Binary Data
	$button_ipconfig.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJOSURBVDhPpZPtS1NxFMd/f0t/gKWbejeb
NYU0t3oRkS56ICRF1N3RNjY377zb0J5sz1ttFulk5cOooCiqTSwRIsI5C12RWm98Y9CboqAX385v
OjDYC6sffDgPv8v3nMPvXAbgvyib/BuYWx7AkFuCYI4xjSXM6nfJAeKgNcL4UXhdTlQaQ6g2+gnf
NtzfGf+ZE0Q/NObQAzaSSDDJYUc2/xkzi6uYya0im1tHdvHTFtzfkctwcmt4ubQOwRQAi8fjcNpt
mJz/gLZLabRdTmM6lcRFr6fIFPnHKc8tj4eIifFRpOcLqKEuSOAG+vtsuD37HlpBgXORZwj7fWjQ
NhYJ+67hTPh50fJYq21AYPgqki8KqC0JSCQQzRTQkZhF5805SNTREZ2+CPfP35pHP1ldix4tRJ/V
ikS2QCOQQIJGcDlsGH5SQKNQhZ6xV2g/ZcCxo/oi7acN6E6+xtmTBjQf1uNQkx6tJ1rhe7yyJcBf
YcBph+dhAaY7CxBTb2BMLcA0+RbiNsa7eXSN54BfGeAn8eMp3PffQcUFXC6JeSQHpEcf0VSnhGV6
Gb0TK6irEdA9tQaNaj/qVWoSXEFPagmdY0voGMvDeW8Zav4KsjzABmUJ1ReiUJsjUNA+4HsMG6PN
wLcRbCR1VHUEVb0h1NIOVHb76T4IRW8AtV2DGdpEmQ26XXwWBUdlCn5RilFUitexT4yhiqzSFKNq
wU1+T1U3BVOYx18p3kMdyMxL63zFI7E6S4xyrIJ/WIaK7dUt3e8trTI/PPFvp9wftnvAfgPh9Dv/
DN/PlAAAAABJRU5ErkJggg==')
	#endregion
	$button_ipconfig.Location = '85, 19'
	$button_ipconfig.Name = 'button_ipconfig'
	$button_ipconfig.Size = '73, 24'
	$button_ipconfig.TabIndex = 5
	$button_ipconfig.Text = 'IPConfig'
	$button_ipconfig.TextImageRelation = 'ImageBeforeText'
	$button_ipconfig.UseVisualStyleBackColor = $True
	$button_ipconfig.add_Click($button_ipconfig_Click)
	#
	# groupbox9
	#
	$groupbox9.Controls.Add($button_regedit)
	$groupbox9.Controls.Add($button_cmd)
	$groupbox9.Controls.Add($button_psremote)
	$groupbox9.Controls.Add($button_MSRA)
	$groupbox9.Controls.Add($button_Remotecontrol)
	$groupbox9.Controls.Add($button_rdp)
	$groupbox9.ForeColor = '59, 59, 59'
	$groupbox9.Location = '8, 6'
	$groupbox9.Name = 'groupbox9'
	$groupbox9.Size = '243, 78'
	$groupbox9.TabIndex = 16
	$groupbox9.TabStop = $False
	$groupbox9.Text = 'Remote Tools'
	#
	# button_regedit
	#
	$button_regedit.BackgroundImageLayout = 'None'
	$button_regedit.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_regedit.ForeColor = 'Black'
	#region Binary Data
	$button_regedit.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_regedit.Location = '163, 48'
	$button_regedit.Name = 'button_regedit'
	$button_regedit.Size = '74, 24'
	$button_regedit.TabIndex = 16
	$button_regedit.Text = 'Regedit'
	$button_regedit.TextImageRelation = 'ImageBeforeText'
	$button_regedit.UseVisualStyleBackColor = $True
	$button_regedit.add_Click($button_regedit_Click)
	#
	# button_cmd
	#
	$button_cmd.BackgroundImageLayout = 'None'
	$button_cmd.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_cmd.ForeColor = 'Black'
	#region Binary Data
	$button_cmd.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAGpJREFUOE9jGHjQP2n6f0ow2IDLNx8QxBmVEzFouAGnzpwlC8MNAPqE
LEx9A2AAWRFMHF0MhFEMQFYEY6PT6BinAegYBtDFiXYBOhuGUQwAYRhAVoQsB6NBAMTGMIBUTD0D
KMFAgygBDAwAnWumm5ZCmokAAAAASUVORK5CYII=')
	#endregion
	$button_cmd.Location = '163, 18'
	$button_cmd.Name = 'button_cmd'
	$button_cmd.Size = '74, 24'
	$button_cmd.TabIndex = 4
	$button_cmd.Text = 'CMD'
	$button_cmd.TextImageRelation = 'ImageBeforeText'
	$button_cmd.UseVisualStyleBackColor = $True
	$button_cmd.add_Click($button_cmd_Click)
	#
	# button_psremote
	#
	$button_psremote.BackColor = 'Transparent'
	$button_psremote.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_psremote.ForeColor = 'Black'
	#region Binary Data
	$button_psremote.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAjVJREFUOE+tk+tLU2Ecx88fY2CGFaRGRr2qfFMU64Uw6ILgq6hZYjnD
yoldFq2EXFo2qGNqEy8rUae7u+bWLmyruXCXnLWcgStHvtAu33x+Z+x0QHpTP/jwcOB8v8/v9nD/
Na4Y/NhyWY+SJr3k3IxjHVPIy4RgYo05isl4FiPx5QKGueymDIWXcVxrEk12qIZJoPF8pDOYWUF7
YAk3PIsF2maE79uvl8BHMjjQYRQNWEqd3gU0m+fIYP3nL7xfWcO1mUU0ONJEvUVAZfuEO9YYFD0e
0eBcv5/EtS9mUW+Kwzj/hUwCn1dxxp5GzXiKODWchHIshfODflGsHPJC+TKI0wMBHOb9kA28Rc1E
AuYPOTLRJ75iPx9D+f0wStUByHURHNFapOkzg6ruV9j9wIWy7gAqe95AbppHZvU7cms/UN45iyKV
D0WNbtR2hVHRZhAN2FhYCSU3jSjWOMjgrDWF9Ld16sOJkQTdzMSldfaN2kNSg33qUZx8bCODSp2b
OsxSZ808+Owdpb691YetjS5UXHTiQn+Y/s/LOU7+0AJZlwl7N+pi42Mpt0wnUT0YlcydcajFRdne
Gg8JBtfHgqjjnai6N0pz7QumIOPdKLtrxVGdD7ZkFp6FHCaiWUKm9qL60bR4O0tF2WfHnqu9KL70
lGArzNjWPIldrXZip9JJ9bMGspLzco5j66g1BdH03AHFEysUvIMyYksiECrQ0BtB+1SM3kJeLgQz
+fOh/A3J/v97cNxvbRwpGSKGCe4AAAAASUVORK5CYII=')
	#endregion
	$button_psremote.Location = '83, 48'
	$button_psremote.Name = 'button_psremote'
	$button_psremote.Size = '74, 24'
	$button_psremote.TabIndex = 3
	$button_psremote.Text = 'PS'
	$button_psremote.TextImageRelation = 'ImageBeforeText'
	$button_psremote.UseVisualStyleBackColor = $False
	$button_psremote.add_Click($button_psremote_Click)
	#
	# button_MSRA
	#
	$button_MSRA.BackColor = 'Transparent'
	$button_MSRA.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_MSRA.ForeColor = 'Black'
	#region Binary Data
	$button_MSRA.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAjVJREFUOE+FU/9rUnEU9b8qCAoGMYoiWj+MokWMIQXZGKEhK6F9obHa
Cq0RUjJczQ0rwZUzY6spOmVNtkJrlm5Wk2n5hUqTxjzt3PFcry/0gcPj8Xnn3HPvPU/Ds5otIZEu
IrKQhNe/IHB65jDyMAjr2HNY7JPot3rQZX6AzqsOGC6PQIjKIblWqwkq1XUUvq4jk/+BZOY74isV
RBPfEI59ge9FSaDvtakFFuNpIVungeuTQI8LMIwCumHghHkDzVfKOHQpg0ZDHO5gHjrTLbWAP/JW
BCxP1GStFTg6WMXh7hz2GRNoOBsRgVOdZrUAe6ZA/wRw0bkl0DqkJrP6rjYfXIG/CDi9cyKgkFlZ
sX7Q9AF7zy1i9+kZ7DzpFgda4021wD13SIb3r75pnUXsrkB9K9wInYvAbcdTESD5d+sk0zrJW1va
kG+J+ja4Y17I2lJZRF8XEH6Zw/R8Cd7QR0zMvBcBkvg09tlkzfVZKAHp6LojK2KPvPwVdEmSko/k
ahWt+gFomD7FEvGpCGTz5T9wY7NvkjgDFogtF3HsTC8087GM9DZbeYZaeTORn8eEwHgvpdbq8Wab
JDGVSjKb2kyoh8icMwJpHzClkf+Cs/CH47j/OCj2eyzjQro2PCUOGOn9Lee3BV69W8abpRUw1nRF
sDrvg9EULgyMylAJT7ggaGjugKRw/FEINkdAbHYP+eRjrogD5QA5LL6b785i0L6NPUd06kD977S0
90nfjcf1Qt5xQIufQS28ytGYvtsAAAAASUVORK5CYII=')
	#endregion
	$button_MSRA.Location = '6, 18'
	$button_MSRA.Name = 'button_MSRA'
	$button_MSRA.Size = '71, 24'
	$button_MSRA.TabIndex = 0
	$button_MSRA.Text = 'MSRA'
	$button_MSRA.TextImageRelation = 'ImageBeforeText'
	$button_MSRA.UseVisualStyleBackColor = $False
	$button_MSRA.add_Click($button_MSRA_Click)
	#
	# button_Remotecontrol
	#
	$button_Remotecontrol.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_Remotecontrol.ForeColor = 'Black'
	#region Binary Data
	$button_Remotecontrol.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAaNJREFUOE/NkMlLQlEUxv0/2revIKJWEaEQQYKUQQNEgxAPJQOHtAGR
LCwtylJBelqYmg2+CpxQMjKQyly0aLAoaOvG1l/dW1mQ0NsEffBxD9+958e5R/BnusxeQGLYQSad
QmuHGi6XBx9Xv6tX58b93S00K1EYzT4oZgLYCexCNmbjB1HMH4Bl/TBZnaho0GFkVA/lhA2Ti0F+
AMYSRqdyBU/5G+wnM9jnQqhvkcPoOOQH6DKE0K50UsBj/haJeBzNYj00lm1+AInGjykzS/dQKBQo
oF8+j0G9mx9gcNxFl/byUgRR7jJHdyKUGn8CHAHubctLJZPMZveWmonIFOnjEyjUlp8A0rT3WKQm
NdtdA29fLfwD9eDGpDhdn8NNNk0BBoOpPMCVuYaZS1LARk81njeH8eCWIb+hxNG0lGYE/P30MaJ3
WDnAmbUbudUhXHm0yDqGS7a3VSLENCKlE1OzQ00ofWE5cU4Bax1VdPywSoiIWkSBn/b21SGkkiA2
zXx9ZdbOYmE7CkswAlKTLDbL0IdbciGCCiE4bTtIRhv+mQSCV19YWTxAQ5InAAAAAElFTkSuQmCC')
	#endregion
	$button_Remotecontrol.Location = '6, 48'
	$button_Remotecontrol.Name = 'button_Remotecontrol'
	$button_Remotecontrol.Size = '71, 24'
	$button_Remotecontrol.TabIndex = 15
	$button_Remotecontrol.Text = 'RC'
	$button_Remotecontrol.TextImageRelation = 'ImageBeforeText'
	$button_Remotecontrol.UseVisualStyleBackColor = $True
	$button_Remotecontrol.add_Click($button_Remotecontrol_Click)
	#
	# button_rdp
	#
	$button_rdp.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_rdp.ForeColor = 'Black'
	#region Binary Data
	$button_rdp.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_rdp.Location = '83, 18'
	$button_rdp.Name = 'button_rdp'
	$button_rdp.Size = '74, 24'
	$button_rdp.TabIndex = 1
	$button_rdp.Text = 'RDP'
	$button_rdp.TextImageRelation = 'ImageBeforeText'
	$button_rdp.UseVisualStyleBackColor = $True
	$button_rdp.add_Click($button_rdp_Click)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($groupbox16)
	$tabpage2.Controls.Add($groupbox7)
	$tabpage2.Controls.Add($groupbox6)
	$tabpage2.Controls.Add($groupbox5)
	$tabpage2.Controls.Add($groupbox2)
	$tabpage2.Controls.Add($groupbox1)
	$tabpage2.ImageIndex = 1
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '1264, 91'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Computer & OS'
	$tabpage2.UseVisualStyleBackColor = $True
	#
	# groupbox16
	#
	$groupbox16.Controls.Add($button_hotfix)
	$groupbox16.ForeColor = '59, 59, 59'
	$groupbox16.Location = '1151, 6'
	$groupbox16.Name = 'groupbox16'
	$groupbox16.Size = '105, 78'
	$groupbox16.TabIndex = 10
	$groupbox16.TabStop = $False
	$groupbox16.Text = 'Updates'
	#
	# button_hotfix
	#
	$button_hotfix.ForeColor = 'Black'
	#region Binary Data
	$button_hotfix.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIfSURBVDhPhZHfS5NhFMfPZX9BWC7bJAhF
Mt0mSiO7sa1gQkJ1EUFFd+FWLNGLMtKKiOqqFrRRtC3QtYKKwIykSaRJlFH005xadBdY0IVXn87z
vr5r4qIHvu/3Oc853+857/PI7R7PMuS63ZLtqpKBWCWGTVyuzmDZQa7bY4kzkQpYmCStPGiZLK1z
sCTIKbJdayUdrYSpfri3Ej73kYqsZvBoeZPixulsxD+HOuBhNQwrhjzw5SSpzvImRbFJmk4UeuFR
DTypZUVFwGKG18P08bImGrhtsSYpHIPHdTBSD8/qcdVus5iRDfa55v+a2Bdrj925CmZ6IN+oHX0w
6ocJHzX+XRZbsTk3ea3LaP0tvas7Ook+lQt+J2C8CZ62KDZpV8WLFja2HrTYis25yY81w69r3I26
eRBbJ2Z5rQnmolq8GZ632nipeGN4i06hPK6Y0P1UjIY+IXBW2J1RtfkX26SS+Xw7vG5TkeJtEJe/
gU95L0yG4FWQj6MhQnHh8oyQ/CbsvS4UX8Ex4fsheBeGDx00nRZ8/QLvd8LsERp7VVwQrqrBnqSK
VVN8DsfkZsTFwtgO6nTMS1+F+KzQfMJGXIUJjdtO2eJ9N/TrGJSaDETXwI9OfGpiRFembSTmhK1n
bPH+lMgyAwuLJtlIFcxHCWg3I0zqNMFFcfi8yIH0vwwUziT3D1dbgtA5YbvC7NsvioQvlBj8Z3lL
2NmXLJE/2hzRpERwB9gAAAAASUVORK5CYII=')
	#endregion
	$button_hotfix.Location = '6, 20'
	$button_hotfix.Name = 'button_hotfix'
	$button_hotfix.Size = '93, 23'
	$button_hotfix.TabIndex = 0
	$button_hotfix.Text = 'Hotfix Check'
	$button_hotfix.TextImageRelation = 'ImageBeforeText'
	$button_hotfix.UseVisualStyleBackColor = $True
	$button_hotfix.add_Click($button_hotfix_Click)
	#
	# groupbox7
	#
	$groupbox7.Controls.Add($button_MMCServices)
	$groupbox7.Controls.Add($button_compmgmt)
	$groupbox7.ForeColor = '59, 59, 59'
	$groupbox7.Location = '1003, 9'
	$groupbox7.Name = 'groupbox7'
	$groupbox7.Size = '143, 78'
	$groupbox7.TabIndex = 9
	$groupbox7.TabStop = $False
	$groupbox7.Text = 'MMC'
	#
	# button_MMCServices
	#
	$button_MMCServices.ForeColor = 'Black'
	#region Binary Data
	$button_MMCServices.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAG6SURBVDhPpVHbSgJRFD1fE4ERRR8Vps6Y
mo7aeNccZ8x7l8cMI+itIiKiixVEPUQX0ZfMSCTqVQXpYbf3KYtIJWjDYp21z+x1NmsYAPwLLBqL
s3R2kaUyC00EqPEknYE09em+izlF637LmTS/iERV5guEjhVVA2w2iFEXqf8Xg1Z4LlZdyRc699Ua
PNUbQLyyWnjD/hbeNwca+IORB18gDHelCmzv7EIineNMmvqhiALBcJRlckssnkjz4R8GWDrrjOPi
+qYEqpbAVNgEMWmnW34hnV1Y5gPafOq3gVv2ViTXLBTPzmFtfQMiUYXzCWrqowng64841DNgZpfc
7WmrvR7Tkp29/UM4ODoFYly9aRItJUG0VLz+4KaixnsGTDWOGDEKYl2ctsKk3nBJrDeYyhhiGTO6
zecLzX4BM8klM8FsIbSnjEINzYaQqwaT+IzDV4MCRhNgTreH4YvdTXQzDieddYhRxLDV3jfgV9Jf
BmaLjcNml/hGHl+AzXp85UEB4w/43oCGiUlLLoLcN2BcvYP9J7xv9TGQObB6BmwUzHXqI8YGGhB6
BFwjTf3PR/5UPOCPI2fSWIy9A9wD+f2hDKCYAAAAAElFTkSuQmCC')
	#endregion
	$button_MMCServices.ImageAlign = 'MiddleRight'
	$button_MMCServices.Location = '6, 48'
	$button_MMCServices.Name = 'button_MMCServices'
	$button_MMCServices.Size = '132, 24'
	$button_MMCServices.TabIndex = 1
	$button_MMCServices.Text = 'Dienste'
	$button_MMCServices.TextImageRelation = 'ImageBeforeText'
	$button_MMCServices.UseVisualStyleBackColor = $True
	$button_MMCServices.add_Click($button_MMCServices_Click)
	#
	# button_compmgmt
	#
	$button_compmgmt.ForeColor = 'Black'
	#region Binary Data
	$button_compmgmt.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALsSURBVDhPdZLrS9RZGMfPv9CLthdBmEWw
KfgilgiWCCJoX2xFUBBFkGzRiG52c2ckZ0ZnnC4uOt51ZtXJmalGGWeq3dQoi9qLaZJmhk41FZPT
5Fx0Lo6J0Kfzs160u/bA55zDOc/z/Z6bMFk9X8XQ7Pbq6jsoqXVJrnyBC2VeWV+ysNzSJYzNbqGt
czG78IFEeuF/KPPK+pICCqUNHaLYfIlo6j3dgz56PqOMuwd8RJLvKTY7Pwkojv9F2YG6ykk4McfD
5zGGFF7E5DjKwLMoofgsakVAJnpLGzrRyzPp612fkFtTKKm5jEaKqCsdsndQ3nKN8/abGO29BBIp
iswOhE4mTs0liaRniKWnF4nOxoikYoQl75Ix3koCM9NopOPjt2kmDLfxGW5RWGtHnKl2EpiO8M3p
Yb41TfBdjZ/NlgDbbZPstk9ywPmGQ5Kx4DuKKi+hLdPx2vuK/voBnhR3IYqr7IxPTrLWOM6mxlds
cwTZ2TnFPm+E3GthVNfDHPVE+cc/RYnOSDA0haHiHD3qXoaPNCI0le0M+vxkVb5ky8UgO7pi/Hg1
zp4bCfbfiLP/9ySHe2Hkl1UknrnRnaum+1Yfx4tO8LO5HaH+1Ubfo6fk1AXYeDFEjnOabHeaLM88
61zzrGiFMc0a6N8CHRmMufXkF55m0B+i8EIrokg27vsjrDa/IaMpTKYjRab3A6v/gBVuGNdkyuKt
0JkFlmW05q6l68Fz7o36OVZuQZyUAtaeIeLzSeJzM8SVl0jFCcnf9vjUKvh7syxeD78tp+VwNh0P
XuP+c5SbQxMUGJoQKq35buFZKwXGZvLLGsnTN/CT1sq853sInocnOrAuw6bKQd9+B0//Uzx/Dcvf
OEa+rBEy1kg2KJypcWJs78XWN4rdsJfuy3p5AVW0Hc0h13QFlbGFvNJGVPp62UsjTcVdcaqibZFj
Jos4eMLQViDPlWeyoc3bTfmRH/BV71JcFg2WQDH/V6yULJX4lRDiI1mPiYTV4rA5AAAAAElFTkSu
QmCC')
	#endregion
	$button_compmgmt.Location = '6, 19'
	$button_compmgmt.Name = 'button_compmgmt'
	$button_compmgmt.Size = '132, 24'
	$button_compmgmt.TabIndex = 0
	$button_compmgmt.Text = 'CompMGMT'
	$button_compmgmt.TextImageRelation = 'ImageBeforeText'
	$button_compmgmt.UseVisualStyleBackColor = $True
	$button_compmgmt.add_Click($button_compmgmt_Click)
	#
	# groupbox6
	#
	$groupbox6.Controls.Add($button_localadmins)
	$groupbox6.Controls.Add($button_folderrights)
	$groupbox6.Controls.Add($button_profilerights)
	$groupbox6.Controls.Add($button_homerights)
	$groupbox6.ForeColor = '59, 59, 59'
	$groupbox6.Location = '701, 9'
	$groupbox6.Name = 'groupbox6'
	$groupbox6.Size = '296, 78'
	$groupbox6.TabIndex = 8
	$groupbox6.TabStop = $False
	$groupbox6.Text = 'Permission'
	#
	# button_localadmins
	#
	$button_localadmins.ForeColor = 'Black'
	#region Binary Data
	$button_localadmins.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAN6SURBVDhPbY5tTJNnFIaPycyMQnzbpmQ/
hhkdixJ1Rb66ORwvLcFppqISBYPDsoytc3y2hRY6mcwoIEiRLd1iGgSHLUNnRjUMpoKgQdEBbVog
czhK1QGbUF3mgBbuva3LwpY9yZVz8iTnvm5SS/l+VPF8OrQtyD/VHEpZ0LMZxwvRbOZ7a9KDcXTv
i8hl+V61lCcqkPHJx78CdG8LKT+O4Y4YJl8m5AJ4lP0mb/ab4jVoL2fRrGNRuDUUmVGM9wOJgHz8
E6BkeSLtWwJPbcYqHNsbzJkEf6pYZpkqgYcmzXq0lm9HY9FOFCdF4sAGBu/FCClTIiTKlwkoTyrg
TIzXb6qI/9v0Ct6NWOk6+MZy9DUrMHhJi1/vVGK08zD2rV0BeQSfMqK4BkVbhaTdIiSVjDMVLjLt
iETaukCkv/rcIKbNmLZWY+RqCeyWQqSGLZ2QhweQPDyQSJXAcC0Y+nAjZ/qaM1m0+M1n6vgEe15+
HkQU5ttHOz7FnfMqdBnTEBwUED1hSaRfWjYTKV9bQlmSpSRft2QS0ya4rSdwr+MQHJYCpLxEwxqD
mH++LmPc3rgbDmM0nOcSMHI2DiOm+M9GzFIi6Rdu+rZYTJLVvLixKxq4Oktgu5CHDsM+6I6sHau/
rEBvUxp+bk6Ad/Ag5hxZmLN9hAcXt+PHr1gDJervkqz2AbF655ozDVWT18+8j6byJOQq30F9byOu
j9egv3o1FobVwL0itOo24ruPY/37UH0sKLHKEchWDg8cbZ9CX88FdNftx2ldLMqOFKC03QO29ip6
K0TAaCngLIVFKcZFVTjw8BjsxtdBsrIB3Lj7GH0PPZicARYWgN//eArb/Se4NQG037Th5vFQzDty
4LFlczMPGMrHvD0X9lNcwI6qflwefIyCVjeK29yYn30K9/QUlG0eVFzqh1UfgrkBBeaHsvHkWjJm
elIxcyMFPzVsgqk6BiTRdsHQOQl5gxNpdU6kGMeQbByHpqELjloRPNYsf/1H19JxpSwMXVXrcatm
AxorIz3SPaE59EJ6C/Z/OYy8JhdyzS5km+4j8+wUXKdCMNu5DQtWBR51H8APBs5GFLmICI6VFLhJ
nROQbPas2G3C8l0mLNtlBiW1oKQwFbf1YeipCUdbmfh731H3CTH1nIygvs+j6Jw+mhSHY7hvX8qz
tMXp/0XE8T+P6C/QrhFL9yUQbwAAAABJRU5ErkJggg==')
	#endregion
	$button_localadmins.Location = '6, 19'
	$button_localadmins.Name = 'button_localadmins'
	$button_localadmins.Size = '134, 24'
	$button_localadmins.TabIndex = 3
	$button_localadmins.Text = 'Local Admins'
	$button_localadmins.TextImageRelation = 'ImageBeforeText'
	$button_localadmins.UseVisualStyleBackColor = $True
	$button_localadmins.add_Click($button_localadmins_Click)
	#
	# button_folderrights
	#
	$button_folderrights.ForeColor = 'Black'
	#region Binary Data
	$button_folderrights.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALhSURBVDhPfZPrS9NRGMfPy6g/oHe+UBBE
dF42U5uXdFqQIEVKYlFGL/JCas4stTdTNMyWTtM5EbJXlRZ4wS6aOJ2Y97k5L9MtDbUyTUy03b89
v20uIejA5/c7HM7zfZ7vc85hGnn8jro+CtOySCfcfKbxzBqt+2vkohAi1EOTKFTbJDqlVSQwrSLR
CeMCYFsGfi+4sCxhUirAVG2ER/Qo3H6NPG7TIzAtO02BOphnrsOkzoD9RzdwsAiY9C7MHEuuv4Vw
fHaKaJsSBH8FDsZg1mUSOTDPZhHcPBOWuSxYF7JhW8yGXc+RCfpAXSfEq5IwnltACOwNwLqYB6u+
gBC7WBLDbryL5ZfJGHsUhvFqAcHHxGM+2Qt3W4l/QwLUg713VFkRHCslcKyWAhxfHsDQdhHfPqS6
LZAtzgKHjQBZeRoLNl0XTRY6YWy/gLEqwRHCsPkxnfbmUdW5WO08S6fDg1YRgrmWEGz050JZJRxm
nIrJUIOFZyJSNrgycBktRjoczsZ9rHQkQ/8iDlbqD0jMPp+Dta7zGG2MfM1mGuKwqcrHRl8O8KuX
AgphMxYR92BfISvrZRiq8oNtvhAwFKOnJBJvS6lvxmLMtwrBZhrjYWhPxb5eCmw/h2NdQpQ7wdcK
YKsaAxW+wEoZ9UaCrgIeusVBwEYltC0RYHS7qKMxgLWNmtkM7MqIOjf1wL4cfRJvmKayYdXchl2X
D8f8HbKTB7UiHEwtT9il4yCRWLpp0ZhyEuOiNgafagKxpbxKvnOxp0yBaSQNB6rL0LVGobsiqJ3R
4BWn+V0rTPG9IiYKLvmm30rySUkMPZkw0cDHjuomlV6On6ob6K/0w2B1AIZrgtEhCeCCvVz3mbET
xPEjHFM3h+N7TxIcmmxsD2VgsjEMtB56BK9pRQTzvKpDZpvPsUFpIOuS+CtVT3gYqQ3G+4e8Xi5o
SMpjI7IQNlrPZ+MNAuYU+M/wIQ6zeXML/w7G/gD66oaB/Zvo/AAAAABJRU5ErkJggg==')
	#endregion
	$button_folderrights.Location = '6, 49'
	$button_folderrights.Name = 'button_folderrights'
	$button_folderrights.Size = '134, 24'
	$button_folderrights.TabIndex = 2
	$button_folderrights.Text = 'Folder Permissions'
	$button_folderrights.TextImageRelation = 'ImageBeforeText'
	$button_folderrights.UseVisualStyleBackColor = $True
	$button_folderrights.add_Click($button_folderrights_Click)
	#
	# button_profilerights
	#
	$button_profilerights.Enabled = $False
	$button_profilerights.ForeColor = 'Black'
	#region Binary Data
	$button_profilerights.Image = [System.Convert]::FromBase64String('
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
AAAAAElFTkSuQmCC')
	#endregion
	$button_profilerights.Location = '146, 18'
	$button_profilerights.Name = 'button_profilerights'
	$button_profilerights.Size = '144, 24'
	$button_profilerights.TabIndex = 1
	$button_profilerights.Text = 'Profile Permissions'
	$button_profilerights.TextImageRelation = 'ImageBeforeText'
	$button_profilerights.UseVisualStyleBackColor = $True
	$button_profilerights.add_Click($button_profilerights_Click)
	#
	# button_homerights
	#
	$button_homerights.Enabled = $False
	$button_homerights.ForeColor = 'Black'
	#region Binary Data
	$button_homerights.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUND
IHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoi
SFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQ
yhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnp
fIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZ
Yu4V8bZMIUfEiK+ICzO5nCwR3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJ
X3HcVyzgZAvEl3JJS8/hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi
2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti
0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4b
Ky0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNFhImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5
FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH554SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S
8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJVgMWSASpgA+yQB7YBApBMdgJ9oBq
UAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG+UBAU
CcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyCqbASrAUbwwzYCfaBQ+BV
cAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqR
PuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegE
dBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9rB3WH8vE
CrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf+
On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFp
B+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5k
heQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TG
KQhFneJCYVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04b
pr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLC
zFLqUtulrKVFS48vvacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/C
VSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08j
T6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0b
erCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLu
M/5oYmGSYtJoct9UxtTbNN+02/R3Mz0zllmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfi
g6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWN
y8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c+c7tzvMuNi7rXM65
Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU
+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI
8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaI
LoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp
40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp
2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7
zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8V5vDN3cX
KBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33zaEb9j
oNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2v
Tqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sU
moqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/j
PScYJ1p/0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dz
z86dSz83cz7h/HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3
/2TxU/uA5UDHdavrXTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriX
eW/h/sYH6AdFD6UeVjxSfNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2d
mnafvvF05dOJZ+nPFmYKf5X+tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/M
F72Rf3P4LeNt37vwd5MLWe+x7ys/6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAALDAAA
CwwBP0AiyAAAAspJREFUOE91kv1Lk1EUx+9f0H9QPxhEEmaahoQKahFmalRCgYJGkG/Nl5TAtMi0
qW1uzneXrmmiotXmywIVdboY+Z7TTaa5qWsmahqZaXP7du8zE4R14APf5zznfO+553nI/0KRTKBI
JGBa2tjRJK1rRK1MruRe0gDA4TKa4wjU1ZFQV4WjOZqgVNaO1XU9Kmtkhx1HDBQ8olDSExn1tKFb
dAl2+tZB6RYE4vUNgpVNM0qr5K4NWu4TGOpDUHOLQCUIwe7+b/zaXsYOZc++B1WBP16FE4ilba4N
6mMJKq7TCfgh2Nhew9amEWfSNRxbW3Ncrj0/ANWRzp2wOGJQSpvf5gdjaW0BixYdVizDIGEKyntO
L32dhmXNRGuCUE5rWc+hgZi6iuJ9YKNPRvMI5hbHYbbq8I0ujcE0yxlNo1hsv4LPlZ7Q1XhDX+sN
a18KyJMg0lMme4f1H8sw0KJuoR9a6CJbY5wwzXJmZSSMzcGwTSfSk1JgNyTD0hHGTeMmqX4D0/IY
9KZxNEQRWCeasKrv4mCa5YaK3LFvyAS+ZEH1+CI+ZPsDC1nOJYgkUszOD3EGdTcJzOpidKUQDqZZ
buDFKcD8HFjMRcdDT3RmnAOsfKeBUFQG/Vw/phdGUBVBMK/KRE/2MQ6mWa431w2740mwTfFgn0mD
w5BOr5PqNCgSiKGb7cHkvBaSUPpPtMZiMO84B9NjlRewro6h907BT3UUdrV3sKO5jRl5gNOAXyCE
zbGNP/RLCC8T6BuuYrj4NMdohQ82Nffo6Hn4rrmLPr47BgUe+Cj2gjLXo81pUChEZ28TuvqV4AcS
GGW+mCg/i0mpH1ZV1+CYSsLGUBw3STIvjZ16/oATrJ/kPH02wC8UoOBlCRIeZCCB9wjxFHlOADQi
T2hLvNBWGEqbU8FqtRJv8qnMh4xU+HL9LE5S/rm6IpoScaBZ7UEQ8hcN9DiBgypXwAAAAABJRU5E
rkJggg==')
	#endregion
	$button_homerights.Location = '146, 49'
	$button_homerights.Name = 'button_homerights'
	$button_homerights.Size = '144, 24'
	$button_homerights.TabIndex = 0
	$button_homerights.Text = 'Home Permissions'
	$button_homerights.TextImageRelation = 'ImageBeforeText'
	$button_homerights.UseVisualStyleBackColor = $True
	$button_homerights.add_Click($button_homerights_Click)
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($button_PCGroups)
	$groupbox5.Controls.Add($button_ComputerGroups)
	$groupbox5.ForeColor = '59, 59, 59'
	$groupbox5.Location = '422, 9'
	$groupbox5.Name = 'groupbox5'
	$groupbox5.Size = '273, 78'
	$groupbox5.TabIndex = 7
	$groupbox5.TabStop = $False
	$groupbox5.Text = 'Computergroups'
	#
	# button_PCGroups
	#
	$button_PCGroups.ForeColor = 'Black'
	#region Binary Data
	$button_PCGroups.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAANtSURBVDhPdZJtTJNXFMcP25xGqDx9So0m
ugTcJm5OIyUUIVsLj0MBsSobxGEtQsaETcW2vNSW1zC0QAfKooVoihiHxU3jKxFFqsFoNoNlZKWL
yVytUtMsWuIHcaD/3YJZ2Ifd5Jdz7of/+Z3cXCpJ5qfQJ/FUmTF/qpYwdML86aoQR5av5ScPaBaj
PnsRipX8ZEmyOKpU4CnIfwaY1ktJq+BYiOO0gpQNENOuT8QvThuj0WtW4pRJibK0d1EQy03ukEso
yL8DdEpxlGGdZKI17x3sy17MTJLneiU3R79GDHv5R+gxb8CJvZtg3ChD7ioOX8ZJqUAuJdIKEtqT
LGEmbnLK1JD02vQe8mPCvV8nzsXgqUKMXDTgrzsWeBw1yPkwFHkynvJjI4j2pknJkColvcBMZTNM
Khm2LhdBs+ItFwLdeDZ0AJ7+WoxcKMe2D972fyULoyLZPCL9Go5twVFRAjN1F8J1Pmhqwp/91cha
MhtEtGzUUYe+C3m4ZM9G7yE14qMXKH6sSKXq9tVEuvgQ2imfRduXh/jxtAuBoe9wv78KI+fLkBP5
pruiLZa/cqzocVw9wdorQso+8heZ3482tMqo6qCcKNkaoLPGlSRfKlY86CuH11GF4TN69FnVKK5f
8qDSlohzZwuRUEf41VMK65VwbLSEwNQc56xpWT2PUlrukdD6iJQtnujjnRb/wPEd+Mm8BWnfEgo6
FyLfJkXeUSly2yMw7K3CdXc2rP08NjW9AaNF/pJSLL+JlE1uZ33vEwzeOoOBDg1OVKQjnq18/8n3
GPKlwzmagbuP0uHyHcShG4SBP9Q4cjMCqoZZIGG/EzfvjWFwdAL+cUydv1mV1xAGfd+g7TZNc4tw
mGFlffvPhF9Gc/GpmUAqy11cdY2htCcA4+UAXrH082dAYi3B4UtAxwjhGMPmIhxxTmMbJlReJny+
nwPJDTdw2OHH9k4Ptto8+OKoFzm2p1jfLGAtM6xjpDYQBPaInb8TOtyE6qsEVZ1oPCNr2S5aoDkH
dZsbe+xeFJ9kdAWrD1r7GHTd49C0jYHfMjye3kj44SELXyMoTNTD/scqRjiJPi7ZHfbZyYnQzC7M
3TyDTDtCM7sRlnn6xZwYnVrVTGi8Q0gyUR8LRmY1hpG2NoG1wSlEMQzZ/xA0hc64RzFeH6J/AFRR
7NCExeMEAAAAAElFTkSuQmCC')
	#endregion
	$button_PCGroups.Location = '6, 48'
	$button_PCGroups.Name = 'button_PCGroups'
	$button_PCGroups.Size = '261, 23'
	$button_PCGroups.TabIndex = 1
	$button_PCGroups.Text = 'Transfer Computergroups'
	$button_PCGroups.TextImageRelation = 'ImageBeforeText'
	$button_PCGroups.UseVisualStyleBackColor = $True
	$button_PCGroups.add_Click($button_PCGroups_Click)
	#
	# button_ComputerGroups
	#
	$button_ComputerGroups.ForeColor = 'Black'
	#region Binary Data
	$button_ComputerGroups.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMKSURBVDhPdZFpSNRRFMVvQeHSMguKHypI
0iyy0AqjqMaZaJHKbAQpx9RWNZcZZ3EWpzEtdysRK4PcBtMpSlpIihLbCIqsLJcICrOCDEwTLNM6
vfeysg89+HHP/7z37rnzhoxKmcAQKqMDm7xFNTL0Ku9fdbV0tnmdbLQ0diZyo2ZAq5CNGpVSX5NK
Rpx/GmRu9CIAgnSVF2sgpdRV0uELtgBcL1DgXKYCGWFzsHeJZDQhRE6cPw30CqmvZb18pGznLORF
zWRJ8i8GhcTNsEYKlzkQTQWbUWeNgG3LYsQFSbB7qZz2MFiSnHRKOUuSjIqkwtCxJD/sCprWs3+F
Bx6fS8CLqxb0PSpCd0sWts9zQ9xCd4oPdCOyhnmRZYMXGVQsKeNvknVzMDTzPRAbSG0YOIPOW0fw
4HI2uq6kQ+NP74rKq6i47BSRYY2ETSGhpOUeaD2biI7LFnx8WITXN22IW8F+b0z47vctJqQbfnG7
Qg0iCjRbM8lisxPpl02glJBJFL9gQi8+1aP/6RG8arbjeWMyTGYrcg7noaOzC3X1LgHX3Muw2GDm
DZQn++mibRGFzJWufnPTjJ4WB9oatWguV+PgoVy0PWtHQVGJqOO1ze5A5tGASbT22EtSlb0jxbHu
AGdtSe9d5z64CiNgMWtEWn5hsbhwiKVyuOYe37MWKEdobUn7VEVx15Pc631ovd+IO9UxqDmwCqna
dFRVO8WFLDYJX4NDg0Jzr7KqBuwdQKr8J7j3cgCt70fQ+xX4wQ4ODX9DSppOHOKHHVk5SHH6IZXB
NfdOV1aLd6Dwkse40TEAU1M/bNf68f3bEAY/94lEPubvse2OgwKuucf3UrL9QSGW2zjR0ov42m5o
qrqx7TSjsgfRtR/EQ/ELOWNjj9dGk5n/nYvJJ/YSYiq6oHP1QNvAqOf1LVJdH5Cm00NvzBBpx09U
CKI1O0q5x/d0eiPR1JXGtCmRDSOe6np4bB2DaXe1C26R5zFZ3Tg8MTghNjEpGRyW6iOSGaIBW9MZ
wdz4D0EMz3Hf4xbRT+U7HtWFp1FPAAAAAElFTkSuQmCC')
	#endregion
	$button_ComputerGroups.Location = '6, 19'
	$button_ComputerGroups.Name = 'button_ComputerGroups'
	$button_ComputerGroups.Size = '261, 23'
	$button_ComputerGroups.TabIndex = 0
	$button_ComputerGroups.Text = 'Get Computer Groups'
	$button_ComputerGroups.TextImageRelation = 'ImageBeforeText'
	$button_ComputerGroups.UseVisualStyleBackColor = $True
	$button_ComputerGroups.add_Click($button_ComputerGroups_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($button_autostart)
	$groupbox2.Controls.Add($button_installedSoftware)
	$groupbox2.ForeColor = '59, 59, 59'
	$groupbox2.Location = '308, 10'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '108, 78'
	$groupbox2.TabIndex = 6
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'OS / Software'
	#
	# button_autostart
	#
	$button_autostart.ForeColor = 'Black'
	#region Binary Data
	$button_autostart.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKYSURBVDhPpVJNT1NREJ0fQGLiyrBT15Io
ceFOE5EPUeOiCSmauDcaXUjUAGmpfPWLQAzQ0r7SUkoKtOWjBZoWJAaktkUkUQttI6ghVowbK4UC
epz3oAobN05yMm/m3XPm3nMvAfgv0LWWw7iip7zLOnKWagmX1ISLzYTzjYS7xnPw+sc2/YFplXds
gnI4RC7X0U3OeOQg6IYI1skziL23YGbRhw+pBL6kvuHFXBijvvE1kewb9x+YrKM8kdwZINy3E3qC
bZjwhmAwONDQ2IL2DgEejxcrK6sIR+fhGR5d6x9075GvMko15Kz3EZTDhAfdZbBZRhAJLyL9IwOz
WeC8gVAogk6jgLfvluAPTIIFVHsCeqISPq/zDaGik6DqeIjFV3Gk0xvYyGRQVVWFzGYG39NphCPz
6B9wS7vo7XNu5c5O5Wxab4wFDAS9QQv8Ana22GfONyor+QPYzu5gd/cnjCYLQi8jsNkdEKejjKcr
pgi2JKFmkl2vJ5xVEBZWg5BXVMLhcEAul0OpVMLtckGrb0UwOA2TxQYqqaNnokBfil3/RLB/Jlxg
gVvGY8hub0uTZTKZlHNhZuLU9HN0GEz8EIhOFtWSv5jvuu8rk58QrmuPIJH8uL/8cMRiS3D2uxAI
TqHtaXtW8oDjeJGCgsW8E5n+KGZnorBZB7C8nNyn7cXScgJCdw9mZudgsfbgcXVNlySwL3KCUahv
ElJD7jFEo6/h8ozAJNjQJVilPMh1JLqAQZcHDU2adV6f/0egjNGmtotCp5R1jesmczc7HUUinkQ8
npCyWIt9RV29SC5oUvP1iWTpITFaNAKpNa2iSMHtO/dMNQpVtrpWiRzEWuyL/5s1ehLxr8hnnGYU
HoBYi/2/wd78B0C/ATooV+x+3KOsAAAAAElFTkSuQmCC')
	#endregion
	$button_autostart.Location = '6, 48'
	$button_autostart.Name = 'button_autostart'
	$button_autostart.Size = '97, 23'
	$button_autostart.TabIndex = 1
	$button_autostart.Text = 'Autostart'
	$button_autostart.TextImageRelation = 'ImageBeforeText'
	$button_autostart.UseVisualStyleBackColor = $True
	$button_autostart.add_Click($button_autostart_Click)
	#
	# button_installedSoftware
	#
	$button_installedSoftware.ForeColor = 'Black'
	#region Binary Data
	$button_installedSoftware.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGlSURBVDhPjZLLSkJRFIY3CaWlmSRdBhWE
1AP0FEG9S/fCzEqh5lF0c9CkCwSmXVQquoyiQffQaJKQQlB5KqIGBX9r7aNpp1O48GPBXvv85zvb
LUrdodVKTwQVnvC/VHkj4L11o1siF8EP+05TmDlJYZa6Hr4zBXMXT6imkJqRzZ8B9uEQgtevsHn3
YHat6WIhrO4N2IdCv0yEbTCEg+QHjM5VTB0/SqbJho20sKnWRFgomcvQG8T8uYKy4R1diwzWgXWU
kwl/OpuIEpcaIHqCmDi8g8m5hsmjB+IeU3/yIM+GQ7IBnQHZC8hkOfqM+rFLNIxfolEDr/HMf/Ui
TbIBHStq7wpg++YNzQtxtCzG0br0E17j2W78XR6sMA9oAtr9sudTxfRy+S9wiW71E0SbGhCLRhGN
xXThGZexfx3C0rW0bxsMo5AOjytjkEgkcJtI6sIzLhlA5SCarBmT9GE+KSmkFEUXnnEZnRTAl6GW
yJgY+lQTfH7Qj+CeC63xjMvEBt9XMm1icasm+RRdpGxArgkPOL2IFPXgGe/hvfxmbUmT/BCOL1mQ
puqR+h0MAAAAAElFTkSuQmCC')
	#endregion
	$button_installedSoftware.Location = '6, 19'
	$button_installedSoftware.Name = 'button_installedSoftware'
	$button_installedSoftware.Size = '97, 23'
	$button_installedSoftware.TabIndex = 0
	$button_installedSoftware.Text = 'Inst. Software'
	$button_installedSoftware.TextImageRelation = 'ImageBeforeText'
	$button_installedSoftware.UseVisualStyleBackColor = $True
	$button_installedSoftware.add_Click($button_installedSoftware_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($button_printer)
	$groupbox1.Controls.Add($button_USBDevice)
	$groupbox1.Controls.Add($button_systemtype)
	$groupbox1.Controls.Add($button_memory)
	$groupbox1.Controls.Add($button_processor)
	$groupbox1.Controls.Add($button_mainboard)
	$groupbox1.ForeColor = '59, 59, 59'
	$groupbox1.Location = '8, 9'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '294, 78'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Hardware'
	#
	# button_printer
	#
	$button_printer.ForeColor = 'Black'
	#region Binary Data
	$button_printer.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHfSURBVDhPlVPLShthGM2ztG9gthY3JloH
6qWlr2A2TToYUeMFTDIpgrGlJsx4i5uEGq8LcZFgRNRuu2jpphUFUfC2bOmF0tPv/PPPmBRdeOBk
vpxzvjO3JAAgUI9nE9WNJ+ktGMlNGOOaMlOjp2MKavf/AsOq4I+I34Xf/rrkTI2ejimoXfWhMRDv
Q1uqohbenwEHpy45U6PHjI7fFDiOs+E4NhbnHIStGn6K+Fv4S5MzNXrMMMsdkdyCfD4vByD20kR/
PA7TNBGNxfAi6pIzNXrMEHrHLcjlpvkFVmYC2ewbTL1+eyvpMUPoHa8gh8urayStV3JGU87Sdyvp
McMsd/wCXs7Xw2Ps7u2jvLyGcnkV75ZWGkiNHjPMNtyCbdv4+OkzhhIjiPRGJLyEUqmEYrGoyJka
PWaY5Y5fkM1O7s7OOPKEbbRndiCvXj31H5qcqdFjhlnuiOQWCB4Kg2Tb6HrFsKoIpbYRStcQTu/I
XJMfURX0vBx36gvq8UCoQpHoEJpbHjPgLdHzcVeBwnkhVDiZ78DJgoGLxXBByw3wCwaHx6CYGMVA
YgzR/nEc2Y/kj5AUptRMjR4zXt4v6O7qgcfOzqdoNZ7jy3QTPkwGFTlTo1ef9QsE3j3eiwAC/wCI
DTa5sUvmUwAAAABJRU5ErkJggg==')
	#endregion
	$button_printer.ImageAlign = 'MiddleRight'
	$button_printer.Location = '194, 49'
	$button_printer.Name = 'button_printer'
	$button_printer.Size = '94, 24'
	$button_printer.TabIndex = 5
	$button_printer.Text = 'Printer'
	$button_printer.TextImageRelation = 'ImageBeforeText'
	$button_printer.UseVisualStyleBackColor = $True
	$button_printer.add_Click($button_printer_Click)
	#
	# button_USBDevice
	#
	$button_USBDevice.ForeColor = 'Black'
	#region Binary Data
	$button_USBDevice.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHWSURBVDhPlZBNSxtRFIYHwY27ao36IyrC
uPGDiqYtXRQVwY9FcaFSBb9W/gS1pIlSTUad+EUEq4JMJi6rsSq4VKOiNqU1ZNJkorv+gddz7owo
wSb4wHDuzD3Pe88dCYD0HGZnfFAURUiqqhY8KyAw+xXJRBIJIwmv18tiXs4Ax1AIRQM6Cvp0/DNj
WF5ahH9hEbG4YU2SLaBoIAj1IA1lL4XpXRNSt4bvWxp0LYi4kSPgJcnKvomGiVO8dkdQ7YrAs5Oi
kCCODvfgnxFXkJ8M4JOH13+ijmVPBFWuE2oDat2n8ITTyO/dsmQmM6CwX4ObTqqmZkb+fCxqJdW6
yTMxxYv+0INEe/aKTibZtZ1CzcS5kF6NWXLFuDXBO+8FJn+kwT/WVh4C+M7uHRPO6QvR3LP6W9Ry
W35DcsvCLxQPBlmwxmdoTyqhxC/hGzSqUdTbAY9567uCc+oEjkyZoX3JMahjdNtE03wUTt+lkEZC
cbH+4I+iY+X6aZnhgJIhHePhW7QsWWO/n4uimcZtC/xB57f4/2WGAwi5mP5B55qB1sA12kn8uBpD
14aRXWbsAEbm5k/aX/RsJtCrJXPLzKMARi4bDqGUrsSV363PWcgIYFi6f3IgSXebHodcCgf8BwAA
AABJRU5ErkJggg==')
	#endregion
	$button_USBDevice.ImageAlign = 'MiddleRight'
	$button_USBDevice.Location = '194, 19'
	$button_USBDevice.Name = 'button_USBDevice'
	$button_USBDevice.Size = '94, 24'
	$button_USBDevice.TabIndex = 4
	$button_USBDevice.Text = 'USB Device'
	$button_USBDevice.TextImageRelation = 'ImageBeforeText'
	$button_USBDevice.UseVisualStyleBackColor = $True
	$button_USBDevice.add_Click($button_USBDevice_Click)
	#
	# button_systemtype
	#
	$button_systemtype.ForeColor = 'Black'
	#region Binary Data
	$button_systemtype.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALPSURBVDhPdZLbS1RRFIf3X9FDPZTZSxj0
EBG9RARBLxUUEUEFRi+VWpmJTuUlxzEbncy8jqKOzslLjU4JkwWVXcUxS8nKzEs5jWkeZzyjjkXU
195TQRdb8LEWa/32+u1zEZaKlv+SVe5ypxc3ceZSo6ThNxpRfTVf8GC2vVmYy10iraiRuS/fCIW/
/IPqq/mCCxSZJU3CVHCZqdlP3OgaoO0nqr7hHUCf+YSpQPuxQDn+jbpBygWNydA8TwYDdCuGArKe
wjugMz49i5oroTuz5AoZ8pkyiht/IK+mOFNYT6oUpdicMjuxVF4j13GT7CoPPj1Ecn4dIl0KP87P
oIenCYSDEabmAuizASYlEzMBPkh800FSbRp9o3P0DBuMjAdJtjoQpy9q+II6i072sNLymrWFw2yw
+9hS42dHnZ+92ntinT5ejn3AlF9PodaJzfGYQb9BklpgulBHv9/PCnM/60vfstk5xvYrH9nj1jlw
fZLDrRMcaR6X72CUU3kudncKdj4SvH43x4ncGkSqrZaugWFibCNsdIyxrTnA1msGuzwGez1BYlt1
Ej06D/oGMVmvsskm2GAVPB8KkZhThUjJq+HOs5esLvKxzjHOai3IKleYVc3zxNQbrKycYKltlDbv
C06eq+WW14en4y2dr/wczalEJJ+vwvWgl6iC9ywrm2S5c5Zo91eiW2F5Q5ioyikW2/w03X3GcUsF
rY/7aJH6e71vSMi2I07IBRVt3RifZzDmpzHCAQz5FSKoWvZCcmb3eIk3l+N+1IPr/lNudb8iPqsM
cSitoP1YTkVkGHe2lCMZJRxKL4qgatVLkLOjFju51W6ud/Tiftgj/8YXxMm+kBEtWaM4Xahhrm1D
u90V4ZzzJqoXJ53izWUyl3I4UxpkFEfywVRru0iyVkeQDmJ/YlZ1QnZ5RKxQzvuOZdp/GSyAMv8j
lkj+Fi2W/CeE+A7y3I1Qt5F/hwAAAABJRU5ErkJggg==')
	#endregion
	$button_systemtype.ImageAlign = 'MiddleRight'
	$button_systemtype.Location = '94, 19'
	$button_systemtype.Name = 'button_systemtype'
	$button_systemtype.Size = '94, 24'
	$button_systemtype.TabIndex = 3
	$button_systemtype.Text = 'System Type'
	$button_systemtype.TextImageRelation = 'ImageBeforeText'
	$button_systemtype.UseVisualStyleBackColor = $True
	$button_systemtype.add_Click($button_systemtype_Click)
	#
	# button_memory
	#
	$button_memory.ForeColor = 'Black'
	#region Binary Data
	$button_memory.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFESURBVDhPpZK9SsNgFIa/S/EGhLSm8UOI
DiUBjaKhWtFJRKSppWl113twEB10kLYiRVJ7AQ4WHFw13oA6C8X99Zz8iIZvMBh4cs55fyBDBIB/
oRTzoBTzoBTzIMwD+SFbOgy/GNNMZrpn72TnDneFbJXwEA4xCgOMXgYYPRM8wwHun2J4/+0FUYe7
YtrXETyewTTKmJUWtk9MzEk7YuvYjEhv9jjDWe5wN/qC07sjzJcrcKw11C8XsGhXsWSvo37hwCMc
qwqHNPY4w1nuJF9g4PB2B7XuMrECr+uiceVi/7qCdm8Vex0XXo90otYhKMNZ7nBXGPTC5w3ezjeA
cZ/mZnQXGnpE7JFG3ut3hibp3BUzbTnWaSk0S9AInnxL33jXd4vDn15KmuGuoEcjphRMEhMZLYum
/DnyoBTzoBTzoBT/DsQXJCWD+6cSFXMAAAAASUVORK5CYII=')
	#endregion
	$button_memory.ImageAlign = 'MiddleRight'
	$button_memory.Location = '6, 49'
	$button_memory.Name = 'button_memory'
	$button_memory.Size = '82, 24'
	$button_memory.TabIndex = 2
	$button_memory.Text = 'Memory'
	$button_memory.TextImageRelation = 'ImageBeforeText'
	$button_memory.UseVisualStyleBackColor = $True
	$button_memory.add_Click($button_memory_Click)
	#
	# button_processor
	#
	$button_processor.ForeColor = 'Black'
	#region Binary Data
	$button_processor.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIRSURBVDhPhZNLaxNhGIWz83d00V/QdZv7
5DK5TG6Tps3MxJlkEhBB8NZFFRfWC8W0ddO0FkukblLcKbq2oIJpKlWoi7T9JeH4vh8zSZMofnA4
fO887/kOgXgAeNxz9jotLmf7/3GHE8cNKGr222XdhGaQKhZ00t+cvzPHvFjkgO+tDIplC+8/fML6
ehMvmptoNremxHP+zhzzvOc2mCuWTXQO32F+3otAIDSlYDAsfGHBJzjmeW+sQbt9MIRduQGhkIRI
JCa8/eZgusGiZmF75xX8/iD65xc47p2g0zkU3jv5gdOfv0SAJEWxvbsH5kcNdrI0qKK5sSVe8PkC
oqrX6xeBPItG40gkUojFZGxsvhQ87w0blPQaHj95hnA4gvN+H93uMXr0equ1CzmeQCqlIE2S5STW
nj4H82MNlowaVh8+QpReCAQleKkFK0SVE8k0lExOKEkhD4hjftigLM1mlgwbt+/eh0w1Ly8u8fno
CIPBAF++fkO1ZiObKyCXV0XInXsrFGCPGnQpabli48bNW0grWXqRqlJQnOryi5lsXiznC0URxBzz
vDf8DcqVOsxqQ0CTKqiLUIslIb4zx/xYAx6UyjryBOdVAh0VJsTfmWN+rIGi6h8Ns47rVh2G1YBm
NoSbVZqRrjpzzA8bOGfm974iap3uZaCFZxV2vrvzCZ8hjf6Nzpm74tcc5/MP93j+AM2X7D2jJo54
AAAAAElFTkSuQmCC')
	#endregion
	$button_processor.ImageAlign = 'MiddleRight'
	$button_processor.Location = '6, 19'
	$button_processor.Name = 'button_processor'
	$button_processor.Size = '82, 24'
	$button_processor.TabIndex = 1
	$button_processor.Text = 'CPU'
	$button_processor.TextImageRelation = 'ImageBeforeText'
	$button_processor.UseVisualStyleBackColor = $True
	$button_processor.add_Click($button_processor_Click)
	#
	# button_mainboard
	#
	$button_mainboard.ForeColor = 'Black'
	#region Binary Data
	$button_mainboard.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKvSURBVDhPlZHLTxNRFIf5M1yrCyUtYotQ
ykMIr5pShBZI0RhdGDfGKIpSLCZGUSERrIDybAAhqBHoA2gB5U0LFGjLU0Kk0EJ1YQoIkUQ3P8/M
FIi60Um+/Oac3PnuuXcCAAQY1cJNvSoI+lw+wfsHaB2tZ75jBXoVH55pM9yODpZVewdW7O1YmSIo
mdrt6ITbaSIomffpLlbCCgy3DmPVUofugkh0PoiEPl8EnfrUPvp7IpgeRqHnSSwRQ+ui4LI2kYDP
CcYcC3hUXIGgcAneP46m1hbhIzb9uYXewhjwQiUYL5MgMCQeHmsdDHsT9A6MoLrhLWyaOPQXxVLr
C1rzQtidmWTq4adxEEZKMVMtg0AsgddSBUOeX9DVNwadeRD8sCQMFcdRy43BkiSMlMrYZOpRTQJC
T6fgo/YsQqOlWB8qh3FPYLxxCJ6eAjgqpLBoJMCPRTir5ZjRZrKJn4uwlZ2BKDYVSw1yiGJSsN7/
jAQnOIF1cg6FmhrwwiSwvUgGdmeAHScxzSXV9koZxAkKLDelQxwvh7eviI7gF5gHJtDY1ovZ2jRM
VsphfS7FMI0+XJLI5mipFHNaBSISM+FuViIiIR3eDwUkCOYE+pyjcLXnwVmbgckqBbBtox9gBTYs
XO7YMF+XAXFSFlZen6NUYr3n/oFAlxuET8ZcOGoyMVWpwMTLVDpKCmzlMjanaKr5+iy4mi9gmWDS
Y1ZDvy9QBWNZlw18o503aEcf7ewb4WCm2B7HUuN5HAtLxtq7S2x6TXd+F7h012lMJWa1GXQX6QdQ
vVCvhOvNRXxuu3yAKYcEJ/13QC9rxmvAdzt3/j/ZtcOru4Lj4anwma4iUJyGr903Ybgr4ASvsoMH
mClab/PQkhP4F0yfubDOfME+7WohWlQCNyug5wgh/H8CeL8A7J+jNx2aU/gAAAAASUVORK5CYII=')
	#endregion
	$button_mainboard.ImageAlign = 'MiddleRight'
	$button_mainboard.Location = '94, 49'
	$button_mainboard.Name = 'button_mainboard'
	$button_mainboard.Size = '94, 24'
	$button_mainboard.TabIndex = 0
	$button_mainboard.Text = 'Mainboard'
	$button_mainboard.TextImageRelation = 'ImageBeforeText'
	$button_mainboard.UseVisualStyleBackColor = $True
	$button_mainboard.add_Click($button_mainboard_Click)
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($groupbox19)
	$tabpage3.ImageIndex = 2
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '1264, 91'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'Network'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# groupbox19
	#
	$groupbox19.Controls.Add($button_ipconfig2)
	$groupbox19.Controls.Add($button_testport)
	$groupbox19.Controls.Add($button_hosts)
	$groupbox19.Controls.Add($button_routetable)
	$groupbox19.Controls.Add($button_checkWLAN)
	$groupbox19.ForeColor = '59, 59, 59'
	$groupbox19.Location = '6, 6'
	$groupbox19.Name = 'groupbox19'
	$groupbox19.Size = '277, 78'
	$groupbox19.TabIndex = 7
	$groupbox19.TabStop = $False
	$groupbox19.Text = 'Network Settings'
	#
	# button_ipconfig2
	#
	$button_ipconfig2.ForeColor = 'Black'
	#region Binary Data
	$button_ipconfig2.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFtSURBVDhPpVBNSwJRFO2n+EG0zz6hWoSV
YaAV9AfCTFJoERUFFbVt16JNH0gISY3OOOi6XxC0dREUViudNkGO2end65tJywzrwJl35p5zD7zX
AeBf5I+m66qiqrhMpaCk0y3JGZEVO3m7gIx2IXdqBdRKKBQeML8QQTgSg2E88xkKL6FYLAkdZY8y
BLlTK7hQFPpByTBQeatgbHwSZsXks/pexWu5LLSPPcoQ5E5jQdk04enpZ22ht29AKrBHGUJjgbwC
wel0w+FwsabT5eqU2s2eBbkjH1G8aruQO7WCs0TiKqWpSIkhU9OQzmSgZ7PQczmoGZ1nn76K82Ty
xi4QcAt6vnIxuoKhES8FvnmCXfUFTRFa3sHgaPDHQMuCx5OJ+N2RH/fHU3g69cXluAF2wfrmFiyu
bWwjtrqL28Nh4GWPSZpm5NVn7YLp4AwsBgKz8PrnkD/oxvW+h0maZuTVZ+0CgWaP9Cvtgr8THR8X
4ntqivo2yQAAAABJRU5ErkJggg==')
	#endregion
	$button_ipconfig2.Location = '6, 19'
	$button_ipconfig2.Name = 'button_ipconfig2'
	$button_ipconfig2.Size = '75, 24'
	$button_ipconfig2.TabIndex = 0
	$button_ipconfig2.Text = 'IP Config'
	$button_ipconfig2.TextImageRelation = 'ImageBeforeText'
	$button_ipconfig2.UseVisualStyleBackColor = $True
	$button_ipconfig2.add_Click($button_ipconfig2_Click)
	#
	# button_testport
	#
	$button_testport.ForeColor = 'Black'
	#region Binary Data
	$button_testport.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAADtSURBVDhP7VKxDgFRENxfoXcKhUIoREII
NR+gukT8g0aEOKcQjV6jlaAgCh2hkagUlDqFRDHeHCeSO1cQnUnmTXZ2d+5d8gTAV5R0TUBm6oKU
IX1ROPSy/V03h20nCypr+uxzzt6xAoyVoKVobgTJpkDXK9h3E8DFBM6Gpazps885znPPcYNkQ07q
Q6FFNTxcNyO4HougsqYfr8jIcQM2XqjRUPBNqsHxsh0ClfXdFr/ic94OeAd7mOoKz4B5LDiYRTUo
5W+5wjOAyygXQH1YDngGTKMBoJQH9WE58A/4dYDC88VZlQusAB6fE3IDzRkoaGqrtEwAAAAASUVO
RK5CYII=')
	#endregion
	$button_testport.Location = '196, 19'
	$button_testport.Name = 'button_testport'
	$button_testport.Size = '75, 24'
	$button_testport.TabIndex = 6
	$button_testport.Text = 'Test Port'
	$button_testport.TextImageRelation = 'ImageBeforeText'
	$button_testport.UseVisualStyleBackColor = $True
	$button_testport.add_Click($button_testport_Click)
	#
	# button_hosts
	#
	$button_hosts.ForeColor = 'Black'
	#region Binary Data
	$button_hosts.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKBSURBVDhPjZFfSFNxFMdvLz0ICvXSy2QG
IYpQlpD2j4JKyjKKJCsfCgmit4hyuXKZ1pyZV53L0MwlKHNsLbfS6eaWZmpt1ZrbXO7OOdKVKOQ/
Civi2/1db86FQV/4wLnnnO/5Hc6l/iVhiTmORckyzQIeEpNcHN+2stiG5CT6+fTNbjOYeQsmfwzg
47cBOL8YIbEa/wxK5tsjRaYnlVtnWn3T+PzdBfesH09GF9AcMEIx9AymCQkMTDeEUtPMipsIb3c2
ijoZ2KZ+wj3fD8fXIrRPyqCf2oG6YCKOdzagwi3G9S52E7aXt4UVLzXO3mvWobxCzlGnKoaWSYci
cBgixymkqsewRdUDTeAy2WKWt4WVU9oIs8WKsfEQPENedJi6QNfnoTa0CvRIDHbr+rChwY8Cey53
WN4WllRWBq93GPqnbaArq0G+CbUhCtldD7GpKQjhAx82N2lWHiArvQvH+0FYrD0oulWCUuYg6j7F
gA7EIrNdjXilH+vuexFFO8kN5nhbWI91rXC5PXhts+NGYfES+c50SD8IcMmeitwXe7FeroUgv0XP
27jfpzyt8Sidg645m/0t7G/egfGPwOPx4mLhHWzTGFAdpFDOUMgxZXCvrzlwbueS+aTWB0PwF2SW
AFrUmpDo6jUQzhTKkVDVj7UKDy7078F+lWjRfOh8NmtdHWE+2zaBTO04BGJ1a3TakUxBvspAmsmx
ONiY5KK3H8tgzVHc61trXkWYU2pdiC3QabjpFBXXW5auH64/CgKJSY6vLWpj1csI8y7JI1wRiZdw
1+zDwmgeB4mX1wgUWSmR7kVCRR97VZUhK+sEluOoTIvg7zpZgqyUwrM8/g+olN/LfeaCXY3IuQAA
AABJRU5ErkJggg==')
	#endregion
	$button_hosts.Location = '6, 49'
	$button_hosts.Name = 'button_hosts'
	$button_hosts.Size = '75, 24'
	$button_hosts.TabIndex = 5
	$button_hosts.Text = 'Hostsfile'
	$button_hosts.TextImageRelation = 'ImageBeforeText'
	$button_hosts.UseVisualStyleBackColor = $True
	$button_hosts.add_Click($button_hosts_Click)
	#
	# button_routetable
	#
	$button_routetable.ForeColor = 'Black'
	#region Binary Data
	$button_routetable.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJgSURBVDhPnVNdSJNRGH7v3AZtUBellTfd
hyAaQqUX0TCL6qLbbrqOrrrQfX2b+zUUlSgoSsswK7DSct82ly6IzZ+QcM5m/jBFE0dENrQiraf3
nP20QAl64OE933fO+7zPec85VOgMfDaqGvSKhgKLBp2kNxPzxjyvV3wwME2qDyKv2BMkEsn/A5PV
j33ufiK94k3/eX0MCFcDETNUbREYMjOrYdOWgeGTwOg5HK4nlCoklxutIex1DbIAWxRQeueg9s3D
oc3D419AQyCJxuAXtAyso3lwA60hoMJOiCau4yhHo20Ce1xviXSWPikQXwemvwKJH0BrYAmjySVZ
sdJBqHJyZF55RrgbIYRnVZg9hLPN9Ecg8Q1Y+A6s/AQ8z4My2R0idE0RHjA744R7McKdcRaZIPhn
zqOmiZATaHoRQ4s3jpvBZZlsGyTU+kmOs7QEOHmaMLBSjuPsgOuX5gQ+bgCfNgE2IRdf6CJc6jyC
7vCanBeosBKeLhpQxT0wWJM4k7+FFFsXS1c3f6FMTXda4BAnCUGBrBOBA47LcpwTuBWI4Xb/O3SE
EuiOrKJ3BFLoQ/IGKnihcJJl3eNKXGxPi5GuLi3ABiQFeobWUM6V4ysK2sIEhbufrS5o4e8GLSOg
zzjIx8FawpPoabSJrkcJHZN8Eu8JD7mBj2YIja/SyQLbXmXRqPaxMtyfJdS//NuB4H5XT/oUCu2+
lHxM7KSAt6Pnh7NDDcFkm8SJq4Rrw7tQw3GnfQ67neN8+8aYIyhyhFNF7jesQVQilbbhKb4souIW
cyXFngEO/0Y2YQsQ/QaNGWXFRtHxxgAAAABJRU5ErkJggg==')
	#endregion
	$button_routetable.Location = '87, 49'
	$button_routetable.Name = 'button_routetable'
	$button_routetable.Size = '103, 24'
	$button_routetable.TabIndex = 1
	$button_routetable.Text = 'Route Table'
	$button_routetable.TextImageRelation = 'ImageBeforeText'
	$button_routetable.UseVisualStyleBackColor = $True
	$button_routetable.add_Click($button_routetable_Click)
	#
	# button_checkWLAN
	#
	$button_checkWLAN.ForeColor = 'Black'
	#region Binary Data
	$button_checkWLAN.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGoSURBVDhPlVK/SwJxHL3wV17Q5hBB/QNJ
0jmFOQVCZlpBEBRBBUF5VkMWBRW2KEgNDS1SQtCQXJbolro2Sa1BYQQ1BiVBLp8+n69fj7vAgx48
7t177/uOO04AAEELMVJeQN4h4Q+fkPO8xsDOagd4CeyLSsbqXZlFSyKanWOj9rmLVHOIlRG6AQw+
Rbn4hZIO9ZLF/U68WJHdSIk61KVMHUCjyg+7KLBHytF2uQw2TtLobVCGcIlyqYZnXrUDYJGmA5Ri
8dwSLn0LHll9BWFwecYSZiMF6ph63F4xfPuhDvCijQQ9UehyelB20D2HKPSFApThw8x4b0L2awe0
oDFTMa+sZZVLIKJeRY++A2VtSIZWAwy5qwxGDZDmtg4YtR5QMhmo3D8wkua2DsYDigI/9TojaW7r
YDiQSB7Gszd5uM4VIJE8inNbB8MBhGNpfR/cHj8VHA1LD8OBt1NfupoagZeUH97PfGlu66AObO3s
QpOb23sgR2PwfDIEUIshD5gmjzJtVx0YD01Ak8HgJAz7p+DxeAAqSYmRNHmUabvqAKLxy/6TACD8
AqxBR+NLAYUlAAAAAElFTkSuQmCC')
	#endregion
	$button_checkWLAN.Location = '87, 19'
	$button_checkWLAN.Name = 'button_checkWLAN'
	$button_checkWLAN.Size = '103, 24'
	$button_checkWLAN.TabIndex = 4
	$button_checkWLAN.Text = 'Check WLAN'
	$button_checkWLAN.TextImageRelation = 'ImageBeforeText'
	$button_checkWLAN.UseVisualStyleBackColor = $True
	$button_checkWLAN.add_Click($button_checkWLAN_Click)
	#
	# tabpage4
	#
	$tabpage4.Controls.Add($chart1)
	$tabpage4.Controls.Add($groupbox21)
	$tabpage4.Controls.Add($groupbox20)
	$tabpage4.ImageIndex = 3
	$tabpage4.Location = '4, 22'
	$tabpage4.Name = 'tabpage4'
	$tabpage4.Padding = '3, 3, 3, 3'
	$tabpage4.Size = '1264, 91'
	$tabpage4.TabIndex = 3
	$tabpage4.Text = 'Processes'
	$tabpage4.UseVisualStyleBackColor = $True
	#
	# chart1
	#
	$chart1.BorderlineDashStyle = 'Dot'
	$System_Windows_Forms_DataVisualization_Charting_ChartArea_1 = New-Object 'System.Windows.Forms.DataVisualization.Charting.ChartArea'
	$System_Windows_Forms_DataVisualization_Charting_ChartArea_1.Name = 'ChartArea1'
	[void]$chart1.ChartAreas.Add($System_Windows_Forms_DataVisualization_Charting_ChartArea_1)
	$chart1.Dock = 'Right'
	$System_Windows_Forms_DataVisualization_Charting_Legend_2 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Legend'
	$System_Windows_Forms_DataVisualization_Charting_Legend_2.Enabled = $False
	$System_Windows_Forms_DataVisualization_Charting_Legend_2.Name = 'Legend1'
	[void]$chart1.Legends.Add($System_Windows_Forms_DataVisualization_Charting_Legend_2)
	$chart1.Location = '682, 3'
	$chart1.Margin = '0, 0, 0, 0'
	$chart1.Name = 'chart1'
	$chart1.Palette = 'Bright'
	$System_Windows_Forms_DataVisualization_Charting_Series_3 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Series'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.ChartArea = 'ChartArea1'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.ChartType = 'Bar'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.IsVisibleInLegend = $False
	$System_Windows_Forms_DataVisualization_Charting_Series_3.Legend = 'Legend1'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.Name = 'Series1'
	[void]$chart1.Series.Add($System_Windows_Forms_DataVisualization_Charting_Series_3)
	$chart1.Size = '579, 85'
	$chart1.TabIndex = 10
	$chart1.Text = 'CPU + RAM'
	#
	# groupbox21
	#
	$groupbox21.Controls.Add($labelPleaseEnterFileExten)
	$groupbox21.Controls.Add($button_process_stop)
	$groupbox21.Controls.Add($button_process_start)
	$groupbox21.Controls.Add($textbox_Process)
	$groupbox21.ForeColor = '59, 59, 59'
	$groupbox21.Location = '507, 6'
	$groupbox21.Margin = '1, 1, 1, 1'
	$groupbox21.Name = 'groupbox21'
	$groupbox21.Size = '174, 78'
	$groupbox21.TabIndex = 8
	$groupbox21.TabStop = $False
	$groupbox21.Text = 'QueryStartStop'
	#
	# labelPleaseEnterFileExten
	#
	$labelPleaseEnterFileExten.Font = 'Microsoft Sans Serif, 6.75pt'
	$labelPleaseEnterFileExten.Location = '10, 48'
	$labelPleaseEnterFileExten.Name = 'labelPleaseEnterFileExten'
	$labelPleaseEnterFileExten.Size = '161, 27'
	$labelPleaseEnterFileExten.TabIndex = 5
	$labelPleaseEnterFileExten.Text = 'Please enter file extension e.g. .exe'
	#
	# button_process_stop
	#
	$button_process_stop.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_process_stop.ForeColor = 'Black'
	#region Binary Data
	$button_process_stop.Image = [System.Convert]::FromBase64String('
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
AInBlkgn/ujMAAAAAElFTkSuQmCC')
	#endregion
	$button_process_stop.Location = '129, 20'
	$button_process_stop.Margin = '1, 1, 1, 1'
	$button_process_stop.Name = 'button_process_stop'
	$button_process_stop.Size = '20, 20'
	$button_process_stop.TabIndex = 4
	$button_process_stop.UseVisualStyleBackColor = $True
	$button_process_stop.add_Click($button_process_stop_Click)
	#
	# button_process_start
	#
	$button_process_start.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_process_start.ForeColor = 'Black'
	#region Binary Data
	$button_process_start.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_process_start.Location = '151, 20'
	$button_process_start.Margin = '1, 1, 1, 1'
	$button_process_start.Name = 'button_process_start'
	$button_process_start.Size = '20, 20'
	$button_process_start.TabIndex = 3
	$button_process_start.UseVisualStyleBackColor = $True
	$button_process_start.add_Click($button_process_start_Click)
	#
	# textbox_Process
	#
	$textbox_Process.Location = '7, 20'
	$textbox_Process.Name = 'textbox_Process'
	$textbox_Process.Size = '118, 20'
	$textbox_Process.TabIndex = 0
	$textbox_Process.Text = '<Processname>'
	$textbox_Process.add_Click($textbox_Process_Click)
	$textbox_Process.add_KeyPress($textbox_Process_KeyPress)
	#
	# groupbox20
	#
	$groupbox20.Controls.Add($button_cpuram)
	$groupbox20.Controls.Add($button_taskmanager)
	$groupbox20.Controls.Add($button_process_cmd)
	$groupbox20.Controls.Add($button_process_grid)
	$groupbox20.Controls.Add($button_process_owner)
	$groupbox20.Controls.Add($button_process_100)
	$groupbox20.Controls.Add($button_proclasthour)
	$groupbox20.Controls.Add($button_process)
	$groupbox20.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox20.ForeColor = '59, 59, 59'
	$groupbox20.Location = '6, 6'
	$groupbox20.Name = 'groupbox20'
	$groupbox20.Size = '497, 78'
	$groupbox20.TabIndex = 2
	$groupbox20.TabStop = $False
	$groupbox20.Text = 'Processes'
	#
	# button_cpuram
	#
	$button_cpuram.ForeColor = 'Black'
	#region Binary Data
	$button_cpuram.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAM1SURBVDhPldJ/TNRlHMDx68dqVm5troXl
mCzzuON+fg84OC6sEzx2gNwXOfU8OOLM1hBFi2xLQmttqYHgbLUluuk/TTet/sm54QFGxIWHCIrS
gRJRs2T89I5f03fPDq7+7tk+e/Z5/nh9fuxRAIqWlOXen+zP01sWh89TRN/ZBHzbN3EhmI/X52Z3
62dknWwk/uAPFLpLWWltZY3+PPrkL7xRoEn9OFMdTTA2TCDYI55+p7OzS9xjXA0ECfOQv0Q29BCu
dwW4NwrtHffR6I6wCCgVREJ9THxzAI/LyXz/BxSXyAzzNe6SLXw73c3RXwd4PxhBLvJw7FSY0OAU
iUmH/wMmrwUYPf427iKZR71VeIpl7vAVWzwuzj0IcPhGH3t/nsFZ6Gb/oQm6r98XQKyDRAXjbU2M
1b6Jy5kP1yrY6s4jRAOFm2XORK7wSW8f5c2z5G8sourjKdraR1BpYoD6MUYvfsfYp1txOuxwdQfy
phwGOESunMuJSAv7b9xie9Ms9pwCKj6c5uKlu6i1MSDpCf4+d5rxaie5620QLBGVbAxyAHteNscj
rbwnAM/lOWw2B2+9O83Z8yGSdJ8vApc1T3KvsYHxqhw2ZFrFCC5yHFaxg32st79B7cwVygVQ6J/D
as2mpPwBjaduo9XHAO1T/FF3kIndNl63mAWQR1aWWQCVZNoyqBOATwAO/zxm8zpcvjB19TfRGWOA
/mlGqiuZqLCQkSpBdxaZ64zcZSfpr5k5Ovsjnpu3sTXPYzRZ2Fgc5qOaHvRS7RJgWMbwLi+TuyTM
Bq34LRmkW9QMCSA5TYoC2wSQLgCNPpXs4gg793RhMP0LPMNQaS6TlWokjRJ6TCSnvspvVKCTtNQv
AVLzAmtVBjZ4I5Tu6ERKjgHGZxncnMbUXhUaZUIUMBhWRwGVVkn9XJsA+jG2LJCwJglH2QyubR1I
KUuA3/gc/fmJhPcZMKrXwq0MTCmv8CdV6Ew6vnz0C76BO1jaQakyIr+zgL2gVXRZtwg0qJfXdBS8
TGiPmvhVcYxcMpOw+kX8oTJWxa+kOnAM+cxp9Ef8vBD3EipHAG3a92KcypooIM4KEab/H4oV/wBx
dW8RUu1+OwAAAABJRU5ErkJggg==')
	#endregion
	$button_cpuram.Location = '350, 46'
	$button_cpuram.Name = 'button_cpuram'
	$button_cpuram.Size = '139, 23'
	$button_cpuram.TabIndex = 6
	$button_cpuram.Text = 'CPU+RAM Graph'
	$button_cpuram.TextImageRelation = 'ImageBeforeText'
	$button_cpuram.UseVisualStyleBackColor = $True
	$button_cpuram.add_Click($button_cpuram_Click)
	#
	# button_taskmanager
	#
	$button_taskmanager.ForeColor = 'Black'
	#region Binary Data
	$button_taskmanager.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAeFJREFU
OE9tk00rhFEUx5/PQd5lvExhMUmSSaax8DZRiCZ5bdKMRtLUEAqZWZgsWKCwsJAipBSSZCVZ2OEz
mPWsjvmdcZ8Z5db/nvPcc87/nnvOeSxJr1QqJS+vb3L/8Cjnl9dyenYhR8cnip29fYX5xoYfMSwL
BUN8MyFD/mHx9XdJR69HWjyNUueqUVQ6yxQNTS5pa/dIdGlJSZUANg4I2kgsSygyLt5OtxIgvV1Z
HWmI1+IJ+fj8EouUufXm7kpi2wsSWQ0qGYFI1dPBuWeQzM7Py+PTs1i8CQduzw3GyQRrBiaTXxkI
zWi9lMAYcm9BRi93xRf2/5vBHwLe5Gqut9mR4YO4TB1vKjgbXQ5lbGky/P8QUGEIuv2ZDoDw7aG0
TA/KSGxOsf5+o3aCK6pLswRsztoqaY9MSMdKUG8k7Z7FgJ0ZwXXdbhnYWlBATBHpoBLQ35LyAmV2
/AYgTf8JLnMU2cCX1msXYGE4CkvzbQcyyf02OoEQojN4TK/FxgQWFOepI9LohSXZM4L5RgImUQeJ
jYIYIwHGycDYeKIpIuP/nUxm/gXGkjrg+F8mRgemhfa/wEYxIMGgP1SfT+vS6nEr0DkbmxzXt3M7
xbcJWKRDPQCEFBfgaMDMIPHJLJEfUMo7g1CmSGAAAAAASUVORK5CYII=')
	#endregion
	$button_taskmanager.Location = '350, 17'
	$button_taskmanager.Name = 'button_taskmanager'
	$button_taskmanager.Size = '139, 23'
	$button_taskmanager.TabIndex = 10
	$button_taskmanager.Text = 'Taskmanager'
	$button_taskmanager.TextImageRelation = 'ImageBeforeText'
	$button_taskmanager.UseVisualStyleBackColor = $True
	$button_taskmanager.add_Click($button_taskmanager_Click)
	#
	# button_process_cmd
	#
	$button_process_cmd.ForeColor = 'Black'
	#region Binary Data
	$button_process_cmd.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHYSURBVDhPnZFPSJNhHMcfvdQ8JEiWHgQP
u3Ty0FEkzTkT2WaxMTHX/DMczDkQVwNdypx16VSUForgyZmHsObr69DIgxdBNw8S6hAtcWN7DUkh
L/n1+e0db3SYNb/w4fd74Pl+eOBhJc9CrHhITNwcnMMNwidT6BPS0P6H6zQHRRQNzSdKnocYK/aL
087gJsYihxgLSxjlvFuT8HY1iREFCcOcN5xXaz/wcv0n7MEoivzz7xkZZ7aOwdzLyPGtoPDFOm69
3kD5+DYMU7voCMaR65lBYOMIzPMRE19PIJWVYnL7Fwp8Ilh+/yy+7J3iwdQOWj7swf7pO5zCPnpC
B+hdjMO/lMSThTgep+leTMD1+RBh6QzX+gWwPO8sLhvqsqt9wdShqqoaFRV3UFl5FxqNFjU1tRdC
oa4i0GrvpSYJ6urqodMZoNc3ZITyl0Cna+Cv0Ci70WiGydSYEYos6JUFRpM5NfWG+zA3NuGh5RGa
LdaMUKjLrqQFra02WCwtsFrb0N7WAZvNfiEU6ioCh7MLjk4On51O1z+hpASqPvkb3W5PVlCoy/Ke
Ckh+iyISiWQFdajL8gfmuOs3DmKxrKAOdZmqJ7BEC9lU3v+D7lKHuoxHzbl9OZj6HPzNiwsq/Fta
AAAAAElFTkSuQmCC')
	#endregion
	$button_process_cmd.Location = '101, 17'
	$button_process_cmd.Name = 'button_process_cmd'
	$button_process_cmd.Size = '98, 23'
	$button_process_cmd.TabIndex = 5
	$button_process_cmd.Text = 'Commands'
	$button_process_cmd.TextImageRelation = 'ImageBeforeText'
	$button_process_cmd.UseVisualStyleBackColor = $True
	$button_process_cmd.add_Click($button_process_cmd_Click)
	#
	# button_process_grid
	#
	$button_process_grid.ForeColor = 'Black'
	#region Binary Data
	$button_process_grid.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJBSURBVDhPhZJNTxNxEMb35sGPwcm3ROMH
8GIUW0o08irRk0JpQATRixpPLmvpbkv9Dp48gAd7aRUMEW0TY3wrrwUDLFtpwXa3tF26fZzZbYiV
JjzJL/Pf2ezszPwfIRwO7yqKAlkOQA4QHP85h0MKfI9DaBtScP2ufEDHcBA3H76YFPhjlq4XGsK6
0ifZ8X9xESFAf2Itr6xiObWGlRr2mXKsS7efwaKo6SZOuXxIG/t2vm1IhiDLMjRNw+TkFKaYqdcO
tedMWkXzHRFa3sTFW09xxu3D8dMebO9Z6BxWnA4sq4qNDbUhqFpw941hLrWD2eUM5lZ38CGVReLX
H3TfDzkFKvsWVFXD5uYWwdE5cw5WBe0DElr7JXi8Y2glrvoktA2Oo2c0pB90sJ3JHiKTzVIHFXuE
Cs28rZexuJVDIpXBzOJv3BilDngHyeQC3kQih4gQSwtJu0CJ9qbuFvBjfQdzS2m8m9fQPVIbgZXT
DeTyeh15yrFcvWP4urSO2S8pRD4m8WrmO15Of6MRJpwC1SpgGAbdu15HgXLFYhFur4QW2oGrV6SF
imihPVwboB08qBVgmWYZ5VKpDtM07Xc8QiN1spF4B/F4HLFYDNFotI63lPuc+ITLZCTWhZ4nONHc
j2Mn3fZz+72aD44SF1BzZfzc0nHOM4D5tIE0ubKDC3AHR6nF+9w2El8dm+k9xfjarmMkURSnuYjf
7z9EYNyPiaAM76Og3kVX1jUSpKtzYA90DErTAqmJOH8EZxvkCKHpL5+bBuf9xfXTAAAAAElFTkSu
QmCC')
	#endregion
	$button_process_grid.Location = '101, 46'
	$button_process_grid.Name = 'button_process_grid'
	$button_process_grid.Size = '98, 23'
	$button_process_grid.TabIndex = 4
	$button_process_grid.Text = 'Gridview'
	$button_process_grid.TextImageRelation = 'ImageBeforeText'
	$button_process_grid.UseVisualStyleBackColor = $True
	$button_process_grid.add_Click($button_process_grid_Click)
	#
	# button_process_owner
	#
	$button_process_owner.ForeColor = 'Black'
	#region Binary Data
	$button_process_owner.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJRSURBVDhPnZLNSxRhHMfn6oLsJSvI3jTR
Vt3Vtd0dX2Zn9m1m3zd3HXfXfMtMrE51icBVsDp0qEMYHTwnEXToza1D0KVLf4EXoWv0YgQKQfJp
nlkLpIjwB995GJ7v58t35nmkxpuvNg7eqLJ/cZWG/5TwCkawUsNildmHG5x98LmmlS/2OvkPiX3B
CFaqn19lr1M//wLJUakF7HM6OXKokaZjx2lracXd0UmX9xQXfX5uyQHkoIoWDKGpKkpvn80IVnLM
V+2Xoxbc7elGDvShDWjEVJ2onuFuPAHRIGGzRNYsMlgw0aOGzewKONHUTMCCFTVCNJRGu58ksljg
SSoL8TD3zGFuF4cZGx0jnsrYzO4GLW14elX6tTRrskFi26q8bPIpGmepOMK2EeFb0mDLCBPOD9lM
nQio2wmw+mP1Zm0uxLvrGvFNleDzIvRHGJy+Alazx+kcL2M6eDttpK5inYLDeohpPdxF20cVzwcd
z2aEC3eKJN9bZrdK99McV99qVOQcff4EJ1u8NiNYyTFXC2jCjfJMJ7aSwfc9zERkBmNL5UdBxf1V
x7cRsxwqnSi2V4xgfzeQ2/3kQ3mylTyZ5SFmMrN0WOb8epTRS9OMZ6coGSNklRy9Ltlmag1+BfT4
SeppCtlhzhTGOW/O0o5MaWmSy6UZRssTmPkiqXiGgNdnMzsBtYvkdrWj9A9gWD8plzpNOVNGeR1m
yjxHeWiEwVyehJFAVaxPcrlsxj5G58Ler7JgpQPXHr1xLlTttD80t6O/7AlGsJI1zZZ69iap+Sdv
vWLTEaDnfwAAAABJRU5ErkJggg==')
	#endregion
	$button_process_owner.Location = '205, 46'
	$button_process_owner.Name = 'button_process_owner'
	$button_process_owner.Size = '139, 23'
	$button_process_owner.TabIndex = 3
	$button_process_owner.Text = 'Processes + Owner'
	$button_process_owner.TextImageRelation = 'ImageBeforeText'
	$button_process_owner.UseVisualStyleBackColor = $True
	$button_process_owner.add_Click($button_process_owner_Click)
	#
	# button_process_100
	#
	$button_process_100.ForeColor = 'Black'
	#region Binary Data
	$button_process_100.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHSSURBVDhPpZNfb9JgFMZfRoNXc/FuIW7D
luLSQmlZBigy1Llosnmj2eKVpi18g+1LbFxzwXR309t9Li6bEkD+PJ5zJmQXJDpt+mue9/T0ec85
easA/BdLg/dBOY5zk8/nYdv2H7EsawGvC4XCjeKPW60WwjBAEARoNpuyboYhAt+HT4SkOc56Duey
kRi82n+DWn0P1doLNF7vU10K9cZLlKvPsEvU9hoSu+x2UXleE7qkc7kclG1b8MMWjk8+UUvA5y++
JH/9diVrvq6//5DYeDLBh48nxDF+jsfIGgYb2Dg8eo/pdILBYICDt+8kud8foE47M3Hcl9hFuw3M
ZnRPcd6+uK2AhohKpYrtbQvD4RCOU5TkGSXaNg83L5pjnFcq7cDzSiiXK+D2led58pKJomih4zhe
qu/iuu6twdraI2haCqPRCMmkJi97vd4ikXUikcDq6kOsrGjU7hSp1AMUi1Qtu3CZum7IwAwjSyZJ
nJ6eSSLDWtOSMM2c5PBGW1sZateBYhfTfEoGWWxuPiEDGgztmsnoSKcfC6w5pusm1tfT6HQ62Nj4
bUCPiE3mcEXcFmvHKQis5zEeHB8gOoVsEJGxcomdf8Rd+oPch6XBvwfqF+YNEga2AC2XAAAAAElF
TkSuQmCC')
	#endregion
	$button_process_100.Location = '6, 46'
	$button_process_100.Name = 'button_process_100'
	$button_process_100.Size = '89, 23'
	$button_process_100.TabIndex = 2
	$button_process_100.Text = '>100 MB'
	$button_process_100.TextImageRelation = 'ImageBeforeText'
	$button_process_100.UseVisualStyleBackColor = $True
	$button_process_100.add_Click($button_process_100_Click)
	#
	# button_proclasthour
	#
	$button_proclasthour.ForeColor = 'Black'
	#region Binary Data
	$button_proclasthour.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMsSURBVDhPlZNfTJNXGMbfSy+93dUyL7za
zdhmYmwigpVSBKkrA1rAuYRtxo1lziwrBfknGmFhUXTV6TYoJMPZDrAg0tJN4yhFSkGrI0MXZMzO
uemk/BFF+e2czni/k/zyfu97nufJl/OdT+bP58rCgKVI8Xj5Qg4MG0/bbf1SWDggdrv/v6p6Pdf7
Wqf12jffbxEdUPQwZINZB1DOt031FLzZTa7lHJbtvcmqez3X+1qn9dqXDEh0Zz9+OvEuyxPvUbqz
E8feGD+Hl3j0B8/RvZ7rfa3Teu1L+LapN+g0waCFUvsZmj+7yeToCm0tC+w/kFDMU6eq+5sFJiNP
aW68mdRpvfbNfp8lMnPK4Hc79vHR7igjPyzScGiWyGAUFrtoqC/lScJL6McRDqqgkeCS0o3jdlSh
fXOnM0SvNXnmHrytt3Edvcfo8FWs+TbGwu0q5CKPHgRZmQsSHhzmZPMKXa0J8s0BtI/uTSIWU1C2
G3vxddymru6eOqifGI98h8VaosK8rDyMsPjgEnbXKhwdwvuuLPJSI7yRNi6W1JiIfWuv5Gd003b8
BjW1dzl1slqFXOPalV5ycu2MhnuI/drCa9XC9F+HcXqErLLNZB4VyVJIsdknhcYumg/FqK5RR851
xSQZmVbGo33q+RYT0x28XiX8Et/PlZlPqewUtjRKe/bnKsCe4ZOC9K6l8g9DVFXeIDo6pUya3xQz
ijiT8U7WqYBY3InrknB5ehc1Z4XMRvHINkNA0lNOHCsy+ynbFaLCOcXYmDb/icf7paqz+Id6WF8r
RON7cA0JJ4aF8O9WTA2CMJAmsa9T3i7b2kq+qZ+dxRf4eE+MyopbimmqnHfY/UkHGw8KkbvvcHxM
6JsyUK1ud/o+CcrcGZMsejYvc+cAH5hbKNh0jpK88+yw9Sv8vFVwEduOI6Q1qt/h7yK+mhAqAsJG
p/TpTyn33VvkH7eRufbUJ2cr1u5Nf9n1hW2Dd6nY4KF4g5eS9T4Ks+sxNglDCSvlQeHI4Rf1PXgp
Rx/i/bbkbXpVkaJYrXhB8cqz2XPS6iRQGxIMTgno3twkkgz4H2uNQofp+myJ/AtwYVJKIFClzwAA
AABJRU5ErkJggg==')
	#endregion
	$button_proclasthour.Location = '205, 17'
	$button_proclasthour.Name = 'button_proclasthour'
	$button_proclasthour.Size = '139, 23'
	$button_proclasthour.TabIndex = 1
	$button_proclasthour.Text = 'Started in Last Hour'
	$button_proclasthour.TextImageRelation = 'ImageBeforeText'
	$button_proclasthour.UseVisualStyleBackColor = $True
	$button_proclasthour.add_Click($button_proclasthour_Click)
	#
	# button_process
	#
	$button_process.ForeColor = 'Black'
	#region Binary Data
	$button_process.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJRSURBVDhPnZLNSxRhHMfn6oLsJSvI3jTR
Vt3Vtd0dX2Zn9m1m3zd3HXfXfMtMrE51icBVsDp0qEMYHTwnEXToza1D0KVLf4EXoWv0YgQKQfJp
nlkLpIjwB995GJ7v58t35nmkxpuvNg7eqLJ/cZWG/5TwCkawUsNildmHG5x98LmmlS/2OvkPiX3B
CFaqn19lr1M//wLJUakF7HM6OXKokaZjx2lracXd0UmX9xQXfX5uyQHkoIoWDKGpKkpvn80IVnLM
V+2Xoxbc7elGDvShDWjEVJ2onuFuPAHRIGGzRNYsMlgw0aOGzewKONHUTMCCFTVCNJRGu58ksljg
SSoL8TD3zGFuF4cZGx0jnsrYzO4GLW14elX6tTRrskFi26q8bPIpGmepOMK2EeFb0mDLCBPOD9lM
nQio2wmw+mP1Zm0uxLvrGvFNleDzIvRHGJy+Alazx+kcL2M6eDttpK5inYLDeohpPdxF20cVzwcd
z2aEC3eKJN9bZrdK99McV99qVOQcff4EJ1u8NiNYyTFXC2jCjfJMJ7aSwfc9zERkBmNL5UdBxf1V
x7cRsxwqnSi2V4xgfzeQ2/3kQ3mylTyZ5SFmMrN0WOb8epTRS9OMZ6coGSNklRy9Ltlmag1+BfT4
SeppCtlhzhTGOW/O0o5MaWmSy6UZRssTmPkiqXiGgNdnMzsBtYvkdrWj9A9gWD8plzpNOVNGeR1m
yjxHeWiEwVyehJFAVaxPcrlsxj5G58Ler7JgpQPXHr1xLlTttD80t6O/7AlGsJI1zZZ69iap+Sdv
vWLTEaDnfwAAAABJRU5ErkJggg==')
	#endregion
	$button_process.Location = '6, 17'
	$button_process.Name = 'button_process'
	$button_process.Size = '89, 23'
	$button_process.TabIndex = 0
	$button_process.Text = 'Processes'
	$button_process.TextImageRelation = 'ImageBeforeText'
	$button_process.UseVisualStyleBackColor = $True
	$button_process.add_Click($button_process_Click)
	#
	# tabpage5
	#
	$tabpage5.Controls.Add($groupbox8)
	$tabpage5.Controls.Add($groupbox4)
	$tabpage5.ImageIndex = 4
	$tabpage5.Location = '4, 22'
	$tabpage5.Name = 'tabpage5'
	$tabpage5.Padding = '3, 3, 3, 3'
	$tabpage5.Size = '1264, 91'
	$tabpage5.TabIndex = 4
	$tabpage5.Text = 'Services'
	$tabpage5.UseVisualStyleBackColor = $True
	#
	# groupbox8
	#
	$groupbox8.Controls.Add($button_servicesrunning)
	$groupbox8.Controls.Add($button_services)
	$groupbox8.Controls.Add($button_servicesauto)
	$groupbox8.Controls.Add($button_servicesautostop)
	$groupbox8.Controls.Add($button_servicesnonstandard)
	$groupbox8.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox8.ForeColor = '59, 59, 59'
	$groupbox8.Location = '3, 6'
	$groupbox8.Name = 'groupbox8'
	$groupbox8.Size = '419, 78'
	$groupbox8.TabIndex = 8
	$groupbox8.TabStop = $False
	$groupbox8.Text = 'Dienste'
	#
	# button_servicesrunning
	#
	$button_servicesrunning.ForeColor = 'Black'
	#region Binary Data
	$button_servicesrunning.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIsSURBVDhPdVJfT9JRGOau75Hdd+FNtXVb
XfU9TJE/KmMMEUkzQpCQrVLRal20ZmHQRJHAEMgaEzQSxIox21wzY30Bnt7nBL/Q6t3eved53ud5
f+f8ztH9LyZ9fni8U2BtUX8F0NFye7wRyXAL6ibcHhwefgNri9LdvjN5LJqlFvwzQESR8MsIFl+E
MXpz/Mg1dgv37s8gFk+oSix8k33qqKdPG+BwuuIPHz9BuVJFOpND/eArynv7SKbSKH0sK5zOZFWf
Ourp6zxC1/CIq/H02SI2sm8RW1nDciyuajvJsz88MtqgnqYT/8DucKKyV8XqWhKx1QR8d4PwTgUw
JXUpElV8RXZFXcvye4DTNabIQDCI/FYRqfUNMU3DYDI/v3Dx0nVWf2Ba8exTRz19aoBsCbX6ASrV
T0hnc8jkNtX1Xbl67bJ85AwrMXn2qaOePm2A1WbHg9kQNt/lVXIHFqttzmZ3nGUlbveoo14bINHN
HLRYsVXcwfv8FuKJJHz+AOTOVSUmzz51bU97gArzkKUZjcZQEFGhsI3i9gcticmzbxoY4i2o0AbI
No9nQwvY/1zDq+UV9QZKuxXslHZVJSbPPnWiVy9WG9CrN6RCC48wMzePvn5jQ28wYXzCjS+1uqrE
/UZzk2bqBL+mr/MIXT29+jc9N/pSsj4v2U3T0fcfykzMNJoHf4pmXdbnJE8+JAmS6oUx5KzyFgZ4
5k4Vh2ua0wNOh/pqK/8ZAHS/AKdS+Ww60QpOAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesrunning.Location = '5, 17'
	$button_servicesrunning.Margin = '2, 2, 2, 2'
	$button_servicesrunning.Name = 'button_servicesrunning'
	$button_servicesrunning.Size = '132, 23'
	$button_servicesrunning.TabIndex = 3
	$button_servicesrunning.Text = 'Running'
	$button_servicesrunning.TextImageRelation = 'ImageBeforeText'
	$button_servicesrunning.UseVisualStyleBackColor = $True
	$button_servicesrunning.add_Click($button_servicesrunning_Click)
	#
	# button_services
	#
	$button_services.ForeColor = 'Black'
	#region Binary Data
	$button_services.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAG6SURBVDhPpVHbSgJRFD1fE4ERRR8Vps6Y
mo7aeNccZ8x7l8cMI+itIiKiixVEPUQX0ZfMSCTqVQXpYbf3KYtIJWjDYp21z+x1NmsYAPwLLBqL
s3R2kaUyC00EqPEknYE09em+izlF637LmTS/iERV5guEjhVVA2w2iFEXqf8Xg1Z4LlZdyRc699Ua
PNUbQLyyWnjD/hbeNwca+IORB18gDHelCmzv7EIineNMmvqhiALBcJRlckssnkjz4R8GWDrrjOPi
+qYEqpbAVNgEMWmnW34hnV1Y5gPafOq3gVv2ViTXLBTPzmFtfQMiUYXzCWrqowng64841DNgZpfc
7WmrvR7Tkp29/UM4ODoFYly9aRItJUG0VLz+4KaixnsGTDWOGDEKYl2ctsKk3nBJrDeYyhhiGTO6
zecLzX4BM8klM8FsIbSnjEINzYaQqwaT+IzDV4MCRhNgTreH4YvdTXQzDieddYhRxLDV3jfgV9Jf
BmaLjcNml/hGHl+AzXp85UEB4w/43oCGiUlLLoLcN2BcvYP9J7xv9TGQObB6BmwUzHXqI8YGGhB6
BFwjTf3PR/5UPOCPI2fSWIy9A9wD+f2hDKCYAAAAAElFTkSuQmCC')
	#endregion
	$button_services.Location = '5, 44'
	$button_services.Margin = '2, 2, 2, 2'
	$button_services.Name = 'button_services'
	$button_services.Padding = '0, 0, 2, 0'
	$button_services.Size = '132, 23'
	$button_services.TabIndex = 1
	$button_services.Text = 'Services'
	$button_services.TextImageRelation = 'ImageBeforeText'
	$button_services.UseVisualStyleBackColor = $True
	$button_services.add_Click($button_services_Click)
	#
	# button_servicesauto
	#
	$button_servicesauto.ForeColor = 'Black'
	#region Binary Data
	$button_servicesauto.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALdSURBVDhPfVHLTlNRFN0jv8APUNCxMUYS
iULAGAgJISFq4sSJI+Rhy6MtpZS2tzxLoZQS3hYMMYDUKo2WQml5VqpAQCBtQQIIQglBJo5ZnnNo
ceZO1t173bPXuvvsS/Ums4DJ3CxQ19BITRYrNTZZwDh45jx+zhHXcIgHF7E8yuCsrTdRDDg6OgbP
nMf6Tln+EOv/Z8AaRp0fRzHy3gm9VH1iMNagvaML7nGvyJyz9+f8nPfx/ksD7qbVGcb73gwgFN7E
zFwAe/sHCEW24PPPYH0jJPjM3Lw45328n+s4iDkTi8TKKsPZ4PAIZue/wD02gc/ucZE5xsa8mJsP
Yvidk4mlM97PdULLxhOFRqtDOLIJz4QPbo8XzRYbzM2tsLS0weXyYMq3iJ2tE+h1JugNdULHQTqD
EVxstdmwuLwC/9QsE9kgk5U5kpKSs2UypaOjbQDJtQT1IOGJ8SYkXQskqQGSsY6oskqPnb19hDd/
YGY+gLnAAsxmG9JTM5PYqFfSUrLudrY4kMIMNvZLUD5EqHLkQtLaUK23Xhio1Bp0dvdiIbiIYHAJ
VksPcquv/kprIKTWEVJqCPcMzOBAj9nIU6gdhGfSbWQ08/UR3eEoVaiwvPId35ZWMD25hORqws8z
G9aPs7EWzcHqYTbC0Va0zxICu89R5SJkmmiI1BotsQmouExx7nK5sbq6gfDavvjicrQAnQt0ifYv
hA6Wu74Slg5fIINNSOUVlaRQqU+7e+3Y2t7BJ/cEdrdPcZ+N7Y8+gD1E6GOwbxB6Vi5gXyPoPYSH
WpokZXkF5Re+8vfa+9HV8xqFRfKzYrkGjw3XkFpPSGc7eMSQJhH6I8wsTNB5GdeQh109QRiwSMzL
L5zOe1ngZ/UtvpMSZvLnN6AsMoHzDGby9oCJfZfi6zl8idwgZnKDIZHXJWUqKi5VQi5XQSE3IstC
lMXuawwI8WRcLAz+E+LvxMAjXicIJoLoLwYrGRa+kko1AAAAAElFTkSuQmCC')
	#endregion
	$button_servicesauto.Location = '141, 17'
	$button_servicesauto.Margin = '2, 2, 2, 2'
	$button_servicesauto.Name = 'button_servicesauto'
	$button_servicesauto.Padding = '0, 0, 2, 0'
	$button_servicesauto.Size = '132, 23'
	$button_servicesauto.TabIndex = 4
	$button_servicesauto.Text = 'Auto'
	$button_servicesauto.TextImageRelation = 'ImageBeforeText'
	$button_servicesauto.UseVisualStyleBackColor = $True
	$button_servicesauto.add_Click($button_servicesauto_Click)
	#
	# button_servicesautostop
	#
	$button_servicesautostop.ForeColor = 'Black'
	#region Binary Data
	$button_servicesautostop.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIvSURBVDhPjVHdS5NxFH7/gUDoD2j/QHTh
nULsyroJyhC6iBKqjdmHBRF96drmR3MfTXM1bW5FXpTKsuV0frYvyrS5NZ2OgtzNoJtIdhNE8HTO
eV/XogwPPJzfOed5nvf8fq+yU7g9fdiG1vp/OFz3ggytVJxuD9byG+DMNc1qCJlqTiXsDlfw+egY
GHTe7HG64R8KIjI1LZlr6n+r4vxp0n7HOhp88hTv0xksxBLIbxSwks1hbj4mPa4XYnE5M4/5mrQS
OmtHV2lkLIRYIoWp6Cwik9MVcM19njOP+apMC1tnd01H112kV7KIzsxjgkT3vT54+rySQ+Nh6fOc
eZpMDXJkVzwcGMSbxSVZu/+BD1evXQ83Hm8ycB53nkVx+AhWX3QLb1sjBhZbJ9KZDwJe83U8SV/u
x6nTzSdovMd1vsHwOXAY+GoF52xqUrisEwOzxQaGP/AYydRbAW9w83b7MD2WPmevS34vXMI5gwmc
F3ubhM8QA4rafTqdvs1skSswojNzYvLMbsSXV41A6YoYcOZ6pPWAi3WqnMJoatlLXyy/DEewtJwW
LCdnUfAews+PZ4CiQTWgzHXBc3Br3Vn/+0/cuNWWHXg0JHcLT6h3XPM3o5w4Bnw6+Re4v9pTF9fk
inKx9XLIN+gHg1695DUbUQzogXUy0CAbVNU8py2OahaKztRyIcyg835yL/941wDk6PV3AM/zjvot
Va4G30nuRc7svisw/1/BL7wLKLW/AIvoBAk4ngJhAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesautostop.ImageAlign = 'MiddleRight'
	$button_servicesautostop.Location = '277, 17'
	$button_servicesautostop.Margin = '2, 2, 2, 2'
	$button_servicesautostop.Name = 'button_servicesautostop'
	$button_servicesautostop.Padding = '0, 0, 1, 0'
	$button_servicesautostop.Size = '132, 23'
	$button_servicesautostop.TabIndex = 5
	$button_servicesautostop.Text = 'Auto and stopped'
	$button_servicesautostop.TextImageRelation = 'ImageBeforeText'
	$button_servicesautostop.UseVisualStyleBackColor = $True
	$button_servicesautostop.add_Click($button_servicesautostop_Click)
	#
	# button_servicesnonstandard
	#
	$button_servicesnonstandard.ForeColor = 'Black'
	#region Binary Data
	$button_servicesnonstandard.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIVSURBVDhPjVPfa1JhGPYvyF11qzUoWNDN
dhvJoqt2U39AN+0iCHKR5kFNmHr0rInH4/FsTYY5deWsqRBLIx2CuxjuIgbdNCgIMvrBIoKx9Obp
fc/OhbYT7IOHh/d9nveB857vswCwDB5PWJm4Pxvv3gvEMENgds3KXU84OWFY9MNz+uxgAA2PeyMq
2p1dHPb6OPjT07nR7sAXTcEjJscNq3mAKyj33+19xKcv37G5/Rb1rR2duz/20dzqwB1M9A2reYA7
pODr/i+Uai0UNzbx7GWDuIlSvYWfvw/AumE1D/DNLWLq6hXcmLqGxytrKFEIM9fcZ92wmgc8jKUx
edmBC+fP4eLYGNZrbZ25nnQ4ECDdsJoHeCOpb9O3nbDZ7Bg5ZUWx2sCI1Qqb3Y6b03fAumE1D7h1
V4hIahaZQgXLuTKWss915pr7pEcNq3kAndMeUUVMyUBOZRFXn+g8n8hAoD7rR7b/BLhDieteUXkv
0LYjcwuQaGkisTsog/p7pF8yrMMBgpg845e0XrHSwM7uB6y8qPGlgSuY0Jlr7rPulxY+k//sUADf
stqbbazRf8+tbyBffoXVah1Pq6915pr7rNfJ9yCs0NhAQEheRrnchLqUJxSQSjNWB1DQ+4xKpXk8
IEDfqWk5PJpfRCyehkJL/BfcZ13T8rTQ5HCA0xdtCfSITgqnX2oNBdAZJfBLOylGjwJg+Qt+uCHV
V2k6OQAAAABJRU5ErkJggg==')
	#endregion
	$button_servicesnonstandard.Location = '141, 44'
	$button_servicesnonstandard.Margin = '2, 2, 2, 2'
	$button_servicesnonstandard.Name = 'button_servicesnonstandard'
	$button_servicesnonstandard.Padding = '0, 0, 1, 0'
	$button_servicesnonstandard.Size = '132, 23'
	$button_servicesnonstandard.TabIndex = 6
	$button_servicesnonstandard.Text = 'Non Standard User'
	$button_servicesnonstandard.TextImageRelation = 'ImageBeforeText'
	$button_servicesnonstandard.UseVisualStyleBackColor = $True
	$button_servicesnonstandard.add_Click($button_servicesnonstandard_Click)
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($button_servicesstop)
	$groupbox4.Controls.Add($button_servicesstart)
	$groupbox4.Controls.Add($button_servicesrestart)
	$groupbox4.Controls.Add($button_servicescheck)
	$groupbox4.Controls.Add($textbox_services)
	$groupbox4.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox4.ForeColor = '59, 59, 59'
	$groupbox4.Location = '428, 6'
	$groupbox4.Name = 'groupbox4'
	$groupbox4.Size = '219, 52'
	$groupbox4.TabIndex = 7
	$groupbox4.TabStop = $False
	$groupbox4.Text = 'QueryStartStop'
	#
	# button_servicesstop
	#
	$button_servicesstop.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesstop.ForeColor = 'Black'
	#region Binary Data
	$button_servicesstop.Image = [System.Convert]::FromBase64String('
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
AInBlkgn/ujMAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesstop.Location = '139, 20'
	$button_servicesstop.Name = 'button_servicesstop'
	$button_servicesstop.Size = '20, 20'
	$button_servicesstop.TabIndex = 4
	$button_servicesstop.UseVisualStyleBackColor = $True
	$button_servicesstop.add_Click($button_servicesstop_Click)
	#
	# button_servicesstart
	#
	$button_servicesstart.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesstart.ForeColor = 'Black'
	#region Binary Data
	$button_servicesstart.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_servicesstart.Location = '165, 20'
	$button_servicesstart.Name = 'button_servicesstart'
	$button_servicesstart.Size = '20, 20'
	$button_servicesstart.TabIndex = 3
	$button_servicesstart.UseVisualStyleBackColor = $True
	$button_servicesstart.add_Click($button_servicesstart_Click)
	#
	# button_servicesrestart
	#
	$button_servicesrestart.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesrestart.ForeColor = 'Black'
	#region Binary Data
	$button_servicesrestart.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_servicesrestart.Location = '191, 20'
	$button_servicesrestart.Name = 'button_servicesrestart'
	$button_servicesrestart.Size = '20, 20'
	$button_servicesrestart.TabIndex = 2
	$button_servicesrestart.UseVisualStyleBackColor = $True
	$button_servicesrestart.add_Click($button_servicesrestart_Click)
	#
	# button_servicescheck
	#
	$button_servicescheck.ForeColor = 'Black'
	#region Binary Data
	$button_servicescheck.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_servicescheck.Location = '113, 20'
	$button_servicescheck.Name = 'button_servicescheck'
	$button_servicescheck.Size = '20, 20'
	$button_servicescheck.TabIndex = 1
	$button_servicescheck.UseVisualStyleBackColor = $True
	$button_servicescheck.add_Click($button_servicescheck_Click)
	#
	# textbox_services
	#
	$textbox_services.Location = '7, 20'
	$textbox_services.Name = 'textbox_services'
	$textbox_services.Size = '100, 20'
	$textbox_services.TabIndex = 0
	$textbox_services.Text = '<Service>'
	$textbox_services.add_MouseClick($textbox_services_MouseClick)
	#
	# tabpage6
	#
	$tabpage6.Controls.Add($groupbox22)
	$tabpage6.ImageIndex = 5
	$tabpage6.Location = '4, 22'
	$tabpage6.Name = 'tabpage6'
	$tabpage6.Padding = '3, 3, 3, 3'
	$tabpage6.Size = '1264, 91'
	$tabpage6.TabIndex = 5
	$tabpage6.Text = 'Harddisk'
	$tabpage6.UseVisualStyleBackColor = $True
	#
	# groupbox22
	#
	$groupbox22.Controls.Add($button_diskusage)
	$groupbox22.Controls.Add($button_deleteoffline)
	$groupbox22.Controls.Add($button_volumes)
	$groupbox22.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox22.ForeColor = '59, 59, 59'
	$groupbox22.Location = '3, 6'
	$groupbox22.Name = 'groupbox22'
	$groupbox22.Size = '259, 81'
	$groupbox22.TabIndex = 6
	$groupbox22.TabStop = $False
	$groupbox22.Text = 'Harddisk'
	#
	# button_diskusage
	#
	$button_diskusage.ForeColor = 'Black'
	#region Binary Data
	$button_diskusage.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJaSURBVDhPfZJLT1NRFIWZ+wPUoUChBQai
caAxRgWJylN5JBArlQKV8n4LQVGQRBR0gMiAP2AEEmKclDQFUUlDooni4xcUBiZM1Dq593zufZGK
RDzJuo+911p333VOEpCkazkr49jLTM/TRY/7h4DILmhNe8pRrmocrV6WMz3t0cOZxPJP8r0yF/wX
oGYXpKY95ShXNQmDRXcatFRAUxkmWIq9B7SnHOU6mm2DiCsF3oZhbhozdRf7fg/2aPffkJr2mJ2G
d2EcTcIgzQXV5zATg5jQM/i4Ah9ew/tXW9DntRXMwgxmcgjqCnE0CQMJCG8O1rXzWIFL2O1VmH4/
jPfBvQ7MzevYXVexGsux6oucTCLu9D8GmrBOYNcVYDdXYPf4MIMNMNolJjcwwy3Y/bWOsR28LBPk
O7uSMJhJTX6xkXOczaJTxH0FWJ1euBOEsR54JFOMtGL1+oj7i9ksOcNG7glUkzB4nnJojtUQ3x6P
8rWjgXVvGetXyoj9xrq31HnXnnJYXcDRbBtE0mVLfHkweRvCs/AlCp8kyLU3W9BQP0stLJonw1C/
O0T3HiE+7JcQOzG3NMRqrKb/hpiHVVsopO0Qr2+FONaLGWrG7qvFaqvC+leISxkemUCOcKAY01qJ
6auBoUZ4oCHKFCNtmIF6jIbbLCfRf5GljB0G0ynJ49HsLGKFp4kH5AuDAfl6G0wMwJTkMtYNw43E
g+XESs4SPZKFahIGsva3HDzgnU93heTffmqoEZdLkOocWecuoWlvPi01pFzV7DTQtU+QLMgWHN0D
2lOOckVL0i9eOH6N5N3ztgAAAABJRU5ErkJggg==')
	#endregion
	$button_diskusage.Location = '6, 19'
	$button_diskusage.Name = 'button_diskusage'
	$button_diskusage.Size = '109, 23'
	$button_diskusage.TabIndex = 0
	$button_diskusage.Text = 'Disk Usage'
	$button_diskusage.TextImageRelation = 'ImageBeforeText'
	$button_diskusage.UseVisualStyleBackColor = $True
	$button_diskusage.add_Click($button_diskusage_Click)
	#
	# button_deleteoffline
	#
	$button_deleteoffline.ForeColor = 'Black'
	#region Binary Data
	$button_deleteoffline.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALWSURBVDhPjVNtT5JRGD6f+w0t11qtlw+l
5tByzlxvs/RDc9MPUs2t9cWtVcutP+BmH6zNtbIULZ0GKCICAr6CgAKPIPEiiiC+m6Si5gsiXp3z
uCmu2jrbtXPu+1z3/VznOuchX1o7SJ20PVUkkXfXiGWo+fYX0DzbZzzGTwQrrm6Uq2F0eOEJziOw
sIqJ+ZVDsJjl2T7jMf6xBrXiNth9U7CPToHzTsLm+RMsz/YZj/HrWxRHDZjE1c0YggsrlBAC5wnA
5j4Ci+2jIQTnl7G6FeOPdKxBraQNnfoh+GcWsRjZxPpOHGs7e4hsx7C2vcevlyJb8E//gM5gPVDA
imUqUt+mIkQklUPdP4guIwe9xYXBkXE4qNzxqTCcY7OwOCdg4DzoMduh1VshkrajTt5JalU9pEbd
z5sIrcGCvkEHjJRodU3Qwhn4JpfgmpgD5w7C5PBBb3NBR5vUyjvxWTtAvNlnifvmRUIqq0XKt58a
0KzQQUO/wHmCcPnnqIKf1P1F3rwusxOSLjPeNStR3tAqdeecJ87cFDKSl0ZIlaixdXkjSqX6INcY
IFP3QaEzQdU7hI5uM9p0RihMTuieP8VI1hnYcy5g+M5lDN9P+2DPF1APJHJoB6wIzC0hvLGNXzFg
YzeO9WicznQNIFBVgWBBBlBeCrx5AVQ8Q+Dhbb5JgonDMFhdGHIyE6f5Izj9C7AEwrAKTmL/VRFF
IeIvC7BfVgi8FsKWmwreRDW9RmaiifPyJn6n7o+FwnBTD6yhFdgykgBNE9WSMHRiWO8mg1R+FLV+
lSnR0WuiCtz8FXppYWB2Fb7pZdhnIrBnnsZeSRZ2H1/HjvAanTMRe3ID3L2rIHQkFT0qKX5f32Rh
frCHcvgT0bi6XQtNWSnG8lMQLRZgVyhAVJiO0QfpUN680nLwHAk5QXGOIvVfUGdfEnN5Atjy0sFR
KG8lt9D8KYr/Hoyc2JTGhPwGGBuwwDgyF9QAAAAASUVORK5CYII=')
	#endregion
	$button_deleteoffline.Location = '121, 48'
	$button_deleteoffline.Name = 'button_deleteoffline'
	$button_deleteoffline.Size = '131, 23'
	$button_deleteoffline.TabIndex = 3
	$button_deleteoffline.Text = 'Delete Offlinecache'
	$button_deleteoffline.TextImageRelation = 'ImageBeforeText'
	$button_deleteoffline.UseVisualStyleBackColor = $True
	$button_deleteoffline.add_Click($button_deleteoffline_Click)
	#
	# button_volumes
	#
	$button_volumes.ForeColor = 'Black'
	#region Binary Data
	$button_volumes.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJUSURBVDhPdVPbbhJRFOXdD/DdPzDGrzG+
mPgB/oHPJtaoT00AYyWmBcsloVOoCAhth+F+GxhgpnQogVIFaoHSFnG59yQdwMtJFmHOXmvN3uuc
sQCw8Hrn8j20O72bti3PxLrpxr/ANeYwlzWGln9o45nDKyCSLCJfa0HrDqF2BivgPa4xh7msMQ3I
GVlFN5CuNJFiyH+A9rh2y2ONacDtDSczHHUHKKknSMsaiQjlJdAz15gzvJwZI5kGNqcXgaiIYkNH
pz/CxfUcP65+4nw6M8D/L67m6AzGKDVaCMaTsDmXOrC7fNiNJLAXTyGSKOIgqyBDbStHPVS0HnKV
Y4i5OmKpEr4cZhGISbC7vAsDCgTBr0mExSziaRmJQh25qo6KegqleYaC0kKyqJJxBVGpgL39FIe4
MFhbt/tfrX+Awy1AoE7EnIJC7YQ6OENd/45SvQ2JTAP0ko+eAN5YHWCNafDW7tgejK+RyFchhA/h
2gnDE4zBHxKxE07AF4zjkxChMUUyUtCfXIM1pgFdDgRprrLWQm84wXgGjG5+GWEyRjdzY+/0/BKy
1jZGYM3CgAK5DTEqUYg0ghFicxFiIr8IcZdDXDbgQAJRCaGDDJHKZoiy2l0JcT8jU9A54xhXQuQH
ge4BF/kUpGIDeRJV6e21428oUqCpkmaeAo+7YvD8xdrLjW0/vJ9jZJI32i+rHTT0PrT2kMbo0hg6
IiT2heLYcPvBGtOA1t1HT54+fm19H6Q7PuV7bt3660tkTJnDXNYsG/C6Q7hHuE948B9wjTnMJS0s
vwEsTAjkI+DtQgAAAABJRU5ErkJggg==')
	#endregion
	$button_volumes.Location = '6, 48'
	$button_volumes.Name = 'button_volumes'
	$button_volumes.Size = '109, 23'
	$button_volumes.TabIndex = 2
	$button_volumes.Text = 'Drives'
	$button_volumes.TextImageRelation = 'ImageBeforeText'
	$button_volumes.UseVisualStyleBackColor = $True
	$button_volumes.add_Click($button_volumes_Click)
	#
	# tabpage8
	#
	$tabpage8.Controls.Add($groupbox23)
	$tabpage8.ImageIndex = 6
	$tabpage8.Location = '4, 22'
	$tabpage8.Name = 'tabpage8'
	$tabpage8.Padding = '3, 3, 3, 3'
	$tabpage8.Size = '1264, 91'
	$tabpage8.TabIndex = 7
	$tabpage8.Text = 'Eventlog'
	$tabpage8.UseVisualStyleBackColor = $True
	#
	# groupbox23
	#
	$groupbox23.Controls.Add($button_eventlogmmc)
	$groupbox23.Controls.Add($button_eventlog20)
	$groupbox23.Controls.Add($button_eventlognames)
	$groupbox23.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox23.ForeColor = '59, 59, 59'
	$groupbox23.Location = '3, 6'
	$groupbox23.Name = 'groupbox23'
	$groupbox23.Size = '228, 81'
	$groupbox23.TabIndex = 3
	$groupbox23.TabStop = $False
	$groupbox23.Text = 'Eventlog'
	#
	# button_eventlogmmc
	#
	$button_eventlogmmc.ForeColor = 'Black'
	#region Binary Data
	$button_eventlogmmc.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGTSURBVDhPpZPJTsJQGIX7IC6MqC/gCwhB
E9yAogtBlEGMCoIKgvoiuqOSkDg9hNM7aNwYdKe0LCxDGXq850pImjgQPcmX3Paec+7fplVKpVK1
WCxCVVUUCoWBoJcZZhUu/ipmFbZRT+VnlJ9fBoJeitl+wWvlDXpVF1Sh6bqkomkSTSefe/TQS9kK
Jp1ueH1+LAZCCEfjWE9sYSeTQ2Yvj0RyG7HVNQSCy5j1L8DpmpIZW4HZasGSK8CyLHS6XbQ7HQnX
XXGP+4ReylbgdLnhm/WLU0KIxOLYSKawm80J8thMpBEV9xYDS/DOzctpKVvBd+IETdOU8GSzZaLe
aMg9W4HLPY3AUgip9DZ2M1mshCPweGbQbrVRr9dQMwS1GgzDwLuA4jfx6wRAR2D2aIqX0ITV7k3A
ghO1IC/2zh8wsn+H8UM7Ywe3fUb3bzGcu0H29F5mVJHtFwxlrxE8e8HKxc/QQy/FrCj4fIT85SOG
8ze2E7+CHnopZv//LxwfHV1xwbbiyWBIr8gwqwg5BBN/Q3F8AIYjCyDDQLmEAAAAAElFTkSuQmCC')
	#endregion
	$button_eventlogmmc.Location = '6, 19'
	$button_eventlogmmc.Name = 'button_eventlogmmc'
	$button_eventlogmmc.Size = '109, 23'
	$button_eventlogmmc.TabIndex = 0
	$button_eventlogmmc.Text = 'Eventlog (MMC)'
	$button_eventlogmmc.TextImageRelation = 'ImageBeforeText'
	$button_eventlogmmc.UseVisualStyleBackColor = $True
	$button_eventlogmmc.add_Click($button_eventlogmmc_Click)
	#
	# button_eventlog20
	#
	$button_eventlog20.ForeColor = 'Black'
	#region Binary Data
	$button_eventlog20.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_eventlog20.Location = '6, 48'
	$button_eventlog20.Name = 'button_eventlog20'
	$button_eventlog20.Size = '109, 23'
	$button_eventlog20.TabIndex = 1
	$button_eventlog20.Text = 'Last20'
	$button_eventlog20.TextImageRelation = 'ImageBeforeText'
	$button_eventlog20.UseVisualStyleBackColor = $True
	$button_eventlog20.add_Click($button_eventlog20_Click)
	#
	# button_eventlognames
	#
	$button_eventlognames.ForeColor = 'Black'
	#region Binary Data
	$button_eventlognames.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJySURBVDhPnZPbTxNBFMb7ZqJ/golFMRof
fPKvMH2TXggVett2e1tqjU8GKbQSEl/URIWQaGJMNDHc2y1UWtsGCOCDyoMFCaUUsDcstUIQDeRz
ZnYbQsSY+CVfzs7ZOb85szujuNwdqZzvDEPpE3GmPXTESl8I5zpEXAyMlRR/Ey3+lyaXN1HnE1/K
JUdFV6YaWcxjlDj4WYrDxFQnvP0sxpdKFPJKLjsUbZUqslxCNF1CLL3JYmS5yPInbw5gd/+APdNO
LgTG+uVSSTVAcvUrJrNlTBHTmFwts7x3cB6nbg2RTgbYuM4fgVwqqQaYXd/C3EYF72rOfUdhj706
otNdyeMB73NVfMhX8ZF4vriN1Ldf4Cwc9PpmqFQqpH8Cdp4Hb7XCZDQeQmqAVGkbC7KXtn5ggxS4
XG6MBkO41qDBFpnjcgsIhcNoNpj+BKTLO8yZyi6+7B6g59kLcFYeBoMZj54+h5l0EwyK4B0uWDg7
DCaL9EdqgPzOHgrEm3v72CZjp8ON6ZlZPH7SC7VaB1EMQxC8mJqZQ09vH5pb5C5qgIFPOQwvFCCu
VGC38Wz1FqMZTfoWtD/oQzAkku0EwdnsMJmtMJo4CaKUAUOpHDlERUSyVTjsDqytrSO9kkEsGkVD
gxZieBzu1hvIkvxKJoO38Tj01w1QkNPFAIMEMLJYwLgMeEMKQ+Ex3PH5oNE0wkq6EjxeTERjLN/e
0SkBjrsLrS4nEskkg/gDATSqtSzv9XiQZPkY/He7pC1canudoBDaCb0XysAEdLfvo1UQYOMd4EwW
XBX8OHtvGrq2hyzP805YLDy0jU0J+h3ria/8nxX1vwFsOngCQXU3WAAAAABJRU5ErkJggg==')
	#endregion
	$button_eventlognames.Location = '121, 19'
	$button_eventlognames.Name = 'button_eventlognames'
	$button_eventlognames.Size = '98, 23'
	$button_eventlognames.TabIndex = 2
	$button_eventlognames.Text = 'LogNames'
	$button_eventlognames.TextImageRelation = 'ImageBeforeText'
	$button_eventlognames.UseVisualStyleBackColor = $True
	$button_eventlognames.add_Click($button_eventlognames_Click)
	#
	# tabpage10
	#
	$tabpage10.Controls.Add($groupbox18)
	$tabpage10.Controls.Add($groupbox17)
	$tabpage10.Font = 'Microsoft Sans Serif, 8.25pt'
	$tabpage10.ForeColor = 'ControlText'
	$tabpage10.ImageIndex = 7
	$tabpage10.Location = '4, 22'
	$tabpage10.Margin = '0, 0, 0, 0'
	$tabpage10.Name = 'tabpage10'
	$tabpage10.Padding = '3, 3, 3, 3'
	$tabpage10.Size = '1264, 91'
	$tabpage10.TabIndex = 9
	$tabpage10.Text = 'SCCM'
	$tabpage10.UseVisualStyleBackColor = $True
	#
	# groupbox18
	#
	$groupbox18.Controls.Add($buttonTSHanging)
	$groupbox18.Controls.Add($button_getsccmcache)
	$groupbox18.Controls.Add($button_getadvertisedsoftware)
	$groupbox18.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox18.ForeColor = '59, 59, 59'
	$groupbox18.Location = '410, 6'
	$groupbox18.Name = 'groupbox18'
	$groupbox18.Size = '237, 78'
	$groupbox18.TabIndex = 7
	$groupbox18.TabStop = $False
	$groupbox18.Text = 'SCCM Client'
	#
	# buttonTSHanging
	#
	$buttonTSHanging.ForeColor = 'Black'
	#region Binary Data
	$buttonTSHanging.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAItSURBVDhPnVNdaJJhFP4uutBuuozu/KuL
3YVSeRExkDXaLvIu6O9ixYp+KOomso1K/dRdFwW1BltzFGUE5YpRa7V0MdHUtelyNTdZbk0F80Y2
n8553dRIiHbg4XkP33mec97z8UrbrK+yWzpeYrPlxX+BNayV+LDRYK3Ebhwnu31QW33Q/ANcw7Uc
rK0YqK1+uGOrcE+toH+yPvgb13Atx18GA/ESXIE8XOM14Dzwi1AQ4Jo/DJRrBufcIWjtn7BDLmP7
GnSOAHSuMHRdE4LVcgBn3Z+FhrWS8mrZIJ9OYiUzD2RTKBGKmRQKyz+Qz+awOOhArseAtJc4k8XP
hZTQsLYywcXHEWjsY9R1DFrqfMkzhXAwiCHPQ8zdMlCFA0ni10/64PePC42CDeotcSAOaJ0hDL8Z
wWzPcSB1Ho0tpwR/6z6G5963QqPgK6wbaGw+sen2wSX0x0rQ0J2DfZ1YfrYfKFyGqfW04MWnTXh3
zyI0Sou3xoD+Lxtc+5BDbwzY5RrFjFMPJNuApXbsaz4jGLNtiFh3Co2ic6hqoLrpo/FXcTtaxINp
wHPDjOJoC/D9KImO0PiHy0x5YeQAsu4T2HT9Y9XA4k1ARXtQySEccvRi4Q51mTEDMcLXg9jTdEGw
yBNmpO8aYLLdR923MN9Fo0cbgelmIE5gTtAuavMJE0LOvZC2Xnk0vP4aFbyUjveYkxvwRd6NsM1Y
QcRePTOishGTLiMkCi1BvzFI+t98rs60RYT23gAAAABJRU5ErkJggg==')
	#endregion
	$buttonTSHanging.Location = '99, 48'
	$buttonTSHanging.Name = 'buttonTSHanging'
	$buttonTSHanging.Size = '132, 23'
	$buttonTSHanging.TabIndex = 4
	$buttonTSHanging.Text = 'TS Hanging'
	$buttonTSHanging.TextImageRelation = 'ImageBeforeText'
	$buttonTSHanging.UseVisualStyleBackColor = $True
	$buttonTSHanging.add_Click($buttonTSHanging_Click)
	#
	# button_getsccmcache
	#
	$button_getsccmcache.ForeColor = 'Black'
	#region Binary Data
	$button_getsccmcache.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGJSURBVDhPjZK7TgJBGIWtfRALC29rJSDg
pdJgT2zUQhZ8B1nAxCcwMXZAY2fslNn1hvGCiVYWNkaNJBKNrstCosLxnwGXmwt8ySQ7u/Odk5nZ
nm7RouPgozoVAA1Te1TFQWuLNL7AVscsq6sApjhp3QcSgX4Yx1P0XLBCOgaoXC5noTMnjJNZxAOD
MM/95H2K7bQNYIoL+L5DQh4g2Qfj1I/8xQLMy2Xy3toHqBH6WLyGrrpgpH2IyxLJizAzMvCTRaqy
BenfAKa4QXVIBIeEXGnmcpDO8N6S+dqWADXiAd73qdlN8lxdM8nFW5IdlsxpCBByboeah4VcaV4i
OQSYNyQ7G2SOCDhcn5bUqJcOOwld81SbR2uyfoZUuFXmiICDtUmUnzaRDDU1X63Qdo5sZY4VUHrY
QD5N9yyP1OTXPbCwy1bm/J2BxCJelB63UMjQPXM5t0uy+O9tZU79IUpM8aD8HAdetsGUzjKnPoAj
abEJaDEvgjN989V3bWkO4PBWPnrFrAMAen4B5nJpBq01bqoAAAAASUVORK5CYII=')
	#endregion
	$button_getsccmcache.Location = '6, 19'
	$button_getsccmcache.Name = 'button_getsccmcache'
	$button_getsccmcache.Size = '86, 23'
	$button_getsccmcache.TabIndex = 3
	$button_getsccmcache.Text = 'Cache Size'
	$button_getsccmcache.TextImageRelation = 'ImageBeforeText'
	$button_getsccmcache.UseVisualStyleBackColor = $True
	$button_getsccmcache.add_Click($button_getsccmcache_Click)
	#
	# button_getadvertisedsoftware
	#
	$button_getadvertisedsoftware.ForeColor = 'Black'
	#region Binary Data
	$button_getadvertisedsoftware.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGeSURBVDhPnZBNLwNBGMfnSCQ4eLm4+QgO
4tM4Cj6BEELiLA60M7s7m9ZLaEIr6FLqLdLQROKOm3CRCFttUf6eZ1qbFCH6JL/MbDK//8z+Rcdk
6r59Ygut4x5axpO0/k75jAd22BVttNHn95Bndwb1B5/n2GFXNI8l4V09odu5QI9mLv/gwpxlh13R
MLKJWoddUV8J2Eisw5YRaLVALAY4MgoVtiDDoYD1RNw47AYBWkVw+TCF05s+YgDZm0Fa+5G57kU+
D/i5JyKH11KJAkPGqQ6w5hHLNmEmJTBbgffTngDeQeK7kXmqA4bLATvbabj2EiI6TiQQ1WtmdZ0Y
bOVCSQUppWF7yzMOu6KuEuD7Pj31GcViiXgLKNB3ofiCfOGZKCJH/+P7D8ZhN3jBXnqfbpqDple4
9nIVmnCsBVhK0wsU0rs7xjEvqCrxsVxilku8HQz4LLNAZXIXP5dIt38t8VuZlZGhHwJOjjNwrUVE
nBVEnfgXVk3BttR0exiZo0PjmIDG0aT5qGXYFe1DsQPecNp/YIddQdNJdNWG6PwAnGzfM2eNDhIA
AAAASUVORK5CYII=')
	#endregion
	$button_getadvertisedsoftware.Location = '98, 19'
	$button_getadvertisedsoftware.Name = 'button_getadvertisedsoftware'
	$button_getadvertisedsoftware.Size = '132, 23'
	$button_getadvertisedsoftware.TabIndex = 2
	$button_getadvertisedsoftware.Text = 'Advertised Software'
	$button_getadvertisedsoftware.TextImageRelation = 'ImageBeforeText'
	$button_getadvertisedsoftware.UseVisualStyleBackColor = $True
	$button_getadvertisedsoftware.add_Click($button_getadvertisedsoftware_Click)
	#
	# groupbox17
	#
	$groupbox17.Controls.Add($button_sccm_start)
	$groupbox17.Controls.Add($combobox1)
	$groupbox17.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox17.ForeColor = '59, 59, 59'
	$groupbox17.Location = '3, 6'
	$groupbox17.Name = 'groupbox17'
	$groupbox17.Size = '401, 78'
	$groupbox17.TabIndex = 6
	$groupbox17.TabStop = $False
	$groupbox17.Text = 'SCCM Cycles'
	#
	# button_sccm_start
	#
	$button_sccm_start.ForeColor = 'Black'
	$button_sccm_start.Location = '319, 28'
	$button_sccm_start.Name = 'button_sccm_start'
	$button_sccm_start.Size = '75, 23'
	$button_sccm_start.TabIndex = 6
	$button_sccm_start.Text = 'Start'
	$button_sccm_start.UseVisualStyleBackColor = $True
	$button_sccm_start.add_Click($button_sccm_start_Click)
	#
	# combobox1
	#
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '6, 29'
	$combobox1.Name = 'combobox1'
	$combobox1.Size = '307, 21'
	$combobox1.TabIndex = 5
	#
	# tabpage11
	#
	$tabpage11.Controls.Add($button_search)
	$tabpage11.Controls.Add($textbox_search)
	$tabpage11.ImageIndex = 10
	$tabpage11.Location = '4, 22'
	$tabpage11.Name = 'tabpage11'
	$tabpage11.Padding = '3, 3, 3, 3'
	$tabpage11.Size = '1264, 91'
	$tabpage11.TabIndex = 12
	$tabpage11.Text = 'Search'
	$tabpage11.UseVisualStyleBackColor = $True
	#
	# button_search
	#
	$button_search.ForeColor = 'Black'
	#region Binary Data
	$button_search.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMBSURBVDhPjZFbTFRXFIaXSZsYIzbxrSZt
Y/ps04SYphVnmAYZvNvnGiUB24fGtl4evEVmAGHu58yVYQQxqVdKkehQtaaC1Ypo7G2sF6RTOgMS
FI1DJKKoX/emwWB9cSV/zt5rr/Xt868tkVh8iuolFt+dF47GDwdDUaZK5/RZJJZ4oef5Ihytk1Ck
7u14fYLff/uF/8cfKhcwQ+iaSKzuZUAoEsvzBUwejY5wZfAxnx3KsL41w6ZjWTYk++kZHmdsNIeu
0bXPAcFwTMxQVLx+s/lSdzepgXE2tuXIjkD6PpzNjHEgleOrk4MKMkZ31wV0re7RvWIEIxIww+L2
+OHJU75szbEyOJMFTuHrgyUk/4bG1AiOrrvUXrjHs0cPcbl9yk54olcCRkT8AQVwmRNey1vAViP0
D22iQEGaMxC58Rjjz1Gcl3PqkjF21bj1X4jfCImY/gYxfLvFcDdQvmcOVtVs3SVc7S/DUinsG4L9
d6DpFviuj/Pk4QOqqmtwewPiURCxGyJl3nwp88zH5hayQ1tZl5hNV98nLFQAq5ZDKD+8jL0DcP/O
MBWVNVS6TKl0KwvLAiJffDNL7F7BViuksutYE5/FqV4Lp9NWOvss/NT3IR8pO9fuQnvyBFWuIKno
B3IlbhFZ6pMjnze9QVljHmvqZ3Dur1VsPvgmn9ZNZ21ixoSdAqWKlsX0XPuHHTur+PVqmkvGfC5H
bSJL1M3ns4s40/cxP/YWcuLGQn64aaEjbVNPaKPQJdwbhO+THWzb7iR5/BQDww+4ne7gYsiKLPXK
yGKPUKwKC6uFoz3zWJ14nSJlp1jlV9fOw7HDx5ZtDoKxRhr2tXH97F4YbuO8qQAq3lfK17KrIX57
8y1KG15jiU8ocsrJyTOtdmcBnXs2wnfvkDle2vqzWYSsVK+gtUINU9vZ3zuT0qZpmqyb5q71vCdV
TkO2VrjVVvJbHHaaK0podpT8VzMJ0LI75YwaKsVO6dTA5eqZpwLaq4smIJO6GC3R+xfiXSV9qL+v
ECL/Ak6IIfRrg51ZAAAAAElFTkSuQmCC')
	#endregion
	$button_search.Location = '300, 30'
	$button_search.Name = 'button_search'
	$button_search.Size = '75, 24'
	$button_search.TabIndex = 10
	$button_search.Text = 'Search'
	$button_search.TextImageRelation = 'ImageBeforeText'
	$button_search.UseVisualStyleBackColor = $True
	$button_search.add_Click($button_search_Click)
	#
	# textbox_search
	#
	$textbox_search.Location = '8, 33'
	$textbox_search.Name = 'textbox_search'
	$textbox_search.Size = '286, 20'
	$textbox_search.TabIndex = 9
	$textbox_search.Text = 'Search'
	$textbox_search.add_Click($textbox_search_Click)
	$textbox_search.add_KeyPress($textbox_search_KeyPress)
	#
	# tabpage_debug
	#
	$tabpage_debug.Controls.Add($button_getvariablesfilter)
	$tabpage_debug.Controls.Add($button_listvariables)
	$tabpage_debug.Controls.Add($textbox_debug)
	$tabpage_debug.Controls.Add($button_debug)
	$tabpage_debug.ImageIndex = 8
	$tabpage_debug.Location = '4, 22'
	$tabpage_debug.Name = 'tabpage_debug'
	$tabpage_debug.Padding = '3, 3, 3, 3'
	$tabpage_debug.Size = '1264, 91'
	$tabpage_debug.TabIndex = 11
	$tabpage_debug.Text = 'Debug'
	$tabpage_debug.UseVisualStyleBackColor = $True
	#
	# button_getvariablesfilter
	#
	$button_getvariablesfilter.ForeColor = 'Black'
	#region Binary Data
	$button_getvariablesfilter.Image = [System.Convert]::FromBase64String('
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
kJA/exyhBPX6kMwAAAAASUVORK5CYII=')
	#endregion
	$button_getvariablesfilter.Location = '145, 35'
	$button_getvariablesfilter.Name = 'button_getvariablesfilter'
	$button_getvariablesfilter.Size = '150, 24'
	$button_getvariablesfilter.TabIndex = 4
	$button_getvariablesfilter.Text = 'Get Variables (Filtered)'
	$button_getvariablesfilter.TextImageRelation = 'ImageBeforeText'
	$button_getvariablesfilter.UseVisualStyleBackColor = $True
	$button_getvariablesfilter.add_Click($button_getvariablesfilter_Click)
	#
	# button_listvariables
	#
	$button_listvariables.ForeColor = 'Black'
	#region Binary Data
	$button_listvariables.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUND
IHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoi
SFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQ
yhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnp
fIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZ
Yu4V8bZMIUfEiK+ICzO5nCwR3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJ
X3HcVyzgZAvEl3JJS8/hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi
2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti
0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4b
Ky0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNFhImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5
FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH554SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S
8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJVgMWSASpgA+yQB7YBApBMdgJ9oBq
UAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG+UBAU
CcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyCqbASrAUbwwzYCfaBQ+BV
cAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqR
PuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegE
dBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9rB3WH8vE
CrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf+
On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFp
B+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5k
heQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TG
KQhFneJCYVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04b
pr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLC
zFLqUtulrKVFS48vvacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/C
VSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08j
T6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0b
erCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLu
M/5oYmGSYtJoct9UxtTbNN+02/R3Mz0zllmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfi
g6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWN
y8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c+c7tzvMuNi7rXM65
Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU
+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI
8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaI
LoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp
40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp
2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7
zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8V5vDN3cX
KBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33zaEb9j
oNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2v
Tqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sU
moqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/j
PScYJ1p/0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dz
z86dSz83cz7h/HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3
/2TxU/uA5UDHdavrXTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriX
eW/h/sYH6AdFD6UeVjxSfNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2d
mnafvvF05dOJZ+nPFmYKf5X+tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/M
F72Rf3P4LeNt37vwd5MLWe+x7ys/6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAALDAAA
CwwBP0AiyAAAAqlJREFUOE+dkktMU0EUhq9uFBeSGFFYkLhg48qFS0ME5SFqRV6CSOnjtr2l3FYJ
KAnUQlswMaiJRl4KCG4EXRhoeymlLTTRGE2EsiBGQRAwQKAYoia6gd+ZaXONGxec5MuZOZn/P+fO
XC652cclNXnXDjuGcYhij5Jgl2LQ9V8O0uzwIrFpZC35lo/jkpzeF6L7I7rCG+iajOAxoXMigo73
62iXiaCN0Ep4MPEN96e+Q3DPItE58pyjjoOffoCreY1d9ndIaJnC0YfTONEzg9yBLzC4V7G7dhD9
05vgaofQ9+EnIseO4NnMLxywe8HF2zwYX/iN/IE5qF8uQHAtQZS+otq3jLrAKpyhddzwr+J6jKrA
GizBDUxGtrHfJoHbZ/Vgp0G13N56N9ukp59GaupJpKWdQkZGFjIzs/8LDaqVDbKyzrBMDXJyzkGh
yIVaq0NJqRLZZ89jaxvg9QI0vB5l5Wp29h8DheIimSJDXhcWFsNYacagy428giJWrxAtcHkkKFUa
to8a1EUNCouKWb6Qm4fiklJ09z5lHctVWnT39LJphlweCBWV4HVGtHV0gmq5PTEDjUYHpVINFRHw
WgMEo4hXb96itbUdBWQal1uCaK5itfaOR1CWa0C1soFJNMNERqZZwxtYd6Vai8vkDnqe9LHuQy4X
dAYjNFo91LQhMeHi6qPPWFNTK0PFC4uL+Dw3D/+oH/kFl+CRvBAt10h9CXPz8wiOjeFKmYr8Bzcl
rC/OIhwOy1CDESJ0S8OwNjSQ+ylhNdFSBZ8/wOq2RnvUIL5hmPTfwvLKiozBaEJwPEQO+9HocLIJ
aFSar2IsROsBOJqaY59Q3R+iJnSSOGuU2y132JPphQqo1Dystkb4gwG03L3H6gbBBJ4XkK00bXIk
UgjHdwaX8gf2UIwhS7FQngAAAABJRU5ErkJggg==')
	#endregion
	$button_listvariables.Location = '9, 35'
	$button_listvariables.Name = 'button_listvariables'
	$button_listvariables.Size = '130, 24'
	$button_listvariables.TabIndex = 3
	$button_listvariables.Text = 'Get Variables'
	$button_listvariables.TextImageRelation = 'ImageBeforeText'
	$button_listvariables.UseVisualStyleBackColor = $True
	$button_listvariables.add_Click($button_listvariables_Click)
	#
	# textbox_debug
	#
	$textbox_debug.AcceptsReturn = $True
	$textbox_debug.AutoCompleteMode = 'SuggestAppend'
	$textbox_debug.AutoCompleteSource = 'CustomSource'
	$textbox_debug.BackColor = 'WindowText'
	$textbox_debug.Font = 'Lucida Console, 8.25pt'
	$textbox_debug.ForeColor = 'Info'
	$textbox_debug.Location = '9, 11'
	$textbox_debug.Name = 'textbox_debug'
	$textbox_debug.Size = '512, 18'
	$textbox_debug.TabIndex = 2
	$textbox_debug.Text = '<Enter PS Command>'
	$textbox_debug.add_Click($textbox_debug_Click)
	$textbox_debug.add_KeyPress($textbox_debug_KeyPress)
	#
	# button_debug
	#
	$button_debug.ForeColor = 'Black'
	#region Binary Data
	$button_debug.Image = [System.Convert]::FromBase64String('
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
sUhhiLcHpfwD8w947NiC0pEAAAAASUVORK5CYII=')
	#endregion
	$button_debug.Location = '527, 6'
	$button_debug.Name = 'button_debug'
	$button_debug.Size = '75, 24'
	$button_debug.TabIndex = 1
	$button_debug.Text = 'Run'
	$button_debug.TextImageRelation = 'ImageBeforeText'
	$button_debug.UseVisualStyleBackColor = $True
	$button_debug.add_Click($button_debug_Click)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 853'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Padding = '3, 0, 0, 0'
	$statusbar1.Size = '1272, 20'
	$statusbar1.TabIndex = 7
	$statusbar1.Text = 'statusbar1'
	#
	# toolstrip1
	#
	$toolstrip1.BackgroundImageLayout = 'None'
	$toolstrip1.GripMargin = '0, 0, 0, 0'
	$toolstrip1.GripStyle = 'Hidden'
	[void]$toolstrip1.Items.Add($textbox_computername)
	[void]$toolstrip1.Items.Add($toolstripseparator11)
	[void]$toolstrip1.Items.Add($button_Check)
	[void]$toolstrip1.Items.Add($toolstriplabel2)
	[void]$toolstrip1.Items.Add($toolstripseparator12)
	[void]$toolstrip1.Items.Add($textbox_username)
	[void]$toolstrip1.Items.Add($toolstripseparator10)
	[void]$toolstrip1.Items.Add($button_GetPC)
	[void]$toolstrip1.Items.Add($toolstripseparator4)
	[void]$toolstrip1.Items.Add($Toolstrip_os)
	[void]$toolstrip1.Items.Add($Toolstrip_OSStatus)
	[void]$toolstrip1.Items.Add($toolstripseparator2)
	[void]$toolstrip1.Items.Add($toolstrip_home)
	[void]$toolstrip1.Items.Add($toolstrip_home_status)
	[void]$toolstrip1.Items.Add($toolstripseparator1)
	[void]$toolstrip1.Items.Add($toolstrip_user)
	[void]$toolstrip1.Items.Add($toolstrip_user_status)
	$toolstrip1.Location = '0, 24'
	$toolstrip1.Name = 'toolstrip1'
	$toolstrip1.Padding = '5, 0, 5, 0'
	$toolstrip1.RenderMode = 'Professional'
	$toolstrip1.Size = '1272, 26'
	$toolstrip1.TabIndex = 6
	$toolstrip1.Text = 'toolstrip1'
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($FileToolStripMenuItem)
	[void]$menustrip1.Items.Add($toolstripmenuitem1)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Padding = '5, 2, 0, 2'
	$menustrip1.RenderMode = 'Professional'
	$menustrip1.Size = '1272, 24'
	$menustrip1.TabIndex = 0
	$menustrip1.Text = 'menustrip1'
	#
	# toolstriplabel2
	#
	$toolstriplabel2.Name = 'toolstriplabel2'
	$toolstriplabel2.Size = '0, 23'
	#
	# FileToolStripMenuItem
	#
	[void]$FileToolStripMenuItem.DropDownItems.Add($toolsToolStripMenuItem)
	[void]$FileToolStripMenuItem.DropDownItems.Add($optionsToolStripMenuItem)
	[void]$FileToolStripMenuItem.DropDownItems.Add($quitToolStripMenuItem)
	$FileToolStripMenuItem.Name = 'FileToolStripMenuItem'
	$FileToolStripMenuItem.Size = '37, 20'
	$FileToolStripMenuItem.Text = 'File'
	#
	# button_Check
	#
	$button_Check.BackColor = 'Transparent'
	$button_Check.BackgroundImageLayout = 'None'
	$button_Check.ForeColor = 'Desktop'
	#region Binary Data
	$button_Check.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAG0SURBVDhPxVJtK0NhGN6P8Q8kYdsh8xd8ky/4
QGos2WjvK4pIfJRpFMU2Lzsv28hstlrblCLCVpLVDGOW1w+X5znbULPxzVV3p3Oe+7rvc13PJfkX
2OatCIXCrsJrZTQaOcj1LGSk6vQC7Iuz2I9GoepTotBSHpQYuAaEC2AtDqycATU6N7SqHkquzneV
QZOJh+2cEAYdWDh8g8b3BKU3h+nYM+Tmrd+3yww8rJEMxmNArdqOsdAduvl7GH03oMMLbaWgh1I9
h6M9AfU6FiP+dEKz+4qGIScG3Eko2SSazWUGUM3WU2Dp6DFep3WJOhnyzbKdSnTxD2B0G2hfvUCL
RSgdQN0OpqlmO0YjwEQwnaBkclQtJc+pYAqtzltCFreXGsgYWDiJaUvH76LmYf8rBj2XCfpXJ0E3
GKMARX7zz+7LDRzmDl6g9b9gJpIlmh3o8eTQsRyPN5o+ieWvrt7gxmQ4B7V4XVkYd9JgtOto28wU
N1eGgySsloRERRzv9WTRyWXQy15BkXe8cmhotmk8acIYsxfN5CoVZq7odmUyhYsXAqp+MdtFnd/r
T6gi9efmL0gkHz/KK4p1BUlkAAAAAElFTkSuQmCC')
	#endregion
	$button_Check.ImageAlign = 'MiddleRight'
	$button_Check.ImageTransparentColor = 'White'
	$button_Check.Name = 'button_Check'
	$button_Check.Size = '60, 23'
	$button_Check.Text = 'Check'
	$button_Check.TextImageRelation = 'TextBeforeImage'
	$button_Check.add_Click($button_check_click)
	#
	# toolstripmenuitem1
	#
	[void]$toolstripmenuitem1.DropDownItems.Add($aboutToolStripMenuItem)
	$toolstripmenuitem1.Name = 'toolstripmenuitem1'
	$toolstripmenuitem1.Size = '24, 20'
	$toolstripmenuitem1.Text = '?'
	#
	# aboutToolStripMenuItem
	#
	$aboutToolStripMenuItem.Name = 'aboutToolStripMenuItem'
	$aboutToolStripMenuItem.Size = '152, 22'
	$aboutToolStripMenuItem.Text = 'About'
	$aboutToolStripMenuItem.add_Click($aboutToolStripMenuItem_Click)
	#
	# textbox_username
	#
	$textbox_username.Name = 'textbox_username'
	$textbox_username.Size = '100, 26'
	$textbox_username.Text = 'Username'
	$textbox_username.TextBoxTextAlign = 'Center'
	$textbox_username.add_KeyPress($textbox_username_KeyPress)
	#
	# button_GetPC
	#
	$button_GetPC.DisplayStyle = 'Text'
	#region Binary Data
	$button_GetPC.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button_GetPC.ImageTransparentColor = 'Magenta'
	$button_GetPC.Name = 'button_GetPC'
	$button_GetPC.Size = '47, 23'
	$button_GetPC.Text = 'Get PC'
	$button_GetPC.add_Click($button_GetPC_Click)
	#
	# toolstripseparator10
	#
	$toolstripseparator10.Name = 'toolstripseparator10'
	$toolstripseparator10.Size = '6, 26'
	#
	# quitToolStripMenuItem
	#
	$quitToolStripMenuItem.Name = 'quitToolStripMenuItem'
	$quitToolStripMenuItem.Size = '152, 22'
	$quitToolStripMenuItem.Text = 'Beenden'
	$quitToolStripMenuItem.add_Click($quitToolStripMenuItem_Click)
	#
	# toolstripseparator4
	#
	$toolstripseparator4.Name = 'toolstripseparator4'
	$toolstripseparator4.Size = '6, 26'
	#
	# toolsToolStripMenuItem
	#
	[void]$toolsToolStripMenuItem.DropDownItems.Add($aDExplorerToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($nirLauncherToolStripMenuItem1)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($procexpToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($procmonToolStripMenuItem)
	#region Binary Data
	$toolsToolStripMenuItem.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKmSURBVDhPpZJZSJRRFIBvWmmmhr2YplAT
CCW0UikkURG+JVFptEAkJpGYiDMu45qmaWZoLhDVQ76UFEN7zjhaYpYNmgsY2Kg1Lo1jpWkiFvR1
f39UDB+CDnw/h3PP/bj33F8A/4X6kVF889bTlPwC9IVF6K9cXRi5pvTI3ifTm5SYEVy+Z1CSbf9C
odqrhiJ44SKq6mRa6yQwL5YsmU+trNU5C+plT4OkUfJKiI5ZgdlFMFheQrcuVhJHd2IcPUnx9CSr
9OrO050Qy82yCvTF5aSVVFASc049xYxgqLyYppXONHkI3q4QWLxdsfi6Y/Fxo9nLiRuHwqh5Y2F8
6id9Qw5evm4iu+DKb1XgJjBK1/NpHxha2zHJ3LhIrXedjiA+9zK2QTuGh4/JuVRIanYeWbn56lPU
uAr6z57AnniOPkXQ0oYjJRZ7ppah9Hi+aaPR5RXQ2WXlRX0jurQMHAf3qUNXBKalgpHrxXRpPDH7
ulLr54Y1YCU9AV7YNMsZ8BbcefyMLmsPLe/aiNMmo03NRJ+ZrZ5gWpCbRO/GVXza4odtqx8Dm30Y
DfTk8JmLZCcXYetsp7WtnY7O93z5Pob96wiJqenqDIxyiCPaSPp2+NMftAb7Tn8mtnhxPPoCLqVW
Xk1AzDMbNbdvEK1L4UxyBlkR4XNXMMoZjEaFMbRLw3DIOiaCVnMiJo9lpR9o+QHbK/vZ/2iMk1EZ
/Nq0gqlje7BGHpt7xhr5CpNHQxgP3cBE6HrYvRqna520TUJwpY0DD4YJvv+ZUwlF/N67lqkjwZjk
zzUrMHmIMUVilJjlaSyy7FHWwe4qB4ceONh79yPhR87TLOt18rpKr8ldjM0KZGyWzPvfl+cYq9cV
NRBY0ohXmqH673WJsmdWsFBoJDPNSr5ACPEHYgQRrGo3yQQAAAAASUVORK5CYII=')
	#endregion
	$toolsToolStripMenuItem.Name = 'toolsToolStripMenuItem'
	$toolsToolStripMenuItem.Size = '152, 22'
	$toolsToolStripMenuItem.Text = 'Tools'
	#
	# aDExplorerToolStripMenuItem
	#
	$aDExplorerToolStripMenuItem.Name = 'aDExplorerToolStripMenuItem'
	$aDExplorerToolStripMenuItem.Size = '139, 22'
	$aDExplorerToolStripMenuItem.Text = 'ADExplorer'
	$aDExplorerToolStripMenuItem.add_Click($aDExplorerToolStripMenuItem_Click)
	#
	# procexpToolStripMenuItem
	#
	$procexpToolStripMenuItem.Name = 'procexpToolStripMenuItem'
	$procexpToolStripMenuItem.Size = '139, 22'
	$procexpToolStripMenuItem.Text = 'Procexp'
	$procexpToolStripMenuItem.add_Click($procexpToolStripMenuItem_Click)
	#
	# procmonToolStripMenuItem
	#
	$procmonToolStripMenuItem.Name = 'procmonToolStripMenuItem'
	$procmonToolStripMenuItem.Size = '152, 22'
	$procmonToolStripMenuItem.Text = 'Procmon'
	$procmonToolStripMenuItem.add_Click($procmonToolStripMenuItem_Click)
	#
	# nirLauncherToolStripMenuItem1
	#
	$nirLauncherToolStripMenuItem1.Name = 'nirLauncherToolStripMenuItem1'
	$nirLauncherToolStripMenuItem1.Size = '139, 22'
	$nirLauncherToolStripMenuItem1.Text = 'NirLauncher'
	$nirLauncherToolStripMenuItem1.add_Click($nirLauncherToolStripMenuItem1_Click)
	#
	# optionsToolStripMenuItem
	#
	$optionsToolStripMenuItem.Name = 'optionsToolStripMenuItem'
	$optionsToolStripMenuItem.Size = '152, 22'
	$optionsToolStripMenuItem.Text = 'Optionen'
	$optionsToolStripMenuItem.add_Click($optionsToolStripMenuItem_Click)
	#
	# textbox_computername
	#
	$textbox_computername.AcceptsReturn = $True
	$textbox_computername.AcceptsTab = $True
	$textbox_computername.AutoCompleteMode = 'SuggestAppend'
	$textbox_computername.AutoCompleteSource = 'CustomSource'
	$textbox_computername.BackColor = '255, 203, 26'
	$textbox_computername.BorderStyle = 'FixedSingle'
	$textbox_computername.CharacterCasing = 'Upper'
	$textbox_computername.Font = 'Consolas, 12pt'
	$textbox_computername.Name = 'textbox_computername'
	$textbox_computername.Size = '150, 26'
	$textbox_computername.Text = 'LOCALHOST'
	$textbox_computername.TextBoxTextAlign = 'Center'
	$textbox_computername.ToolTipText = 'Geben Sie einen Computernamen ein'
	$textbox_computername.add_KeyPress($textbox_computername_KeyPress)
	$textbox_computername.add_TextChanged($textbox_computername_TextChanged)
	#
	# Toolstrip_os
	#
	$Toolstrip_os.Font = 'Segoe UI, 9pt, style=Bold'
	$Toolstrip_os.Name = 'Toolstrip_os'
	$Toolstrip_os.Size = '0, 23'
	#
	# Toolstrip_OSStatus
	#
	$Toolstrip_OSStatus.Name = 'Toolstrip_OSStatus'
	$Toolstrip_OSStatus.Size = '0, 23'
	#
	# toolstrip_home
	#
	$toolstrip_home.Font = 'Segoe UI, 9pt, style=Bold'
	$toolstrip_home.Name = 'toolstrip_home'
	$toolstrip_home.Size = '0, 23'
	#
	# toolstrip_home_status
	#
	$toolstrip_home_status.Name = 'toolstrip_home_status'
	$toolstrip_home_status.Size = '0, 23'
	$toolstrip_home_status.add_Click($toolstrip_home_status_Click)
	#
	# toolstrip_user
	#
	$toolstrip_user.Font = 'Segoe UI, 9pt, style=Bold'
	$toolstrip_user.Name = 'toolstrip_user'
	$toolstrip_user.Size = '0, 23'
	#
	# toolstrip_user_status
	#
	$toolstrip_user_status.Name = 'toolstrip_user_status'
	$toolstrip_user_status.Size = '0, 23'
	$toolstrip_user_status.add_Click($toolstrip_user_status_Click)
	#
	# toolstripseparator2
	#
	$toolstripseparator2.Name = 'toolstripseparator2'
	$toolstripseparator2.Size = '6, 26'
	$toolstripseparator2.Visible = $False
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = 'toolstripseparator1'
	$toolstripseparator1.Size = '6, 26'
	$toolstripseparator1.Visible = $False
	#
	# toolstripseparator11
	#
	$toolstripseparator11.Name = 'toolstripseparator11'
	$toolstripseparator11.Size = '6, 26'
	#
	# toolstripseparator12
	#
	$toolstripseparator12.Name = 'toolstripseparator12'
	$toolstripseparator12.Size = '6, 26'
	#
	# imagelist1
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAACyFgAAAk1TRnQBSQFMAgEBCwEAAYgBAQGIAQEBEAEAARABAAT/AQkBAAj/AUIBTQE2
AQQGAAE2AQQCAAEoAwABQAMAATADAAEBAQABCAYAAQwYAAGAAgABgAMAAoABAAGAAwABgAEAAYAB
AAKAAgADwAEAAcAB3AHAAQAB8AHKAaYBAAEzBQABMwEAATMBAAEzAQACMwIAAxYBAAMcAQADIgEA
AykBAANVAQADTQEAA0IBAAM5AQABgAF8Af8BAAJQAf8BAAGTAQAB1gEAAf8B7AHMAQABxgHWAe8B
AAHWAucBAAGQAakBrQIAAf8BMwMAAWYDAAGZAwABzAIAATMDAAIzAgABMwFmAgABMwGZAgABMwHM
AgABMwH/AgABZgMAAWYBMwIAAmYCAAFmAZkCAAFmAcwCAAFmAf8CAAGZAwABmQEzAgABmQFmAgAC
mQIAAZkBzAIAAZkB/wIAAcwDAAHMATMCAAHMAWYCAAHMAZkCAALMAgABzAH/AgAB/wFmAgAB/wGZ
AgAB/wHMAQABMwH/AgAB/wEAATMBAAEzAQABZgEAATMBAAGZAQABMwEAAcwBAAEzAQAB/wEAAf8B
MwIAAzMBAAIzAWYBAAIzAZkBAAIzAcwBAAIzAf8BAAEzAWYCAAEzAWYBMwEAATMCZgEAATMBZgGZ
AQABMwFmAcwBAAEzAWYB/wEAATMBmQIAATMBmQEzAQABMwGZAWYBAAEzApkBAAEzAZkBzAEAATMB
mQH/AQABMwHMAgABMwHMATMBAAEzAcwBZgEAATMBzAGZAQABMwLMAQABMwHMAf8BAAEzAf8BMwEA
ATMB/wFmAQABMwH/AZkBAAEzAf8BzAEAATMC/wEAAWYDAAFmAQABMwEAAWYBAAFmAQABZgEAAZkB
AAFmAQABzAEAAWYBAAH/AQABZgEzAgABZgIzAQABZgEzAWYBAAFmATMBmQEAAWYBMwHMAQABZgEz
Af8BAAJmAgACZgEzAQADZgEAAmYBmQEAAmYBzAEAAWYBmQIAAWYBmQEzAQABZgGZAWYBAAFmApkB
AAFmAZkBzAEAAWYBmQH/AQABZgHMAgABZgHMATMBAAFmAcwBmQEAAWYCzAEAAWYBzAH/AQABZgH/
AgABZgH/ATMBAAFmAf8BmQEAAWYB/wHMAQABzAEAAf8BAAH/AQABzAEAApkCAAGZATMBmQEAAZkB
AAGZAQABmQEAAcwBAAGZAwABmQIzAQABmQEAAWYBAAGZATMBzAEAAZkBAAH/AQABmQFmAgABmQFm
ATMBAAGZATMBZgEAAZkBZgGZAQABmQFmAcwBAAGZATMB/wEAApkBMwEAApkBZgEAA5kBAAKZAcwB
AAKZAf8BAAGZAcwCAAGZAcwBMwEAAWYBzAFmAQABmQHMAZkBAAGZAswBAAGZAcwB/wEAAZkB/wIA
AZkB/wEzAQABmQHMAWYBAAGZAf8BmQEAAZkB/wHMAQABmQL/AQABzAMAAZkBAAEzAQABzAEAAWYB
AAHMAQABmQEAAcwBAAHMAQABmQEzAgABzAIzAQABzAEzAWYBAAHMATMBmQEAAcwBMwHMAQABzAEz
Af8BAAHMAWYCAAHMAWYBMwEAAZkCZgEAAcwBZgGZAQABzAFmAcwBAAGZAWYB/wEAAcwBmQIAAcwB
mQEzAQABzAGZAWYBAAHMApkBAAHMAZkBzAEAAcwBmQH/AQACzAIAAswBMwEAAswBZgEAAswBmQEA
A8wBAALMAf8BAAHMAf8CAAHMAf8BMwEAAZkB/wFmAQABzAH/AZkBAAHMAf8BzAEAAcwC/wEAAcwB
AAEzAQAB/wEAAWYBAAH/AQABmQEAAcwBMwIAAf8CMwEAAf8BMwFmAQAB/wEzAZkBAAH/ATMBzAEA
Af8BMwH/AQAB/wFmAgAB/wFmATMBAAHMAmYBAAH/AWYBmQEAAf8BZgHMAQABzAFmAf8BAAH/AZkC
AAH/AZkBMwEAAf8BmQFmAQAB/wKZAQAB/wGZAcwBAAH/AZkB/wEAAf8BzAIAAf8BzAEzAQAB/wHM
AWYBAAH/AcwBmQEAAf8CzAEAAf8BzAH/AQAC/wEzAQABzAH/AWYBAAL/AZkBAAL/AcwBAAJmAf8B
AAFmAf8BZgEAAWYC/wEAAf8CZgEAAf8BZgH/AQAC/wFmAQABIQEAAaUBAANfAQADdwEAA4YBAAOW
AQADywEAA7IBAAPXAQAD3QEAA+MBAAPqAQAD8QEAA/gBAAHwAfsB/wEAAaQCoAEAA4ADAAH/AgAB
/wMAAv8BAAH/AwAB/wEAAf8BAAL/AgAD/wIAAfMLAAHzAwAB/w3zAf8DAAH0AfMB9BsAAesB/wIA
Af8B9AHzAfQB/wIAAf8B6wMAAbwBRgFMAQ8BWAEPAXkBDwGdAZEBswEPAqcBvAMAAXMBLgFzBgAD
8xIAAeoB8QH/AfMBvAFLASQBSwG8AfMB/wHxAeoDAAElAUYBTQERAVkBQwF+AUMBwQG6AdoBEQHm
AacBhgMAAS4BNgEvAfMB9AMAAfMBUQFLAVEB8xEAAhIB8wEqASQBKwEkASsCJAHzAhIDAAElAUwB
TQERAVkBQwF+AREBwQG6AdoBEQHOAc8BhgPzAS4BVwEvAS4BeAPzAVIBdAFTARoBUhEAAfEBSgEk
ATEBKgFSASQBUgEkASsBJAFKAfEDAAElARcBTQERAVkBQwF+AUMBwQG6AdoBEQHOAc8BhgEvAy4B
WAEvAi4BUALsAe0B9wGZAcMBUhIAASoBKwFSASsBUwEkAVMBKgFSAioEAAElAW8BTQFDAVkBFQF+
ARUBwQG6AdoBQwHOAc8BhgEuB1gBLgH0Ae8B7AHvAfMBGgFSEgABJAFMAXoBTAF6ASQBegFMAXoB
TAEkBAABJQFvAU0BFQFZARUBfgEVAcEBugHaARUBzgHPAYYBHAMvAXkBUAIvAi4BUAHxAewB8AFS
EQAB8wH0ASQBUgGaAVIBmgElAZoBUgGaAVIBJAH0AfMCAAElARYBTQEVAVkBFAF+ARQBwQG6AdoB
FQHmAbUBhgIAAi4BeQEvBFgBLgEZAe8B7BIAAesB9wEkAXUBmgJMASsCTAGaAXQBJAH3AesCAAEl
AZQBTQEUAXoBFAF+ARQBwQG6AdsBFAHmAbUBhgIAAVABLgF+AS8BeQMuAVAB3AH0AewSAAHxAW0B
JAIrAXQDegF0AUwBKwEkAW0B8QIAASUBlAHjARQBegETAX4BFAHBAboB2wEUAeYBtQGGAgAB7QFQ
Ai4BeQEuAuEC3AH/AewTAAH/ASQDegNTA3oBJAH/AwABJQEaAXUBEwF6ARIBnwETAcEBugHbARMB
5gEJAYYCAAHtAf8B1QEuAX4BLgEJA9wB/wHsEwABvAEjAUwHUgErASMBvAMAASUBGgF1ARIBegES
AZ8BEgHBAbsB2wETAdUBvAGGAgAB7AH/AdUCLgFQAQkD3AH2AewTAAISAUsBKgUrASoBSwISAwAB
JQG9AXUBEgF6ARIBnwESAcEBuwHbARIB1QHxAYYCAAEHAbwBGQHbAfQCGQEJAboBGQG8AQcTAAFt
AgABvAFLAiQBIwFLAbwCAAFtAwABJQEaAXUBEgF6ARIBnwESAcEBuwHbARIB1gHyAYYCAAH/Ae0B
/wEZArQCugEZAf8B7QH/EwAB6wMAARMB9wHsAeoBEQMAAesDAAElARoB9AG8AfYBvAH2AbwC/wH0
AbwB9AHdAYYDAAH/AZIBvAT/AbwB7QH/GAAB9wEUARUBQwH3BwABGwElAUwB6gFSAeoBVwHqAZ0B
kAGzARIBpwGGAfEEAAH/AbwE7QG8Af8dAAH/AbwB8AHyAQcB/wMAAf8B9AjzAfQB/wIAAfQO8wH0
AQABvAGLCoYBiwG8AfQIAAH/AfMB7AETAeoB7AHyAf8BAAH/AfAB7AEUBkMBFAHsAfAB/wEAAQcO
9wEHAbwBtAGuAc8BrgGLAa4CtAWLAbQBBwgAAbwB7AHqAuwBbQHsAQcBAAHvARUBEgHrAewB7QL3
Ae0B7AHrAeoBFQHvAQAB9w7/AfcBiwGuAYsBrgGGAYsCrgKLAbQEhgGLCAAB8wHqAewC9AHtAeoB
8gEAARUB6gFtAesB7AHtAZIB7QPsAesBbQEVAQAB9wH/AbQKrQG0Af8B9wOGBP8BtQX/AmYBhggA
AfIBEwHrAfMB9AHtARMB8QEAARUB6gFtAesC7AGSAe0C7ALrAW0BFQEAAfcB/wGtCrQBrQH/AfcB
hgJmAf8DiwGuBf8BhgFmAYYDAAH/AfMB8AH/AQABvAHsAeoC7AHqAewBBwEAAUMB6gFtAesC7AGS
Ae0C7AHrAm0BQwEAAfcB/wG0Cq0BtAH/AfcBhgJmAf8DiwGuBf8BZgKGAQAC9AH/Ae8BbQHzAf8B
8gH0AewBEwESAewB8wH/AQABQwFtAZIBBwHyBPEB8gG8AZIBbQFDAQAB9wz/AfYB/wH3A4YB/wGL
Av8BiwL/AfIC/wGLAa4BhgEAAfcBEgHsARIBQwLsAUMB8gG8AfIB8wEHAf8CAAHtAfABkgHsAm0C
6wJtAewBkgHwAe0BAAH3Af8BFAHqAusB6gETAf8F9AH/AZIBhgKLAf8EiwGuAYYBZgGLAYYCiwGG
AQAB8gETAUMBEwESARQBQwHsAf8HAAHsARUBEwFtAewB7QGSAe0C7AFtARIBFAHsAQAB9wz/AfQB
/wH3AYYCiwH/AYsC/wGLAa4D/wGGAs8BhgH0AfABEwHsAfIB9AEHARQB7AHzAv8FAAEVAm0B6wLs
AZIB7QLsAusBbQEVAQAB9wH/ARQBEgHqAm0C6wJtAeoBEgEUAf8B9wGGAq4B/wSLAWYD/wFmAc8B
tAGGAewBEgEUAQcB/wEAAfQB6gFDAesB8AH/BQABFQHqAW0B6wLsAZIB7QLsAesCbQFDAQAB9w7/
AfcBhgLPAf8BrQL/Ac8BtQP/Ac8BtAG1AYYBBwHsARQB9wH0Af8B8gISAe8B8wH/BQABQwHqAZIB
BwbxAQcBkgFtAUMBAAH3Af8BFAESAeoCbQPrAW0B6gESARQB/wH3AYYCzwH/Aa0DzwH/Aa4BiwG0
A7UBhgH/AfIBEwESAfcBBwHsARUB7AL/BgABQwHwAe8BkgbsAZIB7wHwAUMBAAH3Af8M8wH/AfcB
hgK0Af8BtAPPAf8FtQEJAYYBAAEHBhQBEgHzBwABQwzsAUMBAAH3Af8M8gH/AfcBiwK0AYsBhgG1
AfMC/wW1AQkBiwEAAfEBBwHyAewBEwG8AfIB9wH0BwABvAEUAesB7Ab3AewB6wEUAbwBAAH3Dv8B
9wG8AbsJtQO7AfABBwMAAf8BvAHsAfQLAAHzAZIBFAZDARQBkgHzAgAB7wL3CpIC9wHvAQAB8QGL
CoYBiwHxAwAB9ArzAfQFAAH/BPMB/wgADvMEAAHzAQAB8wH/AfMBAAHzAQAB8wEAAfMEAAHvAewB
7QbrAe0B7AHvBQABBwSRAQcG8wH0AQADEgITBFICEwMSAwAB9AF0AfMBdAHyAXQB8wF0AfMBdAHz
AXQB9AMAAewCBwEkBFIBJAIHAewCAAH0AvMBkQG1ArsBtQeRAfcBAAPsAusBUgKgAVIC6wPsAgAB
8wH3AeoJbQHqAfcB8wIAAewB9gH/ASQEUgEkAf8B9gHsAgAB7wSRAq4EkQH3AgcBvAGRBgABmgJS
AZoHAAF0AuoJEgLqAXQCAAHtAQgBvAEkAXQCUgF0ASQBvAEIAe0CAAGRAbsB/wb0Af8BuwGRAQcB
uwG8AZECAAH0BPMBbQEUBPMB9AMAAfMB6gFtCRIBbQHqAfMCAAHtAQgB8AEkAXkCKwF5ASQB8AEI
Ae0CAAGRAbsBswLUAtoC1AGzAQcBkQEHAbsBvAGRAgABBwrvAQcDAAF0AeoB6wESBBMEEgHrAeoB
dAIAAe0BGgHwASoBmQIrAZkBKgHwARoB7QIAAZEBvAGzBtQBswG8AZECCQHwAZECAAHvCv8B7wMA
AfIB6gHrARMB8QEHAf8BvAFtAxIB6wHqAfMBAAH0AZIBGwHwASoBmQIaAZkBKgHwARsBkgH0AQAB
kQHwArMB1AHaBNsBvAGRAi4BGQGRAgAB7wP/AW0C6wFtA/8B7wMAAXQB6gHsARMEFAETAhIBEwHs
AeoBdAEAAXQB9wHzAfABUgQqAVIB8AHzAfcBdAEAAZEB8gOzAdQD2wHVAfABkQI1AfMBkQIAAe8D
/wRtA/8B7wMAAfMB6gHsARQB8QK8AZIEEwHsAeoB8wEAASQBSwH/BxsB8AH/AUsBJAEAAZEB8wGs
BLMDtAHxAZECtQHzAZECAAHvAf8BbQESBOoBEgFtAf8B7wMAAXQB6gHtBhQDEwHtAeoBdAIAASoB
UQMbAccBpgMbAVEBKgIAAZEI9ALzAZECGQHzAZECAAHvAf8BFAETBBIBEwEUAf8B7wMAAfMB6gGS
ARQB8QG8Ae8CvAHwAhQBkgHqAfMCAAIqAVIB9AEbAq0BGwH0AVIBJAMAAQcG7QSRA7UB8wGRAgAB
7wH/AUMBFQQUARUBQwH/Ae8DAAF0AeoB9wkUAfcB6gF0AgABKgFSASoBUgH2AvQB/wFSASQB9woA
AZEB9AXxAfQBkQIAAe8B/wEQAUMBcwJDAXMBQwEQAf8B7wMAAfMB6gHvARUIFAHvAeoB8wIAAXkC
KwEqAVIC/wFSASoB8wGSCgABkQH0AQkCvAIJAfQBkQIAAe8B/wEPARABcwIQAXMBEAEPAf8B7wMA
AXQB6gHvAewH7QHsAe8B6gF0BgABKgJSASoB9wEbAZIKAAGRB/8BkQIAAe8B9Aj/AfQB7wQAAe8L
6gHvCAACKwEAAbwB9wG8CgABBweRAQcCAAG8Cu8BvAUAAVIBAAFSAQABUgEAAVIBAAFSAQABUgIA
AUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEBAAEBBQABgAEBFgAD/wEAAb8B+wGAAQAB4wH/AgAB
mAEzAYABAAHjAfECAAGAAQMBgAEAAuACAAGAAQMBgAUAAYABAwGABQABwAEHAYAFAAHAAQcBgAIA
AQEDAAEBAYABAAHAAQMDAAEBAYABAAHAAQMDAAEBAYABAAHAAQMCAAGAAQMBgAEAAcABAwIAAYAB
AwGAAQABwAEDAgABgAEDAYABAAHAAQMCAAGwARsBgAEAAcABAwIAAbgBOwGAAQAB4AEHAgAB+AE/
AYABAAHwAQ8CAAH/AYEBwAEDAgABgAEAAf8BAAGAAQEEAAH/AQABgAEBBAAB/wEAAYABAQQAAf8B
AAGAAQEEAAHhAQABgAEBBAABgAEAAYABAQQAAYABAQGAAQEEAAGAAT8BgAEBBQABDwGAAQEEAAEE
AQ8BgAEBBQABDwGAAQEFAAEfAYABAQQAAYABPwGAAQEEAAGAAT8BgAEBBAAB4QH/AcABAwIAAYAB
AQHAAQMB4AF/AYABAQHoAasBwAEDAeABAAGAAQEBwAEBAcABAwIAAYABAQGAAQABwAEDAgAB/AE/
AYABAAHAAQMCAAHAAQMBgAEAAcABAwIAAcABAwGAAQABwAEDAgABwAEDAYABAAGAAQECAAHAAQMB
gAEAAYABAQIAAcABAwGAAQABgAEBAgABwAEDAYABAAHAAQMCAAHAAQMBgAEAAcABBwIAAcABAwGA
AQABwAEHAf4BAAHAAQMBgAEAAcABBwH+AQABwAEDAYABAAH8AQcB/gEAAcABAwHAAQEB/gFHAf4B
AAHAAQMB6gGrCw=='))
	#endregion
	$imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist1.TransparentColor = 'Transparent'
	#
	# contextmenustrip1
	#
	$contextmenustrip1.Name = 'contextmenustrip1'
	$contextmenustrip1.Size = '61, 4'
	#
	# folderbrowserdialog1
	#
	$menustrip1.ResumeLayout()
	$toolstrip1.ResumeLayout()
	$tabpage_debug.ResumeLayout()
	$tabpage11.ResumeLayout()
	$groupbox17.ResumeLayout()
	$groupbox18.ResumeLayout()
	$tabpage10.ResumeLayout()
	$groupbox23.ResumeLayout()
	$tabpage8.ResumeLayout()
	$groupbox22.ResumeLayout()
	$tabpage6.ResumeLayout()
	$groupbox4.ResumeLayout()
	$groupbox8.ResumeLayout()
	$tabpage5.ResumeLayout()
	$groupbox20.ResumeLayout()
	$groupbox21.ResumeLayout()
	$chart1.EndInit()
	$tabpage4.ResumeLayout()
	$groupbox19.ResumeLayout()
	$tabpage3.ResumeLayout()
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox5.ResumeLayout()
	$groupbox6.ResumeLayout()
	$groupbox7.ResumeLayout()
	$groupbox16.ResumeLayout()
	$tabpage2.ResumeLayout()
	$groupbox9.ResumeLayout()
	$groupbox11.ResumeLayout()
	$groupbox12.ResumeLayout()
	$groupbox13.ResumeLayout()
	$groupbox14.ResumeLayout()
	$groupbox15.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol_Home.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	
	# Configuration	
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!C O N F I G U R A T I O N!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	
	# Snapins
	Add-PSSnapin Quest.ActiveRoles.ADManagement -ErrorAction SilentlyContinue
	Import-module grouppolicy -ErrorAction Continue
	Import-Module CimCmdlets -ErrorAction Continue
	Import-Module ActiveDirectory -ErrorAction Continue
	
	# PowershellToolkit information
	$ApplicationName = "LAFIT"
	$ApplicationVersion = "3.0.0.2"
	$ApplicationLastUpdate = "13.06.2016"
	
	# Author Information
	$AuthorName = "Renato Bacchi"
	$AuthorEmail = "renato.bacchi@ur.ch"
	
	# Text to show in the Status Bar when the form load
	$StatusBarStartUp = "$ApplicationName - $ApplicationVersion - (c) Renato Bacchi"
	
	# Title of the MainForm / Mainform Titel
	$domain = $env:userdomain.ToUpper()
	$MainFormTitle = "$ApplicationName $ApplicationVersion - Last Update: $ApplicationLastUpdate - $domain\$env:username"
	
	# Font Styles / Schrift Stile
	$bold = New-Object Drawing.Font("Lucida Console", 8, [Drawing.Fontstyle]::Bold)
	$norm = New-Object Drawing.Font("Lucida Console", 8, [Drawing.Fontstyle]::Regular)
	$log = New-Object Drawing.Font("Lucida Console", 1, [Drawing.Fontstyle]::Regular)
	[Drawing.Color]$gray = "Control"
	[Drawing.Color]$green = "Green"
	[Drawing.Color]$red = "Red"
	[Drawing.Color]$black = "Black"
	$global:Fillchar = 178
	$Newline = "`n"
	$Newline2 = "`n`n"
	
	## Environment Variables / Umgebungsvariablen
	if (Test-Path "C:\Program Files (x86)") { $global:Programfiles = "C:\Program Files (x86)" }
	else { $global:Programfiles = "C:\Program Files" }
	$cmd = "cmd.exe"
	
	# Folder / Ordner
	$global:Profilefolder = "\\cifsprofile\profile$"
	$global:Homefolder = "\\cifshome\home$"
	$global:Outfile = $pwd
	$global:Confpath = $env:APPDATA += "\Powershell Toolkit\"
	
	# SCCM
	$global:SCCMEnabled = "true"
	$global:SiteName = "V02"
	$global:SCCMServer = "srv-sccm15.kt.ur.ch"
	$global:SCCMNameSpace = "root\sms\site_$SiteName"
	$global:CmRCViewer = "$global:Programfiles\ConfigMgr\bin\i386\CmRcViewer.exe"
	
	# External Tools
	$global:Nirlauncher = "$global:Programfiles\Nirsoft"
	$global:Sysinternals = "$global:Programfiles\Sysinternals"
	
	# Loading Lang-Variables because $lang.xyz does not work in AddRichtTextbox -Text if there
	# are multiple Variables, bc. those are not strings but hashtablekeys
	# Maybe these should be change to something like global:langfolder and so on, so the code would be more readable
	$global:ChangePasswordAtLogon = $lang.ChangePasswordAtLogon
	$global:CheckComputerGroups = $lang.CheckComputerGroups
	$global:CheckConn = $lang.CheckConn
	$global:ComputerNotFound = $lang.ComputerNotFound
	$global:ComputerOfflineOrWrong = $lang.ComputerOfflineOrWrong
	$global:Cycle1 = $lang.Cycle1
	$global:Cycle2 = $lang.Cycle2
	$global:Cycle3 = $lang.Cycle3
	$global:Cycle4 = $lang.Cycle4
	$global:Cycle5 = $lang.Cycle5
	$global:Cycle6 = $lang.Cycle6
	$global:Cycle7 = $lang.Cycle7
	$global:Cycle8 = $lang.Cycle8
	$global:Cycle9 = $lang.Cycle9
	$global:DestinationComputer = $lang.DestinationComputer
	$global:DnsConf = $lang.DnsConf
	$global:DoYouWantToTransfer = $lang.DoYouWantToTransfer
	$global:EnterCommand = $lang.EnterCommand
	$global:EnterDestinationComputer = $lang.EnterDestinationComputer
	$global:EnterPassword = $lang.EnterPassword
	$global:EnterSourceComputer = $lang.EnterSourceComputer
	$global:EnterUsername = $lang.EnterUsername
	$global:ErrorUnlocking = $lang.ErrorUnlocking
	$global:FolderPathInputBoxMsg = $lang.FolderPathInputBoxMsg
	$global:FolderPathInputBoxTitle = $lang.FolderPathInputBoxTitle
	$global:FollowingLocked = $lang.FollowingLocked
	$global:LockedUser = $lang.LockedUser
	$global:NetConf = $lang.NetConf
	$global:NoInputDetected = $lang.NoInputDetected
	$global:NoUserUnlocked = $lang.NoUserUnlocked
	$global:NoUsersLocked = $lang.NoUsersLocked
	$global:NotExistinginAD = $lang.NotExistinginAD
	$global:PSRnotEnabled = $lang.PSRnotEnabled
	$global:PasswordResetOK = $lang.PasswordResetOK
	$global:Please = $lang.Please
	$global:RegKeySet = $lang.RegKeySet
	$global:RemoteCommandSent = $lang.RemoteCommandSent
	$global:RunRemoteCMD = $lang.RunRemoteCMD
	$global:ShowFolderRights = $lang.ShowFolderRights
	$global:ShowLocalAdminsOf = $lang.ShowLocalAdminsOf
	$global:ShowingComputergroupsOf = $lang.ShowingComputergroupsOf
	$global:ShowingLastPC = $lang.ShowingLastPC
	$global:SourceComputer = $lang.SourceComputer
	$global:TransferComputerGroups = $lang.TransferComputerGroups
	$global:Transferring = $lang.Transferring
	$global:TwoIdenticalComputers = $lang.TwoIdenticalComputers
	$global:UnlockUser = $lang.UnlockUser
	$global:UnlockedOK = $lang.UnlockedOK
	$global:YouHaveEnteredTwoIdenticalComputers = $lang.YouHaveEnteredTwoIdenticalComputers
	$global:checkHomeRights = $lang.checkHomeRights
	$global:checkProfileRights = $lang.checkProfileRights
	$global:configFolderExisting = $lang.configFolderExisting
	$global:configFrom = $lang.configFrom
	$global:createConfigError = $lang.createConfigError
	$global:created = $lang.created
	$global:existing = $lang.existing
	$global:folder = $lang.folder
	$global:loaded = $lang.loaded
	$global:openPSRS = $lang.openPSRS
	$global:starting = $lang.starting
	# Languagefiles Language.psd1 in Folders, e.g. \de-DE\ with Variables and Strings
	
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion Configuration
	
	# Adder Functions
	
	#region Add-ListViewItem
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[int]$ImageIndex = -1,
			[string[]]$SubItems,
			[System.Windows.Forms.ListViewGroup]$Group,
			[switch]$Clear)
		
		if ($Clear)
		{
			$ListView.Items.Clear();
		}
		
		if ($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{
				$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if ($SubItems -ne $null)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if ($Group -ne $null)
				{
					$listitem.Group = $Group
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if ($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($Group -ne $null)
			{
				$listitem.Group = $Group
			}
		}
	}
	#endregion
	
	#region Add-RichTextBox
	# Function - Add Text to RichTextBox
	function Add-RichTextBox
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.AppendText($timestamp)
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#Set-Alias artb Add-RichTextBox -Description "Add content to the RichTextBox"
	#endregion
	
	#region Add-RichtextBoxOK
	function Add-RichTextBoxOK
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Green
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#endregion RichtextBoxOK
	
	#region Add-RichtextBoxTitle
	function Add-RichTextBoxTitle
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#endregion RichtextBoxWarn
	
	#region Add-RichtextBoxWarn
	function Add-RichTextBoxWarn
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Red
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
		
	}
	#endregion RichtextBoxWarn
	
	# Clearer Functions
	
	#region Clear-Chart
	function Clear-Chart
	{
	<#
		.SYNOPSIS
			This function clears the contents of the chart
	
		.DESCRIPTION
			Use the function to remove contents from the chart control
	
		.PARAMETER  ChartControl
			The Chart Control to clear
	
		.PARAMETER  LeaveSingleChart
			Leaves the first chart and removes all others from the control
		
		.LINK
			http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Position = 1, Mandatory = $true)]
			[System.Windows.Forms.DataVisualization.Charting.Chart]
			$ChartControl
			,
			[Parameter(Position = 2, Mandatory = $false)]
			[Switch]$LeaveSingleChart
		)
		
		$count = 0
		if ($LeaveSingleChart)
		{
			$count = 1
		}
		
		while ($ChartControl.Series.Count -gt $count)
		{
			$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
		}
		
		while ($ChartControl.ChartAreas.Count -gt $count)
		{
			$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
		}
		
		while ($ChartControl.Titles.Count -gt $count)
		{
			$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
		}
		
		if ($ChartControl.Series.Count -gt 0)
		{
			$ChartControl.Series[0].Points.Clear()
		}
	}
	#endregion Clear-Chart
	
	# Getter Functions
	
	#region Get-ComputerTxtBox
	function Get-ComputerTxtBox
	{ $global:ComputerName = $textbox_computername.Text }
	#endregion
	
	#region Get-DiskSpace
	
	function Get-DiskSpace
	{
		
		    <#
		        .Synopsis  
		            Gets the disk space for specified host
		            
		        .Description
		            Gets the disk space for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the diskspace from (Default is localhost.)
		            
		        .Example
		            Get-Diskspace
		            # Gets diskspace from local machine
		    
		        .Example
		            Get-Diskspace -ComputerName MyServer
		            Description
		            -----------
		            Gets diskspace from MyServer
		            
		        .Example
		            $Servers | Get-Diskspace
		            Description
		            -----------
		            Gets diskspace for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-DiskSpace 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Begin
		{
			Write-Verbose " [Get-DiskSpace] :: Start Begin"
			$Culture = New-Object System.Globalization.CultureInfo("en-US")
			Write-Verbose " [Get-DiskSpace] :: End Begin"
		}
		
		Process
		{
			Write-Verbose " [Get-DiskSpace] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
				
			}
			Write-Verbose " [Get-DiskSpace] :: `$ComputerName - $ComputerName"
			Write-Verbose " [Get-DiskSpace] :: Testing Connectivity"
			if (Test-Host $ComputerName -TCPPort 135)
			{
				Write-Verbose " [Get-DiskSpace] :: Connectivity Passed"
				try
				{
					Write-Verbose " [Get-DiskSpace] :: Getting Operating System Version using - Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version"
					$OSVersionInfo = Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version -ea STOP
					Write-Verbose " [Get-DiskSpace] :: Getting Operating System returned $($OSVersionInfo.Version)"
					if ($OSVersionInfo.Version -gt 5.2)
					{
						Write-Verbose " [Get-DiskSpace] :: Version high enough to use Win32_Volume"
						Write-Verbose " [Get-DiskSpace] :: Calling Get-WmiObject -class Win32_Volume -ComputerName $ComputerName -Property `"Name`",`"FreeSpace`",`"Capacity`" -filter `"DriveType=3`""
						$DiskInfos = Get-WmiObject -class Win32_Volume                          `
												   -ComputerName $ComputerName                  `
												   -Property "Name", "FreeSpace", "Capacity"      `
												   -filter "DriveType=3" -ea STOP
						Write-Verbose " [Get-DiskSpace] :: Win32_Volume returned $($DiskInfos.count) disks"
						foreach ($DiskInfo in $DiskInfos)
						{
							$myobj = @{ }
							$myobj.ComputerName = $ComputerName
							$myobj.OSVersion = $OSVersionInfo.Version
							$Myobj.Drive = $DiskInfo.Name
							$Myobj.CapacityGB = [float]($DiskInfo.Capacity/1GB).ToString("n2", $Culture)
							$Myobj.FreeSpaceGB = [float]($DiskInfo.FreeSpace/1GB).ToString("n2", $Culture)
							$Myobj.PercentFree = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.DiskSpace')
							$obj
						}
					}
					else
					{
						Write-Verbose " [Get-DiskSpace] :: Version not high enough to use Win32_Volume using Win32_LogicalDisk"
						$DiskInfos = Get-WmiObject -class Win32_LogicalDisk                       `
												   -ComputerName $ComputerName                       `
												   -Property SystemName, DeviceID, FreeSpace, Size   `
												   -filter "DriveType=3" -ea STOP
						foreach ($DiskInfo in $DiskInfos)
						{
							$myobj = @{ }
							$myobj.ComputerName = $ComputerName
							$myobj.OSVersion = $OSVersionInfo.Version
							$Myobj.Drive = "{0}\" -f $DiskInfo.DeviceID
							$Myobj.CapacityGB = [float]($DiskInfo.Capacity/1GB).ToString("n2", $Culture)
							$Myobj.FreeSpaceGB = [float]($DiskInfo.FreeSpace/1GB).ToString("n2", $Culture)
							$Myobj.PercentFree = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.DiskSpace')
							$obj
						}
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-DiskSpace] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-InstalledSoftware
	
	function Get-InstalledSoftware
	{
		
		    <#
		        .Synopsis
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Description
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Parameter ComputerName
		            Name of the Computer to get the installed software from (Default is localhost.)
		
		        .Example
		            Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software from local machine
		
		        .Example
		            Get-InstalledSoftware -ComputerName MyServer
		            Description
		            -----------
		            Gets installed software from MyServer
		
		        .Example
		            $Servers | Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software for each machine in the pipeline
		
		        .OUTPUTS
		            PSCustomObject
		
		        .Notes
		            NAME:      Get-InstalledSoftware
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		begin
		{
			
			Write-Verbose " [Get-InstalledPrograms] :: Start Begin"
			$Culture = New-Object System.Globalization.CultureInfo("en-US")
			Write-Verbose " [Get-InstalledPrograms] :: End Begin"
			
		}
		process
		{
			
			Write-Verbose " [Get-InstalledPrograms] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
				
			}
			Write-Verbose " [Get-InstalledPrograms] :: `$ComputerName - $ComputerName"
			Write-Verbose " [Get-InstalledPrograms] :: Testing Connectivity"
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					$RegKey = Get-RegistryKey -Path "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" -ComputerName $ComputerName
					foreach ($key in $RegKey.GetSubKeyNames())
					{
						$SubKey = $RegKey.OpenSubKey($key)
						if ($SubKey.GetValue("DisplayName"))
						{
							$myobj = @{
								Name = $SubKey.GetValue("DisplayName")
								Version = $SubKey.GetValue("DisplayVersion")
								Vendor = $SubKey.GetValue("Publisher")
								Install = $SubKey.GetValue("InstallDate")
								#Uninstall = $SubKey.GetValue("UninstallString")
							}
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.SoftwareInfo')
							$obj
						}
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-InstalledPrograms] :: End Process"
			
		}
	}
	
	#endregion 	
	
	#region Get-IP 
	
	function Get-IP
	{
		
		    <#
		        .Synopsis 
		            Get the IP of the specified host.
		            
		        .Description
		            Get the IP of the specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get IP (Default localhost.)
		                
		        .Example
		            Get-IP
		            Description
		            -----------
		            Get IP information the localhost
		            
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		        
		        .Notes
		            NAME:      Get-IP
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		Process
		{
			$NICs = Get-WmiObject Win32_NetworkAdapterConfiguration -Filter "IPEnabled='$True'" -ComputerName $ComputerName
			foreach ($Nic in $NICs)
			{
				$myobj = @{
					Name = $Nic.Description
					MacAddress = $Nic.MACAddress
					IP4 = $Nic.IPAddress | where{ $_ -match "\d+\.\d+\.\d+\.\d+" }
					IP6 = $Nic.IPAddress | where{ $_ -match "\:\:" }
					IP4Subnet = $Nic.IPSubnet | where{ $_ -match "\d+\.\d+\.\d+\.\d+" }
					DefaultGWY = $Nic.DefaultIPGateway | Select -First 1
					DNSServer = $Nic.DNSServerSearchOrder
					WINSPrimary = $Nic.WINSPrimaryServer
					WINSSecondary = $Nic.WINSSecondaryServer
				}
				$obj = New-Object PSObject -Property $myobj
				$obj.PSTypeNames.Clear()
				$obj.PSTypeNames.Add('BSonPosh.IPInfo')
				$obj
			}
		}
	}
	
	#endregion 
	
	#region Get-MemoryConfiguration 
	
	function Get-MemoryConfiguration
	{
		
		    <#
		        .Synopsis 
		            Gets the Memory Config for specified host.
		            
		        .Description
		            Gets the Memory Config for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Memory Config from (Default is localhost.)
		            
		        .Example
		            Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config from local machine
		    
		        .Example
		            Get-MemoryConfiguration -ComputerName MyServer
		            Description
		            -----------
		            Gets Memory Config from MyServer
		            
		        .Example
		            $Servers | Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-MemoryConfiguration 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			Write-Verbose " [Get-MemoryConfiguration] :: Begin Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				Write-Verbose " [Get-MemoryConfiguration] :: Processing $ComputerName"
				try
				{
					$MemorySlots = Get-WmiObject Win32_PhysicalMemory -ComputerName $ComputerName -ea STOP
					foreach ($Dimm in $MemorySlots)
					{
						$myobj = @{ }
						$myobj.ComputerName = $ComputerName
						$myobj.Description = $Dimm.Tag
						$myobj.Slot = $Dimm.DeviceLocator
						$myobj.Speed = $Dimm.Speed
						$myobj.SizeGB = $Dimm.Capacity/1gb
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.MemoryConfiguration')
						$obj
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-MemoryConfiguration] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-MotherBoard
	
	function Get-MotherBoard
	{
		
		    <#
		        .Synopsis 
		            Gets the Mother Board info for specified host.
		            
		        .Description
		            Gets the Mother Board info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Mother Board info from (Default is localhost.) 
		            
		        .Example
		            Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info from local machine
		    
		        .Example
		            Get-MotherBoard -ComputerName MyOtherDesktop
		            Description
		            -----------
		            Gets Mother Board info from MyOtherDesktop
		            
		        .Example
		            $Windows7Machines | Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-MotherBoard
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$MBInfo = Get-WmiObject Win32_BaseBoard -ComputerName $ComputerName -ea STOP
					$myobj = @{
						ComputerName = $ComputerName
						Name = $MBInfo.Product
						Manufacturer = $MBInfo.Manufacturer
						Version = $MBInfo.Version
						SerialNumber = $MBInfo.SerialNumber
					}
					
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.Computer.MotherBoard')
					$obj
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion # Get-MotherBoard
	
	#region Get-NicInfo 
	
	function Get-NICInfo
	{
		
		    <#
		        .Synopsis  
		            Gets the NIC info for specified host
		            
		        .Description
		            Gets the NIC info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the NIC info from (Default is localhost.)
		            
		        .Example
		            Get-NicInfo
		            # Gets NIC info from local machine
		    
		        .Example
		            Get-NicInfo -ComputerName MyServer
		            Description
		            -----------
		            Gets NIC info from MyServer
		            
		        .Example
		            $Servers | Get-NicInfo
		            Description
		            -----------
		            Gets NIC info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-NicInfo 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$NICS = Get-WmiObject -class Win32_NetworkAdapterConfiguration -ComputerName $ComputerName
					
					foreach ($NIC in $NICS)
					{
						$Query = "Select Name,NetConnectionID FROM Win32_NetworkAdapter WHERE Index='$($NIC.Index)'"
						$NetConnnectionID = Get-WmiObject -Query $Query -ComputerName $ComputerName
						
						$myobj = @{
							ComputerName = $ComputerName
							Name = $NetConnnectionID.Name
							NetID = $NetConnnectionID.NetConnectionID
							MacAddress = $NIC.MacAddress
							IP = $NIC.IPAddress | ?{ $_ -match "\d*\.\d*\.\d*\." }
							Subnet = $NIC.IPSubnet | ?{ $_ -match "\d*\.\d*\.\d*\." }
							Enabled = $NIC.IPEnabled
							Index = $NIC.Index
						}
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.NICInfo')
						$obj
					}
				}
				catch
				{
					Add-RichTextBoxWarn -text "Host $ComputerName Failed"
				}
			}
			else
			{
				Add-RichTextBoxWarn -text "Host $ComputerName Failed Connectivity Test"
			}
		}
	}
	
	#endregion 
	
	#region Get-Processor
	
	function Get-Processor
	{
		
		    <#
		        .Synopsis 
		            Gets the Computer Processor info for specified host.
		            
		        .Description
		            Gets the Computer Processor info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Computer Processor info from (Default is localhost.)
		            
		        .Example
		            Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info from local machine
		    
		        .Example
		            Get-Processor -ComputerName MyServer
		            Description
		            -----------
		            Gets Computer Processor info from MyServer
		            
		        .Example
		            $Servers | Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-Processor
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$CPUS = Get-WmiObject Win32_Processor -ComputerName $ComputerName -ea STOP
					foreach ($CPU in $CPUs)
					{
						$myobj = @{
							ComputerName = $ComputerName
							Name = $CPU.Name
							Manufacturer = $CPU.Manufacturer
							Speed = $CPU.MaxClockSpeed
							Cores = $CPU.NumberOfCores
							L2Cache = $CPU.L2CacheSize
							Stepping = $CPU.Stepping
						}
					}
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.Computer.Processor')
					$obj
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion
	
	#region Get-RegistryHive 
	
	function Get-RegistryHive
	{
		param ($HiveName)
		Switch -regex ($HiveName)
		{
			"^(HKCR|ClassesRoot|HKEY_CLASSES_ROOT)$"               { [Microsoft.Win32.RegistryHive]"ClassesRoot"; continue }
			"^(HKCU|CurrentUser|HKEY_CURRENTt_USER)$"              { [Microsoft.Win32.RegistryHive]"CurrentUser"; continue }
			"^(HKLM|LocalMachine|HKEY_LOCAL_MACHINE)$"          { [Microsoft.Win32.RegistryHive]"LocalMachine"; continue }
			"^(HKU|Users|HKEY_USERS)$"                          { [Microsoft.Win32.RegistryHive]"Users"; continue }
			"^(HKCC|CurrentConfig|HKEY_CURRENT_CONFIG)$"          { [Microsoft.Win32.RegistryHive]"CurrentConfig"; continue }
			"^(HKPD|PerformanceData|HKEY_PERFORMANCE_DATA)$"    { [Microsoft.Win32.RegistryHive]"PerformanceData"; continue }
			Default { 1; continue }
		}
	}
	
	#endregion 
	
	#region Get-RegistryKey 
	
	function Get-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Gets the registry key provide by Path.
		            
		        .Description
		            Gets the registry key provide by Path.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to get the registry key from.
		            
		        .Parameter Recurse 
		            Recursively returns registry keys starting from the Path.
		        
		        .Parameter ReadWrite
		            Returns the Registry key in Read Write mode.
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe on MyServer1
		        
		        .Example
		            Get-registrykey HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe and all child keys
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		        .Notes
		            NAME:      Get-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse,
			[Alias("RW")]
			[Parameter()]
			[switch]$ReadWrite
			
		)
		
		Begin
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Begin"
			Write-Verbose " [Get-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Get-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Get-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Get-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Get-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Process"
			Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
				
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
				
				if ($ReadWrite)
				{
					try
					{
						$Key = $BaseKey.OpenSubKey($KeyPath, $true)
						$Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
						$Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru
						$Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
						$Key.PSTypeNames.Clear()
						$Key.PSTypeNames.Add('BSonPosh.Registry.Key')
						$Key
					}
					catch
					{
						Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open Key:$KeyPath in $KeyPath with RW Access"
					}
					
				}
				else
				{
					try
					{
						$Key = $BaseKey.OpenSubKey("$KeyPath")
						if ($Key)
						{
							$Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
							$Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru
							$Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
							$Key.PSTypeNames.Clear()
							$Key.PSTypeNames.Add('BSonPosh.Registry.Key')
							$Key
						}
					}
					catch
					{
						Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open SubKey:$Name in $KeyPath"
					}
				}
				
				if ($Recurse)
				{
					Write-Verbose " [Get-RegistryKey] :: Recurse Passed: Processing Subkeys of [$($Key.Name)]"
					$Key
					$SubKeyNames = $Key.GetSubKeyNames()
					foreach ($Name in $SubKeyNames)
					{
						try
						{
							$SubKey = $Key.OpenSubKey($Name)
							if ($SubKey.GetSubKeyNames())
							{
								Write-Verbose " [Get-RegistryKey] :: Calling [Get-RegistryKey] for [$($SubKey.Name)]"
								Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name -Recurse
							}
							else
							{
								Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name
							}
						}
						catch
						{
							Write-Verbose " [Get-RegistryKey] ::  ERROR :: Write-Host Unable to Open SubKey:$Name in $($Key.Name)"
						}
					}
				}
			}
			Write-Verbose " [Get-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-RegistryValue 
	
	function Get-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Get the value for given the registry value.
		            
		        .Description
		            Get the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter ComputerName 
		            Computer to get value.
		            
		        .Parameter Recurse 
		            Recursively gets the Values on the given key.
		            
		        .Parameter Default 
		            Returns the default value for the Value.
		        
		        .Example
		            Get-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State 
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall.
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe.
		    
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Default
		            Description
		            -----------
		            Returns the default value for HKLM\SOFTWARE\Adobe.
		                    
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Test-RegistryValue
		            
		        .Notes    
		            NAME:      Get-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter()]
			[string]$Name,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse,
			[Parameter()]
			[switch]$Default
		)
		
		Process
		{
			
			Write-Verbose " [Get-RegistryValue] :: Begin Process"
			Write-Verbose " [Get-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			
			if ($Recurse)
			{
				$Keys = Get-RegistryKey -Path $path -ComputerName $ComputerName -Recurse
				foreach ($Key in $Keys)
				{
					if ($Name)
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
							$myobj = @{ } #| Select ComputerName,Name,Value,Type,Path
							$myobj.ComputerName = $ComputerName
							$myobj.Name = $Name
							$myobj.value = $Key.GetValue($Name)
							$myobj.Type = $Key.GetValueKind($Name)
							$myobj.path = $Key
							
							$obj = New-Object PSCustomObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
							$obj
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
						}
						
					}
					elseif ($Default)
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
							$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
							$myobj.ComputerName = $ComputerName
							$myobj.Name = "(Default)"
							$myobj.value = if ($Key.GetValue("")) { $Key.GetValue("") }
							else { "EMPTY" }
							$myobj.Type = if ($Key.GetValue("")) { $Key.GetValueKind("") }
							else { "N/A" }
							$myobj.path = $Key
							
							$obj = New-Object PSCustomObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
							$obj
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:(Default) in $($Key.Name)"
						}
					}
					else
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
							foreach ($ValueName in $Key.GetValueNames())
							{
								Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
								$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
								$myobj.ComputerName = $ComputerName
								$myobj.Name = if ($ValueName -match "^$") { "(Default)" }
								else { $ValueName }
								$myobj.value = $Key.GetValue($ValueName)
								$myobj.Type = $Key.GetValueKind($ValueName)
								$myobj.path = $Key
								
								$obj = New-Object PSCustomObject -Property $myobj
								$obj.PSTypeNames.Clear()
								$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
								$obj
							}
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$ValueName in $($Key.Name)"
						}
					}
				}
			}
			else
			{
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName
				Write-Verbose " [Get-RegistryValue] :: Get-RegistryKey returned $Key"
				if ($Name)
				{
					try
					{
						Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
						$myobj = @{ } # | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = $Name
						$myobj.value = $Key.GetValue($Name)
						$myobj.Type = $Key.GetValueKind($Name)
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
					catch
					{
						Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
					}
				}
				elseif ($Default)
				{
					try
					{
						Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
						$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = "(Default)"
						$myobj.value = if ($Key.GetValue("")) { $Key.GetValue("") }
						else { "EMPTY" }
						$myobj.Type = if ($Key.GetValue("")) { $Key.GetValueKind("") }
						else { "N/A" }
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
					catch
					{
						Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
					}
				}
				else
				{
					Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
					foreach ($ValueName in $Key.GetValueNames())
					{
						Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
						$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = if ($ValueName -match "^$") { "(Default)" }
						else { $ValueName }
						$myobj.value = $Key.GetValue($ValueName)
						$myobj.Type = $Key.GetValueKind($ValueName)
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
				}
			}
			
			Write-Verbose " [Get-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-Routetable 
	
	function Get-Routetable
	{
		
		    <#
		        .Synopsis 
		            Gets the route table for specified host.
		            
		        .Description
		            Gets the route table for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the route table from (Default is localhost.)
		            
		        .Example
		            Get-RouteTable
		            Description
		            -----------
		            Gets route table from local machine
		    
		        .Example
		            Get-RouteTable -ComputerName MyServer
		            Description
		            -----------
		            Gets route table from MyServer
		            
		        .Example
		            $Servers | Get-RouteTable
		            Description
		            -----------
		            Gets route table for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-RouteTable
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				$Routes = Get-WMIObject Win32_IP4RouteTable -ComputerName $ComputerName -Property Name, Mask, NextHop, Metric1, Type
				foreach ($Route in $Routes)
				{
					$myobj = @{ }
					$myobj.ComputerName = $ComputerName
					$myobj.Name = $Route.Name
					$myobj.NetworkMask = $Route.mask
					$myobj.Gateway = if ($Route.NextHop -eq "0.0.0.0") { "On-Link" }
					else { $Route.NextHop }
					$myobj.Metric = $Route.Metric1
					
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.RouteTable')
					$obj
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion 
	
	#region Get-SystemType 
	
	function Get-SystemType
	{
		
		    <#
		        .Synopsis 
		            Gets the system type for specified host
		            
		        .Description
		            Gets the system type info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the System Type from (Default is localhost.)
		            
		        .Example
		            Get-SystemType
		            Description
		            -----------
		            Gets System Type from local machine
		    
		        .Example
		            Get-SystemType -ComputerName MyServer
		            Description
		            -----------
		            Gets System Type from MyServer
		            
		        .Example
		            $Servers | Get-SystemType
		            Description
		            -----------
		            Gets System Type for each machine in the pipeline
		            
		        .OUTPUTS
		            PSObject
		            
		        .Notes
		            NAME:      Get-SystemType 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Begin
		{
			
			function ConvertTo-ChassisType($Type)
			{
				switch ($Type)
				{
					1    { "Other" }
					2    { "Unknown" }
					3    { "Desktop" }
					4    { "Low Profile Desktop" }
					5    { "Pizza Box" }
					6    { "Mini Tower" }
					7    { "Tower" }
					8    { "Portable" }
					9    { "Laptop" }
					10    { "Notebook" }
					11    { "Hand Held" }
					12    { "Docking Station" }
					13    { "All in One" }
					14    { "Sub Notebook" }
					15    { "Space-Saving" }
					16    { "Lunch Box" }
					17    { "Main System Chassis" }
					18    { "Expansion Chassis" }
					19    { "SubChassis" }
					20    { "Bus Expansion Chassis" }
					21    { "Peripheral Chassis" }
					22    { "Storage Chassis" }
					23    { "Rack Mount Chassis" }
					24    { "Sealed-Case PC" }
				}
			}
			function ConvertTo-SecurityStatus($Status)
			{
				switch ($Status)
				{
					1    { "Other" }
					2    { "Unknown" }
					3    { "None" }
					4    { "External Interface Locked Out" }
					5    { "External Interface Enabled" }
				}
			}
			
		}
		Process
		{
			
			Write-Verbose " [Get-SystemType] :: Process Start"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					Write-Verbose " [Get-SystemType] :: Getting System (Enclosure) Type info use WMI"
					$SystemInfo = Get-WmiObject Win32_SystemEnclosure -ComputerName $ComputerName
					$CSInfo = Get-WmiObject -Query "Select Model FROM Win32_ComputerSystem" -ComputerName $ComputerName
					
					Write-Verbose " [Get-SystemType] :: Creating Hash Table"
					$myobj = @{ }
					Write-Verbose " [Get-SystemType] :: Setting ComputerName   - $ComputerName"
					$myobj.ComputerName = $ComputerName
					
					Write-Verbose " [Get-SystemType] :: Setting Manufacturer   - $($SystemInfo.Manufacturer)"
					$myobj.Manufacturer = $SystemInfo.Manufacturer
					
					Write-Verbose " [Get-SystemType] :: Setting Module   - $($CSInfo.Model)"
					$myobj.Model = $CSInfo.Model
					
					Write-Verbose " [Get-SystemType] :: Setting SerialNumber   - $($SystemInfo.SerialNumber)"
					$myobj.SerialNumber = $SystemInfo.SerialNumber
					
					Write-Verbose " [Get-SystemType] :: Setting SecurityStatus - $($SystemInfo.SecurityStatus)"
					$myobj.SecurityStatus = ConvertTo-SecurityStatus $SystemInfo.SecurityStatus
					
					Write-Verbose " [Get-SystemType] :: Setting Type           - $($SystemInfo.ChassisTypes)"
					$myobj.Type = ConvertTo-ChassisType $SystemInfo.ChassisTypes
					
					Write-Verbose " [Get-SystemType] :: Creating Custom Object"
					$obj = New-Object PSCustomObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.SystemType')
					$obj
				}
				catch
				{
					Write-Verbose " [Get-SystemType] :: [$ComputerName] Failed with Error: $($Error[0])"
				}
			}
			
		}
		
	}
	
	#endregion 
	
	#region Get-USB
	
	function Get-USB
	{
		    <#
		    .Synopsis
		        Gets USB devices attached to the system
		    .Description
		        Uses WMI to get the USB Devices attached to the system
		    .Example
		        Get-USB
		    .Example
		        Get-USB | Group-Object Manufacturer  
		    .Parameter ComputerName
		        The name of the computer to get the USB devices from
		    #>
		param ($computerName = "localhost")
		Get-WmiObject Win32_USBControllerDevice -ComputerName $ComputerName `
					  -Impersonation Impersonate -Authentication PacketPrivacy |
		Foreach-Object { [Wmi]$_.Dependent }
	}
	#endregion
	
	#region Get-UserTxtBox
	function Get-UserTxtBox
	{ $global:UserName_Txt = $usertextbox.Text }
	#endregion
	
	#region Get-LocalAdmins
	function get-localadmins
	{
		[cmdletbinding()]
		Param (
			[string]$computerName
		)
		$group = get-wmiobject win32_group -ComputerName $computerName -Filter "LocalAccount=True AND SID='S-1-5-32-544'"
		$query = "GroupComponent = `"Win32_Group.Domain='$($group.domain)'`,Name='$($group.name)'`""
		$list = Get-WmiObject win32_groupuser -ComputerName $computerName -Filter $query
		$list | %{ $_.PartComponent } | % { $_.substring($_.lastindexof("Domain=") + 7).replace("`",Name=`"", "\") }
	}
	#endregion Get-LocalAdmins
	
	#region Get-ComputerStats
	function Get-ComputerStats
	{
		param (
			[Parameter(Mandatory = $true, Position = 0,
					   ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
			[ValidateNotNull()]
			[string[]]$ComputerNames
		)
		
		process
		{
			$avg = Get-WmiObject win32_processor -computername $computername |
			Measure-Object -property LoadPercentage -Average |
			Foreach { $_.Average }
			$mem = Get-WmiObject win32_operatingsystem -ComputerName $computername |
			Foreach { "{0:N2}" -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) * 100)/ $_.TotalVisibleMemorySize) }
			new-object psobject -prop @{
				# Work on PowerShell V2 and below
				# [pscustomobject] [ordered] @{ # Only if on PowerShell V3
				AverageCpuLoad = $avg
				MemoryUsagePercent = $mem
			}
		}
	}
	#endregion Get-ComputerStats
	
	# New Functions
	
	#region New-RegistryKey 
	
	function New-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Creates a new key in the provide by Path.
		            
		        .Description
		            Creates a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to create the key in.
		            
		        .Parameter ComputerName 
		            Computer to the create registry key on.
		            
		        .Parameter Name 
		            Name of the Key to create
		        
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		            
		        NAME:      New-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [New-RegistryKey] :: Start Begin"
			$ReadWrite = [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree
			
			Write-Verbose " [New-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [New-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [New-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [New-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [New-RegistryKey] :: End Begin"
			
		}
		Process
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Process"
			Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
				$Key = $BaseKey.OpenSubKey($KeyPath, $True)
				if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Key [$Name] under $Path"))
				{
					$Key.CreateSubKey($Name, $ReadWrite)
				}
			}
			Write-Verbose " [Get-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region New-RegistryValue 
	
	function New-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Create a value under the registry key.
		            
		        .Description
		            Create a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to create.
		            
		        .Parameter Value 
		            Value to for the new Value.
		            
		        .Parameter Type
		            Type for the new Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, a
		    nd Qword
		            
		        .Parameter ComputerName 
		            Computer to create the Value on.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Creates the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            
		        NAME:      Test-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[Parameter()]
			[string]$Type,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [New-RegistryValue] :: Start Begin"
			Write-Verbose " [New-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [New-RegistryValue] :: `$Name = $Name"
			Write-Verbose " [New-RegistryValue] :: `$Value = $Value"
			
			Switch ($Type)
			{
				"Unknown"       { $ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown; continue }
				"String"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
				"ExpandString"  { $ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString; continue }
				"Binary"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::Binary; continue }
				"DWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::DWord; continue }
				"MultiString"   { $ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString; continue }
				"QWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::QWord; continue }
				default { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
			}
			Write-Verbose " [New-RegistryValue] :: `$Type = $Type"
			Write-Verbose " [New-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			if (Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
			{
				"Registry value already exist"
			}
			else
			{
				Write-Verbose " [New-RegistryValue] :: Start Process"
				Write-Verbose " [New-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
				Write-Verbose " [New-RegistryValue] :: Get-RegistryKey returned $Key"
				Write-Verbose " [New-RegistryValue] :: Setting Value for [$Name]"
				if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Value [$Name] under $Path with value [$Value]"))
				{
					if ($Value)
					{
						$Key.SetValue($Name, $Value, $ValueType)
					}
					else
					{
						$Key.SetValue($Name, $ValueType)
					}
					Write-Verbose " [New-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
					Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
				}
			}
			Write-Verbose " [New-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Load Functions
	
	#region Load-ComboBox
	function Load-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion Load-Combobox
	
	#region Load-Chart
	function Load-Chart
	{
	<#
		.SYNOPSIS
			This functions helps you plot points on a chart
	
		.DESCRIPTION
			Use the function to plot points on a chart or add more charts to a chart control
	
		.PARAMETER  ChartControl
			The Chart Control you when to add points to
	
		.PARAMETER  XPoints
			Set the X Axis Points. These can be strings or numerical values.
	
		.PARAMETER  YPoints
			Set the Y Axis Points. These can be strings or numerical values.
		
		.PARAMETER  XTitle
			Set the Title for the X Axis.
	
		.PARAMETER  YTitle
			Set the Title for the Y Axis.
		
		.PARAMETER  Title
			Set the Title for the chart.
		
		.PARAMETER  ChartType
			Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum
	
		.PARAMETER SeriesIndex
			Set the settings of a particular Series and corresponding ChartArea
	
		.PARAMETER TitleIndex
			Set the settings of a particular Title
		
		.PARAMETER SeriesName
			Set the settings of a particular Series using its name and corresponding ChartArea. 
			The Series will be created if not found.
			If SeriesIndex is set, it will replace the Series' name if the Series does not exist
		
		.PARAMETER Enable3D
			The chart will be rendered in 3D.
		
		.PARAMETER Disable3D
			The chart will be rendered in 2D.	
		
		.PARAMETER Append
			When this switch is used, a new ChartArea is added to Chart Control.
	
		.LINK
			http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
		
	#>
		Param (#$XPoints, $YPoints, $XTitle, $YTitle, $Title, $ChartStyle)
			[ValidateNotNull()]
			[Parameter(Position = 1, Mandatory = $true)]
			[System.Windows.Forms.DataVisualization.Charting.Chart]
			$ChartControl
			,
			[ValidateNotNull()]
			[Parameter(Position = 2, Mandatory = $true)]
			$XPoints
			,
			[Parameter(Position = 3, Mandatory = $true)]
			$YPoints
			,
			[Parameter(Position = 4, Mandatory = $false)]
			[string]$XTitle
			,
			[Parameter(Position = 5, Mandatory = $false)]
			[string]$YTitle
			,
			[Parameter(Position = 6, Mandatory = $false)]
			[string]$Title
			,
			[Parameter(Position = 7, Mandatory = $false)]
			[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]
			$ChartType
			,
			[Parameter(Position = 8, Mandatory = $false)]
			$SeriesIndex = -1
			,
			[Parameter(Position = 9, Mandatory = $false)]
			$TitleIndex = 0,
			[Parameter(Mandatory = $false)]
			[string]$SeriesName = $null,
			[switch]$Enable3D,
			[switch]$Disable3D,
			[switch]$Append)
		
		$ChartAreaIndex = 0
		if ($Append)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			$ChartArea = $ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			
			$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
			$Series = $ChartControl.Series.Add($name)
			$SeriesIndex = $ChartControl.Series.Count - 1
			
			$Series.ChartArea = $ChartArea.Name
			
			if ($Title)
			{
				$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
		}
		else
		{
			if ($ChartControl.ChartAreas.Count -eq 0)
			{
				$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
				[void]$ChartControl.ChartAreas.Add($name)
				$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			}
			
			if ($ChartControl.Series.Count -eq 0)
			{
				if (-not $SeriesName)
				{
					$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
				}
				
				$Series = $ChartControl.Series.Add($SeriesName)
				$SeriesIndex = $ChartControl.Series.Count - 1
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			elseif ($SeriesName)
			{
				$Series = $ChartControl.Series.FindByName($SeriesName)
				
				if ($Series -eq $null)
				{
					if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
					{
						$Series = $ChartControl.Series[$SeriesIndex]
						$Series.Name = $SeriesName
					}
					else
					{
						$Series = $ChartControl.Series.Add($SeriesName)
						$SeriesIndex = $ChartControl.Series.Count - 1
					}
					
					$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
				}
				else
				{
					$SeriesIndex = $ChartControl.Series.IndexOf($Series)
					$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
				}
			}
		}
		
		if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
		{
			$SeriesIndex = 0
		}
		
		$Series = $ChartControl.Series[$SeriesIndex]
		$Series.Points.Clear()
		$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
		
		if ($Enable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $true
		}
		elseif ($Disable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $false
		}
		
		if ($Title)
		{
			if ($ChartControl.Titles.Count -eq 0)
			{
				#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
			
			$ChartControl.Titles[$TitleIndex].Text = $Title
		}
		
		if ($ChartType)
		{
			$Series.ChartType = $ChartType
		}
		
		if ($XTitle)
		{
			$ChartArea.AxisX.Title = $XTitle
		}
		
		if ($YTitle)
		{
			$ChartArea.AxisY.Title = $YTitle
		}
		
		if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($XPoints)
			$XPoints = $array
		}
		
		if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($YPoints)
			$YPoints = $array
		}
		
		$Series.Points.DataBindXY($XPoints, $YPoints)
		
	}
	#endregion Load-Chart
	
	#region Load-ListBox
	function Load-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion Load-ListBo
	
	# Remove Functions
	
	#region Remove-RegistryKey 
	
	function Remove-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Removes a new key in the provide by Path.
		            
		        .Description
		            Removes a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to remove the registry key from.
		            
		        .Parameter ComputerName 
		            Computer to remove the registry key from.
		            
		        .Parameter Name 
		            Name of the registry key to remove.
		            
		        .Parameter Recurse 
		            Recursively removes registry key and all children from path.
		        
		        .Example
		            Remove-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Removes the registry key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1 and all child keys.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            New-RegistryKey
		            Test-RegistryKey
		            
		        .Notes
		        NAME:      Remove-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse
		)
		Begin
		{
			
			Write-Verbose " [Remove-RegistryKey] :: Start Begin"
			
			Write-Verbose " [Remove-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Remove-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Remove-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Remove-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Remove-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Remove-RegistryKey] :: Start Process"
			Write-Verbose " [Remove-RegistryKey] :: `$ComputerName = $ComputerName"
			
			if (Test-RegistryKey -Path $path\$name -ComputerName $ComputerName)
			{
				$RegHive = Get-RegistryHive $hive
				
				if ($RegHive -eq 1)
				{
					Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
				}
				else
				{
					Write-Verbose " [Remove-RegistryKey] :: `$RegHive = $RegHive"
					$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
					Write-Verbose " [Remove-RegistryKey] :: `$BaseKey = $BaseKey"
					
					$Key = $BaseKey.OpenSubKey($KeyPath, $True)
					
					if ($PSCmdlet.ShouldProcess($ComputerName, "Deleteing Key [$Name]"))
					{
						if ($Recurse)
						{
							Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKeyTree($Name)"
							$Key.DeleteSubKeyTree($Name)
						}
						else
						{
							Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKey($Name)"
							$Key.DeleteSubKey($Name)
						}
					}
				}
			}
			else
			{
				"Key [$path\$name] does not exist"
			}
			Write-Verbose " [Remove-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Remove-RegistryValue 
	
	function Remove-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Removes the value.
		            
		        .Description
		            Removes the value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to Remove.
		    
		        .Parameter ComputerName 
		            Computer to remove value from.
		            
		        .Example
		            Remove-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Remove-RegistryValue HKLM\Software\Adobe\MyKey -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Test-RegistryValue
		            Get-RegistryValue
		            Set-RegistryValue
		            
		        NAME:      Remove-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [Remove-RegistryValue] :: Start Begin"
			
			Write-Verbose " [Remove-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [Remove-RegistryValue] :: `$Name = $Name"
			
			Write-Verbose " [Remove-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			if (Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
			{
				Write-Verbose " [Remove-RegistryValue] :: Start Process"
				Write-Verbose " [Remove-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
				Write-Verbose " [Remove-RegistryValue] :: Get-RegistryKey returned $Key"
				Write-Verbose " [Remove-RegistryValue] :: Setting Value for [$Name]"
				if ($PSCmdlet.ShouldProcess($ComputerName, "Deleting Value [$Name] under $Path"))
				{
					$Key.DeleteValue($Name)
				}
			}
			else
			{
				"Registry Value is already gone"
			}
			
			Write-Verbose " [Remove-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Runner Functions
	
	#region Run-RemoteCMD
	#http://gallery.technet.microsoft.com/scriptcenter/56962f03-0243-4c83-8cdd-88c37898ccc4
	function Run-RemoteCMD
	{
		param (
			[Parameter(Mandatory = $true, valuefrompipeline = $true)]
			[string]$ComputerName,
			[string]$Command)
		begin
		{
			
			[string]$cmd = "CMD.EXE /C " + $command
		}
		process
		{
			$newproc = Invoke-WmiMethod -class Win32_process -name Create -ArgumentList ($cmd) -ComputerName $ComputerName
			if ($newproc.ReturnValue -eq 0)
			{ Add-RichTextBoxOK "Command $($command) invoked Sucessfully on $($ComputerName)" }
			# if command is sucessfully invoked it doesn't mean that it did what its supposed to do 
			#it means that the command only sucessfully ran on the cmd.exe of the server 
			#syntax errors can occur due to user input  
		}
		End { Write-Output "Script ...END" }
	}
	#endregion
	
	# Searcher Functions
	
	#region Search-Registry 
	
	function Search-Registry
	{
		
		    <#
		        .Synopsis 
		            Searchs the Registry.
		            
		        .Description
		            Searchs the Registry.
		                        
		        .Parameter Filter 
		            The RegEx filter you want to search for.
		            
		        .Parameter Name 
		            Name of the Key or Value you want to search for.
		        
		        .Parameter Value
		            Value to search for (Registry Values only.)
		            
		        .Parameter Path
		            Base of the Search. Should be in this format: "Software\Microsoft\..." See the Examples for specific exampl
		    es.
		            
		        .Parameter Hive
		            The Base Hive to search in (Default to LocalMachine.)
		            
		        .Parameter ComputerName 
		            Computer to search.
		            
		        .Parameter KeyOnly
		            Only returns Registry Keys. Not valid with -value parameter.
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients" -computername MyServer1
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients" on MyServer1
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry keys and values with name 'Powershell' in "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients" -KeyOnly
		            Description
		            -----------
		            Searchs the Registry keys with name 'Powershell' in "SOFTWARE\Clients"
		        
		        .Example
		            Search-Registry -Hive HKLM -Value "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry Values with Value of 'Powershell' in "SOFTWARE\Clients"
		            
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Get-RegistryValue
		            Test-RegistryKey
		        
		        .Notes
		            NAME:      Search-Registry
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(DefaultParameterSetName = "ByFilter")]
		Param (
			[Parameter(ParameterSetName = "ByFilter", Position = 0)]
			[string]$Filter = ".*",
			[Parameter(ParameterSetName = "ByName", Position = 0)]
			[string]$Name,
			[Parameter(ParameterSetName = "ByValue", Position = 0)]
			[string]$Value,
			[Parameter()]
			[string]$Path,
			[Parameter()]
			[string]$Hive = "LocalMachine",
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME,
			[Parameter()]
			[switch]$KeyOnly
		)
		Begin
		{
			
			Write-Verbose " [Search-Registry] :: Start Begin"
			
			Write-Verbose " [Search-Registry] :: Active Parameter Set $($PSCmdlet.ParameterSetName)"
			switch ($PSCmdlet.ParameterSetName)
			{
				"ByFilter"    { Write-Verbose " [Search-Registry] :: `$Filter = $Filter" }
				"ByName"    { Write-Verbose " [Search-Registry] :: `$Name = $Name" }
				"ByValue"    { Write-Verbose " [Search-Registry] :: `$Value = $Value" }
			}
			$RegHive = Get-RegistryHive $Hive
			Write-Verbose " [Search-Registry] :: `$Hive = $RegHive"
			Write-Verbose " [Search-Registry] :: `$KeyOnly = $KeyOnly"
			
			Write-Verbose " [Search-Registry] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Search-Registry] :: Start Process"
			
			Write-Verbose " [Search-Registry] :: `$ComputerName = $ComputerName"
			switch ($PSCmdlet.ParameterSetName)
			{
				"ByFilter"    {
					if ($KeyOnly)
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
					else
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
							Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
									Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
				}
				"ByName"    {
					if ($KeyOnly)
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							$NameFilter = "^.*\\{0}$" -f $Name
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									$NameFilter = "^.*\\{0}$" -f $Name
									Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
					else
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							$NameFilter = "^.*\\{0}$" -f $Name
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
							Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -eq $Name }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									$NameFilter = "^.*\\{0}$" -f $Name
									Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
									Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -eq $Name }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
				}
				"ByValue"    {
					if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
					{
						Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Value -eq $Value }
					}
					else
					{
						$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
						foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
						{
							try
							{
								$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
								Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Value -eq $Value }
							}
							catch
							{
								Write-Host "Access Error on Key [$SubKeyName]... skipping."
							}
						}
					}
				}
			}
			
			Write-Verbose " [Search-Registry] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Sender Functions
	
	#region Send-WOL
	function Send-WOL
	{
	<#  
	  .SYNOPSIS   
	    Send a WOL packet to a broadcast address 
	  .PARAMETER mac 
	   The MAC address of the device that need to wake up 
	  .PARAMETER ip 
	   The IP address where the WOL packet will be sent to 
	  .EXAMPLE  
	   Send-WOL -mac 00:11:32:21:2D:11 -ip 192.168.8.255  
	#>	
		
		param (
			[string]$mac,
			[string]$ip,
			[int]$port = 9
		)
		$broadcast = [Net.IPAddress]::Parse($ip)
		
		$mac = (($mac.replace(":", "")).replace("-", "")).replace(".", "")
		$target = 0, 2, 4, 6, 8, 10 | % { [convert]::ToByte($mac.substring($_, 2), 16) }
		$packet = (, [byte]255 * 6) + ($target * 16)
		
		$UDPclient = new-Object System.Net.Sockets.UdpClient
		$UDPclient.Connect($broadcast, $port)
		[void]$UDPclient.Send($packet, 102)
		
	}
	#endregion Send-WOL
	
	# Setter Functions
	
	#region Set-RegistryValue 
	
	function Set-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Sets a value under the registry key.
		            
		        .Description
		            Sets a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to Set.
		            
		        .Parameter Value 
		            New Value.
		            
		        .Parameter Type
		            Type for the Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, and Q
		    word
		            
		        .Parameter ComputerName 
		            Computer to set the Value on.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Sets the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            Test-RegistryValue
		        
		        .Notes
		            NAME:      Set-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[Parameter()]
			[string]$Type,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		
		Begin
		{
			
			Write-Verbose " [Set-RegistryValue] :: Start Begin"
			
			Write-Verbose " [Set-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [Set-RegistryValue] :: `$Name = $Name"
			Write-Verbose " [Set-RegistryValue] :: `$Value = $Value"
			
			Switch ($Type)
			{
				"Unknown"       { $ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown; continue }
				"String"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
				"ExpandString"  { $ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString; continue }
				"Binary"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::Binary; continue }
				"DWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::DWord; continue }
				"MultiString"   { $ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString; continue }
				"QWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::QWord; continue }
				default { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
			}
			Write-Verbose " [Set-RegistryValue] :: `$Type = $Type"
			
			Write-Verbose " [Set-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Set-RegistryValue] :: Start Process"
			
			Write-Verbose " [Set-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
			Write-Verbose " [Set-RegistryValue] :: Get-RegistryKey returned $Key"
			Write-Verbose " [Set-RegistryValue] :: Setting Value for [$Name]"
			if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Value [$Name] under $Path with value [$Value]"))
			{
				if ($Value)
				{
					$Key.SetValue($Name, $Value, $ValueType)
				}
				else
				{
					$Key.SetValue($Name, $ValueType)
				}
				Write-Verbose " [Set-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
				Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
			}
			Write-Verbose " [Set-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Show Functions
	
	#region Show-MsgBox
		<# 
		            .SYNOPSIS  
		            Shows a graphical message box, with various prompt types available. 
		 
		            .DESCRIPTION 
		            Emulates the Visual Basic MsgBox function.  It takes four parameters, of which only the prompt is mandatory 
		 
		            .INPUTS 
		            The parameters are:- 
		             
		            Prompt (mandatory):  
		                Text string that you wish to display 
		                 
		            Title (optional): 
		                The title that appears on the message box 
		                 
		            Icon (optional).  Available options are: 
		                Information, Question, Critical, Exclamation (not case sensitive) 
		                
		            BoxType (optional). Available options are: 
		                OKOnly, OkCancel, AbortRetryIgnore, YesNoCancel, YesNo, RetryCancel (not case sensitive) 
		                 
		            DefaultButton (optional). Available options are: 
		                1, 2, 3 
		 
		            .OUTPUTS 
		            Microsoft.VisualBasic.MsgBoxResult 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox Hello 
		            Shows a popup message with the text "Hello", and the default box, icon and defaultbutton settings. 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox -Prompt "This is the prompt" -Title "This Is The Title" -Icon Critical -BoxType YesNo -DefaultButton 2 
		            Shows a popup with the parameter as supplied. 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxresult.aspx 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxstyle.aspx 
		            #>
	# By BigTeddy August 24, 2011 
	# http://social.technet.microsoft.com/profile/bigteddy/. 
	
	function Show-MsgBox
	{
		
		[CmdletBinding()]
		param (
			[Parameter(Position = 0, Mandatory = $true)]
			[string]$Prompt,
			[Parameter(Position = 1, Mandatory = $false)]
			[string]$Title = "",
			[Parameter(Position = 2, Mandatory = $false)]
			[ValidateSet("Information", "Question", "Critical", "Exclamation")]
			[string]$Icon = "Information",
			[Parameter(Position = 3, Mandatory = $false)]
			[ValidateSet("OKOnly", "OKCancel", "AbortRetryIgnore", "YesNoCancel", "YesNo", "RetryCancel")]
			[string]$BoxType = "OkOnly",
			[Parameter(Position = 4, Mandatory = $false)]
			[ValidateSet(1, 2, 3)]
			[int]$DefaultButton = 1
		)
		[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.VisualBasic") | Out-Null
		switch ($Icon)
		{
			"Question" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Question }
			"Critical" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Critical }
			"Exclamation" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Exclamation }
			"Information" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Information }
		}
		switch ($BoxType)
		{
			"OKOnly" { $vb_box = [microsoft.visualbasic.msgboxstyle]::OKOnly }
			"OKCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::OkCancel }
			"AbortRetryIgnore" { $vb_box = [microsoft.visualbasic.msgboxstyle]::AbortRetryIgnore }
			"YesNoCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::YesNoCancel }
			"YesNo" { $vb_box = [microsoft.visualbasic.msgboxstyle]::YesNo }
			"RetryCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::RetryCancel }
		}
		switch ($Defaultbutton)
		{
			1 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton1 }
			2 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton2 }
			3 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton3 }
		}
		$popuptype = $vb_icon -bor $vb_box -bor $vb_defaultbutton
		$ans = [Microsoft.VisualBasic.Interaction]::MsgBox($prompt, $popuptype, $title)
		return $ans
	} #end
	#endregion
	
	#region Show-InputBox
	#http://www.sapien.com/forums/scriptinganswers/forum_posts.asp?TID=2890
	#$c=Show-Inputbox -message "Enter a computername" -title "Computername" -default $env:Computername
	#
	#if ($c.Trim()) {
	#  Get-WmiObject win32_computersystem -computer $c
	#  }
	Function Show-InputBox
	{
		Param ([string]$message = $(Throw "You must enter a prompt message"),
			[string]$title = "Input",
			[string]$default
		)
		
		[reflection.assembly]::loadwithpartialname("microsoft.visualbasic") | Out-Null
		[microsoft.visualbasic.interaction]::InputBox($message, $title, $default)
		
	}
	#endregion
	
	# Sort Functions
	
	#region Sort-ListViewColumn
	function Sort-ListViewColumn
	{
		<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
	
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
	
		.PARAMETER ListView
			The ListView control to sort.
	
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
			
		.PARAMETER  SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
	#>
		param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[Parameter(Mandatory = $true)]
			[int]$ColumnIndex,
			[System.Windows.Forms.SortOrder]$SortOrder = 'None')
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			$local:type = [ListViewItemComparer]
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($Sort -eq [System.Windows.Forms.SortOrder]::None)
			{
				$Sort = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	#endregion
	
	# Tester Functions
	
	#region Test-Host 
	
	function Test-Host
	{
		
		    <#
		        .Synopsis 
		            Test a host for connectivity using either WMI ping or TCP port
		            
		        .Description
		            Allows you to test a host for connectivity before further processing
		            
		        .Parameter Server
		            Name of the Server to Process.
		            
		        .Parameter TCPPort
		            TCP Port to connect to. (default 135)
		            
		        .Parameter Timeout
		            Timeout for the TCP connection (default 1 sec)
		            
		        .Parameter Property
		            Name of the Property that contains the value to test.
		            
		        .Example
		            cat ServerFile.txt | Test-Host | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts.
		            
		        .Example
		            cat ServerFile.txt | Test-Host -tcp 80 | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts against port 80.
		            
		        .Example
		            Get-ADComputer | Test-Host -property dnsHostname | Invoke-DoSomething
		            Description
		            -----------
		            To test the output of Get-ADComputer using the dnshostname property
		            
		            
		        .OUTPUTS
		            System.Object
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Port
		            
		        NAME:      Test-Host
		        AUTHOR:    YetiCentral\bshell
		        Website:   www.bsonposh.com
		        LASTEDIT:  02/04/2009 18:25:15
		        #Requires -Version 2.0
		    #>
		
		[CmdletBinding()]
		Param (
			
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true, Mandatory = $True)]
			[string]$ComputerName,
			[Parameter()]
			[int]$TCPPort = 80,
			[Parameter()]
			[int]$timeout = 3000,
			[Parameter()]
			[string]$property
			
		)
		Begin
		{
			
			function PingServer
			{
				Param ($MyHost)
				$ErrorActionPreference = "SilentlyContinue"
				Write-Verbose " [PingServer] :: Pinging [$MyHost]"
				try
				{
					$pingresult = Get-WmiObject win32_pingstatus -f "address='$MyHost'"
					$ResultCode = $pingresult.statuscode
					Write-Verbose " [PingServer] :: Ping returned $ResultCode"
					if ($ResultCode -eq 0) { $true }
					else { $false }
				}
				catch
				{
					Write-Verbose " [PingServer] :: Ping Failed with Error: ${error[0]}"
					$false
				}
			}
			
		}
		
		Process
		{
			
			Write-Verbose " [Test-Host] :: Begin Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			Write-Verbose " [Test-Host] :: ComputerName   : $ComputerName"
			if ($TCPPort)
			{
				Write-Verbose " [Test-Host] :: Timeout  : $timeout"
				Write-Verbose " [Test-Host] :: Port     : $TCPPort"
				if ($property)
				{
					Write-Verbose " [Test-Host] :: Property : $Property"
					$Result = Test-Port $_.$property -tcp $TCPPort -timeout $timeout
					if ($Result)
					{
						if ($_) { $_ }
						else { $ComputerName }
					}
				}
				else
				{
					Write-Verbose " [Test-Host] :: Running - 'Test-Port $ComputerName -tcp $TCPPort -timeout $timeout'"
					$Result = Test-Port $ComputerName -tcp $TCPPort -timeout $timeout
					if ($Result)
					{
						if ($_) { $_ }
						else { $ComputerName }
					}
				}
			}
			else
			{
				if ($property)
				{
					Write-Verbose " [Test-Host] :: Property : $Property"
					try
					{
						if (PingServer $_.$property)
						{
							if ($_) { $_ }
							else { $ComputerName }
						}
					}
					catch
					{
						Write-Verbose " [Test-Host] :: $($_.$property) Failed Ping"
					}
				}
				else
				{
					Write-Verbose " [Test-Host] :: Simple Ping"
					try
					{
						if (PingServer $ComputerName) { $ComputerName }
					}
					catch
					{
						Write-Verbose " [Test-Host] :: $ComputerName Failed Ping"
					}
				}
			}
			Write-Verbose " [Test-Host] :: End Process"
			
		}
		
	}
	
	#endregion 
	
	#region Test-Port 
	
	function Test-Port
	{
		
		    <#
		        .Synopsis 
		            Test a host to see if the specified port is open.
		            
		        .Description
		            Test a host to see if the specified port is open.
		                        
		        .Parameter TCPPort 
		            Port to test (Default 135.)
		            
		        .Parameter Timeout 
		            How long to wait (in milliseconds) for the TCP connection (Default 3000.)
		            
		        .Parameter ComputerName 
		            Computer to test the port against (Default in localhost.)
		            
		        .Example
		            Test-Port -tcp 3389
		            Description
		            -----------
		            Returns $True if the localhost is listening on 3389
		            
		        .Example
		            Test-Port -tcp 3389 -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if MyServer1 is listening on 3389
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Host
		            Wait-Port
		            
		        .Notes
		            NAME:      Test-Port
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter()]
			[int]$TCPport = 135,
			[Parameter()]
			[int]$TimeOut = 3000,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[String]$ComputerName = $env:COMPUTERNAME
		)
		Begin
		{
			Write-Verbose " [Test-Port] :: Start Script"
			Write-Verbose " [Test-Port] :: Setting Error state = 0"
		}
		
		Process
		{
			
			Write-Verbose " [Test-Port] :: Creating [system.Net.Sockets.TcpClient] instance"
			$tcpclient = New-Object system.Net.Sockets.TcpClient
			
			Write-Verbose " [Test-Port] :: Calling BeginConnect($ComputerName,$TCPport,$null,$null)"
			try
			{
				$iar = $tcpclient.BeginConnect($ComputerName, $TCPport, $null, $null)
				Write-Verbose " [Test-Port] :: Waiting for timeout [$timeout]"
				$wait = $iar.AsyncWaitHandle.WaitOne($TimeOut, $false)
			}
			catch [System.Net.Sockets.SocketException]
			{
				Write-Verbose " [Test-Port] :: Exception: $($_.exception.message)"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			catch
			{
				Write-Verbose " [Test-Port] :: General Exception"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			
			if (!$wait)
			{
				$tcpclient.Close()
				Write-Verbose " [Test-Port] :: Connection Timeout"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			else
			{
				Write-Verbose " [Test-Port] :: Closing TCP Socket"
				try
				{
					$tcpclient.EndConnect($iar) | out-Null
					$tcpclient.Close()
				}
				catch
				{
					Write-Verbose " [Test-Port] :: Unable to Close TCP Socket"
				}
				$true
			}
		}
		End
		{
			Write-Verbose " [Test-Port] :: End Script"
		}
	}
	#endregion 
	
	#region Test-PSRemoting
	
	function Test-PSRemoting
	{
		Param (
			[alias('dnsHostName')]
			[Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName
		)
		Process
		{
			Write-Verbose " [Test-PSRemoting] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			
			try
			{
				
				$result = Invoke-Command -ComputerName $computername { 1 } -ErrorAction SilentlyContinue
				
				if ($result -eq 1)
				{
					return $True
				}
				else
				{
					return $False
				}
			}
			catch
			{
				return $False
			}
		}
	}
	
	#endregion
	
	#region Test-RegistryKey 
	
	function Test-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Test for given the registry key.
		            
		        .Description
		            Test for given the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to test the registry key on.
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Get-RegistryKey
		        
		        .Notes
		            NAME:      Test-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			
			[Parameter(ValueFromPipelineByPropertyName = $True, mandatory = $true)]
			[string]$Path,
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Begin
		{
			
			Write-Verbose " [Test-RegistryKey] :: Start Begin"
			
			Write-Verbose " [Test-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Test-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Test-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Test-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Test-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Test-RegistryKey] :: Start Process"
			
			Write-Verbose " [Test-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Test-RegistryKey] :: `$RegHive = $RegHive"
				
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Test-RegistryKey] :: `$BaseKey = $BaseKey"
				
				Try
				{
					$Key = $BaseKey.OpenSubKey($KeyPath)
					if ($Key)
					{
						$true
					}
					else
					{
						$false
					}
				}
				catch
				{
					$false
				}
			}
			Write-Verbose " [Test-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Test-RegistryValue 
	
	function Test-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Test the value for given the registry value.
		            
		        .Description
		            Test the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter Value 
		            Value to check for.
		            
		        .Parameter ComputerName 
		            Computer to test.
		            
		        .Example
		            Test-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State -Value 0
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0
		            
		        .Example
		            Test-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0 on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		        
		        .Notes    
		            NAME:      Test-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Process
		{
			
			Write-Verbose " [Test-RegistryValue] :: Begin Process"
			Write-Verbose " [Test-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName
			Write-Verbose " [Test-RegistryValue] :: Get-RegistryKey returned $Key"
			if ($Value)
			{
				try
				{
					$CurrentValue = $Key.GetValue($Name)
					$Value -eq $CurrentValue
				}
				catch
				{
					$false
				}
			}
			else
			{
				try
				{
					$CurrentValue = $Key.GetValue($Name)
					if ($CurrentValue) { $True }
					else { $false }
				}
				catch
				{
					$false
				}
			}
			Write-Verbose " [Test-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Test-TcpPort
	function Test-TcpPort ($ComputerName, [int]$port = 80)
	{
		$socket = new-object Net.Sockets.TcpClient
		$socket.Connect($ComputerName, $port)
		if ($socket.Connected)
		{
			$status = "Open"
			$socket.Close()
		}
		else
		{
			$status = "Closed / Filtered"
		}
		$socket = $null
		Add-RichTextBox "ComputerName:$ComputerName`nPort:$port`nStatus:$status"
	}
	#endregion
	
	# Taskmanager Functions
	#region initialize-stuff
	function initialize-stuff
	{
		### Basically just an initialization routine for the hashes and the drawing objects.
		$server = $things["machine"];
		update-Status-Label "Initializing server information...";
		$label3.update();
		$available = load-os-info $server;
		update-Status-Label "Initializing processes...";
		
		$ysize = 0;
		$procs = return-win32_perfrawdata_perfproc_process $server;
		foreach ($proc in $procs)
		{
			if ($proc.IDProcess -eq 0)
			{
				$beforeprocs[0] = $proc.percentprocessortime;
			}
			else
			{
				$beforeprocs.Add($proc.IDProcess, $proc.percentprocessortime);
			}
		}
		
		update-Status-Label "Initializing CPU...";
		$t1 = return-win32_PerfRawData_PerfOS_processor $server;
		$ch = new-object system.drawing.drawing2d.HatchBrush([system.drawing.drawing2d.hatchstyle]::LargeGrid, $things["colors"][1], $things["colors"][2]);
		
		update-Status-Label "Initializing graphics...";
		$orderarray = New-Object -TypeName System.Collections.ArrayList;
		foreach ($cpu in $t1) { $orderarray.add($cpu.name); }
		$y = 100;
		$x = -550;
		$counter = 0;
		for ($j = 0; $j -lt $orderarray.count; $j++)
		{
			$t = "";
			$key = $orderarray[$j];
			foreach ($bob in $t1) { if ($bob.Name -eq $key) { $t = $bob; } }
			if (($counter % 8) -eq 0)
			{
				$y = 100;
				$x += 600;
				$xstrpt = $x - 50;
			}
			$keyhash.Add($key, @($t.percentprocessortime, $t.timestamp_sys100ns));
			$pointhash.Add($key, @());
			$ysize += 105;
			$rect = new-object system.drawing.rectangle(($x + 1), ($y - 100), 500, 99);
			$point = new-object system.drawing.pointf(($x - 50), ($y - 15));
			$point2 = new-object system.drawing.pointf(($x - 50), ($y - 50));
			$parms.Add($key, @($x, $y, 0.0, $rect, $ch, $point, $point2));
			$points = @(new-object system.drawing.point($x, $y));
			$hash.Add($key, @());
			$y = $y + 100;
			$counter++;
		}
		$keyhash.Add("Memory", @(0.0, 0.0));
		$pointhash.Add("Memory", @());
		$hash.Add("Memory", @());
		$xsize = [int32]((($counter/8) + 1) * 575);
		if ($ysize -gt 500) { $ysize = 500; }
		
		#### Memory
		if ((($counter % 8) -eq 0) -OR (($y + 300) -gt 900))
		{
			$y = 100;
			$x += 600;
			$xstrpt = $x - 50;
		}
		else { $ysize += 300; }
		$rect = new-object system.drawing.rectangle(($x + 1), $y, 500, 199);
		$y += 200;
		$ystrpt = $y - 15;
		$point = new-object system.drawing.pointf(($x - 50), ($y - 15));
		$xstrpt = $x - 50;
		$ystrpt = $y - 50;
		$point2 = new-object system.drawing.pointf(($x - 50), ($y - 50));
		$point3 = new-object system.drawing.pointf(($x - 50), ($y - 70));
		$parms.Add("Memory", @($x, $y, 0.0, $rect, $ch, $point, $point2, 0.0, $point3));
		
		update-Status-Label "Updating CPU...";
		
		get-allCPU;
		$parms.Add("Bitmap", @($xsize, $ysize));
		#$picturebox1.AutoScrollMargin = new-object System.Drawing.Size($xsize, $ysize);
		update-Status-Label "";
	}
	#endregion initialize-stuff
	
	#region update-serverdatetime
	function update-serverdatetime
	{
		param ($server);
	}
	#endregion update-serverdatetime
	
	#region load-os-info
	function load-os-info
	{
		param ($server);
		### This was an afterthought sort of like the services tab. It occurred to me that it might be nice to know some of the details
		### about the machine and the OS running on it. All this does is create a bunch of labels on $Tab4 and fill in the information.
		### The only one that's different is the label that shows the localdatetime. That is created in BuildTheForm() so it can be
		### updated every time we refresh the processes.
		while ($Tab4.Controls.count -gt 1) { foreach ($item in $Tab4.Controls) { if ($item.name -ne "ServerTime_Label") { $item.dispose(); } } }
		$tm = 0;
		$cs = CIM-Stuff win32_computersystem;
		$prcsrs = CIM-Stuff win32_processor;
		$srv = CIM-Stuff Win32_OperatingSystem;
		$mem = CIM-Stuff CIM_PhysicalMemory;
		$mem | % { $tm += $_.capacity; }
		$caption = $srv.caption;
		$y = 20;
		$x = 20;
		
		
		$arch = "32-bit";
		if (($srv.OSArchitecture).length -gt 0) { $arch = $srv.OSArchitecture; }
		elseif ($srv.caption -match "x64") { $arch = "64-bit"; }
		foreach ($m in $mem)
		{
			$l = $m.tag + " (" + $m.devicelocator.trimend() + ") | " + (dsize $m.capacity);
			if ($m.speed -gt $null) { $l += " | Speed = " + $m.speed.tostring() + " ns"; }
			$st = "OK";
			if ($m.status -gt $null) { $st = $m.status; }
			$l += " | Status = " + $st;
		}
		
		foreach ($p in $prcsrs)
		{
			$noc = "";
			if ($p.numberofcores -ne $null) { $noc = " -- " + $p.numberofcores + " Cores"; }
		}
		
		
		### If this is an older OS, we need to use Win32_LogicalDisk to get the list of disks. If it's running a later OS, we can use
		### Win32_Volume which will also list the mount points (if any).
		$vlen = 20;
		if ($caption -match "2000")
		{
			$hds = CIM-Stuff Win32_LogicalDisk "DriveType=3" |
			select-object -property @{ expression = { $_.deviceid }; name = "VolumeName" }, @{ expression = { $_.size }; name = "Capacity" },
						  FreeSpace, @{ expression = { $_.volumename }; name = "Label" };
		}
		else
		{
			$hds = CIM-Stuff Win32_Volume "DriveType=3" |
			select-object -property @{ expression = { $_.name }; name = "VolumeName" }, Capacity, FreeSpace, Label;
		}
		
		$hds = $hds | sort-object -property VolumeName;
		foreach ($d in $hds) { if ($d.VolumeName.length -gt $vlen) { $vlen = $d.VolumeName.length; } }
		
		$x = ($vlen * 9);
		$cs.totalphysicalmemory;
	}
	#endregion load-os-info
	
	#region display-myMessageBox
	function display-myMessageBox
	{
		param ($msg);
		$myMessageBox = new-object System.Windows.Forms.Form;
		$myMB_TextBox = new-object System.Windows.Forms.TextBox;
		$myMessageBox.cancelbutton = $Cancel_Button;
		$myMB_TextBox.Anchor = "Left, Top, Right, Bottom";
		$myMB_TextBox.Location = new-object system.drawing.point(0, 0);
		$myMB_TextBox.font = $fonts["cn8"];
		$myMB_TextBox.Name = "myMB_TextBox";
		$myMB_TextBox.multiline = $true;
		$myMB_TextBox.Text = "";
		$myMessageBox.Controls.Add($myMB_TextBox);
		$array = $msg.split("`n");
		$count = $array.count;
		$w = 0;
		foreach ($line in $array) { if ($line.length -gt $w) { $w = $line.length; } }
		$height = $count * 14.0;
		$width = $w * 8.25;
		$myMessageBox.ClientSize = new-object System.Drawing.Size($width, $height);
		$myMB_TextBox.ClientSize = new-object System.Drawing.Size($width, $height);
		$myMB_TextBox.text = $msg;
		$IFWS = new-object System.Windows.Forms.FormWindowState;
		$IFWS = $myMessageBox.WindowState;
		$myMessageBox.TopMost = $true;
		$myMessageBox.Refresh();
		$myMessageBox.BringToFront();
		$myMessageBox.add_Load($OnLoadForm_StateCorrection);
		$myMessageBox.Show() | Out-Null;
	}
	#endregion display-myMessageBox
	
	#region get-services
	function get-services
	{
		### Simply loads the services on the Services tab ($Tab3).
		$server = $things["machine"];
		$listview2.Items.Clear();
		foreach ($s in (return-win32_Service $server))
		{
			$lvi = new-object system.windows.forms.ListViewItem($s.displayname);
			if ($s.description -eq $null) { $s.description = ""; }
			foreach ($c in (1..($listview2.columns.count - 1)))
			{
				$name = $listview2.columns[$c].name;
				$lvi.subitems.add($s.$name);
			}
			
			$listview2.Items.Add($lvi);
		}
		
		$error.clear;
	}
	#endregion get-services
	
	#region get-processes
	function get-processes
	{
		param ($update);
		### Loads and updates the $listview1 listview on $Tab1.
		$server = $things["machine"];
		$procs = return-win32_perfrawdata_perfproc_process $server;
		$idle = $cpu = $totalcpu = $totalcpuUsed = 0;
		$procs | % { if ($_.name -eq "_Total") { $totalcpu = [long]$_.percentprocessortime - [long]$beforeprocs[$_.IDProcess]; } };
		if ($update -eq $false)
		{
			$listview1.items.clear();
			$users = @{ };
			foreach ($proc in (CIM-Stuff win32_process))
			{
				$users.add($proc.ProcessID, ($proc |
				Invoke-CimMethod -CimSession $things["session"] -MethodName GetOwner).user);
			}
		}
		
		drop-dead-procs $procs;
		foreach ($proc in $procs)
		{
			$idproc = $proc.IDProcess;
			if ($proc.Name -eq "Idle")
			{
				$idle = kbytes $proc.WorkingSet;
				if ($update -eq $false) { make-listviewitem $proc $null; }
			}
			elseif ($proc.Name -ne "_Total")
			{
				if ($update -eq $false)
				{
					$cpu = pcnt-cpu $proc.percentprocessortime $beforeprocs[$idproc] $totalcpu;
					$totalcpuUsed += $cpu;
					make-listviewitem $proc $users[$idproc];
				}
				elseif ($beforeprocs[$idproc] -eq $null)
				{
					### If this is a new process, create a ListViewItem for it.
					$beforeprocs.Add($idproc, $proc.percentprocessortime);
					$cpu = 0;
					make-listviewitem $proc (CIM-Method win32_process ("ProcessID='" + $idproc + "'") GetOwner).user;
				}
				else
				{
					### Otherwise, just calculate the CPU for it.
					$cpu = pcnt-cpu $proc.percentprocessortime $beforeprocs[$idproc] $totalcpu;
					$totalcpuUsed += $cpu;
				}
				
				### Update the memory and CPU for the process in its ListView entry
				$lvi = $listview1.FindItemWithText($idproc)
				if ($lvi.SubItems[3].Text -ne [int32]($cpu)) { $lvi.SubItems[3].Text = [int32]($cpu); }
				if ($lvi.SubItems[4].Text -ne (kbytes $proc.WorkingSet)) { $lvi.SubItems[4].Text = kbytes $proc.WorkingSet; }
			}
			
			$beforeprocs[$idproc] = $proc.percentprocessortime;
		}
		
		$indx = $listview1.FindItemWithText("Idle").index;
		$cpu = [int32](100 - $totalcpuUsed);
		$listview1.Items[$indx].SubItems[3].Text = [int32]($cpu);
		$listview1.Items[$indx].SubItems[4].Text = $idle;
		$listview1.refresh();
		$things["procs"] = ($procs.count - 1);
		$things["cpu"] = [int32]$totalcpuUsed;
		update-Procs-Label;
		update-serverdatetime $server;
		if ($things["LVCols"] -ne $null)
		{
			if (($things["LVCols"] -eq 0) -OR ($things["LVCols"] -eq 2))
			{
				$listview1.ListViewItemSorter = new-object ListViewItemComparer($things["LVCols"], $listview1.Sorting);
			}
			else
			{
				$listview1.ListViewItemSorter = new-object ListViewItemIntComparer($things["LVCols"], $listview1.Sorting);
			}
		}
		
	}
	#endregion get-processes
	
	#region make-listviewitem
	function make-listviewitem
	{
		param ($proc,
			$user);
		$idproc = $proc.IDProcess;
		$lvi = new-object system.windows.forms.ListViewItem($proc.Name);
		$lvi.SubItems.Add($idproc);
		if ($user -eq $null) { $user = "SYSTEM"; }
		$lvi.SubItems.Add($user);
		$lvi.SubItems.Add(0);
		$mem = kbytes $proc.WorkingSet;
		$lvi.SubItems.Add($mem);
		$listview1.Items.Add($lvi);
	}
	#endregion make-listviewitem
	
	#region drop-dead-procs
	function drop-dead-procs
	{
		param ($procs);
		$temp = @{ };
		$currp = @();
		foreach ($proc in $procs) { $currp += $proc.IDProcess; }
		foreach ($idproc in $beforeprocs.Keys) { if ($currp -notcontains $idproc) { $temp.Add($idproc, 0); } }
		foreach ($procid in $temp.Keys)
		{
			$indx = $listview1.FindItemWithText($procid).index;
			$listview1.Items[$indx].Remove();
			$beforeprocs.Remove($procid);
		}
		
		$temp.clear()
	}
	#endregion drop-dead-procs
	
	#region set-context-menu
	function set-context-menu
	{
		foreach ($si in $listview2.SelectedItems)
		{
			if ($si.subitems[($listview2.columns["state"].index)].text -eq "Running")
			{
				$start_svc.enabled = $false;
				$stop_svc.enabled = $true;
				$cycle_svc.enabled = $true;
			}
			elseif ($si.subitems[($listview2.columns["state"].index)].text -eq "Stopped")
			{
				$start_svc.enabled = $true;
				$stop_svc.enabled = $false;
				$cycle_svc.enabled = $false;
			}
		}
	}
	#endregion set-context-menu
	
	#region stop-related-services
	function stop-related-services
	{
		param ($sname,
			$dependencies);
		if ($dependencies.count -gt 0)
		{
			foreach ($d in $dependencies) { stop-start-service $d.name "Stop"; }
		}
		
		stop-start-service $sname "Stop";
	}
	#endregion stop-related-services
	
	#region start-related-services
	function start-related-services
	{
		param ($sname,
			$dependencies);
		stop-start-service $sname "Start";
		if ($dependencies.count -gt 0)
		{
			foreach ($d in $dependencies) { stop-start-service $d.name "Start"; }
		}
	}
	#endregion start-related-services
	
	#region stop-start-service
	function stop-start-service
	{
		param ($sname,
			$whattodo);
		$vars = @{
			"Stop" = @("Stopped", "Stopping", "1", { $svc.Stop() }, { $svc.StopService() });
			"Start" = @("Running", "Starting", "4", { $svc.Start() }, { $svc.StartService() });
		};
		
		$svc = CIM-Stuff win32_service ("name = '" + $sname + "'");
		if (($svc.state -eq $vars[$whattodo][0]) -OR ($svc.state -eq $null)) { return; }
		if ($svc.StartMode -eq "Disabled")
		{
			[system.windows.forms.messagebox]::Show("Cannot start or stop a disabled service, and I'm not enabling it just for you.");
			return;
		}
		
		if ($things["adsi"])
		{
			$cmd = "[ADSI](""WinNT://" + $things["machine"] + "/" + $sname + ",service"")";
			$svc = invoke-expression $cmd;
			if ($svc.status -ne $vars[$whattodo][2]) { &$vars[$whattodo][3]; }
		}
		else
		{
			$svc = CIM-Stuff win32_Service "Name='$sname'";
			if ($svc.state -ne $vars[$whattodo][0])
			{
				$r = &$vars[$whattodo][4];
				if ($r.returnvalue -ne 0)
				{
					[system.windows.forms.messagebox]::Show("Unable to $whattodo the $sname service.");
					return;
				}
			}
		}
		
		if ((GetStatus $sname $vars[$whattodo][0]) -eq 1)
		{
			### Update the status of the service
			($listview2.items[($listview2.FindItemWithText($sname).index)]).subitems[($listview2.columns["state"].index)].text = $vars[$whattodo][0];
			set-context-menu;
		}
	}
	#endregion stop-start-service
	
	#region reset-iis
	function reset-iis
	{
		$server = $things["machine"];
		$test = iisreset $server;
		$outcome = "Failed";
		if ($test -match "successfully restarted") { $outcome = "Succeeded"; }
	}
	#endregion reset-iis
	
	#region pcnt-cpu
	### CPU percentage calculation. I picked this up from an article on SQL server long ago. It seems to be the
	### same one used for the OS.
	function pcnt-cpu
	{
		(([long]$args[0] - [long]$args[1]) / [system.double]$args[2]) * 100;
	}
	#endregion pcnt-cpu
	
	#region kbytes
	function kbytes
	{
		param ($dsize);
		[Math]::round($dsize / 1kb, 2);
	}
	#endregion  
	
	#region dsize
	function dsize
	{
		param ($dsize);
		$size = "";
		if ($dsize -ge 1gb) { $size = [Math]::round($dsize / 1gb, 2).tostring() + " GB"; }
		elseif ($dsize -ge 1mb) { $size = [Math]::round($dsize / 1mb, 2).tostring() + " MB"; }
		elseif ($dsize -ge 1kb) { $size = [Math]::round($dsize / 1kb, 2).tostring() + " KB"; }
		else { $size = $dsize.tostring() + " B"; }
		$size;
	}
	#endregion
	
	#region return-Win32_PerfFormattedDAte_PerfProc_Process
	### These two functions get their data depending on how new the OS is. In the most recent version of Task Manager,
	### it uses WorkingSetPrivate (that's the default) for the memory, but that isn't a property on older versions.
	### Whether it's available or not is determined during initialization.
	function return-Win32_PerfFormattedData_PerfProc_Process
	{
		param ($server);
		if ($things["wsp"])
		{
			(CIM-Stuff Win32_PerfFormattedData_PerfProc_Process) |
			select-object -property idprocess, name, @{ expression = { $_.workingsetprivate }; name = "workingset" }, percentprocessortime;
		}
		else
		{
			(CIM-Stuff Win32_PerfFormattedData_PerfProc_Process) | select-object -property idprocess, name, workingset, percentprocessortime;
		}
	}
	#endregion
	
	#region return-win32_perfrawdata_perfproc_process
	function return-win32_perfrawdata_perfproc_process
	{
		param ($server);
		if ($things["wsp"])
		{
			(CIM-Stuff win32_perfrawdata_perfproc_process) |
			select-object -property idprocess, name, @{ expression = { $_.workingsetprivate }; name = "workingset" }, percentprocessortime;
		}
		else
		{
			(CIM-Stuff win32_perfrawdata_perfproc_process) | select-object -property idprocess, name, workingset, percentprocessortime;
		}
	}
	#endregion
	
	#region return-win32_service
	function return-win32_Service
	{
		CIM-Stuff win32_Service | select-object -property name, displayname, processid, description, state, startmode, startname | Sort-Object -property displayname;
	}
	
	#endregion
	
	#region return-win32_PerfRawData_PerfOS_processor
	function return-win32_PerfRawData_PerfOS_processor
	{
		CIM-Stuff win32_PerfRawData_PerfOS_processor | select-object -property name, percentprocessortime, timestamp_sys100ns;
	}
	#endregion
	
	#region CIM-Stuff
	function CIM-Stuff
	{
		param ($class,
			$filter);
		if ($filter -eq $null)
		{
			Get-CimInstance -class $class -CimSession $things["session"];
		}
		else
		{
			Get-CimInstance -class $class -filter $filter -CimSession $things["session"];
		}
	}
	#endregion
	
	#region CIM-Method
	function CIM-Method
	{
		param ($class,
			$filter,
			$method);
		CIM-Stuff $class $filter | Invoke-CimMethod -CimSession $things["session"] -MethodName $method;
	}
	#endregion
	
	#region get-allCPU
	function get-allCPU
	{
		### This calculates the CPU for the individual processors and adds them into $hash.
		$server = $things["machine"];
		$p2 = return-win32_PerfRawData_PerfOS_processor $server;
		for ($i = 0; $i -lt $p2.length; $i++)
		{
			$key = $p2[$i].Name;
			$cpu = 100.0 - (pcnt-cpu $p2[$i].percentprocessortime $keyhash[$key][0] ([system.double]$p2[$i].timestamp_sys100ns - [system.double]$keyhash[$key][1]));
			$count = $hash[$key].count;
			if ($cpu -lt 0.0) { $cpu = 0.0; }
			$x = ($count * 5) + $parms[$key][0];
			$y = $parms[$key][1] - $cpu;
			$parms[$key][2] = $cpu;
			$point = new-object system.drawing.point($x, $y);
			$pointhash[$key] += $y;
			$hash[$key] += $point;
			$keyhash[$key] = @([system.double]$p2[$i].percentprocessortime, [system.double]$p2[$i].timestamp_sys100ns);
		}
		
		##### Memory
		$tpm = (CIM-Stuff win32_computersystem).totalphysicalmemory;
		$avb = (CIM-Stuff Win32_PerfRawData_PerfOS_Memory).availablebytes;
		$newy = (1 - ([system.double]$avb / [system.double]$tpm)) * 200;
		$count = $hash["Memory"].count;
		$x = ($count * 5) + $parms["Memory"][0];
		$y = $parms["Memory"][1] - $newy;
		$parms["Memory"][2] = $newy / 2;
		$parms["Memory"][7] = [system.double]$tpm - [system.double]$avb;
		$point = new-object system.drawing.point($x, $y);
		$pointhash["Memory"] += $y;
		$hash["Memory"] += $point;
	}
	#endregion
	
	#region Plot
	function Plot
	{
		### Draw the pretty pictures of CPU and Memory usage
		param ($old_btmp);
		if ($old_btmp -ne $null) { $old_btmp.Dispose(); }
		$btmp = new-object system.drawing.bitmap($parms["Bitmap"][0], $parms["Bitmap"][1]);
		$grfx = [system.drawing.graphics]::fromimage($btmp);
		
		### Coordinates drawing the graphs for the CPU and memory.
		$orderarray = build-order;
		build-axes $grfx;
		for ($i = 0; $i -lt $orderarray.count; $i++)
		{
			$key = $orderarray[$i];
			$ptarray = $hash[$key];
			for ($j = 1; $j -lt $ptarray.count; $j++)
			{
				$grfx.DrawLine($things["plotpens"][$j - 1], $ptarray[$j - 1], $ptarray[$j]);
			}
		}
		
		$Picturebox1.image = $btmp;
		$grfx.Dispose();
		$pointhash = shift-arrays $pointhash;
		reload-points;
		$error.clear();
		$btmp;
	}
	#endregion
	
	#region reload-points
	function reload-points
	{
		### This may seem like a lot of trouble for nothing, but if you go ahead and turn everything into drawing points and
		### store them in an array to pass into DrawLines, it works much more smoothly than passing the coordinates into
		### DrawLine one at a time and having it do the conversion. Take my word for it, watching it draw a bunch of line
		### segments one at a time is entertaining as hell, but this gives better performance.
		$pts = @{ };
		foreach ($key in $keyhash.Keys) { $points = @(new-object system.drawing.point($parms[$key][0], $pointhash[$key][0])); $pts.Add($key, $points); }
		for ($i = 1; $i -lt $pointhash["_Total"].count; $i++)
		{
			$x = ($i * 5);
			foreach ($key in $keyhash.Keys)
			{
				$pts[$key] += new-object system.drawing.point(($x + $parms[$key][0]), $pointhash[$key][$i]);
			}
		}
		
		foreach ($key in $keyhash.Keys) { $hash[$key] = $pts[$key]; }
		$pts = $null;
	}
	#endregion
	
	#region shift-arrays
	### We only maintain 100 sets of data for each CPU and the memory. When the array gets to 100, we
	### pop off the top one and the new one gets added to the end.
	function shift-arrays ($myhash)
	{
		if ($myhash["_Total"].length -ge 100)
		{
			$null, $things["plotpens"] = $things["plotpens"];
			foreach ($key in $keyhash.Keys)
			{
				$null, $myhash[$key] = $myhash[$key];
			}
		}
		
		$myhash;
	}
	#endregion
	
	#region build-order
	### Probably not needed, but I want to make sure that the CPUs are ordered numerically. It just makes things neater.
	function build-order
	{
		$count = $keyhash.count;
		$count = $count - 1;
		$orderarray = @(0..$count);
		for ($i = 0; $i -lt $count - 1; $i++) { $orderarray[$i] = [system.string]$i; }
		$orderarray[$count - 1] = "_Total";
		$orderarray[$count] = "Memory";
		$orderarray;
	}
	#endregion
	
	#region build-axes
	function build-axes
	{
		param ($grfx);
		### The various drawing surfaces for each processor and memory are stored in the $parms hash. That
		### way we don't have to keep recalculating them for each refresh.
		$orderarray = build-order;
		$mypen = $pens["white"];
		$mypen.Width = 2;
		$font = $fonts["verdana8"];
		$brush = $brushes["red"];
		$y = $add = 100;
		$x = -550;
		$xstrpt = $x - 50;
		for ($i = 0; $i -lt $orderarray.count; $i++)
		{
			$key = $orderarray[$i];
			$x = $parms[$key][0];
			$y = $parms[$key][1];
			if ($key -eq "Memory") { $add = 200; }
			$grfx.FillRectangle($parms[$key][4], $parms[$key][3]);
			$grfx.Drawline($mypen, $x, $y, $x, $y - $add);
			$grfx.Drawline($mypen, $x, $y, $x + 500, $y);
			$grfx.DrawString($key, $font, $brush, $parms[$key][5]);
			$pct = "{0:#.##}%" -f $parms[$key][2];
			$grfx.DrawString($pct, $font, $brush, $parms[$key][6]);
		}
		
		$newgb = "{0:#.##}GB" -f ($parms["Memory"][7] / 1gb);
		$grfx.DrawString($newgb, $font, $brush, $parms["Memory"][8]);
		
	}
	#endregion
	
	#region update-procs-label
	function update-Procs-Label
	{
		$label2.Text = "Updating every " + $things["timer"].interval.ToString() + " ms -- Processes: " +
		($things["procs"]).ToString() + "  |  CPU Usage: " + ($things["cpu"]).ToString() + "%";
	}
	#endregion
	
	#region update-status-label
	function update-Status-Label
	{
		$label3.Text = $args[0];
		$label3.update();
	}
	#endregion
	
	#region restart-timer
	### Called when the "Pause"/"Restart" button is pushed.
	function Restart-timer
	{
		$button2.Text = "Pause";
		$button2.add_click({ Stop-timer; });
		$things["timer"].Enabled = $true;
		$things["timer"].Start();
	}
	#endregion
	
	#region stop-timer
	function Stop-timer
	{
		$things["timer"].Enabled = $false;
		$things["timer"].Stop();
		$button2.Text = "Restart";
		$button2.add_click({ Restart-timer; });
	}
	#endregion
	
	#region Stop-stuff
	### Try to shut down in an orderly fashion. Called when the "Quit" button is pressed.
	function Stop-stuff
	{
		Stop-timer;
		$things["timer"].Dispose();
		if ($things["session"] -ne $null) { remove-cimsession -cimsession $things["session"] }
		$things["session"].Close();
		$things["session"].Dispose();
	}
	#endregion
	
	#region getStatus
	function GetStatus
	{
		param ($service,
			$check_status)
		### This is supposed to sit and wait until a service has been stopped or started. It tests the
		### service status until it matches what we want it to be. If it hasn't done what we requested
		### after 30 seconds, we flag an error and go on.
		$server = $things["machine"];
		$counter = 0;
		$results = 1;
		$test_status = (CIM-Stuff win32_service ("name='" + $service + "'")).State;
		### The thinking behind this is that if it can't kill the service withing 30 seconds, it isn't going to die. So
		### we won't leave ourself hanging out in here. We'll just flag an error and go on with this tedium we call life.
		while (($check_status -ne $test_status) -AND ($counter -lt 60))
		{
			start-sleep -m 500;
			$test_status = (CIM-Stuff win32_service ("name='" + $service + "'")).State;
			$counter++;
			waitingtodie $counter "-";
			if ($counter -eq 60) { $results = 0; };
		}
		
		$results;
	}
	#endregion
	
	#region initialize-the-hashes
	function initialize-the-hashes
	{
		$things["timer"].Dispose();
		if ($things["session"] -ne $null)
		{
			remove-cimsession -cimsession $things["session"];
			$things["session"].Close();
			$things["session"].Dispose();
		}
		
		$keyhash.clear();
		$hash.clear();
		$pointhash.clear();
		$parms.clear();
		$beforeprocs.clear();
		$things.clear();
		initialize-things;
	}
	#endregion
	
	#region initialize-things
	function initialize-things
	{
		$things.add("wsp", $false);
		$things.add("adsi", $true);
		$things.add("LVCols", $null);
		$things.add("SDGCols", $null);
		$things.add("colors", (.{$args} red darkgreen black lightgreen white blue));
		$things.add("timer", (new-object System.Windows.Forms.timer));
		$things.add("machine", $textbox1.text);
		$things.add("plotpens", @((new-object system.drawing.pen("lightgreen")), (new-object system.drawing.pen("lightgreen"))));
		$things.add("procs", 0);
		$things.add("cpu", 0);
		$things.add("session", $null);
		$things.add("response", $null);
		if ($things["machine"] -gt "")
		{
			$things["session"] = New-CimSession -ComputerName $things["machine"] -SessionOption (New-CimSessionOption -Protocol Dcom);
		}
	}
	#endregion
	
	#region test-interval
	function test-interval
	{
		param ($span)
		if ($span -gt $things["timer"].interval) { $things["plotpens"] += $pens["red"]; }
		else { $things["plotpens"] += $pens["lightgreen"] };
	}
	#endregion
	
	#region do-it-to-it
	function do-it-to-it
	{
		### Test the status of the telephony service on the remote machine. We don't really care what the status
		### is, we just want to know that we can get to it. Through playing around with some of this stuff, I've
		### found that this is a way to test that a server is available without generating a bunch of errors.
		$server = $textbox1.text;
		#   if ((new-object system.serviceprocess.servicecontroller("telephony", $server)).status -eq $null) {
		#     $rtrn = [system.windows.forms.messagebox]::Show("Cannot find the $server machine. Make sure it exists and you have permissions to it.");
		#    $main.Cursor = [System.Windows.Forms.Cursors]::Default;
		#   return;
		#}
		
		initialize-the-hashes;
		
		try
		{
			$props = CIM-Stuff win32_perfrawdata_perfproc_process;
			if ($props[0].__property_count -gt 36) { $things["wsp"] = $true; }
		}
		catch
		{
			$rtrn = [system.windows.forms.messagebox]::Show("It looks as though the $server machine does not allow remote WMI calls. We won't be able to monitor it.");
			return;
		}
		
		### Start initializing things.
		initialize-stuff;
		get-services;
		get-allCPU;
		$btmp = new-object system.drawing.bitmap($parms["Bitmap"][0], $parms["Bitmap"][1]);
		get-processes $false;
		$btmp = Plot $btmp;
		
		### The $handler is a list of what to do when the timer fires off.
		### Notice that timer is stopped until the remote machine responds and is then restarted. This prevents
		### putting more stress on a remote box that's already overloaded.
		$handler = {
			$things["timer"].Stop();
			$tmthen = get-date;
			get-allCPU;
			get-processes $true;
			$tmspn = [math]::round((new-timespan -start $tmthen).totalmilliseconds, 0);
			test-interval $tmspn;
			$btmp = Plot $btmp;
			$things["timer"].Start();
		}
		
		
		### This is how I've implemented the update interval. The regular TaskManager refreshes about once a
		### second, but this can run into problems if you try that, particularly if you're going for a machine that
		### is pretty busy. If things are pegged on a machine, it may not have the resources to get back to you every
		### second, so after we've initialized everything, we take a reading of how long it takes to run through the
		### three things it's going to have to do each time the timer fires off. It may take a long time to
		### get through with the initial stuff, but seems to work pretty well after that. To be honest, I haven't run
		### into many cases where the machine resources have slowed things down. It seems mostly limited by
		### the network. You can probably hardcode this to run once a second and it will do great 99 times out of
		### a 100, but that one time when you really need it will be the one that messes up.
		$et = [System.Diagnostics.Stopwatch]::StartNew();
		invoke-command -scriptblock $handler;
		$et.Stop();
		$intrvl = [Math]::round($et.Elapsed.TotalMilliseconds, 0);
		if ($intrvl -lt 1000) { $intrvl = 1000; }
		$things["timer"].interval = $intrvl;
		$trackbar1.value = $intrvl;
		$things["timer"].add_tick($handler);
		$things["timer"].Start();
	}
	#endregion#endregion Source: Globals.ps1

#region Source: About.psf
function Call-About_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ZBwAAB+LCAAAAAAABADVWV2P2joQfa/U/2BFVZ8oECAL7IVIQLvS1XLvroCWvlWOM4CLE0e2WaC/
/joEClvoxQkfKkJCJJnx8cw5HuxJoweEv4BYfsQKI/1DUh42rZLlvn2DUONJ0DENMXugDP7FAbgt
j89UPpKjRmHvWeLhfQeikFpG0LT6S6kgyA9p6PO5zD9wESTfOXToUQ59WU+gki/GnxzqzJiaCWiG
MFMCsxx6nnmMkkdYDvgUwqZXrWKHOHd2vVyBYq1uoVBPpWmN9Hi2hciEMl9oO6vDQyU4k0lgeqLP
gkcg1HLt0CIEItWeKcXDjY226sEItD+BtZm3Mnh6tFBhM1BhM9JvRu4wCqHq0x9guWW7lkPlu+pR
pzgfbS58EH21ZNrzgS7A/0gx4+Ojzv/gBQ00XpsvtCNmEo670DCtS8y55a4SfdS2r7BQz1xSReP0
dnRCdGREAIRHfQewUFYivH3bTy96qLVhl2N/PaFv8e9GYfV0Y3pcmT1KJjGaTsLFBSo0ltJYHl/8
r07389HlBCdptMs5ZJdLe1n5HVe7mAZOPcD+U8iWljsQs309HGB5pfFSPZ5WvWLgMMDe36EPizgU
E/NYCWgRsHsZYaJvRAIkiBcNOpjgcCqR4vdvHgQOCeXyw1f8QkGgDlbow/ux+gvN5/M8wz+Wc122
/ICGecKDfUkVEqGYy6ZLw2kXe8AuLhqmkViMVMosGacYFyBjyWwRjfm3nbscKhnxuaXfZHht3lc8
MpZjUjjetWZqwsWnAFN2yOlVBdHR6nJNpuDvhv5t5/4vReUWxJK9vsRiqZnXly3iZcViMvxJYhkO
h9mkYp9VKteRSYxSzSyRSl0X+6JjrpEVnLk+qun1UUtBdxTpHK1i6WKpPkc+Vgd2Pn8ydbXM1JUy
MGeS2zVzxWJq5kx0kTAXs4VukS47O1/ldMU4QbsoXybiSfgagqc3/zfGlXPSH6dTT8eVSTKzF0WT
Ld9+UVzn87ZouztlhaVlzSSv11hgN8lU5RSm0pxiVmAXZcr4/OrGcWJyoJfxJzN12oHT6HS/Q1WK
w2aGUmh01tw9DsS3bouuE1tKKTcZF11YRoe9pEW4Iuv+DEwlbeCLU7VtJqchqxUSHabltrn2DnKo
R8eT/Wqy75c0j3sg9Wwt9+nRwGWri1LZ1hU3Ra9xE5uxNqpOamkUjaVhNI/PEr5QOcNs1XJvYzLt
cBZn+mAL4ZWqXl+0pIRAKwDkxnZ9Z+kGknDBqHcGFTUKP0f9FSXR7TUwzr42jiPGb6quAyTwnIbj
LFjF8sgZVUe27TtFXMbHsb4G7CoxdbiA8wP9vEwk3yjsvlV0/wOb7QSrZBwAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$linklabel2 = New-Object 'System.Windows.Forms.LinkLabel'
	$linklabel1 = New-Object 'System.Windows.Forms.LinkLabel'
	$label7 = New-Object 'System.Windows.Forms.Label'
	$label8 = New-Object 'System.Windows.Forms.Label'
	$label18 = New-Object 'System.Windows.Forms.Label'
	$label5 = New-Object 'System.Windows.Forms.Label'
	$label6 = New-Object 'System.Windows.Forms.Label'
	$label4 = New-Object 'System.Windows.Forms.Label'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$form1_Load={
		if(Test-Path "C:\Program Files (x86)\Sysinternals" -ErrorAction 'SilentlyContinue') {
			$label13.Text = "Installed"
			$label13.ForeColor = "Green"
		}
		else {
			$label13.Text = "Not Installed"
			$label13.ForeColor = "Red"
		}	
		
		if(Test-Path "C:\Program Files\Nirsoft\NirLauncher.exe" -ErrorAction 'SilentlyContinue') {
			$label16.Text = "Installed"
			$label16.ForeColor = "Green"
		}
		else {
			$label16.Text = "Not Installed"
			$label16.ForeColor = "Red"			
		}
	}
	
	$linklabel1_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	[System.Diagnostics.Process]::Start("$AuthorWWW")
		
	}
	
	$linklabel2_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	[System.Diagnostics.Process]::Start("mailto:$authoremail?subject=$AuthorEmail")
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:About_richtextbox1 = $richtextbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabel2.remove_LinkClicked($linklabel2_LinkClicked)
			$linklabel1.remove_LinkClicked($linklabel1_LinkClicked)
			$form1.remove_Load($form1_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	#
	# form1
	#
	$form1.Controls.Add($richtextbox1)
	$form1.Controls.Add($linklabel2)
	$form1.Controls.Add($linklabel1)
	$form1.Controls.Add($label7)
	$form1.Controls.Add($label8)
	$form1.Controls.Add($label18)
	$form1.Controls.Add($label5)
	$form1.Controls.Add($label6)
	$form1.Controls.Add($label4)
	$form1.Controls.Add($label2)
	$form1.Controls.Add($label1)
	$form1.Controls.Add($buttonOK)
	$form1.AcceptButton = $buttonOK
	$form1.ClientSize = '318, 367'
	$form1.FormBorderStyle = 'FixedDialog'
	$form1.MaximizeBox = $False
	$form1.MinimizeBox = $False
	$form1.Name = 'form1'
	$form1.StartPosition = 'CenterScreen'
	$form1.Text = 'About'
	$form1.add_Load($form1_Load)
	#
	# richtextbox1
	#
	$richtextbox1.Location = '13, 132'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.ReadOnly = $True
	$richtextbox1.Size = '293, 194'
	$richtextbox1.TabIndex = 13
	$richtextbox1.Text = 'Thanks to:
Francios-Xavier Cat -> www.lazywinadmin.com'
	#
	# linklabel2
	#
	$linklabel2.Location = '150, 36'
	$linklabel2.Name = 'linklabel2'
	$linklabel2.Size = '156, 23'
	$linklabel2.TabIndex = 12
	$linklabel2.TabStop = $True
	$linklabel2.Text = "$AuthorEmail"
	$linklabel2.add_LinkClicked($linklabel2_LinkClicked)
	#
	# linklabel1
	#
	$linklabel1.Location = '150, 82'
	$linklabel1.Name = 'linklabel1'
	$linklabel1.Size = '156, 23'
	$linklabel1.TabIndex = 11
	$linklabel1.TabStop = $True
	$linklabel1.Text = "$AuthorWWW"
	$linklabel1.add_LinkClicked($linklabel1_LinkClicked)
	#
	# label7
	#
	$label7.Location = '149, 105'
	$label7.Name = 'label7'
	$label7.Size = '176, 23'
	$label7.TabIndex = 8
	$label7.Text = "$ApplicationLastUpdate"
	#
	# label8
	#
	$label8.Location = '12, 105'
	$label8.Name = 'label8'
	$label8.Size = '100, 23'
	$label8.TabIndex = 7
	$label8.Text = 'Last Update'
	#
	# label18
	#
	$label18.Location = '13, 82'
	$label18.Name = 'label18'
	$label18.Size = '100, 23'
	$label18.TabIndex = 5
	$label18.Text = 'Website'
	#
	# label5
	#
	$label5.Location = '150, 59'
	$label5.Name = 'label5'
	$label5.Size = '176, 23'
	$label5.TabIndex = 6
	$label5.Text = "$ApplicationVersion"
	#
	# label6
	#
	$label6.Location = '13, 59'
	$label6.Name = 'label6'
	$label6.Size = '100, 23'
	$label6.TabIndex = 5
	$label6.Text = 'Version'
	#
	# label4
	#
	$label4.Location = '13, 36'
	$label4.Name = 'label4'
	$label4.Size = '100, 23'
	$label4.TabIndex = 3
	$label4.Text = 'Contact'
	#
	# label2
	#
	$label2.Location = '150, 13'
	$label2.Name = 'label2'
	$label2.Size = '176, 23'
	$label2.TabIndex = 2
	$label2.Text = "$Authorname"
	#
	# label1
	#
	$label1.Location = '13, 13'
	$label1.Name = 'label1'
	$label1.Size = '100, 23'
	$label1.TabIndex = 1
	$label1.Text = 'Author:'
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '231, 332'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = 'OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: About.psf

#region Source: Options.psf
function Call-Options_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form_options = New-Object 'System.Windows.Forms.Form'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$button2 = New-Object 'System.Windows.Forms.Button'
	$button1 = New-Object 'System.Windows.Forms.Button'
	$textbox8 = New-Object 'System.Windows.Forms.TextBox'
	$textbox9 = New-Object 'System.Windows.Forms.TextBox'
	$label_nirlauncher = New-Object 'System.Windows.Forms.Label'
	$label_sysinternals = New-Object 'System.Windows.Forms.Label'
	$button_OK = New-Object 'System.Windows.Forms.Button'
	$button_Export = New-Object 'System.Windows.Forms.Button'
	$button_import = New-Object 'System.Windows.Forms.Button'
	$button_save = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$button3 = New-Object 'System.Windows.Forms.Button'
	$textbox10 = New-Object 'System.Windows.Forms.TextBox'
	$label_cmrcviewer = New-Object 'System.Windows.Forms.Label'
	$textbox6 = New-Object 'System.Windows.Forms.TextBox'
	$label_sccmnamespace = New-Object 'System.Windows.Forms.Label'
	$checkbox1 = New-Object 'System.Windows.Forms.CheckBox'
	$textbox4 = New-Object 'System.Windows.Forms.TextBox'
	$textbox5 = New-Object 'System.Windows.Forms.TextBox'
	$label_site = New-Object 'System.Windows.Forms.Label'
	$label_sccm = New-Object 'System.Windows.Forms.Label'
	$label_sccmserver = New-Object 'System.Windows.Forms.Label'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$button6 = New-Object 'System.Windows.Forms.Button'
	$button5 = New-Object 'System.Windows.Forms.Button'
	$button4 = New-Object 'System.Windows.Forms.Button'
	$textbox0 = New-Object 'System.Windows.Forms.TextBox'
	$label_configpath = New-Object 'System.Windows.Forms.Label'
	$textbox3 = New-Object 'System.Windows.Forms.TextBox'
	$label_logpath = New-Object 'System.Windows.Forms.Label'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$label_homepath = New-Object 'System.Windows.Forms.Label'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$label_profilepath = New-Object 'System.Windows.Forms.Label'
	$button_abort = New-Object 'System.Windows.Forms.Button'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$FormEvent_Load = {
		# Change the text of some buttons / menus / groupboxes to the used language		
		$groupbox1.Text = $lang.General
		$button_save.Text = $lang.Save
		$button_abort.Text = $lang.Cancel
		
		#Load Variables into textboxes
		$textbox0.Text = $global:Confpath
		$textbox1.Text = $global:Profilefolder
		$textbox2.Text = $global:Homefolder
		$textbox3.Text = $global:Outfile
		if ($global:SCCMEnabled -eq $true)
		{
			$checkbox1.Checked = $global:SCCMEnabled
			$textbox4.Text = $global:SiteName
			$textbox5.Text = $global:SCCMServer
			$textbox6.Text = $global:SCCMNameSpace
			$textbox10.Text = $global:CmRCViewer
		}
		else
		{
			$checkbox1.Checked = $false
			$textbox4.enabled = $false
			$textbox5.enabled = $false
			$textbox6.enabled = $false
			$textbox10.enabled = $false
		}
		$textbox8.Text = $global:Nirlauncher
		$textbox9.Text = $global:Sysinternals
	}
	############################################################################################
	$checkbox1_CheckedChanged = {
		if ($checkbox1.Checked -eq $true)
		{
			$textbox4.Text = $global:SiteName
			$textbox5.Text = $global:SCCMServer
			$textbox6.Text = $global:SCCMNameSpace
			$textbox10.Text = $global:CmRCViewer
			$textbox4.enabled = $true
			$textbox5.enabled = $true
			$textbox6.enabled = $true
			$textbox10.enabled = $true
		}
		else
		{
			$textbox4.enabled = $false
			$textbox5.enabled = $false
			$textbox6.enabled = $false
			$textbox10.enabled = $false
		}
	}
	
	############################################################################################
	$button_save_Click = {
		if ($textbox1.Text.Length -ne 0)
		{
			if ($textbox2.Text.Length -ne 0)
			{
				if ($textbox3.Text.Length -ne 0)
				{
					if ($checkbox1.Checked -eq $true)
					{
						if ($textbox4.Text.Length -ne 0)
						{
							if ($textbox5.Text.Length -ne 0)
							{
								if ($textbox6.Text.Length -ne 0)
								{
									Save-Config
								}
								else
								{
									Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
								}
							}
							else
							{
								Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
							}
						}
						else
						{
							Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
						}
					}
					else
					{
						Save-Config
					}
				}
				else
				{
					Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
				}
			}
			else
			{
				Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
			}
		}
		else
		{
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
		}
	}
	############################################################################################
	$button_OK_Click = {
		if ($textbox1.Text.Length -ne 0)
		{
			if ($textbox2.Text.Length -ne 0)
			{
				if ($textbox3.Text.Length -ne 0)
				{
					if ($checkbox1.Checked -eq $true)
					{
						if ($textbox4.Text.Length -ne 0)
						{
							if ($textbox5.Text.Length -ne 0)
							{
								if ($textbox6.Text.Length -ne 0)
								{
									Save-Config
									$form_options.DialogResult = 'OK'
								}
								else
								{
									Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
								}
							}
							else
							{
								Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
							}
						}
						else
						{
							Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
						}
					}
					else
					{
						Save-Config
						$form_options.DialogResult = 'OK'
					}
				}
				else
				{
					Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
				}
			}
			else
			{
				Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
			}
		}
		else
		{
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
		}
	}
	############################################################################################
	$button_Export_Click = {
		$folderbrowserdialog1.ShowDialog()
		$save = $folderbrowserdialog1.SelectedPath += "/config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = $SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $save -NoTypeInformation -Force
	}
	############################################################################################
	$button_abort_Click = { $Options.Close() }
	############################################################################################
	$button_import_Click = {
		$openfiledialog1.ShowDialog()
		$load = $openfiledialog1.FileNames
		$Import = Import-Csv -Path $load
		Add-RichTextBox -text $Import
		foreach ($Line in $Import)
		{
			$global:Profilefolder = $($Line."global:Profilefolder")
			$global:Homefolder = $($Line."global:Homefolder")
			$global:Outfile = $($Line."global:Outfile")
			$global:SiteName = $($Line."global:SiteName")
			$global:SCCMServer = $($Line."global:SCCMServer")
			$global:SCCMNameSpace = $($Line."global:SCCMNameSpace")
			$global:SCCMEnabled = $($Line."global:SCCMEnabled")
			$global:Nirlauncher = $($Line."global:Nirlauncher")
			$global:Sysinternals = $($Line."global:Sysinternals")
			$global:CmRCViewer = $($Line."global:CmRCViewer")
		}
		# Saving the imported Config
		Save-Config
	}
	############################################################################################
	
	$button1_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox8.Text = $folderbrowserdialog1.SelectedPath
		$global:Nirlauncher = $textbox8.Text
	}
	
	$button2_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox9.Text = $folderbrowserdialog1.SelectedPath
		$global:Sysinternals = $textbox9.Text
	}
	
	$button3_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox10.Text = $folderbrowserdialog1.SelectedPath
		$global:CmRCViewer = $textbox9.Text
	}
	
	$button4_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox3.Text = $folderbrowserdialog1.SelectedPath
		$global:logpath = $textbox3.Text
	}
	
	$button5_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox1.Text = $folderbrowserdialog1.SelectedPath
		$global:profilepath = $textbox1.Text
	}
	
	$button6_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox2.Text = $folderbrowserdialog1.SelectedPath
		$global:outfile = $textbox2.Text
	}
	
	$form_options_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		$Options.Close()
	}
	############################################################################################
	#region Save-Config
	function Save-Config
	{
		$global:Profilefolder = $textbox1.Text
		$global:Homefolder = $textbox2.Text
		$global:Outfile = $textbox3.Text
		$global:SiteName = $textbox4.Text
		$global:SCCMServer = $textbox5.Text
		$global:SCCMNameSpace = $textbox6.Text
		$global:SCCMEnabled = [bool]$checkbox1.Checked
		$global:Nirlauncher = $textbox8.Text
		$global:Sysinternals = $textbox9.Text
		$global:CmRCViewer = $textbox10.Text
		$Exportpath = $Confpath + "/Config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = $SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $Exportpath -NoTypeInformation
	}
	#endregion 
	############################################################################################
	
	
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form_options.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Options_textbox8 = $textbox8.Text
		$script:Options_textbox9 = $textbox9.Text
		$script:Options_textbox10 = $textbox10.Text
		$script:Options_textbox6 = $textbox6.Text
		$script:Options_checkbox1 = $checkbox1.Checked
		$script:Options_textbox4 = $textbox4.Text
		$script:Options_textbox5 = $textbox5.Text
		$script:Options_textbox0 = $textbox0.Text
		$script:Options_textbox3 = $textbox3.Text
		$script:Options_textbox2 = $textbox2.Text
		$script:Options_textbox1 = $textbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$button2.remove_Click($button2_Click)
			$button1.remove_Click($button1_Click)
			$button_OK.remove_Click($button_OK_Click)
			$button_Export.remove_Click($button_Export_Click)
			$button_import.remove_Click($button_import_Click)
			$button_save.remove_Click($button_save_Click)
			$button3.remove_Click($button3_Click)
			$checkbox1.remove_CheckedChanged($checkbox1_CheckedChanged)
			$button6.remove_Click($button6_Click)
			$button5.remove_Click($button5_Click)
			$button4.remove_Click($button4_Click)
			$button_abort.remove_Click($button_abort_Click)
			$form_options.remove_FormClosed($form_options_FormClosed)
			$form_options.remove_Load($FormEvent_Load)
			$form_options.remove_Load($Form_StateCorrection_Load)
			$form_options.remove_Closing($Form_StoreValues_Closing)
			$form_options.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form_options.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# form_options
	#
	$form_options.Controls.Add($groupbox3)
	$form_options.Controls.Add($button_OK)
	$form_options.Controls.Add($button_Export)
	$form_options.Controls.Add($button_import)
	$form_options.Controls.Add($button_save)
	$form_options.Controls.Add($groupbox2)
	$form_options.Controls.Add($groupbox1)
	$form_options.Controls.Add($button_abort)
	$form_options.AcceptButton = $button_OK
	$form_options.CancelButton = $button_abort
	$form_options.ClientSize = '484, 489'
	$form_options.FormBorderStyle = 'FixedDialog'
	$form_options.MaximizeBox = $False
	$form_options.MinimizeBox = $False
	$form_options.Name = 'form_options'
	$form_options.StartPosition = 'CenterScreen'
	$form_options.Text = 'Options'
	$form_options.add_FormClosed($form_options_FormClosed)
	$form_options.add_Load($FormEvent_Load)
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($button2)
	$groupbox3.Controls.Add($button1)
	$groupbox3.Controls.Add($textbox8)
	$groupbox3.Controls.Add($textbox9)
	$groupbox3.Controls.Add($label_nirlauncher)
	$groupbox3.Controls.Add($label_sysinternals)
	$groupbox3.Location = '12, 357'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '460, 87'
	$groupbox3.TabIndex = 24
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'External Tools (optional)'
	#
	# button2
	#
	$button2.BackColor = 'Transparent'
	#region Binary Data
	$button2.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button2.BackgroundImageLayout = 'Center'
	$button2.FlatStyle = 'Flat'
	$button2.ForeColor = 'Control'
	$button2.Location = '419, 42'
	$button2.Name = 'button2'
	$button2.Size = '30, 26'
	$button2.TabIndex = 16
	$button2.UseVisualStyleBackColor = $False
	$button2.add_Click($button2_Click)
	#
	# button1
	#
	$button1.BackColor = 'Transparent'
	#region Binary Data
	$button1.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button1.BackgroundImageLayout = 'Center'
	$button1.FlatStyle = 'Flat'
	$button1.ForeColor = 'Control'
	$button1.Location = '419, 15'
	$button1.Name = 'button1'
	$button1.Size = '30, 26'
	$button1.TabIndex = 14
	$button1.UseVisualStyleBackColor = $False
	$button1.add_Click($button1_Click)
	#
	# textbox8
	#
	$textbox8.Location = '76, 19'
	$textbox8.Name = 'textbox8'
	$textbox8.Size = '337, 20'
	$textbox8.TabIndex = 13
	#
	# textbox9
	#
	$textbox9.Location = '76, 46'
	$textbox9.Name = 'textbox9'
	$textbox9.Size = '337, 20'
	$textbox9.TabIndex = 15
	#
	# label_nirlauncher
	#
	$label_nirlauncher.Location = '7, 21'
	$label_nirlauncher.Name = 'label_nirlauncher'
	$label_nirlauncher.Size = '100, 23'
	$label_nirlauncher.TabIndex = 2
	$label_nirlauncher.Text = 'Nirlauncher:'
	#
	# label_sysinternals
	#
	$label_sysinternals.Location = '7, 48'
	$label_sysinternals.Name = 'label_sysinternals'
	$label_sysinternals.Size = '100, 23'
	$label_sysinternals.TabIndex = 4
	$label_sysinternals.Text = 'Sysinternals:'
	#
	# button_OK
	#
	$button_OK.Anchor = 'Bottom, Right'
	$button_OK.Location = '73, 454'
	$button_OK.Name = 'button_OK'
	$button_OK.Size = '75, 23'
	$button_OK.TabIndex = 17
	$button_OK.Text = 'OK'
	$button_OK.UseVisualStyleBackColor = $True
	$button_OK.add_Click($button_OK_Click)
	#
	# button_Export
	#
	$button_Export.Anchor = 'Bottom, Right'
	$button_Export.Location = '154, 454'
	$button_Export.Name = 'button_Export'
	$button_Export.Size = '75, 23'
	$button_Export.TabIndex = 18
	$button_Export.Text = 'Export'
	$button_Export.UseVisualStyleBackColor = $True
	$button_Export.add_Click($button_Export_Click)
	#
	# button_import
	#
	$button_import.Anchor = 'Bottom, Right'
	$button_import.DialogResult = 'OK'
	$button_import.Location = '235, 454'
	$button_import.Name = 'button_import'
	$button_import.Size = '75, 23'
	$button_import.TabIndex = 19
	$button_import.Text = 'Import'
	$button_import.UseVisualStyleBackColor = $True
	$button_import.add_Click($button_import_Click)
	#
	# button_save
	#
	$button_save.Anchor = 'Bottom, Right'
	$button_save.Location = '316, 454'
	$button_save.Name = 'button_save'
	$button_save.Size = '75, 23'
	$button_save.TabIndex = 20
	$button_save.Text = 'Save'
	$button_save.UseVisualStyleBackColor = $True
	$button_save.add_Click($button_save_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($button3)
	$groupbox2.Controls.Add($textbox10)
	$groupbox2.Controls.Add($label_cmrcviewer)
	$groupbox2.Controls.Add($textbox6)
	$groupbox2.Controls.Add($label_sccmnamespace)
	$groupbox2.Controls.Add($checkbox1)
	$groupbox2.Controls.Add($textbox4)
	$groupbox2.Controls.Add($textbox5)
	$groupbox2.Controls.Add($label_site)
	$groupbox2.Controls.Add($label_sccm)
	$groupbox2.Controls.Add($label_sccmserver)
	$groupbox2.Location = '13, 183'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '459, 168'
	$groupbox2.TabIndex = 23
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'SCCM'
	#
	# button3
	#
	$button3.BackColor = 'Transparent'
	#region Binary Data
	$button3.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button3.BackgroundImageLayout = 'Center'
	$button3.FlatStyle = 'Flat'
	$button3.ForeColor = 'Control'
	$button3.Location = '418, 123'
	$button3.Name = 'button3'
	$button3.Size = '30, 26'
	$button3.TabIndex = 12
	$button3.UseVisualStyleBackColor = $False
	$button3.add_Click($button3_Click)
	#
	# textbox10
	#
	$textbox10.Location = '76, 126'
	$textbox10.Name = 'textbox10'
	$textbox10.Size = '337, 20'
	$textbox10.TabIndex = 11
	#
	# label_cmrcviewer
	#
	$label_cmrcviewer.Location = '6, 128'
	$label_cmrcviewer.Name = 'label_cmrcviewer'
	$label_cmrcviewer.Size = '100, 23'
	$label_cmrcviewer.TabIndex = 9
	$label_cmrcviewer.Text = 'CmRCViewer:'
	#
	# textbox6
	#
	$textbox6.Location = '76, 100'
	$textbox6.Name = 'textbox6'
	$textbox6.Size = '337, 20'
	$textbox6.TabIndex = 10
	#
	# label_sccmnamespace
	#
	$label_sccmnamespace.Location = '6, 102'
	$label_sccmnamespace.Name = 'label_sccmnamespace'
	$label_sccmnamespace.Size = '100, 23'
	$label_sccmnamespace.TabIndex = 7
	$label_sccmnamespace.Text = 'Namespace:'
	#
	# checkbox1
	#
	$checkbox1.Checked = $True
	$checkbox1.CheckState = 'Checked'
	$checkbox1.Location = '76, 19'
	$checkbox1.Name = 'checkbox1'
	$checkbox1.Size = '15, 24'
	$checkbox1.TabIndex = 7
	$checkbox1.UseVisualStyleBackColor = $True
	$checkbox1.add_CheckedChanged($checkbox1_CheckedChanged)
	#
	# textbox4
	#
	$textbox4.Location = '76, 47'
	$textbox4.Name = 'textbox4'
	$textbox4.Size = '337, 20'
	$textbox4.TabIndex = 8
	#
	# textbox5
	#
	$textbox5.Location = '76, 74'
	$textbox5.Name = 'textbox5'
	$textbox5.Size = '337, 20'
	$textbox5.TabIndex = 9
	#
	# label_site
	#
	$label_site.Location = '7, 49'
	$label_site.Name = 'label_site'
	$label_site.Size = '100, 23'
	$label_site.TabIndex = 2
	$label_site.Text = 'Site:'
	#
	# label_sccm
	#
	$label_sccm.Location = '6, 22'
	$label_sccm.Name = 'label_sccm'
	$label_sccm.Size = '100, 23'
	$label_sccm.TabIndex = 0
	$label_sccm.Text = 'SCCM:'
	#
	# label_sccmserver
	#
	$label_sccmserver.Location = '7, 76'
	$label_sccmserver.Name = 'label_sccmserver'
	$label_sccmserver.Size = '100, 23'
	$label_sccmserver.TabIndex = 4
	$label_sccmserver.Text = 'Server:'
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($button6)
	$groupbox1.Controls.Add($button5)
	$groupbox1.Controls.Add($button4)
	$groupbox1.Controls.Add($textbox0)
	$groupbox1.Controls.Add($label_configpath)
	$groupbox1.Controls.Add($textbox3)
	$groupbox1.Controls.Add($label_logpath)
	$groupbox1.Controls.Add($textbox2)
	$groupbox1.Controls.Add($label_homepath)
	$groupbox1.Controls.Add($textbox1)
	$groupbox1.Controls.Add($label_profilepath)
	$groupbox1.Location = '13, 13'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '459, 164'
	$groupbox1.TabIndex = 22
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'General'
	#
	# button6
	#
	$button6.BackColor = 'Transparent'
	#region Binary Data
	$button6.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button6.BackgroundImageLayout = 'Center'
	$button6.FlatStyle = 'Flat'
	$button6.ForeColor = 'Control'
	$button6.Location = '418, 66'
	$button6.Name = 'button6'
	$button6.Size = '30, 26'
	$button6.TabIndex = 4
	$button6.UseVisualStyleBackColor = $False
	$button6.add_Click($button6_Click)
	#
	# button5
	#
	$button5.BackColor = 'Transparent'
	#region Binary Data
	$button5.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button5.BackgroundImageLayout = 'Center'
	$button5.FlatStyle = 'Flat'
	$button5.ForeColor = 'Control'
	$button5.Location = '418, 41'
	$button5.Name = 'button5'
	$button5.Size = '30, 26'
	$button5.TabIndex = 2
	$button5.UseVisualStyleBackColor = $False
	$button5.add_Click($button5_Click)
	#
	# button4
	#
	$button4.BackColor = 'Transparent'
	#region Binary Data
	$button4.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button4.BackgroundImageLayout = 'Center'
	$button4.FlatStyle = 'Flat'
	$button4.ForeColor = 'Control'
	$button4.Location = '418, 93'
	$button4.Name = 'button4'
	$button4.Size = '30, 26'
	$button4.TabIndex = 6
	$button4.UseVisualStyleBackColor = $False
	$button4.add_Click($button4_Click)
	#
	# textbox0
	#
	$textbox0.Location = '76, 18'
	$textbox0.Name = 'textbox0'
	$textbox0.ReadOnly = $True
	$textbox0.Size = '337, 20'
	$textbox0.TabIndex = 0
	#
	# label_configpath
	#
	$label_configpath.Location = '8, 20'
	$label_configpath.Name = 'label_configpath'
	$label_configpath.Size = '100, 23'
	$label_configpath.TabIndex = 8
	$label_configpath.Text = 'Configpath:'
	#
	# textbox3
	#
	$textbox3.Location = '76, 98'
	$textbox3.Name = 'textbox3'
	$textbox3.Size = '337, 20'
	$textbox3.TabIndex = 5
	#
	# label_logpath
	#
	$label_logpath.Location = '7, 100'
	$label_logpath.Name = 'label_logpath'
	$label_logpath.Size = '100, 23'
	$label_logpath.TabIndex = 4
	$label_logpath.Text = 'Logpath:'
	#
	# textbox2
	#
	$textbox2.Location = '76, 70'
	$textbox2.Name = 'textbox2'
	$textbox2.Size = '337, 20'
	$textbox2.TabIndex = 3
	#
	# label_homepath
	#
	$label_homepath.Location = '7, 72'
	$label_homepath.Name = 'label_homepath'
	$label_homepath.Size = '100, 23'
	$label_homepath.TabIndex = 2
	$label_homepath.Text = 'Homepath:'
	#
	# textbox1
	#
	$textbox1.Location = '76, 44'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '337, 20'
	$textbox1.TabIndex = 1
	#
	# label_profilepath
	#
	$label_profilepath.Location = '7, 46'
	$label_profilepath.Name = 'label_profilepath'
	$label_profilepath.Size = '100, 23'
	$label_profilepath.TabIndex = 0
	$label_profilepath.Text = 'Profilepath:'
	#
	# button_abort
	#
	$button_abort.Anchor = 'Bottom, Right'
	$button_abort.DialogResult = 'Cancel'
	$button_abort.Location = '397, 454'
	$button_abort.Name = 'button_abort'
	$button_abort.Size = '75, 23'
	$button_abort.TabIndex = 21
	$button_abort.Text = 'Cancel'
	$button_abort.UseVisualStyleBackColor = $True
	$button_abort.add_Click($button_abort_Click)
	#
	# folderbrowserdialog1
	#
	#
	# openfiledialog1
	#
	$openfiledialog1.FileName = 'openfiledialog1'
	$openfiledialog1.Filter = 'CSV-Dateien|*.csv'
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$form_options.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form_options.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form_options.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form_options.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form_options.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form_options.ShowDialog()

}
#endregion Source: Options.psf

#region Source: Taskmanager.psf
function Call-Taskmanager_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
FfJ3oc0fI5j9P8qzCbdVUAAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$listbox1 = New-Object 'System.Windows.Forms.ListBox'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$listview2 = New-Object 'System.Windows.Forms.ListView'
	$toolstrip1 = New-Object 'System.Windows.Forms.ToolStrip'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$trackbar1 = New-Object 'System.Windows.Forms.TrackBar'
	$label3 = New-Object 'System.Windows.Forms.Label'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$Image_Name = New-Object 'System.Windows.Forms.ColumnHeader'
	$PID = New-Object 'System.Windows.Forms.ColumnHeader'
	$User_Name = New-Object 'System.Windows.Forms.ColumnHeader'
	$CPU = New-Object 'System.Windows.Forms.ColumnHeader'
	$Memory_Usage = New-Object 'System.Windows.Forms.ColumnHeader'
	$toolstriplabel1 = New-Object 'System.Windows.Forms.ToolStripLabel'
	$textbox1 = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$button1 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button2 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button3 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button4 = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator2 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator3 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$form1_Load={
		Get-ComputerTxtBox
		$textbox1.Text = $ComputerName
	}
	
	   ### This sets up the context menu for a selected item on the services page.
	   $row_click = { set-context-menu };
	
	   ### $listview2(the listview that shows the services)
	   $listview2.AllowColumnReorder = "True";
	   $listview2.Dock = "Fill";
	   $listview2.Name = "SDGCols";
	   $listview2.FullRowSelect = "True";
	   $listview2.View = "Details";
	   $listview2.MultiSelect = $false;
	   $listview2.Columns.Add("displayname", "Display Name", 100).tag = [System.String];
	   $listview2.Columns.Add("name", "Service Name", 100).tag = [System.String];
	   $listview2.Columns.Add("processid", "PID", 50).tag = [System.Int32];
	   $listview2.Columns.Add("description", "Description", 80).tag = [System.String];
	   $listview2.Columns.Add("state", "Status", 60).tag = [System.String];
	   $listview2.Columns.Add("startmode", "Startup Type", 80).tag = [System.String];
	   $listview2.Columns.Add("startname", "Log On As", 100).tag = [System.String];
	   $listview2.Parent = $Tab3;
	   $listview2.FullRowSelect = $true;
	   $listview2.Add_ColumnClick($columnClick);
	   $listview2.Add_ItemSelectionChanged($row_click);
	
	   ### Build the context menu for the processes tab
	   $svcs_CM = new-object System.Windows.Forms.ContextMenuStrip;
	   ### The menu options
	   $start_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Start";
	   $stop_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Stop";
	   $cycle_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Recycle";
	   $svc_props = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Properties";
	
	   $svcs_CM.Items.Add($start_svc) | out-null; # Add options to the context menu 
	   $svcs_CM.Items.Add($stop_svc) | out-null;
	   $svcs_CM.Items.Add($cycle_svc) | out-null;
	   $svcs_CM.Items.Add($svc_props) | out-null;
	
	   ### This sets up sorting for a clicked column. The first IF determines if this is the  
	   ### same column that was clicked last time. If not, it sets the order to descending so  
	   ### that the next IF will reset it to ascending (the default for a new column click).  
	   ### The last IF determines if we're sorting strings or numbers.    
		$columnClick = {  
	      $cn = $_.Column;  
	      $obj = $args[0];   ### Which listview  
	      $typ = $obj.Columns[$cn].tag.tostring()  
	         if ($things[$obj.name] -ne $cn) {  
	         $things[$obj.name] = $cn;  
	         if ($typ -eq "System.String") {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	         } else {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	         }  
	      }  
	      if ($obj.Sorting -eq [System.Windows.Forms.SortOrder]::Descending) {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	      } else {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	      }  
	      if ($typ -eq "System.String") {  
	         $obj.ListViewItemSorter = new-object ListViewItemComparer($cn, $obj.Sorting);  
	      } else {  
	         $obj.ListViewItemSorter = new-object ListViewItemIntComparer($cn, $obj.Sorting);  
	      }  
	   }  
	   ### Set the actions for when each of the options is selected
	   $start_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).servicesdependedon;
	         start-related-services $sname $d;
	      }
	   }
	
	   $stop_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).dependentservices;
	         $confirm = "Yes";
	         if ($d.count -gt 0) {
	            $warning = "The following services are dependent upon $sname running. Do you want to kill them, also?`n`n";
	            foreach ($dependent in $d) { $warning += $dependent.name + "`n"; }
	            $confirm = [System.Windows.Forms.MessageBox]::Show($warning, "No kidding?", "YesNo");
	         }
	
	         if ($confirm -eq "Yes") { stop-related-services $sname $d; }
	      }
	   }
	
	   $cycle_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).dependentservices;
	         $confirm = "Yes";
	         if ($d.count -gt 0) {
	            $warning = "The following services are dependent upon $sname running and will be cycled, also. Do you want to continue?`n";
	            foreach ($dependent in $d) { $warning += $dependent.name + "`n"; }
	            $confirm = [System.Windows.Forms.MessageBox]::Show($warning, "No kidding?", "YesNo");
	         }
	
	         if ($confirm -eq "Yes") {
	            stop-related-services $sname $d;
	            start-related-services $sname $d;
	         }
	      }
	   }
	
	   $svc_props_click = {
	      $ps = @{};
	      foreach ($si in $listview2.SelectedItems) {
	         $svc = CIM-Stuff win32_service ("name='" + $si.subitems[$listview2.columns["name"].index].Text + "'");
	         $svc | gm -membertype property | % { $p = $_.name; $ps.add($p, $svc.$p) };
	         $props = $ps | ft -auto | out-string;
	      }
	
	      display-myMessageBox $props;
	   }
	
	   $start_svc.Add_Click($start_svc_click);
	   $stop_svc.Add_Click($stop_svc_click);
	   $cycle_svc.Add_Click($cycle_svc_click);
	   $svc_props.Add_Click($svc_props_click);
	
	   $listview2.ContextMenuStrip = $svcs_CM;
	
	   ### Build the context menu for the processes tab
	   $procs_CM = new-object System.Windows.Forms.ContextMenuStrip;
	
	   $end_proc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "End Process";
	   $proc_props = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Properties";
	
	   $procs_CM.Items.Add($end_proc) | out-null; # Add option to context menu 
	   $procs_CM.Items.Add($proc_props) | out-null;
	   $end_proc_click = ({
	   	  $pi = $listview1.columns["PID"].index;
	   	  $in = $listview1.columns["Image_Name"].index;
	      foreach ($si in $listview1.SelectedItems) {
	         $label1.text = "Killing process " + $si.subitems[$pi].text + " (" + $si.subitems[$in].text + ") ...";
	         CIM-Method win32_process ("handle='" + $si.subitems[$pi].Text + "'") terminate;
	         $label1.text += " Stopped";
	      }
	   })
	
	   $proc_props_click = ({
	      $props = "";
	   	  $pi = $listview1.columns["PID"].index;
	      foreach ($si in $listview1.SelectedItems) {
	      	$props = Get-WmiObject win32_process -computer $ComputerName -filter ("handle='" + $si.subitems[1].Text + "'") | out-string;
	        #$props = CIM-Stuff Win32_PerfFormattedData_PerfProc_Process ("idprocess='" + $si.subitems[$pi].Text + "'") | out-string;
	        #$props = (CIM-Stuff win32_process ("handle='" + $si.subitems[$pi].Text + "'")).ciminstanceproperties | sort -property name | select-object -property name,value | ft -auto | out-string;
	        #$props = CIM-Stuff win32_process ("handle='" + $si.subitems[$pi].Text + "'") | select-object -property * | out-string;
	      }
	
	      display-myMessageBox $props;
	   })
	
	   $end_proc.Add_Click($end_proc_click);
	   $proc_props.Add_Click($proc_props_click);
	
	   $listview1.ContextMenuStrip = $procs_CM;
	
	   $pcs = {
	      if ($_.scrollorientation -eq "HorizontalScroll") {
	        $picturebox1.horizontalscroll.value = $_.newvalue;
	      } else {
	        $picturebox1.verticalscroll.value = $_.newvalue;
	      }
	   }
	
	   ### After about 15 days of screwing around, I finally figured out that in order to get this to work
	   ### correctly with the picturebox, we can't set anything on AutoScrollMargin right here. We HAVE to
	   ### wait until we figure out how big the bitmap will be and then set it. I don't really care how big it is
	   ### just as long as it's big enough to display everything, so when we do get around to setting the size,
	   ### it's actually much bigger than it needs to be. Maybe someday I'll get around to sizing it correctly,
	   ### but probably not. It works, and that's what I care about.
	#  $picturebox1.AutoScroll = $true;
	#  $picturebox1.AutoScrollPosition = new-object system.drawing.point(0, 0);
	   $picturebox1.Anchor = "Left, Top, Right, Bottom";
	   $picturebox1.BackColor = "black";
	   $picturebox1.BorderStyle = "Fixed3D";
	#  $picturebox1.add_scroll($pcs);
	   $picturebox1.Controls.Add($listbox1);
	
	   ### $listbox1
	   ### I don't remember where I found out about this. It seems that you can't get a scrollbar to just appear
	   ### on a panel device. There are only certain things that will allow a scrollbar to be added. A listbox is
	   ### one of those things. This does nothing except activate the scrollbar on $picturebox1.
	   $listbox1.Location = new-object system.drawing.point(210, 203);
	   $listbox1.Size = new-object System.Drawing.Size(0, 0);
	
	### Make a popup window to display properties for either a process or a service. I tried using a PropertyGrid, but
	### it never displayed the services satisfactorily.
	### Return a formatted datetime MM/DD/YYYY hh:mm:ss
	filter return-datetime {
	   ([datetime] ($_.substring(4,2) + "/" + $_.substring(6,2) + "/" + $_.substring(0, 4) + " " +
	       $_.substring(8,2) + ":" + $_.substring(10,2) + ":" + $_.substring(12,2))).tostring().trimend();
	}
	
	### A bit about all these hashes. I don't remember how I figured out that hashes are global, and I'm not
	### sure why they are. It may have something to do with $error being a hash and the need to have it
	### available everywhere, but that's just speculation. At any rate, I had all this data that needed to be
	### used in multiple functions, and this seemed like the easiest way at the time. I don't know what impact,
	### if any, it has on performance. It probably could have been done passing parameters as normal, but
	### this works well, it makes it very easy to re-initialize things to start over with a new machine, and
	### it hasn't brought any host machine to its knees (yet).
	$keyhash = @{};
	$hash = @{};
	$pointhash = @{};
	$parms = @{};
	$beforeprocs = @{};
	$pens = @{};
	$brushes = @{};
	$things = @{};
	$fonts = @{};
	$fonts.add("mss8",  (new-object System.Drawing.Font("Microsoft Sans Serif", 8.25, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("mssnb",  (new-object System.Drawing.Font("Microsoft Sans Serif", 8.25)));
	$fonts.add("cn9", (new-object System.Drawing.Font("Courier New", 9, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("cn8", (new-object System.Drawing.Font("Courier New", 8.25, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("verdana6", (new-object system.Drawing.Font("Verdana", 6)));
	$fonts.add("verdana8", (new-object system.Drawing.Font("Verdana", 8.25)));
	initialize-things;
	foreach ($clr in ($things["colors"])) {
	   $pens.add($clr, (new-object system.drawing.pen($clr)));
	   $brushes.add($clr, (new-object system.drawing.solidbrush($clr)));
	};
	
	$pens["red"].width = 4;
	
	################################
	### This is a string for the custom comparer class that I copied from a MS article
	### at http://msdn.microsoft.com/en-us/library/ms996467.aspx. I had read that you
	### could do this, and you can imagine my surprise at how well it works.
	$ccs = @"
using System;
using System.Collections;
using System.Windows.Forms;

public class ListViewItemComparer : IComparer {
  private int col;
  private SortOrder order;
  public ListViewItemComparer() {
      col=0;
      order = SortOrder.Ascending;
  }
  public ListViewItemComparer(int column, SortOrder order) 
  {
      col=column;
      this.order = order;
  }
  public int Compare(object x, object y) 
  {
      int returnVal= -1;
      returnVal = String.Compare(((ListViewItem)x).SubItems[col].Text, ((ListViewItem)y).SubItems[col].Text);
      if (order == SortOrder.Descending)
          returnVal *= -1;
      return returnVal;
  }
}
"@;
	
	### A similar class to use for comparing columns of integers so they don't get compared as strings.
	$cci = @"
using System;
using System.Collections;
using System.Windows.Forms;

public class ListViewItemIntComparer : IComparer {
  private int col;
  private SortOrder order;
  public ListViewItemIntComparer() {
      col = 0;
      order = SortOrder.Ascending;
  }
  public ListViewItemIntComparer(int column, SortOrder order) 
  {
      col = column;
      this.order = order;
  }
  public int Compare(object x, object y) 
  {
      int returnVal = -1;
      int ix = int.Parse(((ListViewItem)x).SubItems[col].Text);
      int iy = int.Parse(((ListViewItem)y).SubItems[col].Text);
      returnVal = ix.CompareTo(iy);
      if (order == SortOrder.Descending)
         returnVal *= -1;
      return returnVal;
  }
}
"@;
	
	### This is the C# code to make a double-buffered listview. Atually, it's an OPTIMIZED double-buffered
	### listiview. The ControlStyles.DoubleBuffer control doesn't seem to do anything different than what we
	### see in a regular listview. At http://msdn.microsoft.com/en-us/library/system.windows.forms.controlstyles(v=vs.110).aspx,
	### it states that:
	###               If you set this property to true, you should also set the AllPaintingInWmPaint to true.
	### So I did. Of course it also states that for DoubleBuffer, you should set AllPaintingInWmPaint and UserPaint.
	### The problem is that if you set UserPaint, nothing shows up in the listview whether you use DoubleBuffer or
	### OptimizedDoubleBuffer. There may be a way to get it to work, but I quickly got bored with the whole thing.
	$dblv = @"
using System;
using System.Windows.Forms;

public class DoubleBufferedListView : System.Windows.Forms.ListView
{
    public DoubleBufferedListView()
    {
        this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
    }
}
"@;
	
	### Add the comparer class
	Add-Type $ccs -ReferencedAssemblies ('System.Windows.Forms');
	Add-Type $cci -ReferencedAssemblies ('System.Windows.Forms');
	Add-Type -WarningAction SilentlyContinue $dblv -ReferencedAssemblies ('System.Windows.Forms');
	
	$listview1_ColumnClick=[System.Windows.Forms.ColumnClickEventHandler]{
	 $cn = $_.Column;  
	      $obj = $args[0];   ### Which listview  
	      $typ = $obj.Columns[$cn].tag.tostring()  
	         if ($things[$obj.name] -ne $cn) {  
	         $things[$obj.name] = $cn;  
	         if ($typ -eq "System.String") {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	         } else {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	         }  
	      }  
	      if ($obj.Sorting -eq [System.Windows.Forms.SortOrder]::Descending) {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	      } else {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	      }  
	      if ($typ -eq "System.String") {  
	         $obj.ListViewItemSorter = new-object ListViewItemComparer($cn, $obj.Sorting);  
	      } else {  
	         $obj.ListViewItemSorter = new-object ListViewItemIntComparer($cn, $obj.Sorting);  
	      }  
	}
	
	$button1_Click={
		do-it-to-it
	}
	$Textbox1.Add_KeyDown({if ($_.KeyCode -eq "Enter") { do-it-to-it; }});  
	
	$trackbar1_ValueChanged={
	  Stop-timer;
	  if ($trackbar1.value -lt 500) { $trackbar1.value = 500 };   ### Don't let it fire off faster than twice a second... that would just be silly
	  $things["timer"].interval = $trackbar1.value;
	  update-Procs-Label;
	  Restart-timer;
	}
	
	$button2_Click={
		Stop-timer
	}
	
	$button3_Click={
		Stop-stuff
	}
	
	$button4_Click={
		get-services
	}
	
	$form1_FormClosing=[System.Windows.Forms.FormClosingEventHandler]{
	   Stop-timer;
	   $things["timer"].Dispose();
	   if ($things["session"] -ne $null) { remove-cimsession -cimsession $things["session"] }
	   $things["session"].Close();
	   $things["session"].Dispose();
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Taskmanager_listview1 = $listview1.SelectedItems
		$script:Taskmanager_listbox1 = $listbox1.SelectedItems
		$script:Taskmanager_listview2 = $listview2.SelectedItems
		$script:Taskmanager_trackbar1 = $trackbar1.Value
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$listview1.remove_ColumnClick($listview1_ColumnClick)
			$trackbar1.remove_ValueChanged($trackbar1_ValueChanged)
			$form1.remove_FormClosing($form1_FormClosing)
			$form1.remove_Load($form1_Load)
			$button1.remove_Click($button1_Click)
			$button2.remove_Click($button2_Click)
			$button3.remove_Click($button3_Click)
			$button4.remove_Click($button4_Click)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage1.SuspendLayout()
	$tabpage2.SuspendLayout()
	$tabpage3.SuspendLayout()
	$toolstrip1.SuspendLayout()
	$panel1.SuspendLayout()
	$trackbar1.BeginInit()
	#
	# form1
	#
	$form1.Controls.Add($tabcontrol1)
	$form1.Controls.Add($toolstrip1)
	$form1.Controls.Add($panel1)
	$form1.ClientSize = '801, 826'
	$form1.MinimumSize = '817, 788'
	$form1.Name = 'form1'
	$form1.SizeGripStyle = 'Show'
	$form1.Text = 'Form'
	$form1.add_FormClosing($form1_FormClosing)
	$form1.add_Load($form1_Load)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Controls.Add($tabpage3)
	$tabcontrol1.Dock = 'Fill'
	$tabcontrol1.Location = '0, 31'
	$tabcontrol1.Name = 'tabcontrol1'
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '801, 741'
	$tabcontrol1.TabIndex = 6
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($listview1)
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '793, 715'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'Processes'
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# listview1
	#
	$listview1.AllowColumnReorder = $True
	[void]$listview1.Columns.Add($Image_Name)
	[void]$listview1.Columns.Add($PID)
	[void]$listview1.Columns.Add($User_Name)
	[void]$listview1.Columns.Add($CPU)
	[void]$listview1.Columns.Add($Memory_Usage)
	$listview1.Dock = 'Fill'
	$listview1.FullRowSelect = $True
	$listview1.Location = '3, 3'
	$listview1.MultiSelect = $False
	$listview1.Name = 'listview1'
	$listview1.Size = '787, 709'
	$listview1.TabIndex = 0
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	$listview1.add_ColumnClick($listview1_ColumnClick)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($listbox1)
	$tabpage2.Controls.Add($picturebox1)
	$tabpage2.BackColor = 'Control'
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '793, 715'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Performance'
	#
	# listbox1
	#
	$listbox1.FormattingEnabled = $True
	$listbox1.Location = '3, 666'
	$listbox1.Name = 'listbox1'
	$listbox1.Size = '10, 4'
	$listbox1.TabIndex = 1
	#
	# picturebox1
	#
	$picturebox1.BackColor = 'Desktop'
	$picturebox1.Dock = 'Fill'
	$picturebox1.Location = '3, 3'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '787, 709'
	$picturebox1.TabIndex = 0
	$picturebox1.TabStop = $False
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($listview2)
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '793, 715'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'Services'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# listview2
	#
	$listview2.Dock = 'Fill'
	$listview2.FullRowSelect = $True
	$listview2.Location = '3, 3'
	$listview2.Name = 'listview2'
	$listview2.Size = '787, 709'
	$listview2.TabIndex = 0
	$listview2.UseCompatibleStateImageBehavior = $False
	$listview2.View = 'Details'
	#
	# toolstrip1
	#
	$toolstrip1.GripStyle = 'Hidden'
	[void]$toolstrip1.Items.Add($toolstriplabel1)
	[void]$toolstrip1.Items.Add($textbox1)
	[void]$toolstrip1.Items.Add($button1)
	[void]$toolstrip1.Items.Add($toolstripseparator1)
	[void]$toolstrip1.Items.Add($button2)
	[void]$toolstrip1.Items.Add($toolstripseparator2)
	[void]$toolstrip1.Items.Add($button3)
	[void]$toolstrip1.Items.Add($toolstripseparator3)
	[void]$toolstrip1.Items.Add($button4)
	$toolstrip1.Location = '0, 0'
	$toolstrip1.Name = 'toolstrip1'
	$toolstrip1.Padding = '4, 4, 4, 4'
	$toolstrip1.Size = '801, 31'
	$toolstrip1.TabIndex = 10
	$toolstrip1.Text = 'toolstrip1'
	#
	# panel1
	#
	$panel1.Controls.Add($label1)
	$panel1.Controls.Add($trackbar1)
	$panel1.Controls.Add($label3)
	$panel1.Controls.Add($label2)
	$panel1.Dock = 'Bottom'
	$panel1.Location = '0, 772'
	$panel1.Name = 'panel1'
	$panel1.Size = '801, 54'
	$panel1.TabIndex = 11
	#
	# label1
	#
	$label1.Location = '703, 30'
	$label1.Name = 'label1'
	$label1.Size = '76, 23'
	$label1.TabIndex = 10
	$label1.Text = 'reload speed'
	$label1.TextAlign = 'MiddleCenter'
	#
	# trackbar1
	#
	$trackbar1.BackColor = 'Control'
	$trackbar1.Cursor = 'Default'
	$trackbar1.LargeChange = 100
	$trackbar1.Location = '703, 2'
	$trackbar1.Maximum = 8000
	$trackbar1.Name = 'trackbar1'
	$trackbar1.Size = '76, 45'
	$trackbar1.TabIndex = 8
	$trackbar1.TickFrequency = 1000
	$trackbar1.Value = 1000
	$trackbar1.add_ValueChanged($trackbar1_ValueChanged)
	#
	# label3
	#
	$label3.Location = '7, 7'
	$label3.Name = 'label3'
	$label3.Size = '399, 23'
	$label3.TabIndex = 9
	#
	# label2
	#
	$label2.Location = '7, 30'
	$label2.Name = 'label2'
	$label2.Size = '399, 23'
	$label2.TabIndex = 7
	#
	# Image_Name
	#
	$Image_Name.Text = 'Image Name'
	$Image_Name.Width = 230
	#
	# PID
	#
	$PID.Text = 'PID'
	#
	# User_Name
	#
	$User_Name.Text = 'User Name'
	$User_Name.Width = 233
	#
	# CPU
	#
	$CPU.Text = 'CPU'
	#
	# Memory_Usage
	#
	$Memory_Usage.Text = 'Memory Usage'
	$Memory_Usage.Width = 111
	#
	# toolstriplabel1
	#
	$toolstriplabel1.Name = 'toolstriplabel1'
	$toolstriplabel1.Size = '94, 20'
	$toolstriplabel1.Text = 'Computername:'
	#
	# textbox1
	#
	$textbox1.Font = 'Segoe UI, 9pt, style=Bold'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '200, 23'
	#
	# button1
	#
	$button1.DisplayStyle = 'Text'
	#region Binary Data
	$button1.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button1.ImageTransparentColor = 'Magenta'
	$button1.Name = 'button1'
	$button1.Size = '64, 20'
	$button1.Text = 'Get Status'
	$button1.add_Click($button1_Click)
	#
	# button2
	#
	$button2.DisplayStyle = 'Text'
	#region Binary Data
	$button2.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button2.ImageTransparentColor = 'Magenta'
	$button2.Name = 'button2'
	$button2.Size = '42, 20'
	$button2.Text = 'Pause'
	$button2.add_Click($button2_Click)
	#
	# button3
	#
	$button3.DisplayStyle = 'Text'
	#region Binary Data
	$button3.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button3.ImageTransparentColor = 'Magenta'
	$button3.Name = 'button3'
	$button3.Size = '34, 20'
	$button3.Text = 'Quit'
	$button3.add_Click($button3_Click)
	#
	# button4
	#
	$button4.DisplayStyle = 'Text'
	#region Binary Data
	$button4.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button4.ImageTransparentColor = 'Magenta'
	$button4.Name = 'button4'
	$button4.Size = '95, 20'
	$button4.Text = 'Refresh Services'
	$button4.add_Click($button4_Click)
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = 'toolstripseparator1'
	$toolstripseparator1.Size = '6, 23'
	#
	# toolstripseparator2
	#
	$toolstripseparator2.Name = 'toolstripseparator2'
	$toolstripseparator2.Size = '6, 23'
	#
	# toolstripseparator3
	#
	$toolstripseparator3.Name = 'toolstripseparator3'
	$toolstripseparator3.Size = '6, 23'
	$trackbar1.EndInit()
	$panel1.ResumeLayout()
	$toolstrip1.ResumeLayout()
	$tabpage3.ResumeLayout()
	$tabpage2.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol1.ResumeLayout()
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: Taskmanager.psf

#Start the application
Main ($CommandLine)
